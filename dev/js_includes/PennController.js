/*!
 * PennController for IBEX
 * This software is licensed under a BSD license; see the LICENSE file for details.
 * 
 *  - Version 2.0.alpha
 *  - Last Update:  2021, May 12
 *  - Major changes in version 2.0.alpha:
 *    * Fixed Controller element duplicating lines and not rerunning properly
 *    * Fixed selector.shuffle and its order logging
 *    * Improved handling of trial end for the MediaRecorder element
 *    * Improved audio/video recording upload
 *    * Fixed print/canvas.add coordinates format bug (introduced in 1.9)
 *    * Can now pass opacity of 0 to audio.disable and video.disable
 *    * Fixed all-digit strings passed to Key element
 *    * Fixed MediaRecorder stop / end of trials
 *    * Fixed problems with some special commands (eg. fullscreen) not being properly executed as callback
 *    * Fixed: Controller elements no longer appear multiple times when printed onto a Canvas element
 *    * Fixed: calling print() after print(x,y[, canvas]) no longer preserves old positioning
 *    * Fixed: referencing PennController element in scale.label before printing it
 *    * Replaced the EyeTracker test with a smoother one
 *    + Added newTrial().noTrialLog("start","end") to skip the tria's Start and/or End lines in the results file
 *    + Added controller.callback
 *    + Added textinput.callback
 *    + Added specialcommand jump to navigate the sequence
 * 
 */
/*! $AC$ PennController.newVoiceRecorder(name,file) Creates a new VoiceRecorder element $AC$$AC$ PennController.getVoiceRecorder(name) Retrieves an existing Video element $AC$$AC$ global.PennController.InitiateRecorder(url,warning,consent) Sets the URL where to upload the recordings and creates a trial inviting the user to activate their microphone $AC$$AC$ global.PennController.UploadVoiceRecordings(label,noblock) Creates a trial that sends the voice recordings to the server $AC$$AC$ VoiceRecorder PElement.play() Starts playing back the recording $AC$$AC$ VoiceRecorder PElement.record() Starts recording $AC$$AC$ VoiceRecorder PElement.stop() Stops playback or recording $AC$$AC$ VoiceRecorder PElement.wait() Waits until recording stops before proceeding $AC$$AC$ VoiceRecorder PElement.once() Will disable the recording interface after the first recording is complete $AC$$AC$ VoiceRecorder PElement.log() Will log events in the results file $AC$$AC$ VoiceRecorder PElement.test.hasPlayed() Checks that the recording was fully played back before $AC$$AC$ VoiceRecorder PElement.test.playing() Checks that the recording is currently being played back $AC$$AC$ VoiceRecorder PElement.test.recorded() Checks that recording has happened $AC$$AC$ global.PennController.DownloadVoiceButton(text) Returns an HTML string representing a button to download an archive of the recordings $AC$ */
/*! $AC$ PennController.newYoutube(name,url) Creates a new Youtube element with the specified URL $AC$$AC$ PennController.getYoutube(name) Retrieves an existing Youtube element $AC$$AC$ Youtube PElement.play() Starts playing the video (visible only if print was called) $AC$$AC$ Youtube PElement.pause() Pauses the video $AC$$AC$ Youtube PElement.print() Shows Youtube's video player $AC$$AC$ Youtube PElement.remove() Removes Youtube's video player $AC$$AC$ Youtube PElement.stop() Stops the video and goes back to the beginning $AC$$AC$ Youtube PElement.wait() Wait until the video reaches the end before proceeding $AC$$AC$ Youtube PElement.disable() Disables the Youtube video player $AC$$AC$ Youtube PElement.enable() Enables the Youtube video player (again) $AC$$AC$ Youtube PElement.once() Will disable the Youtube video player after the video has played once $AC$$AC$ Youtube PElement.log() Will log play and/or stop events in the results file $AC$$AC$ Youtube PElement.test.hasPlayed() Checks that the video has ever played through before $AC$$AC$ Youtube PElement.test.playing() Checks that the video is currently playing $AC$ */
/*! $AC$ PennController.newVideo(name,file) Creates a new Video element using the specified file $AC$$AC$ PennController.getVideo(name) Retrieves an existing Video element $AC$$AC$ Video PElement.play() Starts playing the video (visible only if print was called) $AC$$AC$ Video PElement.pause() Pauses the video $AC$$AC$ Video PElement.print() Shows a video player $AC$$AC$ Video PElement.stop() Stops playing the video $AC$$AC$ Video PElement.wait() Waits untils the video reaches the end before proceeding $AC$$AC$ Video PElement.disable(opacity) Disable controls on the Video element $AC$$AC$ Video PElement.once() Will disable the video player after the video has played through once $AC$$AC$ Video PElement.log() Will log play and/or stop events in the results file $AC$$AC$ Video PElement.test.hasPlayed() Checks that the video has played through at least once before $AC$$AC$ Video PElement.test.playing() Checks that the video is currently playing $AC$ */
/*! $AC$ PennController.newVar(name,value) Creates a new Var element $AC$$AC$ PennController.getVar(name) Retrieves an existing Var element $AC$$AC$ Var PElement.set(value) Sets the value (can be a function, e.g. v=>v+1 will increment the value) $AC$$AC$ Var PElement.local() Ensures that the value of this Var element only affects the current trial $AC$$AC$ Var PElement.global() Shares the value with all Var elements with the same name across trials $AC$$AC$ Var PElement.test.is(value) Checks the value of the Var element (can be a function, e.g. v=>v<10) $AC$$AC$ all PElements.setVar(var) Sets the value of the specified Var element with the current value of the element $AC$ */
/*! $AC$ PennController.newTooltip(name,text) Creates a new Tooltip element $AC$$AC$ PennController.getTooltip(name) Retrieves an existing Tooltip element $AC$$AC$ Tooltip PElement.print(element) Prints the tooltip attached to the specified element $AC$$AC$ Tooltip PElement.wait() Waits until the tooltip gets validated before proceeding $AC$$AC$ Tooltip PElement.css(css) Applies the specified CSS to the frame around the target element $AC$$AC$ Tooltip PElement.key(key) Will validate (and remove) the tooltip whenever the specified key is pressed $AC$$AC$ Tooltip PElement.label(text) Defines the text used for the validation label $AC$$AC$ Tooltip PElement.log() Will log when the tooltip is validated in the results file $AC$$AC$ Tooltip PElement.position(position) Will show the tooltip at the top, at the bottom, to the left or to the right of the element it attaches to $AC$$AC$ Tooltip PElement.text(value) Redefines the text of the tooltip $AC$ */
/*! $AC$ PennController.newTimer(name,duration) Creates a new Timer element $AC$$AC$ PennController.getTimer(name) Retrieves an existing Timer element $AC$$AC$ Timer PElement.start() Starts the timer $AC$$AC$ Timer PElement.stop() Stops the timer $AC$$AC$ Timer PElement.wait() Waits until the timer elapses before proceeding $AC$$AC$ Timer PElement.callback(commands) Will execute the specified command(s) whenever the timer elapses $AC$$AC$ Timer PElement.log() Will log when the timer starts and ends in the results file $AC$$AC$ Timer PElement.test.ended() Checks that the timer has ever elapsed before $AC$$AC$ Timer PElement.test.running() Checks that the timer is currently running $AC$ */
/*! $AC$ PennController.newTextInput(name,text) Creates a new TextInput element $AC$$AC$ PennController.getTextInput(name) Retrieves an existing TextInput element $AC$$AC$ TextInput PElement.wait() Waits until Enter is pressed in the input box before proceeding $AC$$AC$ TextInput PElement.length(number) Limits the maximum number of characters in the input box to the specified number $AC$$AC$ TextInput PElement.lines(number) Limits the maximum number of lines in the input box to the specified number $AC$$AC$ TextInput PElement.log() Will log the text from the input box in the results file $AC$$AC$ TextInput PElement.once() Will disable the input box after the first keypress on Enter/Return $AC$$AC$ TextInput PElement.text(value) Replaces whatever is in the input box with the specified value $AC$$AC$ TextInput PElement.test.text(value) Checks that the content of the input box corresponds to the specified value $AC$ */
/*! $AC$ PennController.newText(name,text) Creates a new Text element $AC$$AC$ PennController.getText(name) Retrieves an existing Text element $AC$$AC$ Text PElement.unfold(duration) Unfolds the text in duration milliseconds $AC$$AC$ Text PElement.text(text) Redefines the text of the element $AC$$AC$ Text PElement.test.text(value) Checks that the text of the element corresponds to the specified value $AC$ */
/*! $AC$ PennController.newSelector(name) Creates a new Selector element $AC$$AC$ PennController.getSelector(name) Retrieves an existing Selector element $AC$$AC$ Selector PElement.select(element) Selects the specified element $AC$$AC$ Selector PElement.shuffle() Shuffles the positions on the page of the selector's elements $AC$$AC$ Selector PElement.unselect() Unselects the element that is currently selected $AC$$AC$ Selector PElement.wait() Waits until a selection happens before proceeding $AC$$AC$ Selector PElement.add(elements) Adds one or more elements to the selector $AC$$AC$ Selector PElement.callback(commands) Will execute the specified command(s) whenever selection happens $AC$$AC$ Selector PElement.disableClicks() Disables selection by click $AC$$AC$ Selector PElement.enableClicks() Enables selection by click (again) $AC$$AC$ Selector PElement.frame(css) Attributes the CSS style to the selection frame $AC$$AC$ Selector PElement.keys(keys) Associates the elements in the selector (in the order they were added) with the specified keys $AC$$AC$ Selector PElement.log() Will log any selection to the results file $AC$$AC$ Selector PElement.once() Will disable the selector after the first selection $AC$$AC$ Selector PElement.test.selected(element) Checks that the specified element, or any element if non specified, is selected $AC$$AC$ Selector PElement.test.index(element,index) Checks that the specified element is at the specified index position in the selector $AC$$AC$ all PElements.selector(selector) Adds the element to the specified selector $AC$ */
/*! $AC$ PennController.newScale(name,numberOrValues) Creates a new Scale element $AC$$AC$ PennController.getScale(name) Retrieves an existing Scale element $AC$$AC$ Scale PElement.select(option) Selects the specified option on the scale $AC$$AC$ Scale PElement.wait() Waits until a selection happens before proceeding $AC$$AC$ Scale PElement.button() Transforms the scale options into buttons $AC$$AC$ Scale PElement.callback(commands) Will execute the specified command(s) whenever selection happens $AC$$AC$ Scale PElement.default(value) Sets the specified value to be selected by default $AC$$AC$ Scale PElement.horizontal() Aligns the scale's options horizontally (again) $AC$$AC$ Scale PElement.keys(keys) Associates the scale's options with the specified keys for selection $AC$$AC$ Scale PElement.label(index,label) Gives the specified label to the option at the specified index on the scale $AC$$AC$ Scale PElement.labelsPosition(position) Will show the labels on top, at the bottom, to the left or to the right of the options $AC$$AC$ Scale PElement.log() Will log the selected option in the results file $AC$$AC$ Scale PElement.once() Will disable the scale after the first selection $AC$$AC$ Scale PElement.radio() Will show the scale's options as radio buttons $AC$$AC$ Scale PElement.slider() Will show the scale as a slider $AC$$AC$ Scale PElement.horizontal() Aligns the scale's options vertically $AC$$AC$ Scale PElement.test.selected(option) Checks that the option, or any option if none specified, is selected $AC$ */
/*! $AC$ PennController.newPalette(name) Creates a new Palette element $AC$$AC$ PennController.getPalette(name) Retrieves an existing Palette element $AC$$AC$ Palette PElement.brush(element,color) Colors the specified element with the specified color $AC$$AC$ Palette PElement.clear() Makes all the elements of the palette transparent $AC$$AC$ Palette PElement.unselect() Unselects the color from the palette that was currently selected $AC$$AC$ Palette PElement.wait() Waits until an element is clicked and colored before proceeding $AC$$AC$ Palette PElement.addColor(color,element) Adds the specified color to the palette, to be selected by clicking on the specified element $AC$$AC$ Palette PElement.addElement(elements) Adds the specified element(s) as targets for coloration $AC$$AC$ Palette PElement.callback(commands) Will execute the specified command(s) whenever an element is colored $AC$$AC$ Palette PElement.enable() Enables the palette $AC$$AC$ Palette PElement.disable() Disables the palette $AC$$AC$ Palette PElement.log() Will log any coloration to the results file $AC$$AC$ Palette PElement.once() Will disable the palette after the first coloration $AC$$AC$ Palette PElement.remove(color) Removes the specified color from the palette (leaving any associated element on the page) $AC$$AC$ Palette PElement.test.color(element,color) Checks that the specified element has been colored with the specified color $AC$ */
/*! $AC$ PennController.newMouseTracker(name) Creates a new MouseTracker element $AC$$AC$ PennController.getMouseTracker(name) Retrieves an existing MouseTracker element $AC$$AC$ Mouse PElement.start() Starts listening to mouse movements $AC$$AC$ Mouse PElement.stop() Stops listening to mouse movements $AC$$AC$ Mouse PElement.callback( commands ) Runs the specified command(s) when the mouse moves $AC$$AC$ Mouse PElement.log() Logs the X and Y positions of the mouse $AC$ */
/*! $AC$ PennController.newMediaRecorder(name,type) Creates a new MediaRecorder element of type "audio" or "video" $AC$$AC$ PennController.getMediaRecorder(name) Retrieves an existing MediaRecorder element $AC$$AC$ global.PennController.InitiateRecorder(url,warning,consent) Sets the URL where to upload the recordings and creates a trial inviting the user to activate their microphone $AC$$AC$ global.PennController.UploadRecordings(label,noblock) Creates a trial that sends the recordings to the server $AC$$AC$ MediaRecorder PElement.play() Starts playing back the recording $AC$$AC$ MediaRecorder PElement.record() Starts recording $AC$$AC$ MediaRecorder PElement.stop() Stops playback or recording $AC$$AC$ MediaRecorder PElement.wait() Waits until recording stops before proceeding $AC$$AC$ MediaRecorder PElement.once() Will disable the recording interface after the first recording is complete $AC$$AC$ MediaRecorder PElement.log() Will log events in the results file $AC$$AC$ MediaRecorder PElement.test.hasPlayed() Checks that the recording was fully played back before $AC$$AC$ MediaRecorder PElement.test.playing() Checks that the recording is currently being played back $AC$$AC$ MediaRecorder PElement.test.recorded() Checks that recording has happened $AC$$AC$ global.PennController.DownloadRecordingButton(text) Returns an HTML string representing a button to download an archive of the recordings $AC$ */
/*! $AC$ PennController.newKey(name,key) Creates a new Key element $AC$$AC$ PennController.getKey(name) Retrieves an existing Key element $AC$$AC$ Key PElement.wait() Waits until the key, or one of the keys, is pressed before proceeding $AC$$AC$ Key PElement.callback(commands) Will run the specified command(s) whenever a valid keypress happens $AC$$AC$ Key PElement.disable() Stops listening to keypresses $AC$$AC$ Key PElement.enable() Starts listening to keypresses (again) $AC$$AC$ Key PElement.log() Will log any valid keypress in the results file $AC$$AC$ Key PElement.test.pressed(key) Checks that the key, or any key if none specified, has been pressed before $AC$ */
/*! $AC$ PennController.newImage(name,file) Creates a new Image element $AC$$AC$ PennController.getImage(name) Retrieves an existing Image element $AC$ */
/*! $AC$ PennController.newHtml(name,file) Creates a new Html element $AC$$AC$ PennController.getHtml(name) Retrieves an existing Html element $AC$$AC$ Html PElement.warn() Displays warning messages if some obligatory fields were not filled $AC$$AC$ Html PElement.checkboxWarning(message) Defines the warning message displayed when an obligatory checkbox group is not checked $AC$$AC$ Html PElement.inputWarning(message) Defines the warning message displayed when an obligatory input is not filled $AC$$AC$ Html PElement.log() Logs the values of the fields from the Html in the results file $AC$$AC$ Html PElement.radioWarning(message) Defines the warning message displayed when an radio button group input is not selected $AC$$AC$ Html PElement.test.complete() Checks that all the obligatory fields have been filled $AC$ */
/*! $AC$ PennController.newGroup(name,elements) Creates a new Group element $AC$$AC$ PennController.getGroup(name) Retrieves an existing Group element $AC$$AC$ Group PElement.shuffle() Shuffles the positions of the elements on the page $AC$$AC$ Group PElement.add(elements) Adds one or more elements to the group $AC$$AC$ Group PElement.remove(elements) Removes one or more elements from the group $AC$$AC$ Group PElement.test.index(element,index) Checks the index of the specified element in the group $AC$$AC$ all PElements.group(name) Adds the element to the Group element with the specified name $AC$ */
/*! $AC$ PennController.newFunction(name,function) Creates a new Function element $AC$$AC$ PennController.getFunction(name) Retrieves an existing Function element $AC$$AC$ Function PElement.call() Executes the function $AC$$AC$ Function PElement.test.is(value) Checks that the function returns the specified value $AC$ */
/*! $AC$ PennController.newEyeTracker(name) Creates a new EyeTracker element $AC$$AC$ PennController.getEyeTracker(name) Retrieves an existing EyeTracker element $AC$$AC$ PennController.EyeTrackerURL(url) Will send eye-tracking data to specified URL $AC$$AC$ EyeTracker PElement.calibrate(threshold,attempts) Starts a sequence of calibration $AC$$AC$ EyeTracker PElement.hideFeedback() Hides the red dot estimating the position of the eyes on the page $AC$$AC$ EyeTracker PElement.start() Starts parsing eye movements $AC$$AC$ EyeTracker PElement.stop() Stops parsing eye movements $AC$$AC$ EyeTracker PElement.stopTraining() Stop training the model whenever the mouse moves or clicks $AC$$AC$ EyeTracker PElement.showFeedback() Shows the red dot estimating the position of the eyes on the page $AC$$AC$ EyeTracker PElement.train() Starts training the model on every click and mouse movement (default) $AC$$AC$ EyeTracker PElement.add(elements) Adds one or more elements of interest to the EyeTracker $AC$$AC$ EyeTracker PElement.callback(function) Runs the specified javascript function whenever the eyes look at an element of interest $AC$$AC$ EyeTracker PElement.log() Logs the X and Y positions of the eyes every N milliseconds (see documentation) $AC$$AC$ EyeTracker PElement.trainOnMouseMove(true) Tells the model whether to use mouse movements to improve its estimations $AC$ */
/*! $AC$ PennController.newDropDown(name,text) Creates a new DropDown element $AC$$AC$ PennController.getDropDown(name) Retrieves an existing DropDown element $AC$$AC$ DropDown PElement.shuffle() Shuffles the options currently in the drop-down $AC$$AC$ DropDown PElement.select(option) Selects the specified option $AC$$AC$ DropDown PElement.wait() Wait until an option is selectd before proceeding $AC$$AC$ DropDown PElement.add(options) Adds one or more options to the drop-down $AC$$AC$ DropDown PElement.remove(option) Removes the specified option from the drop-down $AC$$AC$ DropDown PElement.test.selected(option) Checks that the specified option, or any if none specified, is selected $AC$ */
/*! $AC$ PennController.newController(name,controller,options) Creates a new Controller element $AC$$AC$ PennController.getController(name) Retrieves an existing Controller element $AC$$AC$ Controller PElement.wait() Waits until the controller has been completed before proceeding $AC$ */
/*! $AC$ PennController.newCanvas(name,width,height) Creates a new Canvas element $AC$$AC$ PennController.getCanvas(name) Retrieves an existing Canvas element $AC$$AC$ Canvas PElement.add(x,y,element) Places an element at (X,Y) on the canvas $AC$ */
/*! $AC$ PennController.newButton(name,text) Creates a new Button element $AC$$AC$ PennController.getButton(name) Retrieves an existing Button element $AC$$AC$ Button PElement.click() Simulates a click on the button $AC$$AC$ Button PElement.wait() Waits until the button is clicked before proceeding $AC$$AC$ Button PElement.callback(commands) Tell the button to run a (series of) command(s) whenever it is clicked $AC$$AC$ Button PElement.log() Logs clicks on the button in the results file $AC$$AC$ Button PElement.once() Will disable the button after the first click $AC$$AC$ Button PElement.test.clicked() Checks that the button has been clicked before $AC$ */
/*! $AC$ PennController.newAudio(name,file) Creates a new Audio element $AC$$AC$ PennController.getAudio(name) Retrieves an existing Audio element $AC$$AC$ Audio PElement.play() Starts the audio playback $AC$$AC$ Audio PElement.pause() Pauses the audio playback $AC$$AC$ Audio PElement.print() Prints an interface to control the audio playback $AC$$AC$ Audio PElement.stop() Stops the audio playback $AC$$AC$ Audio PElement.wait() Waits until the audio playback has ended $AC$$AC$ Audio PElement.disable(opacity) Disables the interface $AC$$AC$ Audio PElement.enable() Enables the interface $AC$$AC$ Audio PElement.once() The interface will be disabled after the first playback $AC$$AC$ Audio PElement.log() Logs playback events $AC$$AC$ Audio PElement.test.hasPlayed() Checks whether the audio has ever been played fully $AC$$AC$ Audio PElement.test.playing() Checks whether the audio is currently playing $AC$ */
/*! $AC$ newTrial().label(label) Assigns a label to the generated PennController trial $AC$$AC$ newTrial().log(name,value) Adds value to each line of this trial in the results file $AC$$AC$ newTrial().noHeader() Will not run commands from the header at the beginning of this trial $AC$$AC$ newTrial().noFooter() Will not run commands from the footer at the end of this trial $AC$$AC$ newTrial().setOption(option,value) Sets options for the controller (see Ibex manual) $AC$$AC$ newTrial().noTrialLog("start","end") Skips the Start and/or End log rows for this trial $AC$$AC$ global.PennController.Debug() Enables the debug mode for testing your experiment $AC$$AC$ global.PennController.DebugOff() Disables the debug mode; use before making public $AC$$AC$ global.PennController.Sequence(sequence) Defines the running order of your trials, based on their labels (see documentation) $AC$$AC$ global.PennController.GetURLParameter(parameter) Returns the value of the parameter from the URL $AC$$AC$ global.PennController.AddHost(url) Will look resources at the specified URL $AC$$AC$ global.PennController.CheckPreloaded() Creates a trial that is validated when the resources are preloaded $AC$$AC$ global.PennController.SendResults(label) Creates a trial that sends the results to the server $AC$$AC$ global.PennController.SetCounter(value) Set Ibex's internal counter to a specified value (see Ibex manual) $AC$$AC$ global.PennController.Header(commands) Will run the commands at the beginning of every PennController trial $AC$$AC$ global.PennController.Footer(commands) Will run the commands at the end of every PennController trial $AC$$AC$ all PElements.print() Prints the element $AC$$AC$ all PElements.refresh() Reprints the element where it is $AC$$AC$ all PElements.remove() Removes the element from the page $AC$$AC$ all PElement.wait() Waits until the element has been validated before proceeding $AC$$AC$ all PElements.after(element) Prints an element to the right of the current element $AC$$AC$ all PElements.before(element) Prints an element to the left of the current element $AC$$AC$ all PElements.bold() Prints the text, if any, as boldfaced $AC$$AC$ all PElements.center() Centers the element on the page $AC$$AC$ all PElements.color(color) Prints the text, if any, in the color specified $AC$$AC$ all PElements.cssContainer(option,value) Applies the CSS to the container of the element $AC$$AC$ all PElements.css(option,value) Applies the CSS to the element $AC$$AC$ all PElements.disable() Disables the element $AC$$AC$ all PElements.enable() Enables the element $AC$$AC$ all PElements.hidden() Hides the element (will still leave a blank space) $AC$$AC$ all PElements.italic() Prints the text, if any, as italicized $AC$$AC$ all PElements.left() Aligns the element with the left edge of the printing area $AC$$AC$ all PElements.right() Aligns the element with the right edge of the printing area $AC$$AC$ all PElements.size(width,height) Gives the element a specific width and/or height $AC$$AC$ all PElements.visible() Makes the element visible (again) $AC$$AC$ all PElements.test.printed() Checks that the element is printed on the page $AC$$AC$ Special Command.jump(label) Jumps to the first found label in the sequence $AC$$AC$ Special Command.fullscreen() Makes the page fullscreen $AC$$AC$ Special Command.exitFullscreen() Goes back to non-fullscreen $AC$$AC$ Special Command.clear() Removes all the PElements currently on the page $AC$$AC$ Special Command.end() Ends the trial immediately $AC$$AC$ global.PennController.ResetPrefix(prefix) Resets the prefix for the new* and get* commands; pass null to make them global $AC$$AC$ global.PennController.Template(table,penncontroller) Generates trials from a table $AC$$AC$ global.PennController.PreloadZip() Silently downloads a ZIP file containing resources $AC$ */
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index_core.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/base64-js/index.js":
/*!*****************************************!*\
  !*** ./node_modules/base64-js/index.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  var i
  for (i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(
      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)
    ))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}


/***/ }),

/***/ "./node_modules/buffer/index.js":
/*!**************************************!*\
  !*** ./node_modules/buffer/index.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <http://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */



var base64 = __webpack_require__(/*! base64-js */ "./node_modules/base64-js/index.js")
var ieee754 = __webpack_require__(/*! ieee754 */ "./node_modules/ieee754/index.js")
var isArray = __webpack_require__(/*! isarray */ "./node_modules/isarray/index.js")

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
  ? global.TYPED_ARRAY_SUPPORT
  : typedArraySupport()

/*
 * Export kMaxLength after typed array support is determined.
 */
exports.kMaxLength = kMaxLength()

function typedArraySupport () {
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
    return arr.foo() === 42 && // typed array instances can be augmented
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
  } catch (e) {
    return false
  }
}

function kMaxLength () {
  return Buffer.TYPED_ARRAY_SUPPORT
    ? 0x7fffffff
    : 0x3fffffff
}

function createBuffer (that, length) {
  if (kMaxLength() < length) {
    throw new RangeError('Invalid typed array length')
  }
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(length)
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    if (that === null) {
      that = new Buffer(length)
    }
    that.length = length
  }

  return that
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
    return new Buffer(arg, encodingOrOffset, length)
  }

  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error(
        'If encoding is specified then the first argument must be a string'
      )
    }
    return allocUnsafe(this, arg)
  }
  return from(this, arg, encodingOrOffset, length)
}

Buffer.poolSize = 8192 // not used by this implementation

// TODO: Legacy, not needed anymore. Remove in next major version.
Buffer._augment = function (arr) {
  arr.__proto__ = Buffer.prototype
  return arr
}

function from (that, value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number')
  }

  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    return fromArrayBuffer(that, value, encodingOrOffset, length)
  }

  if (typeof value === 'string') {
    return fromString(that, value, encodingOrOffset)
  }

  return fromObject(that, value)
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(null, value, encodingOrOffset, length)
}

if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype
  Buffer.__proto__ = Uint8Array
  if (typeof Symbol !== 'undefined' && Symbol.species &&
      Buffer[Symbol.species] === Buffer) {
    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
    Object.defineProperty(Buffer, Symbol.species, {
      value: null,
      configurable: true
    })
  }
}

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number')
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative')
  }
}

function alloc (that, size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(that, size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(that, size).fill(fill, encoding)
      : createBuffer(that, size).fill(fill)
  }
  return createBuffer(that, size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(null, size, fill, encoding)
}

function allocUnsafe (that, size) {
  assertSize(size)
  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < size; ++i) {
      that[i] = 0
    }
  }
  return that
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(null, size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(null, size)
}

function fromString (that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding')
  }

  var length = byteLength(string, encoding) | 0
  that = createBuffer(that, length)

  var actual = that.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    that = that.slice(0, actual)
  }

  return that
}

function fromArrayLike (that, array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  that = createBuffer(that, length)
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

function fromArrayBuffer (that, array, byteOffset, length) {
  array.byteLength // this throws if `array` is not a valid ArrayBuffer

  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds')
  }

  if (byteOffset === undefined && length === undefined) {
    array = new Uint8Array(array)
  } else if (length === undefined) {
    array = new Uint8Array(array, byteOffset)
  } else {
    array = new Uint8Array(array, byteOffset, length)
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = array
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromArrayLike(that, array)
  }
  return that
}

function fromObject (that, obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    that = createBuffer(that, len)

    if (that.length === 0) {
      return that
    }

    obj.copy(that, 0, 0, len)
    return that
  }

  if (obj) {
    if ((typeof ArrayBuffer !== 'undefined' &&
        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
      if (typeof obj.length !== 'number' || isnan(obj.length)) {
        return createBuffer(that, 0)
      }
      return fromArrayLike(that, obj)
    }

    if (obj.type === 'Buffer' && isArray(obj.data)) {
      return fromArrayLike(that, obj.data)
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
}

function checked (length) {
  // Note: cannot use `length < kMaxLength()` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return !!(b != null && b._isBuffer)
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    string = '' + string
  }

  var len = string.length
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length | 0
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer')
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset  // Coerce to Number.
  if (isNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (Buffer.TYPED_ARRAY_SUPPORT &&
        typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (isNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0
    if (isFinite(length)) {
      length = length | 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  // legacy write(string, encoding, offset, length) - remove in v0.13
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = this.subarray(start, end)
    newBuf.__proto__ = Buffer.prototype
  } else {
    var sliceLen = end - start
    newBuf = new Buffer(sliceLen, undefined)
    for (var i = 0; i < sliceLen; ++i) {
      newBuf[i] = this[i + start]
    }
  }

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  this[offset] = (value & 0xff)
  return offset + 1
}

function objectWriteUInt16 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
      (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

function objectWriteUInt32 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = (value >>> 24)
    this[offset + 2] = (value >>> 16)
    this[offset + 1] = (value >>> 8)
    this[offset] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
    this[offset + 2] = (value >>> 16)
    this[offset + 3] = (value >>> 24)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start
  var i

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, start + len),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if (code < 256) {
        val = code
      }
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : utf8ToBytes(new Buffer(val, encoding).toString())
    var len = bytes.length
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

function isnan (val) {
  return val !== val // eslint-disable-line no-self-compare
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/file-saver/dist/FileSaver.min.js":
/*!*******************************************************!*\
  !*** ./node_modules/file-saver/dist/FileSaver.min.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(a,b){if(true)!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (b),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else {}})(this,function(){"use strict";function b(a,b){return"undefined"==typeof b?b={autoBom:!1}:"object"!=typeof b&&(console.warn("Depricated: Expected third argument to be a object"),b={autoBom:!b}),b.autoBom&&/^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(a.type)?new Blob(["\uFEFF",a],{type:a.type}):a}function c(b,c,d){var e=new XMLHttpRequest;e.open("GET",b),e.responseType="blob",e.onload=function(){a(e.response,c,d)},e.onerror=function(){console.error("could not download file")},e.send()}function d(a){var b=new XMLHttpRequest;return b.open("HEAD",a,!1),b.send(),200<=b.status&&299>=b.status}function e(a){try{a.dispatchEvent(new MouseEvent("click"))}catch(c){var b=document.createEvent("MouseEvents");b.initMouseEvent("click",!0,!0,window,0,0,0,80,20,!1,!1,!1,!1,0,null),a.dispatchEvent(b)}}var f="object"==typeof window&&window.window===window?window:"object"==typeof self&&self.self===self?self:"object"==typeof global&&global.global===global?global:void 0,a=f.saveAs||"object"!=typeof window||window!==f?function(){}:"download"in HTMLAnchorElement.prototype?function(b,g,h){var i=f.URL||f.webkitURL,j=document.createElement("a");g=g||b.name||"download",j.download=g,j.rel="noopener","string"==typeof b?(j.href=b,j.origin===location.origin?e(j):d(j.href)?c(b,g,h):e(j,j.target="_blank")):(j.href=i.createObjectURL(b),setTimeout(function(){i.revokeObjectURL(j.href)},4E4),setTimeout(function(){e(j)},0))}:"msSaveOrOpenBlob"in navigator?function(f,g,h){if(g=g||f.name||"download","string"!=typeof f)navigator.msSaveOrOpenBlob(b(f,h),g);else if(d(f))c(f,g,h);else{var i=document.createElement("a");i.href=f,i.target="_blank",setTimeout(function(){e(i)})}}:function(a,b,d,e){if(e=e||open("","_blank"),e&&(e.document.title=e.document.body.innerText="downloading..."),"string"==typeof a)return c(a,b,d);var g="application/octet-stream"===a.type,h=/constructor/i.test(f.HTMLElement)||f.safari,i=/CriOS\/[\d]+/.test(navigator.userAgent);if((i||g&&h)&&"object"==typeof FileReader){var j=new FileReader;j.onloadend=function(){var a=j.result;a=i?a:a.replace(/^data:[^;]*;/,"data:attachment/file;"),e?e.location.href=a:location=a,e=null},j.readAsDataURL(a)}else{var k=f.URL||f.webkitURL,l=k.createObjectURL(a);e?e.location=l:location.href=l,e=null,setTimeout(function(){k.revokeObjectURL(l)},4E4)}};f.saveAs=a.saveAs=a, true&&(module.exports=a)});

//# sourceMappingURL=FileSaver.min.js.map
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/ieee754/index.js":
/*!***************************************!*\
  !*** ./node_modules/ieee754/index.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}


/***/ }),

/***/ "./node_modules/isarray/index.js":
/*!***************************************!*\
  !*** ./node_modules/isarray/index.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};


/***/ }),

/***/ "./node_modules/jquery-csv/src/jquery.csv.js":
/*!***************************************************!*\
  !*** ./node_modules/jquery-csv/src/jquery.csv.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/**
 * jQuery-csv (jQuery Plugin)
 *
 * This document is licensed as free software under the terms of the
 * MIT License: http://www.opensource.org/licenses/mit-license.php
 *
 * Acknowledgements:
 * The original design and influence to implement this library as a jquery
 * plugin is influenced by jquery-json (http://code.google.com/p/jquery-json/).
 * If you're looking to use native JSON.Stringify but want additional backwards
 * compatibility for browsers that don't support it, I highly recommend you
 * check it out.
 *
 * A special thanks goes out to rwk@acm.org for providing a lot of valuable
 * feedback to the project including the core for the new FSM
 * (Finite State Machine) parsers. If you're looking for a stable TSV parser
 * be sure to take a look at jquery-tsv (http://code.google.com/p/jquery-tsv/).

 * For legal purposes I'll include the "NO WARRANTY EXPRESSED OR IMPLIED.
 * USE AT YOUR OWN RISK.". Which, in 'layman's terms' means, by using this
 * library you are accepting responsibility if it breaks your code.
 *
 * Legal jargon aside, I will do my best to provide a useful and stable core
 * that can effectively be built on.
 *
 * Copyrighted 2012 by Evan Plaice.
 */

RegExp.escape = function (s) {
  return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
};

(function () {
  'use strict';

  var $;

  // to keep backwards compatibility
  if (typeof jQuery !== 'undefined' && jQuery) {
    $ = jQuery;
  } else {
    $ = {};
  }

  /**
   * jQuery.csv.defaults
   * Encapsulates the method paramater defaults for the CSV plugin module.
   */

  $.csv = {
    defaults: {
      separator: ',',
      delimiter: '"',
      headers: true
    },

    hooks: {
      castToScalar: function (value, state) {
        var hasDot = /\./;
        if (isNaN(value)) {
          return value;
        } else {
          if (hasDot.test(value)) {
            return parseFloat(value);
          } else {
            var integer = parseInt(value);
            if (isNaN(integer)) {
              return null;
            } else {
              return integer;
            }
          }
        }
      }
    },

    parsers: {
      parse: function (csv, options) {
        // cache settings
        var separator = options.separator;
        var delimiter = options.delimiter;

        // set initial state if it's missing
        if (!options.state.rowNum) {
          options.state.rowNum = 1;
        }
        if (!options.state.colNum) {
          options.state.colNum = 1;
        }

        // clear initial state
        var data = [];
        var entry = [];
        var state = 0;
        var value = '';
        var exit = false;

        function endOfEntry () {
          // reset the state
          state = 0;
          value = '';

          // if 'start' hasn't been met, don't output
          if (options.start && options.state.rowNum < options.start) {
            // update global state
            entry = [];
            options.state.rowNum++;
            options.state.colNum = 1;
            return;
          }

          if (options.onParseEntry === undefined) {
            // onParseEntry hook not set
            data.push(entry);
          } else {
            var hookVal = options.onParseEntry(entry, options.state); // onParseEntry Hook
            // false skips the row, configurable through a hook
            if (hookVal !== false) {
              data.push(hookVal);
            }
          }
          // console.log('entry:' + entry);

          // cleanup
          entry = [];

          // if 'end' is met, stop parsing
          if (options.end && options.state.rowNum >= options.end) {
            exit = true;
          }

          // update global state
          options.state.rowNum++;
          options.state.colNum = 1;
        }

        function endOfValue () {
          if (options.onParseValue === undefined) {
            // onParseValue hook not set
            entry.push(value);
          } else {
            var hook = options.onParseValue(value, options.state); // onParseValue Hook
            // false skips the row, configurable through a hook
            if (hook !== false) {
              entry.push(hook);
            }
          }
          // console.log('value:' + value);
          // reset the state
          value = '';
          state = 0;
          // update global state
          options.state.colNum++;
        }

        // escape regex-specific control chars
        var escSeparator = RegExp.escape(separator);
        var escDelimiter = RegExp.escape(delimiter);

        // compile the regEx str using the custom delimiter/separator
        var match = /(D|S|\r\n|\n|\r|[^DS\r\n]+)/;
        var matchSrc = match.source;
        matchSrc = matchSrc.replace(/S/g, escSeparator);
        matchSrc = matchSrc.replace(/D/g, escDelimiter);
        match = new RegExp(matchSrc, 'gm');

        // put on your fancy pants...
        // process control chars individually, use look-ahead on non-control chars
        csv.replace(match, function (m0) {
          if (exit) {
            return;
          }
          switch (state) {
            // the start of a value
            case 0:
              // null last value
              if (m0 === separator) {
                value += '';
                endOfValue();
                break;
              }
              // opening delimiter
              if (m0 === delimiter) {
                state = 1;
                break;
              }
              // null last value
              if (/^(\r\n|\n|\r)$/.test(m0)) {
                endOfValue();
                endOfEntry();
                break;
              }
              // un-delimited value
              value += m0;
              state = 3;
              break;

            // delimited input
            case 1:
              // second delimiter? check further
              if (m0 === delimiter) {
                state = 2;
                break;
              }
              // delimited data
              value += m0;
              state = 1;
              break;

            // delimiter found in delimited input
            case 2:
              // escaped delimiter?
              if (m0 === delimiter) {
                value += m0;
                state = 1;
                break;
              }
              // null value
              if (m0 === separator) {
                endOfValue();
                break;
              }
              // end of entry
              if (/^(\r\n|\n|\r)$/.test(m0)) {
                endOfValue();
                endOfEntry();
                break;
              }
              // broken paser?
              throw new Error('CSVDataError: Illegal State [Row:' + options.state.rowNum + '][Col:' + options.state.colNum + ']');

            // un-delimited input
            case 3:
              // null last value
              if (m0 === separator) {
                endOfValue();
                break;
              }
              // end of entry
              if (/^(\r\n|\n|\r)$/.test(m0)) {
                endOfValue();
                endOfEntry();
                break;
              }
              if (m0 === delimiter) {
              // non-compliant data
                throw new Error('CSVDataError: Illegal Quote [Row:' + options.state.rowNum + '][Col:' + options.state.colNum + ']');
              }
              // broken parser?
              throw new Error('CSVDataError: Illegal Data [Row:' + options.state.rowNum + '][Col:' + options.state.colNum + ']');
            default:
              // shenanigans
              throw new Error('CSVDataError: Unknown State [Row:' + options.state.rowNum + '][Col:' + options.state.colNum + ']');
          }
          // console.log('val:' + m0 + ' state:' + state);
        });

        // submit the last entry
        // ignore null last line
        if (entry.length !== 0) {
          endOfValue();
          endOfEntry();
        }

        return data;
      },

      // a csv-specific line splitter
      splitLines: function (csv, options) {
        if (!csv) {
          return undefined;
        }

        options = options || {};

        // cache settings
        var separator = options.separator || $.csv.defaults.separator;
        var delimiter = options.delimiter || $.csv.defaults.delimiter;

        // set initial state if it's missing
        options.state = options.state || {};
        if (!options.state.rowNum) {
          options.state.rowNum = 1;
        }

        // clear initial state
        var entries = [];
        var state = 0;
        var entry = '';
        var exit = false;

        function endOfLine () {
          // reset the state
          state = 0;

          // if 'start' hasn't been met, don't output
          if (options.start && options.state.rowNum < options.start) {
            // update global state
            entry = '';
            options.state.rowNum++;
            return;
          }

          if (options.onParseEntry === undefined) {
            // onParseEntry hook not set
            entries.push(entry);
          } else {
            var hookVal = options.onParseEntry(entry, options.state); // onParseEntry Hook
            // false skips the row, configurable through a hook
            if (hookVal !== false) {
              entries.push(hookVal);
            }
          }

          // cleanup
          entry = '';

          // if 'end' is met, stop parsing
          if (options.end && options.state.rowNum >= options.end) {
            exit = true;
          }

          // update global state
          options.state.rowNum++;
        }

        // escape regex-specific control chars
        var escSeparator = RegExp.escape(separator);
        var escDelimiter = RegExp.escape(delimiter);

        // compile the regEx str using the custom delimiter/separator
        var match = /(D|S|\n|\r|[^DS\r\n]+)/;
        var matchSrc = match.source;
        matchSrc = matchSrc.replace(/S/g, escSeparator);
        matchSrc = matchSrc.replace(/D/g, escDelimiter);
        match = new RegExp(matchSrc, 'gm');

        // put on your fancy pants...
        // process control chars individually, use look-ahead on non-control chars
        csv.replace(match, function (m0) {
          if (exit) {
            return;
          }
          switch (state) {
            // the start of a value/entry
            case 0:
              // null value
              if (m0 === separator) {
                entry += m0;
                state = 0;
                break;
              }
              // opening delimiter
              if (m0 === delimiter) {
                entry += m0;
                state = 1;
                break;
              }
              // end of line
              if (m0 === '\n') {
                endOfLine();
                break;
              }
              // phantom carriage return
              if (/^\r$/.test(m0)) {
                break;
              }
              // un-delimit value
              entry += m0;
              state = 3;
              break;

            // delimited input
            case 1:
              // second delimiter? check further
              if (m0 === delimiter) {
                entry += m0;
                state = 2;
                break;
              }
              // delimited data
              entry += m0;
              state = 1;
              break;

            // delimiter found in delimited input
            case 2:
              // escaped delimiter?
              var prevChar = entry.substr(entry.length - 1);
              if (m0 === delimiter && prevChar === delimiter) {
                entry += m0;
                state = 1;
                break;
              }
              // end of value
              if (m0 === separator) {
                entry += m0;
                state = 0;
                break;
              }
              // end of line
              if (m0 === '\n') {
                endOfLine();
                break;
              }
              // phantom carriage return
              if (m0 === '\r') {
                break;
              }
              // broken paser?
              throw new Error('CSVDataError: Illegal state [Row:' + options.state.rowNum + ']');

            // un-delimited input
            case 3:
              // null value
              if (m0 === separator) {
                entry += m0;
                state = 0;
                break;
              }
              // end of line
              if (m0 === '\n') {
                endOfLine();
                break;
              }
              // phantom carriage return
              if (m0 === '\r') {
                break;
              }
              // non-compliant data
              if (m0 === delimiter) {
                throw new Error('CSVDataError: Illegal quote [Row:' + options.state.rowNum + ']');
              }
              // broken parser?
              throw new Error('CSVDataError: Illegal state [Row:' + options.state.rowNum + ']');
            default:
              // shenanigans
              throw new Error('CSVDataError: Unknown state [Row:' + options.state.rowNum + ']');
          }
          // console.log('val:' + m0 + ' state:' + state);
        });

        // submit the last entry
        // ignore null last line
        if (entry !== '') {
          endOfLine();
        }

        return entries;
      },

      // a csv entry parser
      parseEntry: function (csv, options) {
        // cache settings
        var separator = options.separator;
        var delimiter = options.delimiter;

        // set initial state if it's missing
        if (!options.state.rowNum) {
          options.state.rowNum = 1;
        }
        if (!options.state.colNum) {
          options.state.colNum = 1;
        }

        // clear initial state
        var entry = [];
        var state = 0;
        var value = '';

        function endOfValue () {
          if (options.onParseValue === undefined) {
            // onParseValue hook not set
            entry.push(value);
          } else {
            var hook = options.onParseValue(value, options.state); // onParseValue Hook
            // false skips the value, configurable through a hook
            if (hook !== false) {
              entry.push(hook);
            }
          }
          // reset the state
          value = '';
          state = 0;
          // update global state
          options.state.colNum++;
        }

        // checked for a cached regEx first
        if (!options.match) {
          // escape regex-specific control chars
          var escSeparator = RegExp.escape(separator);
          var escDelimiter = RegExp.escape(delimiter);

          // compile the regEx str using the custom delimiter/separator
          var match = /(D|S|\n|\r|[^DS\r\n]+)/;
          var matchSrc = match.source;
          matchSrc = matchSrc.replace(/S/g, escSeparator);
          matchSrc = matchSrc.replace(/D/g, escDelimiter);
          options.match = new RegExp(matchSrc, 'gm');
        }

        // put on your fancy pants...
        // process control chars individually, use look-ahead on non-control chars
        csv.replace(options.match, function (m0) {
          switch (state) {
            // the start of a value
            case 0:
              // null last value
              if (m0 === separator) {
                value += '';
                endOfValue();
                break;
              }
              // opening delimiter
              if (m0 === delimiter) {
                state = 1;
                break;
              }
              // skip un-delimited new-lines
              if (m0 === '\n' || m0 === '\r') {
                break;
              }
              // un-delimited value
              value += m0;
              state = 3;
              break;

            // delimited input
            case 1:
              // second delimiter? check further
              if (m0 === delimiter) {
                state = 2;
                break;
              }
              // delimited data
              value += m0;
              state = 1;
              break;

            // delimiter found in delimited input
            case 2:
              // escaped delimiter?
              if (m0 === delimiter) {
                value += m0;
                state = 1;
                break;
              }
              // null value
              if (m0 === separator) {
                endOfValue();
                break;
              }
              // skip un-delimited new-lines
              if (m0 === '\n' || m0 === '\r') {
                break;
              }
              // broken paser?
              throw new Error('CSVDataError: Illegal State [Row:' + options.state.rowNum + '][Col:' + options.state.colNum + ']');

            // un-delimited input
            case 3:
              // null last value
              if (m0 === separator) {
                endOfValue();
                break;
              }
              // skip un-delimited new-lines
              if (m0 === '\n' || m0 === '\r') {
                break;
              }
              // non-compliant data
              if (m0 === delimiter) {
                throw new Error('CSVDataError: Illegal Quote [Row:' + options.state.rowNum + '][Col:' + options.state.colNum + ']');
              }
              // broken parser?
              throw new Error('CSVDataError: Illegal Data [Row:' + options.state.rowNum + '][Col:' + options.state.colNum + ']');
            default:
              // shenanigans
              throw new Error('CSVDataError: Unknown State [Row:' + options.state.rowNum + '][Col:' + options.state.colNum + ']');
          }
          // console.log('val:' + m0 + ' state:' + state);
        });

        // submit the last value
        endOfValue();

        return entry;
      }
    },

    helpers: {

      /**
       * $.csv.helpers.collectPropertyNames(objectsArray)
       * Collects all unique property names from all passed objects.
       *
       * @param {Array} objects Objects to collect properties from.
       *
       * Returns an array of property names (array will be empty,
       * if objects have no own properties).
       */
      collectPropertyNames: function (objects) {
        var o = [];
        var propName = [];
        var props = [];
        for (o in objects) {
          for (propName in objects[o]) {
            if ((objects[o].hasOwnProperty(propName)) &&
                (props.indexOf(propName) < 0) &&
                (typeof objects[o][propName] !== 'function')) {
              props.push(propName);
            }
          }
        }
        return props;
      }
    },

    /**
     * $.csv.toArray(csv)
     * Converts a CSV entry string to a javascript array.
     *
     * @param {Array} csv The string containing the CSV data.
     * @param {Object} [options] An object containing user-defined options.
     * @param {Character} [separator] An override for the separator character. Defaults to a comma(,).
     * @param {Character} [delimiter] An override for the delimiter character. Defaults to a double-quote(").
     *
     * This method deals with simple CSV strings only. It's useful if you only
     * need to parse a single entry. If you need to parse more than one line,
     * use $.csv2Array instead.
     */
    toArray: function (csv, options, callback) {
      options = (options !== undefined ? options : {});
      var config = {};
      config.callback = ((callback !== undefined && typeof (callback) === 'function') ? callback : false);
      config.separator = 'separator' in options ? options.separator : $.csv.defaults.separator;
      config.delimiter = 'delimiter' in options ? options.delimiter : $.csv.defaults.delimiter;
      var state = (options.state !== undefined ? options.state : {});

      // setup
      options = {
        delimiter: config.delimiter,
        separator: config.separator,
        onParseEntry: options.onParseEntry,
        onParseValue: options.onParseValue,
        state: state
      };

      var entry = $.csv.parsers.parseEntry(csv, options);

      // push the value to a callback if one is defined
      if (!config.callback) {
        return entry;
      } else {
        config.callback('', entry);
      }
    },

    /**
     * $.csv.toArrays(csv)
     * Converts a CSV string to a javascript array.
     *
     * @param {String} csv The string containing the raw CSV data.
     * @param {Object} [options] An object containing user-defined options.
     * @param {Character} [separator] An override for the separator character. Defaults to a comma(,).
     * @param {Character} [delimiter] An override for the delimiter character. Defaults to a double-quote(").
     *
     * This method deals with multi-line CSV. The breakdown is simple. The first
     * dimension of the array represents the line (or entry/row) while the second
     * dimension contains the values (or values/columns).
     */
    toArrays: function (csv, options, callback) {
      options = (options !== undefined ? options : {});
      var config = {};
      config.callback = ((callback !== undefined && typeof (callback) === 'function') ? callback : false);
      config.separator = 'separator' in options ? options.separator : $.csv.defaults.separator;
      config.delimiter = 'delimiter' in options ? options.delimiter : $.csv.defaults.delimiter;

      // setup
      var data = [];
      options = {
        delimiter: config.delimiter,
        separator: config.separator,
        onPreParse: options.onPreParse,
        onParseEntry: options.onParseEntry,
        onParseValue: options.onParseValue,
        onPostParse: options.onPostParse,
        start: options.start,
        end: options.end,
        state: {
          rowNum: 1,
          colNum: 1
        }
      };

      // onPreParse hook
      if (options.onPreParse !== undefined) {
        options.onPreParse(csv, options.state);
      }

      // parse the data
      data = $.csv.parsers.parse(csv, options);

      // onPostParse hook
      if (options.onPostParse !== undefined) {
        options.onPostParse(data, options.state);
      }

      // push the value to a callback if one is defined
      if (!config.callback) {
        return data;
      } else {
        config.callback('', data);
      }
    },

    /**
     * $.csv.toObjects(csv)
     * Converts a CSV string to a javascript object.
     * @param {String} csv The string containing the raw CSV data.
     * @param {Object} [options] An object containing user-defined options.
     * @param {Character} [separator] An override for the separator character. Defaults to a comma(,).
     * @param {Character} [delimiter] An override for the delimiter character. Defaults to a double-quote(").
     * @param {Boolean} [headers] Indicates whether the data contains a header line. Defaults to true.
     *
     * This method deals with multi-line CSV strings. Where the headers line is
     * used as the key for each value per entry.
     */
    toObjects: function (csv, options, callback) {
      options = (options !== undefined ? options : {});
      var config = {};
      config.callback = ((callback !== undefined && typeof (callback) === 'function') ? callback : false);
      config.separator = 'separator' in options ? options.separator : $.csv.defaults.separator;
      config.delimiter = 'delimiter' in options ? options.delimiter : $.csv.defaults.delimiter;
      config.headers = 'headers' in options ? options.headers : $.csv.defaults.headers;
      options.start = 'start' in options ? options.start : 1;

      // account for headers
      if (config.headers) {
        options.start++;
      }
      if (options.end && config.headers) {
        options.end++;
      }

      // setup
      var lines = [];
      var data = [];

      options = {
        delimiter: config.delimiter,
        separator: config.separator,
        onPreParse: options.onPreParse,
        onParseEntry: options.onParseEntry,
        onParseValue: options.onParseValue,
        onPostParse: options.onPostParse,
        start: options.start,
        end: options.end,
        state: {
          rowNum: 1,
          colNum: 1
        },
        match: false,
        transform: options.transform
      };

      // fetch the headers
      var headerOptions = {
        delimiter: config.delimiter,
        separator: config.separator,
        start: 1,
        end: 1,
        state: {
          rowNum: 1,
          colNum: 1
        }
      };

      // onPreParse hook
      if (options.onPreParse !== undefined) {
        options.onPreParse(csv, options.state);
      }

      // parse the csv
      var headerLine = $.csv.parsers.splitLines(csv, headerOptions);
      var headers = $.csv.toArray(headerLine[0], options);

      // fetch the data
      lines = $.csv.parsers.splitLines(csv, options);

      // reset the state for re-use
      options.state.colNum = 1;
      if (headers) {
        options.state.rowNum = 2;
      } else {
        options.state.rowNum = 1;
      }

      // convert data to objects
      for (var i = 0, len = lines.length; i < len; i++) {
        var entry = $.csv.toArray(lines[i], options);
        var object = {};
        for (var j = 0; j < headers.length; j++) {
          object[headers[j]] = entry[j];
        }
        if (options.transform !== undefined) {
          data.push(options.transform.call(undefined, object));
        } else {
          data.push(object);
        }

        // update row state
        options.state.rowNum++;
      }

      // onPostParse hook
      if (options.onPostParse !== undefined) {
        options.onPostParse(data, options.state);
      }

      // push the value to a callback if one is defined
      if (!config.callback) {
        return data;
      } else {
        config.callback('', data);
      }
    },

    /**
    * $.csv.fromArrays(arrays)
    * Converts a javascript array to a CSV String.
    *
    * @param {Array} arrays An array containing an array of CSV entries.
    * @param {Object} [options] An object containing user-defined options.
    * @param {Character} [separator] An override for the separator character. Defaults to a comma(,).
    * @param {Character} [delimiter] An override for the delimiter character. Defaults to a double-quote(").
    *
    * This method generates a CSV file from an array of arrays (representing entries).
    */
    fromArrays: function (arrays, options, callback) {
      options = (options !== undefined ? options : {});
      var config = {};
      config.callback = ((callback !== undefined && typeof (callback) === 'function') ? callback : false);
      config.separator = 'separator' in options ? options.separator : $.csv.defaults.separator;
      config.delimiter = 'delimiter' in options ? options.delimiter : $.csv.defaults.delimiter;

      var output = '';
      var line;
      var lineValues;
      var i;
      var j;

      for (i = 0; i < arrays.length; i++) {
        line = arrays[i];
        lineValues = [];
        for (j = 0; j < line.length; j++) {
          var strValue = (line[j] === undefined || line[j] === null) ? '' : line[j].toString();
          if (strValue.indexOf(config.delimiter) > -1) {
            strValue = strValue.replace(new RegExp(config.delimiter, 'g'), config.delimiter + config.delimiter);
          }

          var escMatcher = '\n|\r|S|D';
          escMatcher = escMatcher.replace('S', config.separator);
          escMatcher = escMatcher.replace('D', config.delimiter);

          if (strValue.search(escMatcher) > -1) {
            strValue = config.delimiter + strValue + config.delimiter;
          }
          lineValues.push(strValue);
        }
        output += lineValues.join(config.separator) + '\n';
      }

      // push the value to a callback if one is defined
      if (!config.callback) {
        return output;
      } else {
        config.callback('', output);
      }
    },

    /**
     * $.csv.fromObjects(objects)
     * Converts a javascript dictionary to a CSV string.
     *
     * @param {Object} objects An array of objects containing the data.
     * @param {Object} [options] An object containing user-defined options.
     * @param {Character} [separator] An override for the separator character. Defaults to a comma(,).
     * @param {Character} [delimiter] An override for the delimiter character. Defaults to a double-quote(").
     * @param {Character} [sortOrder] Sort order of columns (named after
     *   object properties). Use 'alpha' for alphabetic. Default is 'declare',
     *   which means, that properties will _probably_ appear in order they were
     *   declared for the object. But without any guarantee.
     * @param {Character or Array} [manualOrder] Manually order columns. May be
     * a strin in a same csv format as an output or an array of header names
     * (array items won't be parsed). All the properties, not present in
     * `manualOrder` will be appended to the end in accordance with `sortOrder`
     * option. So the `manualOrder` always takes preference, if present.
     *
     * This method generates a CSV file from an array of objects (name:value pairs).
     * It starts by detecting the headers and adding them as the first line of
     * the CSV file, followed by a structured dump of the data.
     */
    fromObjects: function (objects, options, callback) {
      options = (options !== undefined ? options : {});
      var config = {};
      config.callback = ((callback !== undefined && typeof (callback) === 'function') ? callback : false);
      config.separator = 'separator' in options ? options.separator : $.csv.defaults.separator;
      config.delimiter = 'delimiter' in options ? options.delimiter : $.csv.defaults.delimiter;
      config.headers = 'headers' in options ? options.headers : $.csv.defaults.headers;
      config.sortOrder = 'sortOrder' in options ? options.sortOrder : 'declare';
      config.manualOrder = 'manualOrder' in options ? options.manualOrder : [];
      config.transform = options.transform;

      if (typeof config.manualOrder === 'string') {
        config.manualOrder = $.csv.toArray(config.manualOrder, config);
      }

      if (config.transform !== undefined) {
        var origObjects = objects;
        objects = [];

        var i;
        for (i = 0; i < origObjects.length; i++) {
          objects.push(config.transform.call(undefined, origObjects[i]));
        }
      }

      var props = $.csv.helpers.collectPropertyNames(objects);

      if (config.sortOrder === 'alpha') {
        props.sort();
      } // else {} - nothing to do for 'declare' order

      if (config.manualOrder.length > 0) {
        var propsManual = [].concat(config.manualOrder);
        let p;
        for (p = 0; p < props.length; p++) {
          if (propsManual.indexOf(props[p]) < 0) {
            propsManual.push(props[p]);
          }
        }
        props = propsManual;
      }

      var o, p, line, output, propName;
      if (config.headers) {
        output.push(props);
      }

      for (o = 0; o < objects.length; o++) {
        line = [];
        for (p = 0; p < props.length; p++) {
          propName = props[p];
          if (propName in objects[o] && typeof objects[o][propName] !== 'function') {
            line.push(objects[o][propName]);
          } else {
            line.push('');
          }
        }
        output.push(line);
      }

      // push the value to a callback if one is defined
      return $.csv.fromArrays(output, options, config.callback);
    }
  };

  // Maintenance code to maintain backward-compatibility
  // Will be removed in release 1.0
  $.csvEntry2Array = $.csv.toArray;
  $.csv2Array = $.csv.toArrays;
  $.csv2Dictionary = $.csv.toObjects;

  // CommonJS module is defined
  if ( true && module.exports) {
    module.exports = $.csv;
  }
}).call(this);


/***/ }),

/***/ "./node_modules/jszip-utils/lib/index.js":
/*!***********************************************!*\
  !*** ./node_modules/jszip-utils/lib/index.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var JSZipUtils = {};
// just use the responseText with xhr1, response with xhr2.
// The transformation doesn't throw away high-order byte (with responseText)
// because JSZip handles that case. If not used with JSZip, you may need to
// do it, see https://developer.mozilla.org/En/Using_XMLHttpRequest#Handling_binary_data
JSZipUtils._getBinaryFromXHR = function (xhr) {
    // for xhr.responseText, the 0xFF mask is applied by JSZip
    return xhr.response || xhr.responseText;
};

// taken from jQuery
function createStandardXHR() {
    try {
        return new window.XMLHttpRequest();
    } catch( e ) {}
}

function createActiveXHR() {
    try {
        return new window.ActiveXObject("Microsoft.XMLHTTP");
    } catch( e ) {}
}

// Create the request object
var createXHR = window.ActiveXObject ?
    /* Microsoft failed to properly
     * implement the XMLHttpRequest in IE7 (can't request local files),
     * so we use the ActiveXObject when it is available
     * Additionally XMLHttpRequest can be disabled in IE7/IE8 so
     * we need a fallback.
     */
    function() {
    return createStandardXHR() || createActiveXHR();
} :
    // For all other browsers, use the standard XMLHttpRequest object
    createStandardXHR;



JSZipUtils.getBinaryContent = function(path, callback) {
    /*
     * Here is the tricky part : getting the data.
     * In firefox/chrome/opera/... setting the mimeType to 'text/plain; charset=x-user-defined'
     * is enough, the result is in the standard xhr.responseText.
     * cf https://developer.mozilla.org/En/XMLHttpRequest/Using_XMLHttpRequest#Receiving_binary_data_in_older_browsers
     * In IE <= 9, we must use (the IE only) attribute responseBody
     * (for binary data, its content is different from responseText).
     * In IE 10, the 'charset=x-user-defined' trick doesn't work, only the
     * responseType will work :
     * http://msdn.microsoft.com/en-us/library/ie/hh673569%28v=vs.85%29.aspx#Binary_Object_upload_and_download
     *
     * I'd like to use jQuery to avoid this XHR madness, but it doesn't support
     * the responseType attribute : http://bugs.jquery.com/ticket/11461
     */
    try {

        var xhr = createXHR();

        xhr.open('GET', path, true);

        // recent browsers
        if ("responseType" in xhr) {
            xhr.responseType = "arraybuffer";
        }

        // older browser
        if(xhr.overrideMimeType) {
            xhr.overrideMimeType("text/plain; charset=x-user-defined");
        }

        xhr.onreadystatechange = function(evt) {
            var file, err;
            // use `xhr` and not `this`... thanks IE
            if (xhr.readyState === 4) {
                if (xhr.status === 200 || xhr.status === 0) {
                    file = null;
                    err = null;
                    try {
                        file = JSZipUtils._getBinaryFromXHR(xhr);
                    } catch(e) {
                        err = new Error(e);
                    }
                    callback(err, file);
                } else {
                    callback(new Error("Ajax error for " + path + " : " + this.status + " " + this.statusText), null);
                }
            }
        };

        xhr.send();

    } catch (e) {
        callback(new Error(e), null);
    }
};

// export
module.exports = JSZipUtils;

// enforcing Stuk's coding style
// vim: set shiftwidth=4 softtabstop=4:


/***/ }),

/***/ "./node_modules/jszip/dist/jszip.min.js":
/*!**********************************************!*\
  !*** ./node_modules/jszip/dist/jszip.min.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, Buffer, setImmediate) {var require;var require;/*!

JSZip v3.6.0 - A JavaScript class for generating and reading zip files
<http://stuartk.com/jszip>

(c) 2009-2016 Stuart Knightley <stuart [at] stuartk.com>
Dual licenced under the MIT license or GPLv3. See https://raw.github.com/Stuk/jszip/master/LICENSE.markdown.

JSZip uses the library pako released under the MIT license :
https://github.com/nodeca/pako/blob/master/LICENSE
*/

!function(e){if(true)module.exports=e();else {}}(function(){return function s(a,o,u){function h(r,e){if(!o[r]){if(!a[r]){var t="function"==typeof require&&require;if(!e&&t)return require(r,!0);if(f)return f(r,!0);var n=new Error("Cannot find module '"+r+"'");throw n.code="MODULE_NOT_FOUND",n}var i=o[r]={exports:{}};a[r][0].call(i.exports,function(e){var t=a[r][1][e];return h(t||e)},i,i.exports,s,a,o,u)}return o[r].exports}for(var f="function"==typeof require&&require,e=0;e<u.length;e++)h(u[e]);return h}({1:[function(l,t,n){(function(r){!function(e){"object"==typeof n&&void 0!==t?t.exports=e():("undefined"!=typeof window?window:void 0!==r?r:"undefined"!=typeof self?self:this).JSZip=e()}(function(){return function s(a,o,u){function h(t,e){if(!o[t]){if(!a[t]){var r="function"==typeof l&&l;if(!e&&r)return r(t,!0);if(f)return f(t,!0);var n=new Error("Cannot find module '"+t+"'");throw n.code="MODULE_NOT_FOUND",n}var i=o[t]={exports:{}};a[t][0].call(i.exports,function(e){return h(a[t][1][e]||e)},i,i.exports,s,a,o,u)}return o[t].exports}for(var f="function"==typeof l&&l,e=0;e<u.length;e++)h(u[e]);return h}({1:[function(l,t,n){(function(r){!function(e){"object"==typeof n&&void 0!==t?t.exports=e():("undefined"!=typeof window?window:void 0!==r?r:"undefined"!=typeof self?self:this).JSZip=e()}(function(){return function s(a,o,u){function h(t,e){if(!o[t]){if(!a[t]){var r="function"==typeof l&&l;if(!e&&r)return r(t,!0);if(f)return f(t,!0);var n=new Error("Cannot find module '"+t+"'");throw n.code="MODULE_NOT_FOUND",n}var i=o[t]={exports:{}};a[t][0].call(i.exports,function(e){return h(a[t][1][e]||e)},i,i.exports,s,a,o,u)}return o[t].exports}for(var f="function"==typeof l&&l,e=0;e<u.length;e++)h(u[e]);return h}({1:[function(l,t,n){(function(r){!function(e){"object"==typeof n&&void 0!==t?t.exports=e():("undefined"!=typeof window?window:void 0!==r?r:"undefined"!=typeof self?self:this).JSZip=e()}(function(){return function s(a,o,u){function h(t,e){if(!o[t]){if(!a[t]){var r="function"==typeof l&&l;if(!e&&r)return r(t,!0);if(f)return f(t,!0);var n=new Error("Cannot find module '"+t+"'");throw n.code="MODULE_NOT_FOUND",n}var i=o[t]={exports:{}};a[t][0].call(i.exports,function(e){return h(a[t][1][e]||e)},i,i.exports,s,a,o,u)}return o[t].exports}for(var f="function"==typeof l&&l,e=0;e<u.length;e++)h(u[e]);return h}({1:[function(l,t,n){(function(r){!function(e){"object"==typeof n&&void 0!==t?t.exports=e():("undefined"!=typeof window?window:void 0!==r?r:"undefined"!=typeof self?self:this).JSZip=e()}(function(){return function s(a,o,u){function h(t,e){if(!o[t]){if(!a[t]){var r="function"==typeof l&&l;if(!e&&r)return r(t,!0);if(f)return f(t,!0);var n=new Error("Cannot find module '"+t+"'");throw n.code="MODULE_NOT_FOUND",n}var i=o[t]={exports:{}};a[t][0].call(i.exports,function(e){return h(a[t][1][e]||e)},i,i.exports,s,a,o,u)}return o[t].exports}for(var f="function"==typeof l&&l,e=0;e<u.length;e++)h(u[e]);return h}({1:[function(l,t,n){(function(r){!function(e){"object"==typeof n&&void 0!==t?t.exports=e():("undefined"!=typeof window?window:void 0!==r?r:"undefined"!=typeof self?self:this).JSZip=e()}(function(){return function s(a,o,u){function h(t,e){if(!o[t]){if(!a[t]){var r="function"==typeof l&&l;if(!e&&r)return r(t,!0);if(f)return f(t,!0);var n=new Error("Cannot find module '"+t+"'");throw n.code="MODULE_NOT_FOUND",n}var i=o[t]={exports:{}};a[t][0].call(i.exports,function(e){return h(a[t][1][e]||e)},i,i.exports,s,a,o,u)}return o[t].exports}for(var f="function"==typeof l&&l,e=0;e<u.length;e++)h(u[e]);return h}({1:[function(e,t,r){"use strict";var c=e("./utils"),l=e("./support"),p="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";r.encode=function(e){for(var t,r,n,i,s,a,o,u=[],h=0,f=e.length,l=f,d="string"!==c.getTypeOf(e);h<e.length;)l=f-h,n=d?(t=e[h++],r=h<f?e[h++]:0,h<f?e[h++]:0):(t=e.charCodeAt(h++),r=h<f?e.charCodeAt(h++):0,h<f?e.charCodeAt(h++):0),i=t>>2,s=(3&t)<<4|r>>4,a=1<l?(15&r)<<2|n>>6:64,o=2<l?63&n:64,u.push(p.charAt(i)+p.charAt(s)+p.charAt(a)+p.charAt(o));return u.join("")},r.decode=function(e){var t,r,n,i,s,a,o=0,u=0;if("data:"===e.substr(0,"data:".length))throw new Error("Invalid base64 input, it looks like a data url.");var h,f=3*(e=e.replace(/[^A-Za-z0-9\+\/\=]/g,"")).length/4;if(e.charAt(e.length-1)===p.charAt(64)&&f--,e.charAt(e.length-2)===p.charAt(64)&&f--,f%1!=0)throw new Error("Invalid base64 input, bad content length.");for(h=l.uint8array?new Uint8Array(0|f):new Array(0|f);o<e.length;)t=p.indexOf(e.charAt(o++))<<2|(i=p.indexOf(e.charAt(o++)))>>4,r=(15&i)<<4|(s=p.indexOf(e.charAt(o++)))>>2,n=(3&s)<<6|(a=p.indexOf(e.charAt(o++))),h[u++]=t,64!==s&&(h[u++]=r),64!==a&&(h[u++]=n);return h}},{"./support":30,"./utils":32}],2:[function(e,t,r){"use strict";var n=e("./external"),i=e("./stream/DataWorker"),s=e("./stream/Crc32Probe"),a=e("./stream/DataLengthProbe");function o(e,t,r,n,i){this.compressedSize=e,this.uncompressedSize=t,this.crc32=r,this.compression=n,this.compressedContent=i}o.prototype={getContentWorker:function(){var e=new i(n.Promise.resolve(this.compressedContent)).pipe(this.compression.uncompressWorker()).pipe(new a("data_length")),t=this;return e.on("end",function(){if(this.streamInfo.data_length!==t.uncompressedSize)throw new Error("Bug : uncompressed data size mismatch")}),e},getCompressedWorker:function(){return new i(n.Promise.resolve(this.compressedContent)).withStreamInfo("compressedSize",this.compressedSize).withStreamInfo("uncompressedSize",this.uncompressedSize).withStreamInfo("crc32",this.crc32).withStreamInfo("compression",this.compression)}},o.createWorkerFrom=function(e,t,r){return e.pipe(new s).pipe(new a("uncompressedSize")).pipe(t.compressWorker(r)).pipe(new a("compressedSize")).withStreamInfo("compression",t)},t.exports=o},{"./external":6,"./stream/Crc32Probe":25,"./stream/DataLengthProbe":26,"./stream/DataWorker":27}],3:[function(e,t,r){"use strict";var n=e("./stream/GenericWorker");r.STORE={magic:"\0\0",compressWorker:function(e){return new n("STORE compression")},uncompressWorker:function(){return new n("STORE decompression")}},r.DEFLATE=e("./flate")},{"./flate":7,"./stream/GenericWorker":28}],4:[function(e,t,r){"use strict";var n=e("./utils"),a=function(){for(var e,t=[],r=0;r<256;r++){e=r;for(var n=0;n<8;n++)e=1&e?3988292384^e>>>1:e>>>1;t[r]=e}return t}();t.exports=function(e,t){return void 0!==e&&e.length?"string"!==n.getTypeOf(e)?function(e,t,r){var n=a,i=0+r;e^=-1;for(var s=0;s<i;s++)e=e>>>8^n[255&(e^t[s])];return-1^e}(0|t,e,e.length):function(e,t,r){var n=a,i=0+r;e^=-1;for(var s=0;s<i;s++)e=e>>>8^n[255&(e^t.charCodeAt(s))];return-1^e}(0|t,e,e.length):0}},{"./utils":32}],5:[function(e,t,r){"use strict";r.base64=!1,r.binary=!1,r.dir=!1,r.createFolders=!0,r.date=null,r.compression=null,r.compressionOptions=null,r.comment=null,r.unixPermissions=null,r.dosPermissions=null},{}],6:[function(e,t,r){"use strict";var n;n="undefined"!=typeof Promise?Promise:e("lie"),t.exports={Promise:n}},{lie:37}],7:[function(e,t,r){"use strict";var n="undefined"!=typeof Uint8Array&&"undefined"!=typeof Uint16Array&&"undefined"!=typeof Uint32Array,i=e("pako"),s=e("./utils"),a=e("./stream/GenericWorker"),o=n?"uint8array":"array";function u(e,t){a.call(this,"FlateWorker/"+e),this._pako=null,this._pakoAction=e,this._pakoOptions=t,this.meta={}}r.magic="\b\0",s.inherits(u,a),u.prototype.processChunk=function(e){this.meta=e.meta,null===this._pako&&this._createPako(),this._pako.push(s.transformTo(o,e.data),!1)},u.prototype.flush=function(){a.prototype.flush.call(this),null===this._pako&&this._createPako(),this._pako.push([],!0)},u.prototype.cleanUp=function(){a.prototype.cleanUp.call(this),this._pako=null},u.prototype._createPako=function(){this._pako=new i[this._pakoAction]({raw:!0,level:this._pakoOptions.level||-1});var t=this;this._pako.onData=function(e){t.push({data:e,meta:t.meta})}},r.compressWorker=function(e){return new u("Deflate",e)},r.uncompressWorker=function(){return new u("Inflate",{})}},{"./stream/GenericWorker":28,"./utils":32,pako:38}],8:[function(e,t,r){"use strict";function I(e,t){var r,n="";for(r=0;r<t;r++)n+=String.fromCharCode(255&e),e>>>=8;return n}function i(e,t,r,n,i,s){var a,o,u=e.file,h=e.compression,f=s!==B.utf8encode,l=O.transformTo("string",s(u.name)),d=O.transformTo("string",B.utf8encode(u.name)),c=u.comment,p=O.transformTo("string",s(c)),m=O.transformTo("string",B.utf8encode(c)),_=d.length!==u.name.length,g=m.length!==c.length,v="",b="",w="",y=u.dir,k=u.date,x={crc32:0,compressedSize:0,uncompressedSize:0};t&&!r||(x.crc32=e.crc32,x.compressedSize=e.compressedSize,x.uncompressedSize=e.uncompressedSize);var S=0;t&&(S|=8),f||!_&&!g||(S|=2048);var z,E=0,C=0;y&&(E|=16),"UNIX"===i?(C=798,E|=((z=u.unixPermissions)||(z=y?16893:33204),(65535&z)<<16)):(C=20,E|=63&(u.dosPermissions||0)),a=k.getUTCHours(),a<<=6,a|=k.getUTCMinutes(),a<<=5,a|=k.getUTCSeconds()/2,o=k.getUTCFullYear()-1980,o<<=4,o|=k.getUTCMonth()+1,o<<=5,o|=k.getUTCDate(),_&&(v+="up"+I((b=I(1,1)+I(T(l),4)+d).length,2)+b),g&&(v+="uc"+I((w=I(1,1)+I(T(p),4)+m).length,2)+w);var A="";return A+="\n\0",A+=I(S,2),A+=h.magic,A+=I(a,2),A+=I(o,2),A+=I(x.crc32,4),A+=I(x.compressedSize,4),A+=I(x.uncompressedSize,4),A+=I(l.length,2),A+=I(v.length,2),{fileRecord:R.LOCAL_FILE_HEADER+A+l+v,dirRecord:R.CENTRAL_FILE_HEADER+I(C,2)+A+I(p.length,2)+"\0\0\0\0"+I(E,4)+I(n,4)+l+v+p}}var O=e("../utils"),s=e("../stream/GenericWorker"),B=e("../utf8"),T=e("../crc32"),R=e("../signature");function n(e,t,r,n){s.call(this,"ZipFileWorker"),this.bytesWritten=0,this.zipComment=t,this.zipPlatform=r,this.encodeFileName=n,this.streamFiles=e,this.accumulate=!1,this.contentBuffer=[],this.dirRecords=[],this.currentSourceOffset=0,this.entriesCount=0,this.currentFile=null,this._sources=[]}O.inherits(n,s),n.prototype.push=function(e){var t=e.meta.percent||0,r=this.entriesCount,n=this._sources.length;this.accumulate?this.contentBuffer.push(e):(this.bytesWritten+=e.data.length,s.prototype.push.call(this,{data:e.data,meta:{currentFile:this.currentFile,percent:r?(t+100*(r-n-1))/r:100}}))},n.prototype.openedSource=function(e){this.currentSourceOffset=this.bytesWritten,this.currentFile=e.file.name;var t=this.streamFiles&&!e.file.dir;if(t){var r=i(e,t,!1,this.currentSourceOffset,this.zipPlatform,this.encodeFileName);this.push({data:r.fileRecord,meta:{percent:0}})}else this.accumulate=!0},n.prototype.closedSource=function(e){this.accumulate=!1;var t,r=this.streamFiles&&!e.file.dir,n=i(e,r,!0,this.currentSourceOffset,this.zipPlatform,this.encodeFileName);if(this.dirRecords.push(n.dirRecord),r)this.push({data:(t=e,R.DATA_DESCRIPTOR+I(t.crc32,4)+I(t.compressedSize,4)+I(t.uncompressedSize,4)),meta:{percent:100}});else for(this.push({data:n.fileRecord,meta:{percent:0}});this.contentBuffer.length;)this.push(this.contentBuffer.shift());this.currentFile=null},n.prototype.flush=function(){for(var e=this.bytesWritten,t=0;t<this.dirRecords.length;t++)this.push({data:this.dirRecords[t],meta:{percent:100}});var r,n,i,s,a,o,u=this.bytesWritten-e,h=(r=this.dirRecords.length,n=u,i=e,s=this.zipComment,a=this.encodeFileName,o=O.transformTo("string",a(s)),R.CENTRAL_DIRECTORY_END+"\0\0\0\0"+I(r,2)+I(r,2)+I(n,4)+I(i,4)+I(o.length,2)+o);this.push({data:h,meta:{percent:100}})},n.prototype.prepareNextSource=function(){this.previous=this._sources.shift(),this.openedSource(this.previous.streamInfo),this.isPaused?this.previous.pause():this.previous.resume()},n.prototype.registerPrevious=function(e){this._sources.push(e);var t=this;return e.on("data",function(e){t.processChunk(e)}),e.on("end",function(){t.closedSource(t.previous.streamInfo),t._sources.length?t.prepareNextSource():t.end()}),e.on("error",function(e){t.error(e)}),this},n.prototype.resume=function(){return!!s.prototype.resume.call(this)&&(!this.previous&&this._sources.length?(this.prepareNextSource(),!0):this.previous||this._sources.length||this.generatedError?void 0:(this.end(),!0))},n.prototype.error=function(e){var t=this._sources;if(!s.prototype.error.call(this,e))return!1;for(var r=0;r<t.length;r++)try{t[r].error(e)}catch(e){}return!0},n.prototype.lock=function(){s.prototype.lock.call(this);for(var e=this._sources,t=0;t<e.length;t++)e[t].lock()},t.exports=n},{"../crc32":4,"../signature":23,"../stream/GenericWorker":28,"../utf8":31,"../utils":32}],9:[function(e,t,r){"use strict";var h=e("../compressions"),n=e("./ZipFileWorker");r.generateWorker=function(e,a,t){var o=new n(a.streamFiles,t,a.platform,a.encodeFileName),u=0;try{e.forEach(function(e,t){u++;var r=function(e,t){var r=e||t,n=h[r];if(!n)throw new Error(r+" is not a valid compression method !");return n}(t.options.compression,a.compression),n=t.options.compressionOptions||a.compressionOptions||{},i=t.dir,s=t.date;t._compressWorker(r,n).withStreamInfo("file",{name:e,dir:i,date:s,comment:t.comment||"",unixPermissions:t.unixPermissions,dosPermissions:t.dosPermissions}).pipe(o)}),o.entriesCount=u}catch(e){o.error(e)}return o}},{"../compressions":3,"./ZipFileWorker":8}],10:[function(e,t,r){"use strict";function n(){if(!(this instanceof n))return new n;if(arguments.length)throw new Error("The constructor with parameters has been removed in JSZip 3.0, please check the upgrade guide.");this.files={},this.comment=null,this.root="",this.clone=function(){var e=new n;for(var t in this)"function"!=typeof this[t]&&(e[t]=this[t]);return e}}(n.prototype=e("./object")).loadAsync=e("./load"),n.support=e("./support"),n.defaults=e("./defaults"),n.version="3.5.0",n.loadAsync=function(e,t){return(new n).loadAsync(e,t)},n.external=e("./external"),t.exports=n},{"./defaults":5,"./external":6,"./load":11,"./object":15,"./support":30}],11:[function(e,t,r){"use strict";var n=e("./utils"),i=e("./external"),o=e("./utf8"),u=e("./zipEntries"),s=e("./stream/Crc32Probe"),h=e("./nodejsUtils");function f(n){return new i.Promise(function(e,t){var r=n.decompressed.getContentWorker().pipe(new s);r.on("error",function(e){t(e)}).on("end",function(){r.streamInfo.crc32!==n.decompressed.crc32?t(new Error("Corrupted zip : CRC32 mismatch")):e()}).resume()})}t.exports=function(e,s){var a=this;return s=n.extend(s||{},{base64:!1,checkCRC32:!1,optimizedBinaryString:!1,createFolders:!1,decodeFileName:o.utf8decode}),h.isNode&&h.isStream(e)?i.Promise.reject(new Error("JSZip can't accept a stream when loading a zip file.")):n.prepareContent("the loaded zip file",e,!0,s.optimizedBinaryString,s.base64).then(function(e){var t=new u(s);return t.load(e),t}).then(function(e){var t=[i.Promise.resolve(e)],r=e.files;if(s.checkCRC32)for(var n=0;n<r.length;n++)t.push(f(r[n]));return i.Promise.all(t)}).then(function(e){for(var t=e.shift(),r=t.files,n=0;n<r.length;n++){var i=r[n];a.file(i.fileNameStr,i.decompressed,{binary:!0,optimizedBinaryString:!0,date:i.date,dir:i.dir,comment:i.fileCommentStr.length?i.fileCommentStr:null,unixPermissions:i.unixPermissions,dosPermissions:i.dosPermissions,createFolders:s.createFolders})}return t.zipComment.length&&(a.comment=t.zipComment),a})}},{"./external":6,"./nodejsUtils":14,"./stream/Crc32Probe":25,"./utf8":31,"./utils":32,"./zipEntries":33}],12:[function(e,t,r){"use strict";var n=e("../utils"),i=e("../stream/GenericWorker");function s(e,t){i.call(this,"Nodejs stream input adapter for "+e),this._upstreamEnded=!1,this._bindStream(t)}n.inherits(s,i),s.prototype._bindStream=function(e){var t=this;(this._stream=e).pause(),e.on("data",function(e){t.push({data:e,meta:{percent:0}})}).on("error",function(e){t.isPaused?this.generatedError=e:t.error(e)}).on("end",function(){t.isPaused?t._upstreamEnded=!0:t.end()})},s.prototype.pause=function(){return!!i.prototype.pause.call(this)&&(this._stream.pause(),!0)},s.prototype.resume=function(){return!!i.prototype.resume.call(this)&&(this._upstreamEnded?this.end():this._stream.resume(),!0)},t.exports=s},{"../stream/GenericWorker":28,"../utils":32}],13:[function(e,t,r){"use strict";var i=e("readable-stream").Readable;function n(e,t,r){i.call(this,t),this._helper=e;var n=this;e.on("data",function(e,t){n.push(e)||n._helper.pause(),r&&r(t)}).on("error",function(e){n.emit("error",e)}).on("end",function(){n.push(null)})}e("../utils").inherits(n,i),n.prototype._read=function(){this._helper.resume()},t.exports=n},{"../utils":32,"readable-stream":16}],14:[function(e,t,r){"use strict";t.exports={isNode:"undefined"!=typeof Buffer,newBufferFrom:function(e,t){if(Buffer.from&&Buffer.from!==Uint8Array.from)return Buffer.from(e,t);if("number"==typeof e)throw new Error('The "data" argument must not be a number');return new Buffer(e,t)},allocBuffer:function(e){if(Buffer.alloc)return Buffer.alloc(e);var t=new Buffer(e);return t.fill(0),t},isBuffer:function(e){return Buffer.isBuffer(e)},isStream:function(e){return e&&"function"==typeof e.on&&"function"==typeof e.pause&&"function"==typeof e.resume}}},{}],15:[function(e,t,r){"use strict";function s(e,t,r){var n,i=f.getTypeOf(t),s=f.extend(r||{},d);s.date=s.date||new Date,null!==s.compression&&(s.compression=s.compression.toUpperCase()),"string"==typeof s.unixPermissions&&(s.unixPermissions=parseInt(s.unixPermissions,8)),s.unixPermissions&&16384&s.unixPermissions&&(s.dir=!0),s.dosPermissions&&16&s.dosPermissions&&(s.dir=!0),s.dir&&(e=h(e)),s.createFolders&&(n=function(e){"/"===e.slice(-1)&&(e=e.substring(0,e.length-1));var t=e.lastIndexOf("/");return 0<t?e.substring(0,t):""}(e))&&g.call(this,n,!0);var a,o="string"===i&&!1===s.binary&&!1===s.base64;r&&void 0!==r.binary||(s.binary=!o),(t instanceof c&&0===t.uncompressedSize||s.dir||!t||0===t.length)&&(s.base64=!1,s.binary=!0,t="",s.compression="STORE",i="string"),a=t instanceof c||t instanceof l?t:m.isNode&&m.isStream(t)?new _(e,t):f.prepareContent(e,t,s.binary,s.optimizedBinaryString,s.base64);var u=new p(e,a,s);this.files[e]=u}function h(e){return"/"!==e.slice(-1)&&(e+="/"),e}var i=e("./utf8"),f=e("./utils"),l=e("./stream/GenericWorker"),a=e("./stream/StreamHelper"),d=e("./defaults"),c=e("./compressedObject"),p=e("./zipObject"),o=e("./generate"),m=e("./nodejsUtils"),_=e("./nodejs/NodejsStreamInputAdapter"),g=function(e,t){return t=void 0!==t?t:d.createFolders,e=h(e),this.files[e]||s.call(this,e,null,{dir:!0,createFolders:t}),this.files[e]};function u(e){return"[object RegExp]"===Object.prototype.toString.call(e)}var n={load:function(){throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.")},forEach:function(e){var t,r,n;for(t in this.files)this.files.hasOwnProperty(t)&&(n=this.files[t],(r=t.slice(this.root.length,t.length))&&t.slice(0,this.root.length)===this.root&&e(r,n))},filter:function(r){var n=[];return this.forEach(function(e,t){r(e,t)&&n.push(t)}),n},file:function(e,t,r){if(1!==arguments.length)return e=this.root+e,s.call(this,e,t,r),this;if(u(e)){var n=e;return this.filter(function(e,t){return!t.dir&&n.test(e)})}var i=this.files[this.root+e];return i&&!i.dir?i:null},folder:function(r){if(!r)return this;if(u(r))return this.filter(function(e,t){return t.dir&&r.test(e)});var e=this.root+r,t=g.call(this,e),n=this.clone();return n.root=t.name,n},remove:function(r){r=this.root+r;var e=this.files[r];if(e||("/"!==r.slice(-1)&&(r+="/"),e=this.files[r]),e&&!e.dir)delete this.files[r];else for(var t=this.filter(function(e,t){return t.name.slice(0,r.length)===r}),n=0;n<t.length;n++)delete this.files[t[n].name];return this},generate:function(e){throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.")},generateInternalStream:function(e){var t,r={};try{if((r=f.extend(e||{},{streamFiles:!1,compression:"STORE",compressionOptions:null,type:"",platform:"DOS",comment:null,mimeType:"application/zip",encodeFileName:i.utf8encode})).type=r.type.toLowerCase(),r.compression=r.compression.toUpperCase(),"binarystring"===r.type&&(r.type="string"),!r.type)throw new Error("No output type specified.");f.checkSupport(r.type),"darwin"!==r.platform&&"freebsd"!==r.platform&&"linux"!==r.platform&&"sunos"!==r.platform||(r.platform="UNIX"),"win32"===r.platform&&(r.platform="DOS");var n=r.comment||this.comment||"";t=o.generateWorker(this,r,n)}catch(e){(t=new l("error")).error(e)}return new a(t,r.type||"string",r.mimeType)},generateAsync:function(e,t){return this.generateInternalStream(e).accumulate(t)},generateNodeStream:function(e,t){return(e=e||{}).type||(e.type="nodebuffer"),this.generateInternalStream(e).toNodejsStream(t)}};t.exports=n},{"./compressedObject":2,"./defaults":5,"./generate":9,"./nodejs/NodejsStreamInputAdapter":12,"./nodejsUtils":14,"./stream/GenericWorker":28,"./stream/StreamHelper":29,"./utf8":31,"./utils":32,"./zipObject":35}],16:[function(e,t,r){t.exports=e("stream")},{stream:void 0}],17:[function(e,t,r){"use strict";var n=e("./DataReader");function i(e){n.call(this,e);for(var t=0;t<this.data.length;t++)e[t]=255&e[t]}e("../utils").inherits(i,n),i.prototype.byteAt=function(e){return this.data[this.zero+e]},i.prototype.lastIndexOfSignature=function(e){for(var t=e.charCodeAt(0),r=e.charCodeAt(1),n=e.charCodeAt(2),i=e.charCodeAt(3),s=this.length-4;0<=s;--s)if(this.data[s]===t&&this.data[s+1]===r&&this.data[s+2]===n&&this.data[s+3]===i)return s-this.zero;return-1},i.prototype.readAndCheckSignature=function(e){var t=e.charCodeAt(0),r=e.charCodeAt(1),n=e.charCodeAt(2),i=e.charCodeAt(3),s=this.readData(4);return t===s[0]&&r===s[1]&&n===s[2]&&i===s[3]},i.prototype.readData=function(e){if(this.checkOffset(e),0===e)return[];var t=this.data.slice(this.zero+this.index,this.zero+this.index+e);return this.index+=e,t},t.exports=i},{"../utils":32,"./DataReader":18}],18:[function(e,t,r){"use strict";var n=e("../utils");function i(e){this.data=e,this.length=e.length,this.index=0,this.zero=0}i.prototype={checkOffset:function(e){this.checkIndex(this.index+e)},checkIndex:function(e){if(this.length<this.zero+e||e<0)throw new Error("End of data reached (data length = "+this.length+", asked index = "+e+"). Corrupted zip ?")},setIndex:function(e){this.checkIndex(e),this.index=e},skip:function(e){this.setIndex(this.index+e)},byteAt:function(e){},readInt:function(e){var t,r=0;for(this.checkOffset(e),t=this.index+e-1;t>=this.index;t--)r=(r<<8)+this.byteAt(t);return this.index+=e,r},readString:function(e){return n.transformTo("string",this.readData(e))},readData:function(e){},lastIndexOfSignature:function(e){},readAndCheckSignature:function(e){},readDate:function(){var e=this.readInt(4);return new Date(Date.UTC(1980+(e>>25&127),(e>>21&15)-1,e>>16&31,e>>11&31,e>>5&63,(31&e)<<1))}},t.exports=i},{"../utils":32}],19:[function(e,t,r){"use strict";var n=e("./Uint8ArrayReader");function i(e){n.call(this,e)}e("../utils").inherits(i,n),i.prototype.readData=function(e){this.checkOffset(e);var t=this.data.slice(this.zero+this.index,this.zero+this.index+e);return this.index+=e,t},t.exports=i},{"../utils":32,"./Uint8ArrayReader":21}],20:[function(e,t,r){"use strict";var n=e("./DataReader");function i(e){n.call(this,e)}e("../utils").inherits(i,n),i.prototype.byteAt=function(e){return this.data.charCodeAt(this.zero+e)},i.prototype.lastIndexOfSignature=function(e){return this.data.lastIndexOf(e)-this.zero},i.prototype.readAndCheckSignature=function(e){return e===this.readData(4)},i.prototype.readData=function(e){this.checkOffset(e);var t=this.data.slice(this.zero+this.index,this.zero+this.index+e);return this.index+=e,t},t.exports=i},{"../utils":32,"./DataReader":18}],21:[function(e,t,r){"use strict";var n=e("./ArrayReader");function i(e){n.call(this,e)}e("../utils").inherits(i,n),i.prototype.readData=function(e){if(this.checkOffset(e),0===e)return new Uint8Array(0);var t=this.data.subarray(this.zero+this.index,this.zero+this.index+e);return this.index+=e,t},t.exports=i},{"../utils":32,"./ArrayReader":17}],22:[function(e,t,r){"use strict";var n=e("../utils"),i=e("../support"),s=e("./ArrayReader"),a=e("./StringReader"),o=e("./NodeBufferReader"),u=e("./Uint8ArrayReader");t.exports=function(e){var t=n.getTypeOf(e);return n.checkSupport(t),"string"!==t||i.uint8array?"nodebuffer"===t?new o(e):i.uint8array?new u(n.transformTo("uint8array",e)):new s(n.transformTo("array",e)):new a(e)}},{"../support":30,"../utils":32,"./ArrayReader":17,"./NodeBufferReader":19,"./StringReader":20,"./Uint8ArrayReader":21}],23:[function(e,t,r){"use strict";r.LOCAL_FILE_HEADER="PK",r.CENTRAL_FILE_HEADER="PK",r.CENTRAL_DIRECTORY_END="PK",r.ZIP64_CENTRAL_DIRECTORY_LOCATOR="PK",r.ZIP64_CENTRAL_DIRECTORY_END="PK",r.DATA_DESCRIPTOR="PK\b"},{}],24:[function(e,t,r){"use strict";var n=e("./GenericWorker"),i=e("../utils");function s(e){n.call(this,"ConvertWorker to "+e),this.destType=e}i.inherits(s,n),s.prototype.processChunk=function(e){this.push({data:i.transformTo(this.destType,e.data),meta:e.meta})},t.exports=s},{"../utils":32,"./GenericWorker":28}],25:[function(e,t,r){"use strict";var n=e("./GenericWorker"),i=e("../crc32");function s(){n.call(this,"Crc32Probe"),this.withStreamInfo("crc32",0)}e("../utils").inherits(s,n),s.prototype.processChunk=function(e){this.streamInfo.crc32=i(e.data,this.streamInfo.crc32||0),this.push(e)},t.exports=s},{"../crc32":4,"../utils":32,"./GenericWorker":28}],26:[function(e,t,r){"use strict";var n=e("../utils"),i=e("./GenericWorker");function s(e){i.call(this,"DataLengthProbe for "+e),this.propName=e,this.withStreamInfo(e,0)}n.inherits(s,i),s.prototype.processChunk=function(e){if(e){var t=this.streamInfo[this.propName]||0;this.streamInfo[this.propName]=t+e.data.length}i.prototype.processChunk.call(this,e)},t.exports=s},{"../utils":32,"./GenericWorker":28}],27:[function(e,t,r){"use strict";var n=e("../utils"),i=e("./GenericWorker");function s(e){i.call(this,"DataWorker");var t=this;this.dataIsReady=!1,this.index=0,this.max=0,this.data=null,this.type="",this._tickScheduled=!1,e.then(function(e){t.dataIsReady=!0,t.data=e,t.max=e&&e.length||0,t.type=n.getTypeOf(e),t.isPaused||t._tickAndRepeat()},function(e){t.error(e)})}n.inherits(s,i),s.prototype.cleanUp=function(){i.prototype.cleanUp.call(this),this.data=null},s.prototype.resume=function(){return!!i.prototype.resume.call(this)&&(!this._tickScheduled&&this.dataIsReady&&(this._tickScheduled=!0,n.delay(this._tickAndRepeat,[],this)),!0)},s.prototype._tickAndRepeat=function(){this._tickScheduled=!1,this.isPaused||this.isFinished||(this._tick(),this.isFinished||(n.delay(this._tickAndRepeat,[],this),this._tickScheduled=!0))},s.prototype._tick=function(){if(this.isPaused||this.isFinished)return!1;var e=null,t=Math.min(this.max,this.index+16384);if(this.index>=this.max)return this.end();switch(this.type){case"string":e=this.data.substring(this.index,t);break;case"uint8array":e=this.data.subarray(this.index,t);break;case"array":case"nodebuffer":e=this.data.slice(this.index,t)}return this.index=t,this.push({data:e,meta:{percent:this.max?this.index/this.max*100:0}})},t.exports=s},{"../utils":32,"./GenericWorker":28}],28:[function(e,t,r){"use strict";function n(e){this.name=e||"default",this.streamInfo={},this.generatedError=null,this.extraStreamInfo={},this.isPaused=!0,this.isFinished=!1,this.isLocked=!1,this._listeners={data:[],end:[],error:[]},this.previous=null}n.prototype={push:function(e){this.emit("data",e)},end:function(){if(this.isFinished)return!1;this.flush();try{this.emit("end"),this.cleanUp(),this.isFinished=!0}catch(e){this.emit("error",e)}return!0},error:function(e){return!this.isFinished&&(this.isPaused?this.generatedError=e:(this.isFinished=!0,this.emit("error",e),this.previous&&this.previous.error(e),this.cleanUp()),!0)},on:function(e,t){return this._listeners[e].push(t),this},cleanUp:function(){this.streamInfo=this.generatedError=this.extraStreamInfo=null,this._listeners=[]},emit:function(e,t){if(this._listeners[e])for(var r=0;r<this._listeners[e].length;r++)this._listeners[e][r].call(this,t)},pipe:function(e){return e.registerPrevious(this)},registerPrevious:function(e){if(this.isLocked)throw new Error("The stream '"+this+"' has already been used.");this.streamInfo=e.streamInfo,this.mergeStreamInfo(),this.previous=e;var t=this;return e.on("data",function(e){t.processChunk(e)}),e.on("end",function(){t.end()}),e.on("error",function(e){t.error(e)}),this},pause:function(){return!this.isPaused&&!this.isFinished&&(this.isPaused=!0,this.previous&&this.previous.pause(),!0)},resume:function(){if(!this.isPaused||this.isFinished)return!1;var e=this.isPaused=!1;return this.generatedError&&(this.error(this.generatedError),e=!0),this.previous&&this.previous.resume(),!e},flush:function(){},processChunk:function(e){this.push(e)},withStreamInfo:function(e,t){return this.extraStreamInfo[e]=t,this.mergeStreamInfo(),this},mergeStreamInfo:function(){for(var e in this.extraStreamInfo)this.extraStreamInfo.hasOwnProperty(e)&&(this.streamInfo[e]=this.extraStreamInfo[e])},lock:function(){if(this.isLocked)throw new Error("The stream '"+this+"' has already been used.");this.isLocked=!0,this.previous&&this.previous.lock()},toString:function(){var e="Worker "+this.name;return this.previous?this.previous+" -> "+e:e}},t.exports=n},{}],29:[function(e,t,r){"use strict";var h=e("../utils"),i=e("./ConvertWorker"),s=e("./GenericWorker"),f=e("../base64"),n=e("../support"),a=e("../external"),o=null;if(n.nodestream)try{o=e("../nodejs/NodejsStreamOutputAdapter")}catch(e){}function u(e,t,r){var n=t;switch(t){case"blob":case"arraybuffer":n="uint8array";break;case"base64":n="string"}try{this._internalType=n,this._outputType=t,this._mimeType=r,h.checkSupport(n),this._worker=e.pipe(new i(n)),e.lock()}catch(e){this._worker=new s("error"),this._worker.error(e)}}u.prototype={accumulate:function(e){return o=this,u=e,new a.Promise(function(t,r){var n=[],i=o._internalType,s=o._outputType,a=o._mimeType;o.on("data",function(e,t){n.push(e),u&&u(t)}).on("error",function(e){n=[],r(e)}).on("end",function(){try{var e=function(e,t,r){switch(e){case"blob":return h.newBlob(h.transformTo("arraybuffer",t),r);case"base64":return f.encode(t);default:return h.transformTo(e,t)}}(s,function(e,t){var r,n=0,i=null,s=0;for(r=0;r<t.length;r++)s+=t[r].length;switch(e){case"string":return t.join("");case"array":return Array.prototype.concat.apply([],t);case"uint8array":for(i=new Uint8Array(s),r=0;r<t.length;r++)i.set(t[r],n),n+=t[r].length;return i;case"nodebuffer":return Buffer.concat(t);default:throw new Error("concat : unsupported type '"+e+"'")}}(i,n),a);t(e)}catch(e){r(e)}n=[]}).resume()});var o,u},on:function(e,t){var r=this;return"data"===e?this._worker.on(e,function(e){t.call(r,e.data,e.meta)}):this._worker.on(e,function(){h.delay(t,arguments,r)}),this},resume:function(){return h.delay(this._worker.resume,[],this._worker),this},pause:function(){return this._worker.pause(),this},toNodejsStream:function(e){if(h.checkSupport("nodestream"),"nodebuffer"!==this._outputType)throw new Error(this._outputType+" is not supported by this method");return new o(this,{objectMode:"nodebuffer"!==this._outputType},e)}},t.exports=u},{"../base64":1,"../external":6,"../nodejs/NodejsStreamOutputAdapter":13,"../support":30,"../utils":32,"./ConvertWorker":24,"./GenericWorker":28}],30:[function(e,t,r){"use strict";if(r.base64=!0,r.array=!0,r.string=!0,r.arraybuffer="undefined"!=typeof ArrayBuffer&&"undefined"!=typeof Uint8Array,r.nodebuffer="undefined"!=typeof Buffer,r.uint8array="undefined"!=typeof Uint8Array,"undefined"==typeof ArrayBuffer)r.blob=!1;else{var n=new ArrayBuffer(0);try{r.blob=0===new Blob([n],{type:"application/zip"}).size}catch(e){try{var i=new(self.BlobBuilder||self.WebKitBlobBuilder||self.MozBlobBuilder||self.MSBlobBuilder);i.append(n),r.blob=0===i.getBlob("application/zip").size}catch(e){r.blob=!1}}}try{r.nodestream=!!e("readable-stream").Readable}catch(e){r.nodestream=!1}},{"readable-stream":16}],31:[function(e,t,s){"use strict";for(var o=e("./utils"),u=e("./support"),r=e("./nodejsUtils"),n=e("./stream/GenericWorker"),h=new Array(256),i=0;i<256;i++)h[i]=252<=i?6:248<=i?5:240<=i?4:224<=i?3:192<=i?2:1;function a(){n.call(this,"utf-8 decode"),this.leftOver=null}function f(){n.call(this,"utf-8 encode")}h[254]=h[254]=1,s.utf8encode=function(e){return u.nodebuffer?r.newBufferFrom(e,"utf-8"):function(e){var t,r,n,i,s,a=e.length,o=0;for(i=0;i<a;i++)55296==(64512&(r=e.charCodeAt(i)))&&i+1<a&&56320==(64512&(n=e.charCodeAt(i+1)))&&(r=65536+(r-55296<<10)+(n-56320),i++),o+=r<128?1:r<2048?2:r<65536?3:4;for(t=u.uint8array?new Uint8Array(o):new Array(o),i=s=0;s<o;i++)55296==(64512&(r=e.charCodeAt(i)))&&i+1<a&&56320==(64512&(n=e.charCodeAt(i+1)))&&(r=65536+(r-55296<<10)+(n-56320),i++),r<128?t[s++]=r:(r<2048?t[s++]=192|r>>>6:(r<65536?t[s++]=224|r>>>12:(t[s++]=240|r>>>18,t[s++]=128|r>>>12&63),t[s++]=128|r>>>6&63),t[s++]=128|63&r);return t}(e)},s.utf8decode=function(e){return u.nodebuffer?o.transformTo("nodebuffer",e).toString("utf-8"):function(e){var t,r,n,i,s=e.length,a=new Array(2*s);for(t=r=0;t<s;)if((n=e[t++])<128)a[r++]=n;else if(4<(i=h[n]))a[r++]=65533,t+=i-1;else{for(n&=2===i?31:3===i?15:7;1<i&&t<s;)n=n<<6|63&e[t++],i--;1<i?a[r++]=65533:n<65536?a[r++]=n:(n-=65536,a[r++]=55296|n>>10&1023,a[r++]=56320|1023&n)}return a.length!==r&&(a.subarray?a=a.subarray(0,r):a.length=r),o.applyFromCharCode(a)}(e=o.transformTo(u.uint8array?"uint8array":"array",e))},o.inherits(a,n),a.prototype.processChunk=function(e){var t=o.transformTo(u.uint8array?"uint8array":"array",e.data);if(this.leftOver&&this.leftOver.length){if(u.uint8array){var r=t;(t=new Uint8Array(r.length+this.leftOver.length)).set(this.leftOver,0),t.set(r,this.leftOver.length)}else t=this.leftOver.concat(t);this.leftOver=null}var n=function(e,t){var r;for((t=t||e.length)>e.length&&(t=e.length),r=t-1;0<=r&&128==(192&e[r]);)r--;return r<0?t:0===r?t:r+h[e[r]]>t?r:t}(t),i=t;n!==t.length&&(u.uint8array?(i=t.subarray(0,n),this.leftOver=t.subarray(n,t.length)):(i=t.slice(0,n),this.leftOver=t.slice(n,t.length))),this.push({data:s.utf8decode(i),meta:e.meta})},a.prototype.flush=function(){this.leftOver&&this.leftOver.length&&(this.push({data:s.utf8decode(this.leftOver),meta:{}}),this.leftOver=null)},s.Utf8DecodeWorker=a,o.inherits(f,n),f.prototype.processChunk=function(e){this.push({data:s.utf8encode(e.data),meta:e.meta})},s.Utf8EncodeWorker=f},{"./nodejsUtils":14,"./stream/GenericWorker":28,"./support":30,"./utils":32}],32:[function(e,t,o){"use strict";var u=e("./support"),h=e("./base64"),r=e("./nodejsUtils"),n=e("set-immediate-shim"),f=e("./external");function i(e){return e}function l(e,t){for(var r=0;r<e.length;++r)t[r]=255&e.charCodeAt(r);return t}o.newBlob=function(t,r){o.checkSupport("blob");try{return new Blob([t],{type:r})}catch(e){try{var n=new(self.BlobBuilder||self.WebKitBlobBuilder||self.MozBlobBuilder||self.MSBlobBuilder);return n.append(t),n.getBlob(r)}catch(e){throw new Error("Bug : can't construct the Blob.")}}};var s={stringifyByChunk:function(e,t,r){var n=[],i=0,s=e.length;if(s<=r)return String.fromCharCode.apply(null,e);for(;i<s;)"array"===t||"nodebuffer"===t?n.push(String.fromCharCode.apply(null,e.slice(i,Math.min(i+r,s)))):n.push(String.fromCharCode.apply(null,e.subarray(i,Math.min(i+r,s)))),i+=r;return n.join("")},stringifyByChar:function(e){for(var t="",r=0;r<e.length;r++)t+=String.fromCharCode(e[r]);return t},applyCanBeUsed:{uint8array:function(){try{return u.uint8array&&1===String.fromCharCode.apply(null,new Uint8Array(1)).length}catch(e){return!1}}(),nodebuffer:function(){try{return u.nodebuffer&&1===String.fromCharCode.apply(null,r.allocBuffer(1)).length}catch(e){return!1}}()}};function a(e){var t=65536,r=o.getTypeOf(e),n=!0;if("uint8array"===r?n=s.applyCanBeUsed.uint8array:"nodebuffer"===r&&(n=s.applyCanBeUsed.nodebuffer),n)for(;1<t;)try{return s.stringifyByChunk(e,r,t)}catch(e){t=Math.floor(t/2)}return s.stringifyByChar(e)}function d(e,t){for(var r=0;r<e.length;r++)t[r]=e[r];return t}o.applyFromCharCode=a;var c={};c.string={string:i,array:function(e){return l(e,new Array(e.length))},arraybuffer:function(e){return c.string.uint8array(e).buffer},uint8array:function(e){return l(e,new Uint8Array(e.length))},nodebuffer:function(e){return l(e,r.allocBuffer(e.length))}},c.array={string:a,array:i,arraybuffer:function(e){return new Uint8Array(e).buffer},uint8array:function(e){return new Uint8Array(e)},nodebuffer:function(e){return r.newBufferFrom(e)}},c.arraybuffer={string:function(e){return a(new Uint8Array(e))},array:function(e){return d(new Uint8Array(e),new Array(e.byteLength))},arraybuffer:i,uint8array:function(e){return new Uint8Array(e)},nodebuffer:function(e){return r.newBufferFrom(new Uint8Array(e))}},c.uint8array={string:a,array:function(e){return d(e,new Array(e.length))},arraybuffer:function(e){return e.buffer},uint8array:i,nodebuffer:function(e){return r.newBufferFrom(e)}},c.nodebuffer={string:a,array:function(e){return d(e,new Array(e.length))},arraybuffer:function(e){return c.nodebuffer.uint8array(e).buffer},uint8array:function(e){return d(e,new Uint8Array(e.length))},nodebuffer:i},o.transformTo=function(e,t){if(t=t||"",!e)return t;o.checkSupport(e);var r=o.getTypeOf(t);return c[r][e](t)},o.getTypeOf=function(e){return"string"==typeof e?"string":"[object Array]"===Object.prototype.toString.call(e)?"array":u.nodebuffer&&r.isBuffer(e)?"nodebuffer":u.uint8array&&e instanceof Uint8Array?"uint8array":u.arraybuffer&&e instanceof ArrayBuffer?"arraybuffer":void 0},o.checkSupport=function(e){if(!u[e.toLowerCase()])throw new Error(e+" is not supported by this platform")},o.MAX_VALUE_16BITS=65535,o.MAX_VALUE_32BITS=-1,o.pretty=function(e){var t,r,n="";for(r=0;r<(e||"").length;r++)n+="\\x"+((t=e.charCodeAt(r))<16?"0":"")+t.toString(16).toUpperCase();return n},o.delay=function(e,t,r){n(function(){e.apply(r||null,t||[])})},o.inherits=function(e,t){function r(){}r.prototype=t.prototype,e.prototype=new r},o.extend=function(){var e,t,r={};for(e=0;e<arguments.length;e++)for(t in arguments[e])arguments[e].hasOwnProperty(t)&&void 0===r[t]&&(r[t]=arguments[e][t]);return r},o.prepareContent=function(n,e,i,s,a){return f.Promise.resolve(e).then(function(n){return u.blob&&(n instanceof Blob||-1!==["[object File]","[object Blob]"].indexOf(Object.prototype.toString.call(n)))&&"undefined"!=typeof FileReader?new f.Promise(function(t,r){var e=new FileReader;e.onload=function(e){t(e.target.result)},e.onerror=function(e){r(e.target.error)},e.readAsArrayBuffer(n)}):n}).then(function(e){var t,r=o.getTypeOf(e);return r?("arraybuffer"===r?e=o.transformTo("uint8array",e):"string"===r&&(a?e=h.decode(e):i&&!0!==s&&(e=l(t=e,u.uint8array?new Uint8Array(t.length):new Array(t.length)))),e):f.Promise.reject(new Error("Can't read the data of '"+n+"'. Is it in a supported JavaScript type (String, Blob, ArrayBuffer, etc) ?"))})}},{"./base64":1,"./external":6,"./nodejsUtils":14,"./support":30,"set-immediate-shim":54}],33:[function(e,t,r){"use strict";var n=e("./reader/readerFor"),i=e("./utils"),s=e("./signature"),a=e("./zipEntry"),o=(e("./utf8"),e("./support"));function u(e){this.files=[],this.loadOptions=e}u.prototype={checkSignature:function(e){if(!this.reader.readAndCheckSignature(e)){this.reader.index-=4;var t=this.reader.readString(4);throw new Error("Corrupted zip or bug: unexpected signature ("+i.pretty(t)+", expected "+i.pretty(e)+")")}},isSignature:function(e,t){var r=this.reader.index;this.reader.setIndex(e);var n=this.reader.readString(4)===t;return this.reader.setIndex(r),n},readBlockEndOfCentral:function(){this.diskNumber=this.reader.readInt(2),this.diskWithCentralDirStart=this.reader.readInt(2),this.centralDirRecordsOnThisDisk=this.reader.readInt(2),this.centralDirRecords=this.reader.readInt(2),this.centralDirSize=this.reader.readInt(4),this.centralDirOffset=this.reader.readInt(4),this.zipCommentLength=this.reader.readInt(2);var e=this.reader.readData(this.zipCommentLength),t=o.uint8array?"uint8array":"array",r=i.transformTo(t,e);this.zipComment=this.loadOptions.decodeFileName(r)},readBlockZip64EndOfCentral:function(){this.zip64EndOfCentralSize=this.reader.readInt(8),this.reader.skip(4),this.diskNumber=this.reader.readInt(4),this.diskWithCentralDirStart=this.reader.readInt(4),this.centralDirRecordsOnThisDisk=this.reader.readInt(8),this.centralDirRecords=this.reader.readInt(8),this.centralDirSize=this.reader.readInt(8),this.centralDirOffset=this.reader.readInt(8),this.zip64ExtensibleData={};for(var e,t,r,n=this.zip64EndOfCentralSize-44;0<n;)e=this.reader.readInt(2),t=this.reader.readInt(4),r=this.reader.readData(t),this.zip64ExtensibleData[e]={id:e,length:t,value:r}},readBlockZip64EndOfCentralLocator:function(){if(this.diskWithZip64CentralDirStart=this.reader.readInt(4),this.relativeOffsetEndOfZip64CentralDir=this.reader.readInt(8),this.disksCount=this.reader.readInt(4),1<this.disksCount)throw new Error("Multi-volumes zip are not supported")},readLocalFiles:function(){var e,t;for(e=0;e<this.files.length;e++)t=this.files[e],this.reader.setIndex(t.localHeaderOffset),this.checkSignature(s.LOCAL_FILE_HEADER),t.readLocalPart(this.reader),t.handleUTF8(),t.processAttributes()},readCentralDir:function(){var e;for(this.reader.setIndex(this.centralDirOffset);this.reader.readAndCheckSignature(s.CENTRAL_FILE_HEADER);)(e=new a({zip64:this.zip64},this.loadOptions)).readCentralPart(this.reader),this.files.push(e);if(this.centralDirRecords!==this.files.length&&0!==this.centralDirRecords&&0===this.files.length)throw new Error("Corrupted zip or bug: expected "+this.centralDirRecords+" records in central dir, got "+this.files.length)},readEndOfCentral:function(){var e=this.reader.lastIndexOfSignature(s.CENTRAL_DIRECTORY_END);if(e<0)throw this.isSignature(0,s.LOCAL_FILE_HEADER)?new Error("Corrupted zip: can't find end of central directory"):new Error("Can't find end of central directory : is this a zip file ? If it is, see https://stuk.github.io/jszip/documentation/howto/read_zip.html");this.reader.setIndex(e);var t=e;if(this.checkSignature(s.CENTRAL_DIRECTORY_END),this.readBlockEndOfCentral(),this.diskNumber===i.MAX_VALUE_16BITS||this.diskWithCentralDirStart===i.MAX_VALUE_16BITS||this.centralDirRecordsOnThisDisk===i.MAX_VALUE_16BITS||this.centralDirRecords===i.MAX_VALUE_16BITS||this.centralDirSize===i.MAX_VALUE_32BITS||this.centralDirOffset===i.MAX_VALUE_32BITS){if(this.zip64=!0,(e=this.reader.lastIndexOfSignature(s.ZIP64_CENTRAL_DIRECTORY_LOCATOR))<0)throw new Error("Corrupted zip: can't find the ZIP64 end of central directory locator");if(this.reader.setIndex(e),this.checkSignature(s.ZIP64_CENTRAL_DIRECTORY_LOCATOR),this.readBlockZip64EndOfCentralLocator(),!this.isSignature(this.relativeOffsetEndOfZip64CentralDir,s.ZIP64_CENTRAL_DIRECTORY_END)&&(this.relativeOffsetEndOfZip64CentralDir=this.reader.lastIndexOfSignature(s.ZIP64_CENTRAL_DIRECTORY_END),this.relativeOffsetEndOfZip64CentralDir<0))throw new Error("Corrupted zip: can't find the ZIP64 end of central directory");this.reader.setIndex(this.relativeOffsetEndOfZip64CentralDir),this.checkSignature(s.ZIP64_CENTRAL_DIRECTORY_END),this.readBlockZip64EndOfCentral()}var r=this.centralDirOffset+this.centralDirSize;this.zip64&&(r+=20,r+=12+this.zip64EndOfCentralSize);var n=t-r;if(0<n)this.isSignature(t,s.CENTRAL_FILE_HEADER)||(this.reader.zero=n);else if(n<0)throw new Error("Corrupted zip: missing "+Math.abs(n)+" bytes.")},prepareReader:function(e){this.reader=n(e)},load:function(e){this.prepareReader(e),this.readEndOfCentral(),this.readCentralDir(),this.readLocalFiles()}},t.exports=u},{"./reader/readerFor":22,"./signature":23,"./support":30,"./utf8":31,"./utils":32,"./zipEntry":34}],34:[function(e,t,r){"use strict";var n=e("./reader/readerFor"),s=e("./utils"),i=e("./compressedObject"),a=e("./crc32"),o=e("./utf8"),u=e("./compressions"),h=e("./support");function f(e,t){this.options=e,this.loadOptions=t}f.prototype={isEncrypted:function(){return 1==(1&this.bitFlag)},useUTF8:function(){return 2048==(2048&this.bitFlag)},readLocalPart:function(e){var t,r;if(e.skip(22),this.fileNameLength=e.readInt(2),r=e.readInt(2),this.fileName=e.readData(this.fileNameLength),e.skip(r),-1===this.compressedSize||-1===this.uncompressedSize)throw new Error("Bug or corrupted zip : didn't get enough information from the central directory (compressedSize === -1 || uncompressedSize === -1)");if(null===(t=function(e){for(var t in u)if(u.hasOwnProperty(t)&&u[t].magic===e)return u[t];return null}(this.compressionMethod)))throw new Error("Corrupted zip : compression "+s.pretty(this.compressionMethod)+" unknown (inner file : "+s.transformTo("string",this.fileName)+")");this.decompressed=new i(this.compressedSize,this.uncompressedSize,this.crc32,t,e.readData(this.compressedSize))},readCentralPart:function(e){this.versionMadeBy=e.readInt(2),e.skip(2),this.bitFlag=e.readInt(2),this.compressionMethod=e.readString(2),this.date=e.readDate(),this.crc32=e.readInt(4),this.compressedSize=e.readInt(4),this.uncompressedSize=e.readInt(4);var t=e.readInt(2);if(this.extraFieldsLength=e.readInt(2),this.fileCommentLength=e.readInt(2),this.diskNumberStart=e.readInt(2),this.internalFileAttributes=e.readInt(2),this.externalFileAttributes=e.readInt(4),this.localHeaderOffset=e.readInt(4),this.isEncrypted())throw new Error("Encrypted zip are not supported");e.skip(t),this.readExtraFields(e),this.parseZIP64ExtraField(e),this.fileComment=e.readData(this.fileCommentLength)},processAttributes:function(){this.unixPermissions=null,this.dosPermissions=null;var e=this.versionMadeBy>>8;this.dir=!!(16&this.externalFileAttributes),0==e&&(this.dosPermissions=63&this.externalFileAttributes),3==e&&(this.unixPermissions=this.externalFileAttributes>>16&65535),this.dir||"/"!==this.fileNameStr.slice(-1)||(this.dir=!0)},parseZIP64ExtraField:function(e){if(this.extraFields[1]){var t=n(this.extraFields[1].value);this.uncompressedSize===s.MAX_VALUE_32BITS&&(this.uncompressedSize=t.readInt(8)),this.compressedSize===s.MAX_VALUE_32BITS&&(this.compressedSize=t.readInt(8)),this.localHeaderOffset===s.MAX_VALUE_32BITS&&(this.localHeaderOffset=t.readInt(8)),this.diskNumberStart===s.MAX_VALUE_32BITS&&(this.diskNumberStart=t.readInt(4))}},readExtraFields:function(e){var t,r,n,i=e.index+this.extraFieldsLength;for(this.extraFields||(this.extraFields={});e.index+4<i;)t=e.readInt(2),r=e.readInt(2),n=e.readData(r),this.extraFields[t]={id:t,length:r,value:n};e.setIndex(i)},handleUTF8:function(){var e=h.uint8array?"uint8array":"array";if(this.useUTF8())this.fileNameStr=o.utf8decode(this.fileName),this.fileCommentStr=o.utf8decode(this.fileComment);else{var t=this.findExtraFieldUnicodePath();if(null!==t)this.fileNameStr=t;else{var r=s.transformTo(e,this.fileName);this.fileNameStr=this.loadOptions.decodeFileName(r)}var n=this.findExtraFieldUnicodeComment();if(null!==n)this.fileCommentStr=n;else{var i=s.transformTo(e,this.fileComment);this.fileCommentStr=this.loadOptions.decodeFileName(i)}}},findExtraFieldUnicodePath:function(){var e=this.extraFields[28789];if(e){var t=n(e.value);return 1!==t.readInt(1)?null:a(this.fileName)!==t.readInt(4)?null:o.utf8decode(t.readData(e.length-5))}return null},findExtraFieldUnicodeComment:function(){var e=this.extraFields[25461];if(e){var t=n(e.value);return 1!==t.readInt(1)?null:a(this.fileComment)!==t.readInt(4)?null:o.utf8decode(t.readData(e.length-5))}return null}},t.exports=f},{"./compressedObject":2,"./compressions":3,"./crc32":4,"./reader/readerFor":22,"./support":30,"./utf8":31,"./utils":32}],35:[function(e,t,r){"use strict";function n(e,t,r){this.name=e,this.dir=r.dir,this.date=r.date,this.comment=r.comment,this.unixPermissions=r.unixPermissions,this.dosPermissions=r.dosPermissions,this._data=t,this._dataBinary=r.binary,this.options={compression:r.compression,compressionOptions:r.compressionOptions}}var s=e("./stream/StreamHelper"),i=e("./stream/DataWorker"),a=e("./utf8"),o=e("./compressedObject"),u=e("./stream/GenericWorker");n.prototype={internalStream:function(e){var t=null,r="string";try{if(!e)throw new Error("No output type specified.");var n="string"===(r=e.toLowerCase())||"text"===r;"binarystring"!==r&&"text"!==r||(r="string"),t=this._decompressWorker();var i=!this._dataBinary;i&&!n&&(t=t.pipe(new a.Utf8EncodeWorker)),!i&&n&&(t=t.pipe(new a.Utf8DecodeWorker))}catch(e){(t=new u("error")).error(e)}return new s(t,r,"")},async:function(e,t){return this.internalStream(e).accumulate(t)},nodeStream:function(e,t){return this.internalStream(e||"nodebuffer").toNodejsStream(t)},_compressWorker:function(e,t){if(this._data instanceof o&&this._data.compression.magic===e.magic)return this._data.getCompressedWorker();var r=this._decompressWorker();return this._dataBinary||(r=r.pipe(new a.Utf8EncodeWorker)),o.createWorkerFrom(r,e,t)},_decompressWorker:function(){return this._data instanceof o?this._data.getContentWorker():this._data instanceof u?this._data:new i(this._data)}};for(var h=["asText","asBinary","asNodeBuffer","asUint8Array","asArrayBuffer"],f=function(){throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.")},l=0;l<h.length;l++)n.prototype[h[l]]=f;t.exports=n},{"./compressedObject":2,"./stream/DataWorker":27,"./stream/GenericWorker":28,"./stream/StreamHelper":29,"./utf8":31}],36:[function(e,f,t){(function(t){"use strict";var r,n,e=t.MutationObserver||t.WebKitMutationObserver;if(e){var i=0,s=new e(h),a=t.document.createTextNode("");s.observe(a,{characterData:!0}),r=function(){a.data=i=++i%2}}else if(t.setImmediate||void 0===t.MessageChannel)r="document"in t&&"onreadystatechange"in t.document.createElement("script")?function(){var e=t.document.createElement("script");e.onreadystatechange=function(){h(),e.onreadystatechange=null,e.parentNode.removeChild(e),e=null},t.document.documentElement.appendChild(e)}:function(){setTimeout(h,0)};else{var o=new t.MessageChannel;o.port1.onmessage=h,r=function(){o.port2.postMessage(0)}}var u=[];function h(){var e,t;n=!0;for(var r=u.length;r;){for(t=u,u=[],e=-1;++e<r;)t[e]();r=u.length}n=!1}f.exports=function(e){1!==u.push(e)||n||r()}}).call(this,void 0!==r?r:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],37:[function(e,t,r){"use strict";var i=e("immediate");function h(){}var f={},s=["REJECTED"],a=["FULFILLED"],n=["PENDING"];function o(e){if("function"!=typeof e)throw new TypeError("resolver must be a function");this.state=n,this.queue=[],this.outcome=void 0,e!==h&&c(this,e)}function u(e,t,r){this.promise=e,"function"==typeof t&&(this.onFulfilled=t,this.callFulfilled=this.otherCallFulfilled),"function"==typeof r&&(this.onRejected=r,this.callRejected=this.otherCallRejected)}function l(t,r,n){i(function(){var e;try{e=r(n)}catch(e){return f.reject(t,e)}e===t?f.reject(t,new TypeError("Cannot resolve promise with itself")):f.resolve(t,e)})}function d(e){var t=e&&e.then;if(e&&("object"==typeof e||"function"==typeof e)&&"function"==typeof t)return function(){t.apply(e,arguments)}}function c(t,e){var r=!1;function n(e){r||(r=!0,f.reject(t,e))}function i(e){r||(r=!0,f.resolve(t,e))}var s=p(function(){e(i,n)});"error"===s.status&&n(s.value)}function p(e,t){var r={};try{r.value=e(t),r.status="success"}catch(e){r.status="error",r.value=e}return r}(t.exports=o).prototype.finally=function(t){if("function"!=typeof t)return this;var r=this.constructor;return this.then(function(e){return r.resolve(t()).then(function(){return e})},function(e){return r.resolve(t()).then(function(){throw e})})},o.prototype.catch=function(e){return this.then(null,e)},o.prototype.then=function(e,t){if("function"!=typeof e&&this.state===a||"function"!=typeof t&&this.state===s)return this;var r=new this.constructor(h);return this.state!==n?l(r,this.state===a?e:t,this.outcome):this.queue.push(new u(r,e,t)),r},u.prototype.callFulfilled=function(e){f.resolve(this.promise,e)},u.prototype.otherCallFulfilled=function(e){l(this.promise,this.onFulfilled,e)},u.prototype.callRejected=function(e){f.reject(this.promise,e)},u.prototype.otherCallRejected=function(e){l(this.promise,this.onRejected,e)},f.resolve=function(e,t){var r=p(d,t);if("error"===r.status)return f.reject(e,r.value);var n=r.value;if(n)c(e,n);else{e.state=a,e.outcome=t;for(var i=-1,s=e.queue.length;++i<s;)e.queue[i].callFulfilled(t)}return e},f.reject=function(e,t){e.state=s,e.outcome=t;for(var r=-1,n=e.queue.length;++r<n;)e.queue[r].callRejected(t);return e},o.resolve=function(e){return e instanceof this?e:f.resolve(new this(h),e)},o.reject=function(e){var t=new this(h);return f.reject(t,e)},o.all=function(e){var r=this;if("[object Array]"!==Object.prototype.toString.call(e))return this.reject(new TypeError("must be an array"));var n=e.length,i=!1;if(!n)return this.resolve([]);for(var s=new Array(n),a=0,t=-1,o=new this(h);++t<n;)u(e[t],t);return o;function u(e,t){r.resolve(e).then(function(e){s[t]=e,++a!==n||i||(i=!0,f.resolve(o,s))},function(e){i||(i=!0,f.reject(o,e))})}},o.race=function(e){if("[object Array]"!==Object.prototype.toString.call(e))return this.reject(new TypeError("must be an array"));var t=e.length,r=!1;if(!t)return this.resolve([]);for(var n,i=-1,s=new this(h);++i<t;)n=e[i],this.resolve(n).then(function(e){r||(r=!0,f.resolve(s,e))},function(e){r||(r=!0,f.reject(s,e))});return s}},{immediate:36}],38:[function(e,t,r){"use strict";var n={};(0,e("./lib/utils/common").assign)(n,e("./lib/deflate"),e("./lib/inflate"),e("./lib/zlib/constants")),t.exports=n},{"./lib/deflate":39,"./lib/inflate":40,"./lib/utils/common":41,"./lib/zlib/constants":44}],39:[function(e,t,r){"use strict";var a=e("./zlib/deflate"),o=e("./utils/common"),u=e("./utils/strings"),i=e("./zlib/messages"),s=e("./zlib/zstream"),h=Object.prototype.toString,f=0,l=-1,d=0,c=8;function p(e){if(!(this instanceof p))return new p(e);this.options=o.assign({level:l,method:c,chunkSize:16384,windowBits:15,memLevel:8,strategy:d,to:""},e||{});var t=this.options;t.raw&&0<t.windowBits?t.windowBits=-t.windowBits:t.gzip&&0<t.windowBits&&t.windowBits<16&&(t.windowBits+=16),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new s,this.strm.avail_out=0;var r=a.deflateInit2(this.strm,t.level,t.method,t.windowBits,t.memLevel,t.strategy);if(r!==f)throw new Error(i[r]);if(t.header&&a.deflateSetHeader(this.strm,t.header),t.dictionary){var n;if(n="string"==typeof t.dictionary?u.string2buf(t.dictionary):"[object ArrayBuffer]"===h.call(t.dictionary)?new Uint8Array(t.dictionary):t.dictionary,(r=a.deflateSetDictionary(this.strm,n))!==f)throw new Error(i[r]);this._dict_set=!0}}function n(e,t){var r=new p(t);if(r.push(e,!0),r.err)throw r.msg||i[r.err];return r.result}p.prototype.push=function(e,t){var r,n,i=this.strm,s=this.options.chunkSize;if(this.ended)return!1;n=t===~~t?t:!0===t?4:0,"string"==typeof e?i.input=u.string2buf(e):"[object ArrayBuffer]"===h.call(e)?i.input=new Uint8Array(e):i.input=e,i.next_in=0,i.avail_in=i.input.length;do{if(0===i.avail_out&&(i.output=new o.Buf8(s),i.next_out=0,i.avail_out=s),1!==(r=a.deflate(i,n))&&r!==f)return this.onEnd(r),!(this.ended=!0);0!==i.avail_out&&(0!==i.avail_in||4!==n&&2!==n)||("string"===this.options.to?this.onData(u.buf2binstring(o.shrinkBuf(i.output,i.next_out))):this.onData(o.shrinkBuf(i.output,i.next_out)))}while((0<i.avail_in||0===i.avail_out)&&1!==r);return 4===n?(r=a.deflateEnd(this.strm),this.onEnd(r),this.ended=!0,r===f):2!==n||(this.onEnd(f),!(i.avail_out=0))},p.prototype.onData=function(e){this.chunks.push(e)},p.prototype.onEnd=function(e){e===f&&("string"===this.options.to?this.result=this.chunks.join(""):this.result=o.flattenChunks(this.chunks)),this.chunks=[],this.err=e,this.msg=this.strm.msg},r.Deflate=p,r.deflate=n,r.deflateRaw=function(e,t){return(t=t||{}).raw=!0,n(e,t)},r.gzip=function(e,t){return(t=t||{}).gzip=!0,n(e,t)}},{"./utils/common":41,"./utils/strings":42,"./zlib/deflate":46,"./zlib/messages":51,"./zlib/zstream":53}],40:[function(e,t,r){"use strict";var d=e("./zlib/inflate"),c=e("./utils/common"),p=e("./utils/strings"),m=e("./zlib/constants"),n=e("./zlib/messages"),i=e("./zlib/zstream"),s=e("./zlib/gzheader"),_=Object.prototype.toString;function a(e){if(!(this instanceof a))return new a(e);this.options=c.assign({chunkSize:16384,windowBits:0,to:""},e||{});var t=this.options;t.raw&&0<=t.windowBits&&t.windowBits<16&&(t.windowBits=-t.windowBits,0===t.windowBits&&(t.windowBits=-15)),!(0<=t.windowBits&&t.windowBits<16)||e&&e.windowBits||(t.windowBits+=32),15<t.windowBits&&t.windowBits<48&&0==(15&t.windowBits)&&(t.windowBits|=15),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new i,this.strm.avail_out=0;var r=d.inflateInit2(this.strm,t.windowBits);if(r!==m.Z_OK)throw new Error(n[r]);this.header=new s,d.inflateGetHeader(this.strm,this.header)}function o(e,t){var r=new a(t);if(r.push(e,!0),r.err)throw r.msg||n[r.err];return r.result}a.prototype.push=function(e,t){var r,n,i,s,a,o,u=this.strm,h=this.options.chunkSize,f=this.options.dictionary,l=!1;if(this.ended)return!1;n=t===~~t?t:!0===t?m.Z_FINISH:m.Z_NO_FLUSH,"string"==typeof e?u.input=p.binstring2buf(e):"[object ArrayBuffer]"===_.call(e)?u.input=new Uint8Array(e):u.input=e,u.next_in=0,u.avail_in=u.input.length;do{if(0===u.avail_out&&(u.output=new c.Buf8(h),u.next_out=0,u.avail_out=h),(r=d.inflate(u,m.Z_NO_FLUSH))===m.Z_NEED_DICT&&f&&(o="string"==typeof f?p.string2buf(f):"[object ArrayBuffer]"===_.call(f)?new Uint8Array(f):f,r=d.inflateSetDictionary(this.strm,o)),r===m.Z_BUF_ERROR&&!0===l&&(r=m.Z_OK,l=!1),r!==m.Z_STREAM_END&&r!==m.Z_OK)return this.onEnd(r),!(this.ended=!0);u.next_out&&(0!==u.avail_out&&r!==m.Z_STREAM_END&&(0!==u.avail_in||n!==m.Z_FINISH&&n!==m.Z_SYNC_FLUSH)||("string"===this.options.to?(i=p.utf8border(u.output,u.next_out),s=u.next_out-i,a=p.buf2string(u.output,i),u.next_out=s,u.avail_out=h-s,s&&c.arraySet(u.output,u.output,i,s,0),this.onData(a)):this.onData(c.shrinkBuf(u.output,u.next_out)))),0===u.avail_in&&0===u.avail_out&&(l=!0)}while((0<u.avail_in||0===u.avail_out)&&r!==m.Z_STREAM_END);return r===m.Z_STREAM_END&&(n=m.Z_FINISH),n===m.Z_FINISH?(r=d.inflateEnd(this.strm),this.onEnd(r),this.ended=!0,r===m.Z_OK):n!==m.Z_SYNC_FLUSH||(this.onEnd(m.Z_OK),!(u.avail_out=0))},a.prototype.onData=function(e){this.chunks.push(e)},a.prototype.onEnd=function(e){e===m.Z_OK&&("string"===this.options.to?this.result=this.chunks.join(""):this.result=c.flattenChunks(this.chunks)),this.chunks=[],this.err=e,this.msg=this.strm.msg},r.Inflate=a,r.inflate=o,r.inflateRaw=function(e,t){return(t=t||{}).raw=!0,o(e,t)},r.ungzip=o},{"./utils/common":41,"./utils/strings":42,"./zlib/constants":44,"./zlib/gzheader":47,"./zlib/inflate":49,"./zlib/messages":51,"./zlib/zstream":53}],41:[function(e,t,r){"use strict";var n="undefined"!=typeof Uint8Array&&"undefined"!=typeof Uint16Array&&"undefined"!=typeof Int32Array;r.assign=function(e){for(var t=Array.prototype.slice.call(arguments,1);t.length;){var r=t.shift();if(r){if("object"!=typeof r)throw new TypeError(r+"must be non-object");for(var n in r)r.hasOwnProperty(n)&&(e[n]=r[n])}}return e},r.shrinkBuf=function(e,t){return e.length===t?e:e.subarray?e.subarray(0,t):(e.length=t,e)};var i={arraySet:function(e,t,r,n,i){if(t.subarray&&e.subarray)e.set(t.subarray(r,r+n),i);else for(var s=0;s<n;s++)e[i+s]=t[r+s]},flattenChunks:function(e){var t,r,n,i,s,a;for(t=n=0,r=e.length;t<r;t++)n+=e[t].length;for(a=new Uint8Array(n),t=i=0,r=e.length;t<r;t++)s=e[t],a.set(s,i),i+=s.length;return a}},s={arraySet:function(e,t,r,n,i){for(var s=0;s<n;s++)e[i+s]=t[r+s]},flattenChunks:function(e){return[].concat.apply([],e)}};r.setTyped=function(e){e?(r.Buf8=Uint8Array,r.Buf16=Uint16Array,r.Buf32=Int32Array,r.assign(r,i)):(r.Buf8=Array,r.Buf16=Array,r.Buf32=Array,r.assign(r,s))},r.setTyped(n)},{}],42:[function(e,t,r){"use strict";var u=e("./common"),i=!0,s=!0;try{String.fromCharCode.apply(null,[0])}catch(e){i=!1}try{String.fromCharCode.apply(null,new Uint8Array(1))}catch(e){s=!1}for(var h=new u.Buf8(256),n=0;n<256;n++)h[n]=252<=n?6:248<=n?5:240<=n?4:224<=n?3:192<=n?2:1;function f(e,t){if(t<65537&&(e.subarray&&s||!e.subarray&&i))return String.fromCharCode.apply(null,u.shrinkBuf(e,t));for(var r="",n=0;n<t;n++)r+=String.fromCharCode(e[n]);return r}h[254]=h[254]=1,r.string2buf=function(e){var t,r,n,i,s,a=e.length,o=0;for(i=0;i<a;i++)55296==(64512&(r=e.charCodeAt(i)))&&i+1<a&&56320==(64512&(n=e.charCodeAt(i+1)))&&(r=65536+(r-55296<<10)+(n-56320),i++),o+=r<128?1:r<2048?2:r<65536?3:4;for(t=new u.Buf8(o),i=s=0;s<o;i++)55296==(64512&(r=e.charCodeAt(i)))&&i+1<a&&56320==(64512&(n=e.charCodeAt(i+1)))&&(r=65536+(r-55296<<10)+(n-56320),i++),r<128?t[s++]=r:(r<2048?t[s++]=192|r>>>6:(r<65536?t[s++]=224|r>>>12:(t[s++]=240|r>>>18,t[s++]=128|r>>>12&63),t[s++]=128|r>>>6&63),t[s++]=128|63&r);return t},r.buf2binstring=function(e){return f(e,e.length)},r.binstring2buf=function(e){for(var t=new u.Buf8(e.length),r=0,n=t.length;r<n;r++)t[r]=e.charCodeAt(r);return t},r.buf2string=function(e,t){var r,n,i,s,a=t||e.length,o=new Array(2*a);for(r=n=0;r<a;)if((i=e[r++])<128)o[n++]=i;else if(4<(s=h[i]))o[n++]=65533,r+=s-1;else{for(i&=2===s?31:3===s?15:7;1<s&&r<a;)i=i<<6|63&e[r++],s--;1<s?o[n++]=65533:i<65536?o[n++]=i:(i-=65536,o[n++]=55296|i>>10&1023,o[n++]=56320|1023&i)}return f(o,n)},r.utf8border=function(e,t){var r;for((t=t||e.length)>e.length&&(t=e.length),r=t-1;0<=r&&128==(192&e[r]);)r--;return r<0?t:0===r?t:r+h[e[r]]>t?r:t}},{"./common":41}],43:[function(e,t,r){"use strict";t.exports=function(e,t,r,n){for(var i=65535&e|0,s=e>>>16&65535|0,a=0;0!==r;){for(r-=a=2e3<r?2e3:r;s=s+(i=i+t[n++]|0)|0,--a;);i%=65521,s%=65521}return i|s<<16|0}},{}],44:[function(e,t,r){"use strict";t.exports={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8}},{}],45:[function(e,t,r){"use strict";var o=function(){for(var e,t=[],r=0;r<256;r++){e=r;for(var n=0;n<8;n++)e=1&e?3988292384^e>>>1:e>>>1;t[r]=e}return t}();t.exports=function(e,t,r,n){var i=o,s=n+r;e^=-1;for(var a=n;a<s;a++)e=e>>>8^i[255&(e^t[a])];return-1^e}},{}],46:[function(e,t,r){"use strict";var u,d=e("../utils/common"),h=e("./trees"),c=e("./adler32"),p=e("./crc32"),n=e("./messages"),f=0,l=0,m=-2,i=2,_=8,s=286,a=30,o=19,g=2*s+1,v=15,b=3,w=258,y=w+b+1,k=42,x=113;function S(e,t){return e.msg=n[t],t}function z(e){return(e<<1)-(4<e?9:0)}function E(e){for(var t=e.length;0<=--t;)e[t]=0}function C(e){var t=e.state,r=t.pending;r>e.avail_out&&(r=e.avail_out),0!==r&&(d.arraySet(e.output,t.pending_buf,t.pending_out,r,e.next_out),e.next_out+=r,t.pending_out+=r,e.total_out+=r,e.avail_out-=r,t.pending-=r,0===t.pending&&(t.pending_out=0))}function A(e,t){h._tr_flush_block(e,0<=e.block_start?e.block_start:-1,e.strstart-e.block_start,t),e.block_start=e.strstart,C(e.strm)}function I(e,t){e.pending_buf[e.pending++]=t}function O(e,t){e.pending_buf[e.pending++]=t>>>8&255,e.pending_buf[e.pending++]=255&t}function B(e,t){var r,n,i=e.max_chain_length,s=e.strstart,a=e.prev_length,o=e.nice_match,u=e.strstart>e.w_size-y?e.strstart-(e.w_size-y):0,h=e.window,f=e.w_mask,l=e.prev,d=e.strstart+w,c=h[s+a-1],p=h[s+a];e.prev_length>=e.good_match&&(i>>=2),o>e.lookahead&&(o=e.lookahead);do{if(h[(r=t)+a]===p&&h[r+a-1]===c&&h[r]===h[s]&&h[++r]===h[s+1]){s+=2,r++;do{}while(h[++s]===h[++r]&&h[++s]===h[++r]&&h[++s]===h[++r]&&h[++s]===h[++r]&&h[++s]===h[++r]&&h[++s]===h[++r]&&h[++s]===h[++r]&&h[++s]===h[++r]&&s<d);if(n=w-(d-s),s=d-w,a<n){if(e.match_start=t,o<=(a=n))break;c=h[s+a-1],p=h[s+a]}}}while((t=l[t&f])>u&&0!=--i);return a<=e.lookahead?a:e.lookahead}function T(e){var t,r,n,i,s,a,o,u,h,f,l=e.w_size;do{if(i=e.window_size-e.lookahead-e.strstart,e.strstart>=l+(l-y)){for(d.arraySet(e.window,e.window,l,l,0),e.match_start-=l,e.strstart-=l,e.block_start-=l,t=r=e.hash_size;n=e.head[--t],e.head[t]=l<=n?n-l:0,--r;);for(t=r=l;n=e.prev[--t],e.prev[t]=l<=n?n-l:0,--r;);i+=l}if(0===e.strm.avail_in)break;if(a=e.strm,o=e.window,u=e.strstart+e.lookahead,f=void 0,(h=i)<(f=a.avail_in)&&(f=h),r=0===f?0:(a.avail_in-=f,d.arraySet(o,a.input,a.next_in,f,u),1===a.state.wrap?a.adler=c(a.adler,o,f,u):2===a.state.wrap&&(a.adler=p(a.adler,o,f,u)),a.next_in+=f,a.total_in+=f,f),e.lookahead+=r,e.lookahead+e.insert>=b)for(s=e.strstart-e.insert,e.ins_h=e.window[s],e.ins_h=(e.ins_h<<e.hash_shift^e.window[s+1])&e.hash_mask;e.insert&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[s+b-1])&e.hash_mask,e.prev[s&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=s,s++,e.insert--,!(e.lookahead+e.insert<b)););}while(e.lookahead<y&&0!==e.strm.avail_in)}function R(e,t){for(var r,n;;){if(e.lookahead<y){if(T(e),e.lookahead<y&&t===f)return 1;if(0===e.lookahead)break}if(r=0,e.lookahead>=b&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+b-1])&e.hash_mask,r=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),0!==r&&e.strstart-r<=e.w_size-y&&(e.match_length=B(e,r)),e.match_length>=b)if(n=h._tr_tally(e,e.strstart-e.match_start,e.match_length-b),e.lookahead-=e.match_length,e.match_length<=e.max_lazy_match&&e.lookahead>=b){for(e.match_length--;e.strstart++,e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+b-1])&e.hash_mask,r=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart,0!=--e.match_length;);e.strstart++}else e.strstart+=e.match_length,e.match_length=0,e.ins_h=e.window[e.strstart],e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+1])&e.hash_mask;else n=h._tr_tally(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++;if(n&&(A(e,!1),0===e.strm.avail_out))return 1}return e.insert=e.strstart<b-1?e.strstart:b-1,4===t?(A(e,!0),0===e.strm.avail_out?3:4):e.last_lit&&(A(e,!1),0===e.strm.avail_out)?1:2}function D(e,t){for(var r,n,i;;){if(e.lookahead<y){if(T(e),e.lookahead<y&&t===f)return 1;if(0===e.lookahead)break}if(r=0,e.lookahead>=b&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+b-1])&e.hash_mask,r=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),e.prev_length=e.match_length,e.prev_match=e.match_start,e.match_length=b-1,0!==r&&e.prev_length<e.max_lazy_match&&e.strstart-r<=e.w_size-y&&(e.match_length=B(e,r),e.match_length<=5&&(1===e.strategy||e.match_length===b&&4096<e.strstart-e.match_start)&&(e.match_length=b-1)),e.prev_length>=b&&e.match_length<=e.prev_length){for(i=e.strstart+e.lookahead-b,n=h._tr_tally(e,e.strstart-1-e.prev_match,e.prev_length-b),e.lookahead-=e.prev_length-1,e.prev_length-=2;++e.strstart<=i&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+b-1])&e.hash_mask,r=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),0!=--e.prev_length;);if(e.match_available=0,e.match_length=b-1,e.strstart++,n&&(A(e,!1),0===e.strm.avail_out))return 1}else if(e.match_available){if((n=h._tr_tally(e,0,e.window[e.strstart-1]))&&A(e,!1),e.strstart++,e.lookahead--,0===e.strm.avail_out)return 1}else e.match_available=1,e.strstart++,e.lookahead--}return e.match_available&&(n=h._tr_tally(e,0,e.window[e.strstart-1]),e.match_available=0),e.insert=e.strstart<b-1?e.strstart:b-1,4===t?(A(e,!0),0===e.strm.avail_out?3:4):e.last_lit&&(A(e,!1),0===e.strm.avail_out)?1:2}function F(e,t,r,n,i){this.good_length=e,this.max_lazy=t,this.nice_length=r,this.max_chain=n,this.func=i}function N(){this.strm=null,this.status=0,this.pending_buf=null,this.pending_buf_size=0,this.pending_out=0,this.pending=0,this.wrap=0,this.gzhead=null,this.gzindex=0,this.method=_,this.last_flush=-1,this.w_size=0,this.w_bits=0,this.w_mask=0,this.window=null,this.window_size=0,this.prev=null,this.head=null,this.ins_h=0,this.hash_size=0,this.hash_bits=0,this.hash_mask=0,this.hash_shift=0,this.block_start=0,this.match_length=0,this.prev_match=0,this.match_available=0,this.strstart=0,this.match_start=0,this.lookahead=0,this.prev_length=0,this.max_chain_length=0,this.max_lazy_match=0,this.level=0,this.strategy=0,this.good_match=0,this.nice_match=0,this.dyn_ltree=new d.Buf16(2*g),this.dyn_dtree=new d.Buf16(2*(2*a+1)),this.bl_tree=new d.Buf16(2*(2*o+1)),E(this.dyn_ltree),E(this.dyn_dtree),E(this.bl_tree),this.l_desc=null,this.d_desc=null,this.bl_desc=null,this.bl_count=new d.Buf16(v+1),this.heap=new d.Buf16(2*s+1),E(this.heap),this.heap_len=0,this.heap_max=0,this.depth=new d.Buf16(2*s+1),E(this.depth),this.l_buf=0,this.lit_bufsize=0,this.last_lit=0,this.d_buf=0,this.opt_len=0,this.static_len=0,this.matches=0,this.insert=0,this.bi_buf=0,this.bi_valid=0}function U(e){var t;return e&&e.state?(e.total_in=e.total_out=0,e.data_type=i,(t=e.state).pending=0,t.pending_out=0,t.wrap<0&&(t.wrap=-t.wrap),t.status=t.wrap?k:x,e.adler=2===t.wrap?0:1,t.last_flush=f,h._tr_init(t),l):S(e,m)}function P(e){var t,r=U(e);return r===l&&((t=e.state).window_size=2*t.w_size,E(t.head),t.max_lazy_match=u[t.level].max_lazy,t.good_match=u[t.level].good_length,t.nice_match=u[t.level].nice_length,t.max_chain_length=u[t.level].max_chain,t.strstart=0,t.block_start=0,t.lookahead=0,t.insert=0,t.match_length=t.prev_length=b-1,t.match_available=0,t.ins_h=0),r}function L(e,t,r,n,i,s){if(!e)return m;var a=1;if(-1===t&&(t=6),n<0?(a=0,n=-n):15<n&&(a=2,n-=16),i<1||9<i||r!==_||n<8||15<n||t<0||9<t||s<0||4<s)return S(e,m);8===n&&(n=9);var o=new N;return(e.state=o).strm=e,o.wrap=a,o.gzhead=null,o.w_bits=n,o.w_size=1<<o.w_bits,o.w_mask=o.w_size-1,o.hash_bits=i+7,o.hash_size=1<<o.hash_bits,o.hash_mask=o.hash_size-1,o.hash_shift=~~((o.hash_bits+b-1)/b),o.window=new d.Buf8(2*o.w_size),o.head=new d.Buf16(o.hash_size),o.prev=new d.Buf16(o.w_size),o.lit_bufsize=1<<i+6,o.pending_buf_size=4*o.lit_bufsize,o.pending_buf=new d.Buf8(o.pending_buf_size),o.d_buf=1*o.lit_bufsize,o.l_buf=3*o.lit_bufsize,o.level=t,o.strategy=s,o.method=r,P(e)}u=[new F(0,0,0,0,function(e,t){var r=65535;for(r>e.pending_buf_size-5&&(r=e.pending_buf_size-5);;){if(e.lookahead<=1){if(T(e),0===e.lookahead&&t===f)return 1;if(0===e.lookahead)break}e.strstart+=e.lookahead,e.lookahead=0;var n=e.block_start+r;if((0===e.strstart||e.strstart>=n)&&(e.lookahead=e.strstart-n,e.strstart=n,A(e,!1),0===e.strm.avail_out))return 1;if(e.strstart-e.block_start>=e.w_size-y&&(A(e,!1),0===e.strm.avail_out))return 1}return e.insert=0,4===t?(A(e,!0),0===e.strm.avail_out?3:4):(e.strstart>e.block_start&&(A(e,!1),e.strm.avail_out),1)}),new F(4,4,8,4,R),new F(4,5,16,8,R),new F(4,6,32,32,R),new F(4,4,16,16,D),new F(8,16,32,32,D),new F(8,16,128,128,D),new F(8,32,128,256,D),new F(32,128,258,1024,D),new F(32,258,258,4096,D)],r.deflateInit=function(e,t){return L(e,t,_,15,8,0)},r.deflateInit2=L,r.deflateReset=P,r.deflateResetKeep=U,r.deflateSetHeader=function(e,t){return e&&e.state?2!==e.state.wrap?m:(e.state.gzhead=t,l):m},r.deflate=function(e,t){var r,n,i,s;if(!e||!e.state||5<t||t<0)return e?S(e,m):m;if(n=e.state,!e.output||!e.input&&0!==e.avail_in||666===n.status&&4!==t)return S(e,0===e.avail_out?-5:m);if(n.strm=e,r=n.last_flush,n.last_flush=t,n.status===k)if(2===n.wrap)e.adler=0,I(n,31),I(n,139),I(n,8),n.gzhead?(I(n,(n.gzhead.text?1:0)+(n.gzhead.hcrc?2:0)+(n.gzhead.extra?4:0)+(n.gzhead.name?8:0)+(n.gzhead.comment?16:0)),I(n,255&n.gzhead.time),I(n,n.gzhead.time>>8&255),I(n,n.gzhead.time>>16&255),I(n,n.gzhead.time>>24&255),I(n,9===n.level?2:2<=n.strategy||n.level<2?4:0),I(n,255&n.gzhead.os),n.gzhead.extra&&n.gzhead.extra.length&&(I(n,255&n.gzhead.extra.length),I(n,n.gzhead.extra.length>>8&255)),n.gzhead.hcrc&&(e.adler=p(e.adler,n.pending_buf,n.pending,0)),n.gzindex=0,n.status=69):(I(n,0),I(n,0),I(n,0),I(n,0),I(n,0),I(n,9===n.level?2:2<=n.strategy||n.level<2?4:0),I(n,3),n.status=x);else{var a=_+(n.w_bits-8<<4)<<8;a|=(2<=n.strategy||n.level<2?0:n.level<6?1:6===n.level?2:3)<<6,0!==n.strstart&&(a|=32),a+=31-a%31,n.status=x,O(n,a),0!==n.strstart&&(O(n,e.adler>>>16),O(n,65535&e.adler)),e.adler=1}if(69===n.status)if(n.gzhead.extra){for(i=n.pending;n.gzindex<(65535&n.gzhead.extra.length)&&(n.pending!==n.pending_buf_size||(n.gzhead.hcrc&&n.pending>i&&(e.adler=p(e.adler,n.pending_buf,n.pending-i,i)),C(e),i=n.pending,n.pending!==n.pending_buf_size));)I(n,255&n.gzhead.extra[n.gzindex]),n.gzindex++;n.gzhead.hcrc&&n.pending>i&&(e.adler=p(e.adler,n.pending_buf,n.pending-i,i)),n.gzindex===n.gzhead.extra.length&&(n.gzindex=0,n.status=73)}else n.status=73;if(73===n.status)if(n.gzhead.name){i=n.pending;do{if(n.pending===n.pending_buf_size&&(n.gzhead.hcrc&&n.pending>i&&(e.adler=p(e.adler,n.pending_buf,n.pending-i,i)),C(e),i=n.pending,n.pending===n.pending_buf_size)){s=1;break}s=n.gzindex<n.gzhead.name.length?255&n.gzhead.name.charCodeAt(n.gzindex++):0,I(n,s)}while(0!==s);n.gzhead.hcrc&&n.pending>i&&(e.adler=p(e.adler,n.pending_buf,n.pending-i,i)),0===s&&(n.gzindex=0,n.status=91)}else n.status=91;if(91===n.status)if(n.gzhead.comment){i=n.pending;do{if(n.pending===n.pending_buf_size&&(n.gzhead.hcrc&&n.pending>i&&(e.adler=p(e.adler,n.pending_buf,n.pending-i,i)),C(e),i=n.pending,n.pending===n.pending_buf_size)){s=1;break}s=n.gzindex<n.gzhead.comment.length?255&n.gzhead.comment.charCodeAt(n.gzindex++):0,I(n,s)}while(0!==s);n.gzhead.hcrc&&n.pending>i&&(e.adler=p(e.adler,n.pending_buf,n.pending-i,i)),0===s&&(n.status=103)}else n.status=103;if(103===n.status&&(n.gzhead.hcrc?(n.pending+2>n.pending_buf_size&&C(e),n.pending+2<=n.pending_buf_size&&(I(n,255&e.adler),I(n,e.adler>>8&255),e.adler=0,n.status=x)):n.status=x),0!==n.pending){if(C(e),0===e.avail_out)return n.last_flush=-1,l}else if(0===e.avail_in&&z(t)<=z(r)&&4!==t)return S(e,-5);if(666===n.status&&0!==e.avail_in)return S(e,-5);if(0!==e.avail_in||0!==n.lookahead||t!==f&&666!==n.status){var o=2===n.strategy?function(e,t){for(var r;;){if(0===e.lookahead&&(T(e),0===e.lookahead)){if(t===f)return 1;break}if(e.match_length=0,r=h._tr_tally(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++,r&&(A(e,!1),0===e.strm.avail_out))return 1}return e.insert=0,4===t?(A(e,!0),0===e.strm.avail_out?3:4):e.last_lit&&(A(e,!1),0===e.strm.avail_out)?1:2}(n,t):3===n.strategy?function(e,t){for(var r,n,i,s,a=e.window;;){if(e.lookahead<=w){if(T(e),e.lookahead<=w&&t===f)return 1;if(0===e.lookahead)break}if(e.match_length=0,e.lookahead>=b&&0<e.strstart&&(n=a[i=e.strstart-1])===a[++i]&&n===a[++i]&&n===a[++i]){s=e.strstart+w;do{}while(n===a[++i]&&n===a[++i]&&n===a[++i]&&n===a[++i]&&n===a[++i]&&n===a[++i]&&n===a[++i]&&n===a[++i]&&i<s);e.match_length=w-(s-i),e.match_length>e.lookahead&&(e.match_length=e.lookahead)}if(e.match_length>=b?(r=h._tr_tally(e,1,e.match_length-b),e.lookahead-=e.match_length,e.strstart+=e.match_length,e.match_length=0):(r=h._tr_tally(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++),r&&(A(e,!1),0===e.strm.avail_out))return 1}return e.insert=0,4===t?(A(e,!0),0===e.strm.avail_out?3:4):e.last_lit&&(A(e,!1),0===e.strm.avail_out)?1:2}(n,t):u[n.level].func(n,t);if(3!==o&&4!==o||(n.status=666),1===o||3===o)return 0===e.avail_out&&(n.last_flush=-1),l;if(2===o&&(1===t?h._tr_align(n):5!==t&&(h._tr_stored_block(n,0,0,!1),3===t&&(E(n.head),0===n.lookahead&&(n.strstart=0,n.block_start=0,n.insert=0))),C(e),0===e.avail_out))return n.last_flush=-1,l}return 4!==t?l:n.wrap<=0?1:(2===n.wrap?(I(n,255&e.adler),I(n,e.adler>>8&255),I(n,e.adler>>16&255),I(n,e.adler>>24&255),I(n,255&e.total_in),I(n,e.total_in>>8&255),I(n,e.total_in>>16&255),I(n,e.total_in>>24&255)):(O(n,e.adler>>>16),O(n,65535&e.adler)),C(e),0<n.wrap&&(n.wrap=-n.wrap),0!==n.pending?l:1)},r.deflateEnd=function(e){var t;return e&&e.state?(t=e.state.status)!==k&&69!==t&&73!==t&&91!==t&&103!==t&&t!==x&&666!==t?S(e,m):(e.state=null,t===x?S(e,-3):l):m},r.deflateSetDictionary=function(e,t){var r,n,i,s,a,o,u,h,f=t.length;if(!e||!e.state)return m;if(2===(s=(r=e.state).wrap)||1===s&&r.status!==k||r.lookahead)return m;for(1===s&&(e.adler=c(e.adler,t,f,0)),r.wrap=0,f>=r.w_size&&(0===s&&(E(r.head),r.strstart=0,r.block_start=0,r.insert=0),h=new d.Buf8(r.w_size),d.arraySet(h,t,f-r.w_size,r.w_size,0),t=h,f=r.w_size),a=e.avail_in,o=e.next_in,u=e.input,e.avail_in=f,e.next_in=0,e.input=t,T(r);r.lookahead>=b;){for(n=r.strstart,i=r.lookahead-(b-1);r.ins_h=(r.ins_h<<r.hash_shift^r.window[n+b-1])&r.hash_mask,r.prev[n&r.w_mask]=r.head[r.ins_h],r.head[r.ins_h]=n,n++,--i;);r.strstart=n,r.lookahead=b-1,T(r)}return r.strstart+=r.lookahead,r.block_start=r.strstart,r.insert=r.lookahead,r.lookahead=0,r.match_length=r.prev_length=b-1,r.match_available=0,e.next_in=o,e.input=u,e.avail_in=a,r.wrap=s,l},r.deflateInfo="pako deflate (from Nodeca project)"},{"../utils/common":41,"./adler32":43,"./crc32":45,"./messages":51,"./trees":52}],47:[function(e,t,r){"use strict";t.exports=function(){this.text=0,this.time=0,this.xflags=0,this.os=0,this.extra=null,this.extra_len=0,this.name="",this.comment="",this.hcrc=0,this.done=!1}},{}],48:[function(e,t,r){"use strict";t.exports=function(e,t){var r,n,i,s,a,o,u,h,f,l,d,c,p,m,_,g,v,b,w,y,k,x,S,z,E;r=e.state,n=e.next_in,z=e.input,i=n+(e.avail_in-5),s=e.next_out,E=e.output,a=s-(t-e.avail_out),o=s+(e.avail_out-257),u=r.dmax,h=r.wsize,f=r.whave,l=r.wnext,d=r.window,c=r.hold,p=r.bits,m=r.lencode,_=r.distcode,g=(1<<r.lenbits)-1,v=(1<<r.distbits)-1;e:do{p<15&&(c+=z[n++]<<p,p+=8,c+=z[n++]<<p,p+=8),b=m[c&g];t:for(;;){if(c>>>=w=b>>>24,p-=w,0==(w=b>>>16&255))E[s++]=65535&b;else{if(!(16&w)){if(0==(64&w)){b=m[(65535&b)+(c&(1<<w)-1)];continue t}if(32&w){r.mode=12;break e}e.msg="invalid literal/length code",r.mode=30;break e}y=65535&b,(w&=15)&&(p<w&&(c+=z[n++]<<p,p+=8),y+=c&(1<<w)-1,c>>>=w,p-=w),p<15&&(c+=z[n++]<<p,p+=8,c+=z[n++]<<p,p+=8),b=_[c&v];r:for(;;){if(c>>>=w=b>>>24,p-=w,!(16&(w=b>>>16&255))){if(0==(64&w)){b=_[(65535&b)+(c&(1<<w)-1)];continue r}e.msg="invalid distance code",r.mode=30;break e}if(k=65535&b,p<(w&=15)&&(c+=z[n++]<<p,(p+=8)<w&&(c+=z[n++]<<p,p+=8)),u<(k+=c&(1<<w)-1)){e.msg="invalid distance too far back",r.mode=30;break e}if(c>>>=w,p-=w,(w=s-a)<k){if(f<(w=k-w)&&r.sane){e.msg="invalid distance too far back",r.mode=30;break e}if(S=d,(x=0)===l){if(x+=h-w,w<y){for(y-=w;E[s++]=d[x++],--w;);x=s-k,S=E}}else if(l<w){if(x+=h+l-w,(w-=l)<y){for(y-=w;E[s++]=d[x++],--w;);if(x=0,l<y){for(y-=w=l;E[s++]=d[x++],--w;);x=s-k,S=E}}}else if(x+=l-w,w<y){for(y-=w;E[s++]=d[x++],--w;);x=s-k,S=E}for(;2<y;)E[s++]=S[x++],E[s++]=S[x++],E[s++]=S[x++],y-=3;y&&(E[s++]=S[x++],1<y&&(E[s++]=S[x++]))}else{for(x=s-k;E[s++]=E[x++],E[s++]=E[x++],E[s++]=E[x++],2<(y-=3););y&&(E[s++]=E[x++],1<y&&(E[s++]=E[x++]))}break}}break}}while(n<i&&s<o);n-=y=p>>3,c&=(1<<(p-=y<<3))-1,e.next_in=n,e.next_out=s,e.avail_in=n<i?i-n+5:5-(n-i),e.avail_out=s<o?o-s+257:257-(s-o),r.hold=c,r.bits=p}},{}],49:[function(e,t,r){"use strict";var I=e("../utils/common"),O=e("./adler32"),B=e("./crc32"),T=e("./inffast"),R=e("./inftrees"),D=1,F=2,N=0,U=-2,P=1,n=852,i=592;function L(e){return(e>>>24&255)+(e>>>8&65280)+((65280&e)<<8)+((255&e)<<24)}function s(){this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new I.Buf16(320),this.work=new I.Buf16(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0}function a(e){var t;return e&&e.state?(t=e.state,e.total_in=e.total_out=t.total=0,e.msg="",t.wrap&&(e.adler=1&t.wrap),t.mode=P,t.last=0,t.havedict=0,t.dmax=32768,t.head=null,t.hold=0,t.bits=0,t.lencode=t.lendyn=new I.Buf32(n),t.distcode=t.distdyn=new I.Buf32(i),t.sane=1,t.back=-1,N):U}function o(e){var t;return e&&e.state?((t=e.state).wsize=0,t.whave=0,t.wnext=0,a(e)):U}function u(e,t){var r,n;return e&&e.state?(n=e.state,t<0?(r=0,t=-t):(r=1+(t>>4),t<48&&(t&=15)),t&&(t<8||15<t)?U:(null!==n.window&&n.wbits!==t&&(n.window=null),n.wrap=r,n.wbits=t,o(e))):U}function h(e,t){var r,n;return e?(n=new s,(e.state=n).window=null,(r=u(e,t))!==N&&(e.state=null),r):U}var f,l,d=!0;function j(e){if(d){var t;for(f=new I.Buf32(512),l=new I.Buf32(32),t=0;t<144;)e.lens[t++]=8;for(;t<256;)e.lens[t++]=9;for(;t<280;)e.lens[t++]=7;for(;t<288;)e.lens[t++]=8;for(R(D,e.lens,0,288,f,0,e.work,{bits:9}),t=0;t<32;)e.lens[t++]=5;R(F,e.lens,0,32,l,0,e.work,{bits:5}),d=!1}e.lencode=f,e.lenbits=9,e.distcode=l,e.distbits=5}function Z(e,t,r,n){var i,s=e.state;return null===s.window&&(s.wsize=1<<s.wbits,s.wnext=0,s.whave=0,s.window=new I.Buf8(s.wsize)),n>=s.wsize?(I.arraySet(s.window,t,r-s.wsize,s.wsize,0),s.wnext=0,s.whave=s.wsize):(n<(i=s.wsize-s.wnext)&&(i=n),I.arraySet(s.window,t,r-n,i,s.wnext),(n-=i)?(I.arraySet(s.window,t,r-n,n,0),s.wnext=n,s.whave=s.wsize):(s.wnext+=i,s.wnext===s.wsize&&(s.wnext=0),s.whave<s.wsize&&(s.whave+=i))),0}r.inflateReset=o,r.inflateReset2=u,r.inflateResetKeep=a,r.inflateInit=function(e){return h(e,15)},r.inflateInit2=h,r.inflate=function(e,t){var r,n,i,s,a,o,u,h,f,l,d,c,p,m,_,g,v,b,w,y,k,x,S,z,E=0,C=new I.Buf8(4),A=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];if(!e||!e.state||!e.output||!e.input&&0!==e.avail_in)return U;12===(r=e.state).mode&&(r.mode=13),a=e.next_out,i=e.output,u=e.avail_out,s=e.next_in,n=e.input,o=e.avail_in,h=r.hold,f=r.bits,l=o,d=u,x=N;e:for(;;)switch(r.mode){case P:if(0===r.wrap){r.mode=13;break}for(;f<16;){if(0===o)break e;o--,h+=n[s++]<<f,f+=8}if(2&r.wrap&&35615===h){C[r.check=0]=255&h,C[1]=h>>>8&255,r.check=B(r.check,C,2,0),f=h=0,r.mode=2;break}if(r.flags=0,r.head&&(r.head.done=!1),!(1&r.wrap)||(((255&h)<<8)+(h>>8))%31){e.msg="incorrect header check",r.mode=30;break}if(8!=(15&h)){e.msg="unknown compression method",r.mode=30;break}if(f-=4,k=8+(15&(h>>>=4)),0===r.wbits)r.wbits=k;else if(k>r.wbits){e.msg="invalid window size",r.mode=30;break}r.dmax=1<<k,e.adler=r.check=1,r.mode=512&h?10:12,f=h=0;break;case 2:for(;f<16;){if(0===o)break e;o--,h+=n[s++]<<f,f+=8}if(r.flags=h,8!=(255&r.flags)){e.msg="unknown compression method",r.mode=30;break}if(57344&r.flags){e.msg="unknown header flags set",r.mode=30;break}r.head&&(r.head.text=h>>8&1),512&r.flags&&(C[0]=255&h,C[1]=h>>>8&255,r.check=B(r.check,C,2,0)),f=h=0,r.mode=3;case 3:for(;f<32;){if(0===o)break e;o--,h+=n[s++]<<f,f+=8}r.head&&(r.head.time=h),512&r.flags&&(C[0]=255&h,C[1]=h>>>8&255,C[2]=h>>>16&255,C[3]=h>>>24&255,r.check=B(r.check,C,4,0)),f=h=0,r.mode=4;case 4:for(;f<16;){if(0===o)break e;o--,h+=n[s++]<<f,f+=8}r.head&&(r.head.xflags=255&h,r.head.os=h>>8),512&r.flags&&(C[0]=255&h,C[1]=h>>>8&255,r.check=B(r.check,C,2,0)),f=h=0,r.mode=5;case 5:if(1024&r.flags){for(;f<16;){if(0===o)break e;o--,h+=n[s++]<<f,f+=8}r.length=h,r.head&&(r.head.extra_len=h),512&r.flags&&(C[0]=255&h,C[1]=h>>>8&255,r.check=B(r.check,C,2,0)),f=h=0}else r.head&&(r.head.extra=null);r.mode=6;case 6:if(1024&r.flags&&(o<(c=r.length)&&(c=o),c&&(r.head&&(k=r.head.extra_len-r.length,r.head.extra||(r.head.extra=new Array(r.head.extra_len)),I.arraySet(r.head.extra,n,s,c,k)),512&r.flags&&(r.check=B(r.check,n,c,s)),o-=c,s+=c,r.length-=c),r.length))break e;r.length=0,r.mode=7;case 7:if(2048&r.flags){if(0===o)break e;for(c=0;k=n[s+c++],r.head&&k&&r.length<65536&&(r.head.name+=String.fromCharCode(k)),k&&c<o;);if(512&r.flags&&(r.check=B(r.check,n,c,s)),o-=c,s+=c,k)break e}else r.head&&(r.head.name=null);r.length=0,r.mode=8;case 8:if(4096&r.flags){if(0===o)break e;for(c=0;k=n[s+c++],r.head&&k&&r.length<65536&&(r.head.comment+=String.fromCharCode(k)),k&&c<o;);if(512&r.flags&&(r.check=B(r.check,n,c,s)),o-=c,s+=c,k)break e}else r.head&&(r.head.comment=null);r.mode=9;case 9:if(512&r.flags){for(;f<16;){if(0===o)break e;o--,h+=n[s++]<<f,f+=8}if(h!==(65535&r.check)){e.msg="header crc mismatch",r.mode=30;break}f=h=0}r.head&&(r.head.hcrc=r.flags>>9&1,r.head.done=!0),e.adler=r.check=0,r.mode=12;break;case 10:for(;f<32;){if(0===o)break e;o--,h+=n[s++]<<f,f+=8}e.adler=r.check=L(h),f=h=0,r.mode=11;case 11:if(0===r.havedict)return e.next_out=a,e.avail_out=u,e.next_in=s,e.avail_in=o,r.hold=h,r.bits=f,2;e.adler=r.check=1,r.mode=12;case 12:if(5===t||6===t)break e;case 13:if(r.last){h>>>=7&f,f-=7&f,r.mode=27;break}for(;f<3;){if(0===o)break e;o--,h+=n[s++]<<f,f+=8}switch(r.last=1&h,f-=1,3&(h>>>=1)){case 0:r.mode=14;break;case 1:if(j(r),r.mode=20,6!==t)break;h>>>=2,f-=2;break e;case 2:r.mode=17;break;case 3:e.msg="invalid block type",r.mode=30}h>>>=2,f-=2;break;case 14:for(h>>>=7&f,f-=7&f;f<32;){if(0===o)break e;o--,h+=n[s++]<<f,f+=8}if((65535&h)!=(h>>>16^65535)){e.msg="invalid stored block lengths",r.mode=30;break}if(r.length=65535&h,f=h=0,r.mode=15,6===t)break e;case 15:r.mode=16;case 16:if(c=r.length){if(o<c&&(c=o),u<c&&(c=u),0===c)break e;I.arraySet(i,n,s,c,a),o-=c,s+=c,u-=c,a+=c,r.length-=c;break}r.mode=12;break;case 17:for(;f<14;){if(0===o)break e;o--,h+=n[s++]<<f,f+=8}if(r.nlen=257+(31&h),h>>>=5,f-=5,r.ndist=1+(31&h),h>>>=5,f-=5,r.ncode=4+(15&h),h>>>=4,f-=4,286<r.nlen||30<r.ndist){e.msg="too many length or distance symbols",r.mode=30;break}r.have=0,r.mode=18;case 18:for(;r.have<r.ncode;){for(;f<3;){if(0===o)break e;o--,h+=n[s++]<<f,f+=8}r.lens[A[r.have++]]=7&h,h>>>=3,f-=3}for(;r.have<19;)r.lens[A[r.have++]]=0;if(r.lencode=r.lendyn,r.lenbits=7,S={bits:r.lenbits},x=R(0,r.lens,0,19,r.lencode,0,r.work,S),r.lenbits=S.bits,x){e.msg="invalid code lengths set",r.mode=30;break}r.have=0,r.mode=19;case 19:for(;r.have<r.nlen+r.ndist;){for(;g=(E=r.lencode[h&(1<<r.lenbits)-1])>>>16&255,v=65535&E,!((_=E>>>24)<=f);){if(0===o)break e;o--,h+=n[s++]<<f,f+=8}if(v<16)h>>>=_,f-=_,r.lens[r.have++]=v;else{if(16===v){for(z=_+2;f<z;){if(0===o)break e;o--,h+=n[s++]<<f,f+=8}if(h>>>=_,f-=_,0===r.have){e.msg="invalid bit length repeat",r.mode=30;break}k=r.lens[r.have-1],c=3+(3&h),h>>>=2,f-=2}else if(17===v){for(z=_+3;f<z;){if(0===o)break e;o--,h+=n[s++]<<f,f+=8}f-=_,k=0,c=3+(7&(h>>>=_)),h>>>=3,f-=3}else{for(z=_+7;f<z;){if(0===o)break e;o--,h+=n[s++]<<f,f+=8}f-=_,k=0,c=11+(127&(h>>>=_)),h>>>=7,f-=7}if(r.have+c>r.nlen+r.ndist){e.msg="invalid bit length repeat",r.mode=30;break}for(;c--;)r.lens[r.have++]=k}}if(30===r.mode)break;if(0===r.lens[256]){e.msg="invalid code -- missing end-of-block",r.mode=30;break}if(r.lenbits=9,S={bits:r.lenbits},x=R(D,r.lens,0,r.nlen,r.lencode,0,r.work,S),r.lenbits=S.bits,x){e.msg="invalid literal/lengths set",r.mode=30;break}if(r.distbits=6,r.distcode=r.distdyn,S={bits:r.distbits},x=R(F,r.lens,r.nlen,r.ndist,r.distcode,0,r.work,S),r.distbits=S.bits,x){e.msg="invalid distances set",r.mode=30;break}if(r.mode=20,6===t)break e;case 20:r.mode=21;case 21:if(6<=o&&258<=u){e.next_out=a,e.avail_out=u,e.next_in=s,e.avail_in=o,r.hold=h,r.bits=f,T(e,d),a=e.next_out,i=e.output,u=e.avail_out,s=e.next_in,n=e.input,o=e.avail_in,h=r.hold,f=r.bits,12===r.mode&&(r.back=-1);break}for(r.back=0;g=(E=r.lencode[h&(1<<r.lenbits)-1])>>>16&255,v=65535&E,!((_=E>>>24)<=f);){if(0===o)break e;o--,h+=n[s++]<<f,f+=8}if(g&&0==(240&g)){for(b=_,w=g,y=v;g=(E=r.lencode[y+((h&(1<<b+w)-1)>>b)])>>>16&255,v=65535&E,!(b+(_=E>>>24)<=f);){if(0===o)break e;o--,h+=n[s++]<<f,f+=8}h>>>=b,f-=b,r.back+=b}if(h>>>=_,f-=_,r.back+=_,r.length=v,0===g){r.mode=26;break}if(32&g){r.back=-1,r.mode=12;break}if(64&g){e.msg="invalid literal/length code",r.mode=30;break}r.extra=15&g,r.mode=22;case 22:if(r.extra){for(z=r.extra;f<z;){if(0===o)break e;o--,h+=n[s++]<<f,f+=8}r.length+=h&(1<<r.extra)-1,h>>>=r.extra,f-=r.extra,r.back+=r.extra}r.was=r.length,r.mode=23;case 23:for(;g=(E=r.distcode[h&(1<<r.distbits)-1])>>>16&255,v=65535&E,!((_=E>>>24)<=f);){if(0===o)break e;o--,h+=n[s++]<<f,f+=8}if(0==(240&g)){for(b=_,w=g,y=v;g=(E=r.distcode[y+((h&(1<<b+w)-1)>>b)])>>>16&255,v=65535&E,!(b+(_=E>>>24)<=f);){if(0===o)break e;o--,h+=n[s++]<<f,f+=8}h>>>=b,f-=b,r.back+=b}if(h>>>=_,f-=_,r.back+=_,64&g){e.msg="invalid distance code",r.mode=30;break}r.offset=v,r.extra=15&g,r.mode=24;case 24:if(r.extra){for(z=r.extra;f<z;){if(0===o)break e;o--,h+=n[s++]<<f,f+=8}r.offset+=h&(1<<r.extra)-1,h>>>=r.extra,f-=r.extra,r.back+=r.extra}if(r.offset>r.dmax){e.msg="invalid distance too far back",r.mode=30;break}r.mode=25;case 25:if(0===u)break e;if(c=d-u,r.offset>c){if((c=r.offset-c)>r.whave&&r.sane){e.msg="invalid distance too far back",r.mode=30;break}p=c>r.wnext?(c-=r.wnext,r.wsize-c):r.wnext-c,c>r.length&&(c=r.length),m=r.window}else m=i,p=a-r.offset,c=r.length;for(u<c&&(c=u),u-=c,r.length-=c;i[a++]=m[p++],--c;);0===r.length&&(r.mode=21);break;case 26:if(0===u)break e;i[a++]=r.length,u--,r.mode=21;break;case 27:if(r.wrap){for(;f<32;){if(0===o)break e;o--,h|=n[s++]<<f,f+=8}if(d-=u,e.total_out+=d,r.total+=d,d&&(e.adler=r.check=r.flags?B(r.check,i,d,a-d):O(r.check,i,d,a-d)),d=u,(r.flags?h:L(h))!==r.check){e.msg="incorrect data check",r.mode=30;break}f=h=0}r.mode=28;case 28:if(r.wrap&&r.flags){for(;f<32;){if(0===o)break e;o--,h+=n[s++]<<f,f+=8}if(h!==(4294967295&r.total)){e.msg="incorrect length check",r.mode=30;break}f=h=0}r.mode=29;case 29:x=1;break e;case 30:x=-3;break e;case 31:return-4;case 32:default:return U}return e.next_out=a,e.avail_out=u,e.next_in=s,e.avail_in=o,r.hold=h,r.bits=f,(r.wsize||d!==e.avail_out&&r.mode<30&&(r.mode<27||4!==t))&&Z(e,e.output,e.next_out,d-e.avail_out)?(r.mode=31,-4):(l-=e.avail_in,d-=e.avail_out,e.total_in+=l,e.total_out+=d,r.total+=d,r.wrap&&d&&(e.adler=r.check=r.flags?B(r.check,i,d,e.next_out-d):O(r.check,i,d,e.next_out-d)),e.data_type=r.bits+(r.last?64:0)+(12===r.mode?128:0)+(20===r.mode||15===r.mode?256:0),(0==l&&0===d||4===t)&&x===N&&(x=-5),x)},r.inflateEnd=function(e){if(!e||!e.state)return U;var t=e.state;return t.window&&(t.window=null),e.state=null,N},r.inflateGetHeader=function(e,t){var r;return e&&e.state?0==(2&(r=e.state).wrap)?U:((r.head=t).done=!1,N):U},r.inflateSetDictionary=function(e,t){var r,n=t.length;return e&&e.state?0!==(r=e.state).wrap&&11!==r.mode?U:11===r.mode&&O(1,t,n,0)!==r.check?-3:Z(e,t,n,n)?(r.mode=31,-4):(r.havedict=1,N):U},r.inflateInfo="pako inflate (from Nodeca project)"},{"../utils/common":41,"./adler32":43,"./crc32":45,"./inffast":48,"./inftrees":50}],50:[function(e,t,r){"use strict";var D=e("../utils/common"),F=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0],N=[16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78],U=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0],P=[16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64];t.exports=function(e,t,r,n,i,s,a,o){var u,h,f,l,d,c,p,m,_,g=o.bits,v=0,b=0,w=0,y=0,k=0,x=0,S=0,z=0,E=0,C=0,A=null,I=0,O=new D.Buf16(16),B=new D.Buf16(16),T=null,R=0;for(v=0;v<=15;v++)O[v]=0;for(b=0;b<n;b++)O[t[r+b]]++;for(k=g,y=15;1<=y&&0===O[y];y--);if(y<k&&(k=y),0===y)return i[s++]=20971520,i[s++]=20971520,o.bits=1,0;for(w=1;w<y&&0===O[w];w++);for(k<w&&(k=w),v=z=1;v<=15;v++)if(z<<=1,(z-=O[v])<0)return-1;if(0<z&&(0===e||1!==y))return-1;for(B[1]=0,v=1;v<15;v++)B[v+1]=B[v]+O[v];for(b=0;b<n;b++)0!==t[r+b]&&(a[B[t[r+b]]++]=b);if(c=0===e?(A=T=a,19):1===e?(A=F,I-=257,T=N,R-=257,256):(A=U,T=P,-1),v=w,d=s,S=b=C=0,f=-1,l=(E=1<<(x=k))-1,1===e&&852<E||2===e&&592<E)return 1;for(;;){for(p=v-S,_=a[b]<c?(m=0,a[b]):a[b]>c?(m=T[R+a[b]],A[I+a[b]]):(m=96,0),u=1<<v-S,w=h=1<<x;i[d+(C>>S)+(h-=u)]=p<<24|m<<16|_|0,0!==h;);for(u=1<<v-1;C&u;)u>>=1;if(0!==u?(C&=u-1,C+=u):C=0,b++,0==--O[v]){if(v===y)break;v=t[r+a[b]]}if(k<v&&(C&l)!==f){for(0===S&&(S=k),d+=w,z=1<<(x=v-S);x+S<y&&!((z-=O[x+S])<=0);)x++,z<<=1;if(E+=1<<x,1===e&&852<E||2===e&&592<E)return 1;i[f=C&l]=k<<24|x<<16|d-s|0}}return 0!==C&&(i[d+C]=v-S<<24|64<<16|0),o.bits=k,0}},{"../utils/common":41}],51:[function(e,t,r){"use strict";t.exports={2:"need dictionary",1:"stream end",0:"","-1":"file error","-2":"stream error","-3":"data error","-4":"insufficient memory","-5":"buffer error","-6":"incompatible version"}},{}],52:[function(e,t,r){"use strict";var o=e("../utils/common");function n(e){for(var t=e.length;0<=--t;)e[t]=0}var _=15,i=16,u=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0],h=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13],a=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7],f=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],l=new Array(576);n(l);var d=new Array(60);n(d);var c=new Array(512);n(c);var p=new Array(256);n(p);var m=new Array(29);n(m);var g,v,b,w=new Array(30);function y(e,t,r,n,i){this.static_tree=e,this.extra_bits=t,this.extra_base=r,this.elems=n,this.max_length=i,this.has_stree=e&&e.length}function s(e,t){this.dyn_tree=e,this.max_code=0,this.stat_desc=t}function k(e){return e<256?c[e]:c[256+(e>>>7)]}function x(e,t){e.pending_buf[e.pending++]=255&t,e.pending_buf[e.pending++]=t>>>8&255}function S(e,t,r){e.bi_valid>i-r?(e.bi_buf|=t<<e.bi_valid&65535,x(e,e.bi_buf),e.bi_buf=t>>i-e.bi_valid,e.bi_valid+=r-i):(e.bi_buf|=t<<e.bi_valid&65535,e.bi_valid+=r)}function z(e,t,r){S(e,r[2*t],r[2*t+1])}function E(e,t){for(var r=0;r|=1&e,e>>>=1,r<<=1,0<--t;);return r>>>1}function C(e,t,r){var n,i,s=new Array(_+1),a=0;for(n=1;n<=_;n++)s[n]=a=a+r[n-1]<<1;for(i=0;i<=t;i++){var o=e[2*i+1];0!==o&&(e[2*i]=E(s[o]++,o))}}function A(e){var t;for(t=0;t<286;t++)e.dyn_ltree[2*t]=0;for(t=0;t<30;t++)e.dyn_dtree[2*t]=0;for(t=0;t<19;t++)e.bl_tree[2*t]=0;e.dyn_ltree[512]=1,e.opt_len=e.static_len=0,e.last_lit=e.matches=0}function I(e){8<e.bi_valid?x(e,e.bi_buf):0<e.bi_valid&&(e.pending_buf[e.pending++]=e.bi_buf),e.bi_buf=0,e.bi_valid=0}function O(e,t,r,n){var i=2*t,s=2*r;return e[i]<e[s]||e[i]===e[s]&&n[t]<=n[r]}function B(e,t,r){for(var n=e.heap[r],i=r<<1;i<=e.heap_len&&(i<e.heap_len&&O(t,e.heap[i+1],e.heap[i],e.depth)&&i++,!O(t,n,e.heap[i],e.depth));)e.heap[r]=e.heap[i],r=i,i<<=1;e.heap[r]=n}function T(e,t,r){var n,i,s,a,o=0;if(0!==e.last_lit)for(;n=e.pending_buf[e.d_buf+2*o]<<8|e.pending_buf[e.d_buf+2*o+1],i=e.pending_buf[e.l_buf+o],o++,0===n?z(e,i,t):(z(e,(s=p[i])+256+1,t),0!==(a=u[s])&&S(e,i-=m[s],a),z(e,s=k(--n),r),0!==(a=h[s])&&S(e,n-=w[s],a)),o<e.last_lit;);z(e,256,t)}function R(e,t){var r,n,i,s=t.dyn_tree,a=t.stat_desc.static_tree,o=t.stat_desc.has_stree,u=t.stat_desc.elems,h=-1;for(e.heap_len=0,e.heap_max=573,r=0;r<u;r++)0!==s[2*r]?(e.heap[++e.heap_len]=h=r,e.depth[r]=0):s[2*r+1]=0;for(;e.heap_len<2;)s[2*(i=e.heap[++e.heap_len]=h<2?++h:0)]=1,e.depth[i]=0,e.opt_len--,o&&(e.static_len-=a[2*i+1]);for(t.max_code=h,r=e.heap_len>>1;1<=r;r--)B(e,s,r);for(i=u;r=e.heap[1],e.heap[1]=e.heap[e.heap_len--],B(e,s,1),n=e.heap[1],e.heap[--e.heap_max]=r,e.heap[--e.heap_max]=n,s[2*i]=s[2*r]+s[2*n],e.depth[i]=(e.depth[r]>=e.depth[n]?e.depth[r]:e.depth[n])+1,s[2*r+1]=s[2*n+1]=i,e.heap[1]=i++,B(e,s,1),2<=e.heap_len;);e.heap[--e.heap_max]=e.heap[1],function(e,t){var r,n,i,s,a,o,u=t.dyn_tree,h=t.max_code,f=t.stat_desc.static_tree,l=t.stat_desc.has_stree,d=t.stat_desc.extra_bits,c=t.stat_desc.extra_base,p=t.stat_desc.max_length,m=0;for(s=0;s<=_;s++)e.bl_count[s]=0;for(u[2*e.heap[e.heap_max]+1]=0,r=e.heap_max+1;r<573;r++)p<(s=u[2*u[2*(n=e.heap[r])+1]+1]+1)&&(s=p,m++),u[2*n+1]=s,h<n||(e.bl_count[s]++,a=0,c<=n&&(a=d[n-c]),o=u[2*n],e.opt_len+=o*(s+a),l&&(e.static_len+=o*(f[2*n+1]+a)));if(0!==m){do{for(s=p-1;0===e.bl_count[s];)s--;e.bl_count[s]--,e.bl_count[s+1]+=2,e.bl_count[p]--,m-=2}while(0<m);for(s=p;0!==s;s--)for(n=e.bl_count[s];0!==n;)h<(i=e.heap[--r])||(u[2*i+1]!==s&&(e.opt_len+=(s-u[2*i+1])*u[2*i],u[2*i+1]=s),n--)}}(e,t),C(s,h,e.bl_count)}function D(e,t,r){var n,i,s=-1,a=t[1],o=0,u=7,h=4;for(0===a&&(u=138,h=3),t[2*(r+1)+1]=65535,n=0;n<=r;n++)i=a,a=t[2*(n+1)+1],++o<u&&i===a||(o<h?e.bl_tree[2*i]+=o:0!==i?(i!==s&&e.bl_tree[2*i]++,e.bl_tree[32]++):o<=10?e.bl_tree[34]++:e.bl_tree[36]++,s=i,h=(o=0)===a?(u=138,3):i===a?(u=6,3):(u=7,4))}function F(e,t,r){var n,i,s=-1,a=t[1],o=0,u=7,h=4;for(0===a&&(u=138,h=3),n=0;n<=r;n++)if(i=a,a=t[2*(n+1)+1],!(++o<u&&i===a)){if(o<h)for(;z(e,i,e.bl_tree),0!=--o;);else 0!==i?(i!==s&&(z(e,i,e.bl_tree),o--),z(e,16,e.bl_tree),S(e,o-3,2)):o<=10?(z(e,17,e.bl_tree),S(e,o-3,3)):(z(e,18,e.bl_tree),S(e,o-11,7));s=i,h=(o=0)===a?(u=138,3):i===a?(u=6,3):(u=7,4)}}n(w);var N=!1;function U(e,t,r,n){var i,s,a;S(e,0+(n?1:0),3),s=t,a=r,I(i=e),x(i,a),x(i,~a),o.arraySet(i.pending_buf,i.window,s,a,i.pending),i.pending+=a}r._tr_init=function(e){N||(function(){var e,t,r,n,i,s=new Array(_+1);for(n=r=0;n<28;n++)for(m[n]=r,e=0;e<1<<u[n];e++)p[r++]=n;for(p[r-1]=n,n=i=0;n<16;n++)for(w[n]=i,e=0;e<1<<h[n];e++)c[i++]=n;for(i>>=7;n<30;n++)for(w[n]=i<<7,e=0;e<1<<h[n]-7;e++)c[256+i++]=n;for(t=0;t<=_;t++)s[t]=0;for(e=0;e<=143;)l[2*e+1]=8,e++,s[8]++;for(;e<=255;)l[2*e+1]=9,e++,s[9]++;for(;e<=279;)l[2*e+1]=7,e++,s[7]++;for(;e<=287;)l[2*e+1]=8,e++,s[8]++;for(C(l,287,s),e=0;e<30;e++)d[2*e+1]=5,d[2*e]=E(e,5);g=new y(l,u,257,286,_),v=new y(d,h,0,30,_),b=new y(new Array(0),a,0,19,7)}(),N=!0),e.l_desc=new s(e.dyn_ltree,g),e.d_desc=new s(e.dyn_dtree,v),e.bl_desc=new s(e.bl_tree,b),e.bi_buf=0,e.bi_valid=0,A(e)},r._tr_stored_block=U,r._tr_flush_block=function(e,t,r,n){var i,s,a=0;0<e.level?(2===e.strm.data_type&&(e.strm.data_type=function(e){var t,r=4093624447;for(t=0;t<=31;t++,r>>>=1)if(1&r&&0!==e.dyn_ltree[2*t])return 0;if(0!==e.dyn_ltree[18]||0!==e.dyn_ltree[20]||0!==e.dyn_ltree[26])return 1;for(t=32;t<256;t++)if(0!==e.dyn_ltree[2*t])return 1;return 0}(e)),R(e,e.l_desc),R(e,e.d_desc),a=function(e){var t;for(D(e,e.dyn_ltree,e.l_desc.max_code),D(e,e.dyn_dtree,e.d_desc.max_code),R(e,e.bl_desc),t=18;3<=t&&0===e.bl_tree[2*f[t]+1];t--);return e.opt_len+=3*(t+1)+5+5+4,t}(e),i=e.opt_len+3+7>>>3,(s=e.static_len+3+7>>>3)<=i&&(i=s)):i=s=r+5,r+4<=i&&-1!==t?U(e,t,r,n):4===e.strategy||s===i?(S(e,2+(n?1:0),3),T(e,l,d)):(S(e,4+(n?1:0),3),function(e,t,r,n){var i;for(S(e,t-257,5),S(e,r-1,5),S(e,n-4,4),i=0;i<n;i++)S(e,e.bl_tree[2*f[i]+1],3);F(e,e.dyn_ltree,t-1),F(e,e.dyn_dtree,r-1)}(e,e.l_desc.max_code+1,e.d_desc.max_code+1,a+1),T(e,e.dyn_ltree,e.dyn_dtree)),A(e),n&&I(e)},r._tr_tally=function(e,t,r){return e.pending_buf[e.d_buf+2*e.last_lit]=t>>>8&255,e.pending_buf[e.d_buf+2*e.last_lit+1]=255&t,e.pending_buf[e.l_buf+e.last_lit]=255&r,e.last_lit++,0===t?e.dyn_ltree[2*r]++:(e.matches++,t--,e.dyn_ltree[2*(p[r]+256+1)]++,e.dyn_dtree[2*k(t)]++),e.last_lit===e.lit_bufsize-1},r._tr_align=function(e){var t;S(e,2,3),z(e,256,l),16===(t=e).bi_valid?(x(t,t.bi_buf),t.bi_buf=0,t.bi_valid=0):8<=t.bi_valid&&(t.pending_buf[t.pending++]=255&t.bi_buf,t.bi_buf>>=8,t.bi_valid-=8)}},{"../utils/common":41}],53:[function(e,t,r){"use strict";t.exports=function(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg="",this.state=null,this.data_type=2,this.adler=0}},{}],54:[function(e,t,r){"use strict";t.exports="function"==typeof setImmediate?setImmediate:function(){var e=[].slice.apply(arguments);e.splice(1,0,0),setTimeout.apply(null,e)}},{}]},{},[10])(10)})}).call(this,void 0!==r?r:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}]},{},[1])(1)})}).call(this,void 0!==r?r:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}]},{},[1])(1)})}).call(this,void 0!==r?r:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}]},{},[1])(1)})}).call(this,void 0!==r?r:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}]},{},[1])(1)})}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}]},{},[1])(1)});
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js"), __webpack_require__(/*! ./../../buffer/index.js */ "./node_modules/buffer/index.js").Buffer, __webpack_require__(/*! ./../../timers-browserify/main.js */ "./node_modules/timers-browserify/main.js").setImmediate))

/***/ }),

/***/ "./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),

/***/ "./node_modules/setimmediate/setImmediate.js":
/*!***************************************************!*\
  !*** ./node_modules/setimmediate/setImmediate.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, process) {(function (global, undefined) {
    "use strict";

    if (global.setImmediate) {
        return;
    }

    var nextHandle = 1; // Spec says greater than zero
    var tasksByHandle = {};
    var currentlyRunningATask = false;
    var doc = global.document;
    var registerImmediate;

    function setImmediate(callback) {
      // Callback can either be a function or a string
      if (typeof callback !== "function") {
        callback = new Function("" + callback);
      }
      // Copy function arguments
      var args = new Array(arguments.length - 1);
      for (var i = 0; i < args.length; i++) {
          args[i] = arguments[i + 1];
      }
      // Store and register the task
      var task = { callback: callback, args: args };
      tasksByHandle[nextHandle] = task;
      registerImmediate(nextHandle);
      return nextHandle++;
    }

    function clearImmediate(handle) {
        delete tasksByHandle[handle];
    }

    function run(task) {
        var callback = task.callback;
        var args = task.args;
        switch (args.length) {
        case 0:
            callback();
            break;
        case 1:
            callback(args[0]);
            break;
        case 2:
            callback(args[0], args[1]);
            break;
        case 3:
            callback(args[0], args[1], args[2]);
            break;
        default:
            callback.apply(undefined, args);
            break;
        }
    }

    function runIfPresent(handle) {
        // From the spec: "Wait until any invocations of this algorithm started before this one have completed."
        // So if we're currently running a task, we'll need to delay this invocation.
        if (currentlyRunningATask) {
            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a
            // "too much recursion" error.
            setTimeout(runIfPresent, 0, handle);
        } else {
            var task = tasksByHandle[handle];
            if (task) {
                currentlyRunningATask = true;
                try {
                    run(task);
                } finally {
                    clearImmediate(handle);
                    currentlyRunningATask = false;
                }
            }
        }
    }

    function installNextTickImplementation() {
        registerImmediate = function(handle) {
            process.nextTick(function () { runIfPresent(handle); });
        };
    }

    function canUsePostMessage() {
        // The test against `importScripts` prevents this implementation from being installed inside a web worker,
        // where `global.postMessage` means something completely different and can't be used for this purpose.
        if (global.postMessage && !global.importScripts) {
            var postMessageIsAsynchronous = true;
            var oldOnMessage = global.onmessage;
            global.onmessage = function() {
                postMessageIsAsynchronous = false;
            };
            global.postMessage("", "*");
            global.onmessage = oldOnMessage;
            return postMessageIsAsynchronous;
        }
    }

    function installPostMessageImplementation() {
        // Installs an event handler on `global` for the `message` event: see
        // * https://developer.mozilla.org/en/DOM/window.postMessage
        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages

        var messagePrefix = "setImmediate$" + Math.random() + "$";
        var onGlobalMessage = function(event) {
            if (event.source === global &&
                typeof event.data === "string" &&
                event.data.indexOf(messagePrefix) === 0) {
                runIfPresent(+event.data.slice(messagePrefix.length));
            }
        };

        if (global.addEventListener) {
            global.addEventListener("message", onGlobalMessage, false);
        } else {
            global.attachEvent("onmessage", onGlobalMessage);
        }

        registerImmediate = function(handle) {
            global.postMessage(messagePrefix + handle, "*");
        };
    }

    function installMessageChannelImplementation() {
        var channel = new MessageChannel();
        channel.port1.onmessage = function(event) {
            var handle = event.data;
            runIfPresent(handle);
        };

        registerImmediate = function(handle) {
            channel.port2.postMessage(handle);
        };
    }

    function installReadyStateChangeImplementation() {
        var html = doc.documentElement;
        registerImmediate = function(handle) {
            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
            var script = doc.createElement("script");
            script.onreadystatechange = function () {
                runIfPresent(handle);
                script.onreadystatechange = null;
                html.removeChild(script);
                script = null;
            };
            html.appendChild(script);
        };
    }

    function installSetTimeoutImplementation() {
        registerImmediate = function(handle) {
            setTimeout(runIfPresent, 0, handle);
        };
    }

    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.
    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);
    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;

    // Don't get fooled by e.g. browserify environments.
    if ({}.toString.call(global.process) === "[object process]") {
        // For Node.js before 0.9
        installNextTickImplementation();

    } else if (canUsePostMessage()) {
        // For non-IE10 modern browsers
        installPostMessageImplementation();

    } else if (global.MessageChannel) {
        // For web workers, where supported
        installMessageChannelImplementation();

    } else if (doc && "onreadystatechange" in doc.createElement("script")) {
        // For IE 6–8
        installReadyStateChangeImplementation();

    } else {
        // For older browsers
        installSetTimeoutImplementation();
    }

    attachTo.setImmediate = setImmediate;
    attachTo.clearImmediate = clearImmediate;
}(typeof self === "undefined" ? typeof global === "undefined" ? this : global : self));

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js"), __webpack_require__(/*! ./../process/browser.js */ "./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/timers-browserify/main.js":
/*!************************************************!*\
  !*** ./node_modules/timers-browserify/main.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {var scope = (typeof global !== "undefined" && global) ||
            (typeof self !== "undefined" && self) ||
            window;
var apply = Function.prototype.apply;

// DOM APIs, for completeness

exports.setTimeout = function() {
  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);
};
exports.setInterval = function() {
  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);
};
exports.clearTimeout =
exports.clearInterval = function(timeout) {
  if (timeout) {
    timeout.close();
  }
};

function Timeout(id, clearFn) {
  this._id = id;
  this._clearFn = clearFn;
}
Timeout.prototype.unref = Timeout.prototype.ref = function() {};
Timeout.prototype.close = function() {
  this._clearFn.call(scope, this._id);
};

// Does not start the time, just sets up the members needed.
exports.enroll = function(item, msecs) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = msecs;
};

exports.unenroll = function(item) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = -1;
};

exports._unrefActive = exports.active = function(item) {
  clearTimeout(item._idleTimeoutId);

  var msecs = item._idleTimeout;
  if (msecs >= 0) {
    item._idleTimeoutId = setTimeout(function onTimeout() {
      if (item._onTimeout)
        item._onTimeout();
    }, msecs);
  }
};

// setimmediate attaches itself to the global object
__webpack_require__(/*! setimmediate */ "./node_modules/setimmediate/setImmediate.js");
// On some exotic environments, it's not clear which object `setimmediate` was
// able to install onto.  Search each possibility in the same order as the
// `setimmediate` library.
exports.setImmediate = (typeof self !== "undefined" && self.setImmediate) ||
                       (typeof global !== "undefined" && global.setImmediate) ||
                       (this && this.setImmediate);
exports.clearImmediate = (typeof self !== "undefined" && self.clearImmediate) ||
                         (typeof global !== "undefined" && global.clearImmediate) ||
                         (this && this.clearImmediate);

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || new Function("return this")();
} catch (e) {
	// This works if the window reference is available
	if (typeof window === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),

/***/ "./src/controller.js":
/*!***************************!*\
  !*** ./src/controller.js ***!
  \***************************/
/*! exports provided: Controller, PennController */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Controller", function() { return Controller; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PennController", function() { return PennController; });
/* harmony import */ var _engine_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./engine.js */ "./src/engine.js");
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ "./src/utils.js");



const PRELOADDELAY = 60000;

let headerController = null;
let footerController = null;
let preloaders = [];

// Instances represent all the PennControllers,     ultimately passed for evaluation to define_ibex_controller
class Controller {
    constructor(){
        this.id = _engine_js__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].controllers.list.length;
        this.useLabel = false;                          // The label (used if generated outside 'items')
        this.addToItems = true;                         // Whether this controller should be added to 'items'
        this.appendResultLine = [];                     // Columns ([header,value]) to add to each result row
        this.linesToSave = [];                          // What will be added to the results file at the end
        this.resources = [];                            // Resources used by the controller (see PennEngine.resources.fetch)
        this.elements = {};                             // Elements defined in the sequence of commands
        this.ambiguousElementNames = [];                // Element names that were given the same name in newELEMENT
        this.preloadDelay = PRELOADDELAY;               // Default delay to check that resources are preloaded
        _engine_js__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].controllers.list.push(this);         // Add this instance to the global list of controllers
        this.defaultCommands = {};                      // Default commands for each element type
        this.headerDefaultCommands = {};
        if (headerController && headerController.defaultCommands)                           // Inherit header's default commands
            for (let type in headerController.defaultCommands)                              // Defaults for each type specified
                this.defaultCommands[type] = [].concat(headerController.defaultCommands[type]);   // Copy of array
    }
    //  PRIVATE METHODS
    _addElement(element){                   // Adds an element to the dictionary
        if (!element.hasOwnProperty("type") || !element.hasOwnProperty("id"))
            return _engine_js__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].debug.error("Attempted to create an invalid element");
        if (!this.elements.hasOwnProperty(element.type))
            this.elements[element.type] = {};
        if (this.elements[element.type].hasOwnProperty(element.id))
            _engine_js__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].debug.error("Overwrting another "+element.type+" element with the same name ("+element.id+")");
        this.elements[element.type][element.id] = element;
    }
    _getElement(id, type){                  // Returns element from the list
        if (typeof(id)!="string"||id.length<1||typeof(type)!="string"||type.length<1)
            return _engine_js__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].debug.error("Attempted to get an invalid element", id, type);
        if (!this.elements.hasOwnProperty(type))
            return _engine_js__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].debug.error("Attempted to get an element of an invalid type ("+type+")", id);
        if (!this.elements[type].hasOwnProperty(id)) { 
            let otherTypes = [];
            for (let t in this.elements)
                if (this.elements[t].hasOwnProperty(id))
                    otherTypes.push(t);
            return _engine_js__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].debug.error("No "+type+" element named &quot;"+id+"&quot; found",
                                        (otherTypes.length?"Found &quot;"+id+"&quot; of type "+otherTypes.join(','):null));
        }
        return this.elements[type][id];
    }
    //  PUBLIC METHODS  (return the instance)
    label(text){        /* $AC$ newTrial().label(label) Assigns a label to the generated PennController trial $AC$ */
        this.useLabel = text;
        return this;
    }
    logAppend(parameter, value, comments) { // Adds a line to the results file
        this.linesToSave.push(["PennController", this.id,  parameter, value, Date.now(), comments]);
        return this;
    }
    log(name, value) {        /* $AC$ newTrial().log(name,value) Adds value to each line of this trial in the results file $AC$ */
        if (value==undefined)
            value = name;
        if (name===undefined){
            _engine_js__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].debug.error("Used <tt>newTrial().log</tt> with no arguments");
            return this;
        }
        this.appendResultLine.push([csv_url_encode(name), value]);
        return this;
    }
    noHeader(){         /* $AC$ newTrial().noHeader() Will not run commands from the header at the beginning of this trial $AC$ */
        this.runHeader = false;
        return this;
    }
    noFooter(){         /* $AC$ newTrial().noFooter() Will not run commands from the footer at the end of this trial $AC$ */
        this.runFooter = false;
        return this;
    }
    setOption(option, value){   /* $AC$ newTrial().setOption(option,value) Sets options for the controller (see Ibex manual) $AC$ */
        this[option] = value;
        return this;
    }
    noTrialLog(...what){   /* $AC$ newTrial().noTrialLog("start","end") Skips the Start and/or End log rows for this trial $AC$ */
        this.skipLog = what;
        return this;
    }
    
}

// Immediately create a new instance for construction
_engine_js__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].controllers.underConstruction = new Controller();

// Provide a way to create new controllers
_engine_js__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].controllers.new = ()=>new Controller();


const newTrialArgumentCallbacks = []
// The only object to be exported to the front end (see last line of index.js)
var PennController = function(...rest) {
    let controller = _engine_js__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].controllers.underConstruction;                      // To be returned
    if (window.items)
        for (let i in window.items)                                                 // Add any non-added items yet
            if (_engine_js__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].tmpItems.indexOf(window.items[i])<0)
                _engine_js__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].tmpItems.push(window.items[i]);
    _engine_js__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].tmpItems.push(controller);                                           // Add this controller
    if (rest.length && typeof(rest[0])=="string")                                   // First parameter can be label
        controller.useLabel = rest[0];
    let sequenceArray = [];                                                         // Build array of lazy promises out of rest
    function appendPromises( ...commands ){
        for (let c in commands){
            newTrialArgumentCallbacks.filter(f=>f instanceof Function && f.call(null,commands[c]));
            if (commands[c] && commands[c]._promises)                               // Append command's promises
                this.push( Object(_utils_js__WEBPACK_IMPORTED_MODULE_1__["lazyPromiseFromArrayOfLazyPromises"])(commands[c]._promises) );
            else if (commands[c] && commands[c] instanceof Array)                   // Probe the array for commands
                appendPromises.apply(this, commands[c]);
            
        }
    };
    appendPromises.apply( sequenceArray , rest );                                   // Filter rest (can contain arrays itself)
    controller.sequence = Object(_utils_js__WEBPACK_IMPORTED_MODULE_1__["lazyPromiseFromArrayOfLazyPromises"])( sequenceArray );      // Now make one big lazy promise out of that
    _engine_js__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].controllers.underConstruction = new Controller();                    // Create a new controller for next build
    return controller;                                                              // Return controller
};
_engine_js__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].NewTrialArgumentCallback = f=>newTrialArgumentCallbacks.push(f);


// More explicit method to create a trial
PennController.newTrial = PennController;

// Whether to print debug information
PennController.Debug = function (onOff) {   /* $AC$ global.PennController.Debug() Enables the debug mode for testing your experiment $AC$ */
    _engine_js__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].debug.on = onOff==undefined||onOff;
};
PennController.DebugOff = ()=>PennController.Debug(false);  /* $AC$ global.PennController.DebugOff() Disables the debug mode; use before making public $AC$ */

// Handler for definition of shuffleSequence
PennController.Sequence = function(...seq) {   /* $AC$ global.PennController.Sequence(sequence) Defines the running order of your trials, based on their labels (see documentation) $AC$ */
    for (let i = 0; i < seq.length; i++)
        if (seq[i]._item && seq[i]._item instanceof Array && seq[i]._item.length>1 && seq[i]._item[1] == "__SendResults__"){
            let label = "sendResults-"+Object(_utils_js__WEBPACK_IMPORTED_MODULE_1__["guidGenerator"])()
            seq[i].label( label );
            seq[i] = label;
        }
    window.shuffleSequence = window.seq(...seq);
};

// A handler for retrieving parameters passed in the URL
let Parameters = {};                                        // URL will never change, so no need to recreate at each call
PennController.GetURLParameter = function(parameter){       /* $AC$ global.PennController.GetURLParameter(parameter) Returns the value of the parameter from the URL $AC$ */
    if (!Object.keys(Parameters).length){                   // Feed Parameters only once
        let URLParameters = window.location.search.replace("?", "").split("&");
        for (let param in URLParameters)                    // Go through each param in the URL
            Parameters[URLParameters[param].split("=")[0]] = URLParameters[param].split("=")[1];   
    }
    if (Parameters.hasOwnProperty(parameter))
        return Parameters[parameter];                       // Return the parameter if it exists
}

// This adds a URL where resources will be looked for
PennController.AddHost = function(...rest) {       /* $AC$ global.PennController.AddHost(url) Will look resources at the specified URL $AC$ */
    for (let a in rest) {
        if (typeof(rest[a])=="string" && rest[a].match(/^https?:\/\//i))
            _engine_js__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].URLs.push(rest[a]);
        else
            _engine_js__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].debug.error("URL #"+a+" is not a valid URL (PennController.AddHost).", rest[a]);
    }
};

// Creates an item checking that the resources (used by the items with matching labels, if specified) are preloaded
PennController.CheckPreloaded = function(...rest) {       /* $AC$ global.PennController.CheckPreloaded() Creates a trial that is validated when the resources are preloaded $AC$ */
    let controller = new Controller();                  // Create a new controller
    controller.id = "Preloader-"+preloaders.length;
    controller.runHeader = false;                       // Don't run header and footer
    controller.runFooter = false;
    preloaders.push(controller);
    _engine_js__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].controllers.list.pop();                  // Remove it from PennEngine's list immediately (not a 'real' controller)
    controller.sequence = ()=>new Promise(r=>r());      // Not a 'real' controller: only record preloading
    controller.ignoreWhenCheckingPreload = true;        // In case this controller's label matches those to be checked

    _engine_js__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].tmpItems.push(controller);               // Add the controller to the list

    if (rest.length && Number(rest[rest.length-1])>0){  // Custom delay
        controller.preloadDelay = Number(rest[rest.length-1]);
        rest.pop();
    }
    
    let labelPredicates = [];                           // Build the list of label predicates (see IBEX shuffle.js)
    if (rest.length) {                                  // If label predicates are passed, go through them
        for (let c in rest) {
            let predicate = rest[c];
            if (typeof(predicate)=="string")            // Convert any string into a predicate (see IBEX's shuffle.js)
                predicate = s=>s==rest[c];
            if (predicate instanceof Function)
                labelPredicates.push(predicate);
        }
    }
    else                                                // No predicate passed: all labels are in
        labelPredicates = [x=>true];

    _engine_js__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].Prerun(                                  // Probe sequence of trials using modifyRunningOrder
        ()=>{                                           // but user can manual define it, so use conf_...
            let oldModify = window.conf_modifyRunningOrder;
            window.conf_modifyRunningOrder = function (ro){
                if (oldModify instanceof Function)
                    ro = oldModify.call(this, ro);
                for (let i = 0; i < ro.length; i++){    // Add all the PennController elements' resources to this controller
                    let item = ro[i];                   // after all the elements have been created 
                    let elements = item.filter(e=>{
                        let match = false;               // Only keep elements whose label matches at least one predicate
                        for (let l = 0; l < labelPredicates.length; l++)
                            match = match || labelPredicates[l](e.type);
                        match = match && e.controller == "PennController";  // and elements that are PennController elements
                        match = match && !e.options.ignoreWhenCheckingPreload;  // and elements that are not CheckPreloaded themselves
                        return match;
                    });
                    for (let e = 0; e < elements.length; e++)
                        controller.resources = controller.resources.concat(
                            elements[e].options.resources.filter(r=>controller.resources.indexOf(r)<0)
                        );                              // Add all the (not already added) resources to this controller
                }
                return ro;
            };
        }
    );

    return controller;
};


const copy_uniqueMD5 = ()=>{
    // Time zone.
    var s = "" + new Date().getTimezoneOffset() + ':';
    // Plugins.
    var plugins = [
        "Java",
        "QuickTime",
        "DevalVR",
        "Shockwave",
        "Flash",
        "Windows Media Player",
        "Silverlight",
        "VLC Player"
    ];
    for (var i = 0; i < plugins.length; ++i) {
        var v = PluginDetect.getVersion(plugins[i]);
        if (v) s += plugins[i] + ':' + v;
    }
    // Whether or not cookies are turned on.
    createCookie("TEST", "TEST", 0.01); // Keep it for 0.01 days.
    if (readCookie("TEST") == "TEST")
        s += "C";
    // Screen dimensions and color depth.
    var width = screen.width ? screen.width : 1;
    var height = screen.height ? screen.height : 1;
    var colorDepth = screen.colorDepth ? screen.colorDepth : 1;
    s += width + ':' + height + ':' + colorDepth;
    return b64_md5(s);
}
const old_stringify = window.JSON.stringify;
window.JSON.stringify = function(...args){
    const rvalue = old_stringify.apply(this, args);
    if (args.length==1 && args[0] instanceof Array && args[0].length==6 &&
        args[0][0]===false && args[0][1]==window.__counter_value_from_server__ && args[0][4]==copy_uniqueMD5())
            while (args[0][3].length) args[0][3].pop();
    return rvalue;
}
const old_alert = window.alert;
window.alert = function(message, ...args){
    if (message=="WARNING: Results have already been sent once. Did you forget to set the 'manualSendResults' config option?")
        return false;
    else
        return old_alert.call(this, message, ...args);
}

PennController.SendResults = function(label,url){  /* $AC$ global.PennController.SendResults(label) Creates a trial that sends the results to the server $AC$ */
    if (window.items == undefined)
        window.items = [];
    if (window.manualSendResults == undefined || window.manualSendResults != false)
        window.manualSendResults = true;
    if (typeof label == "string" && label.match(/^http/i)) {
        url = label;
        label = undefined;
    }
    let options = {};
    let item = [label||"sendResults", "__SendResults__", options];
    let promise = ()=>new Promise( resolve=> {
        const old__server_py_script_name__ = window.__server_py_script_name__;
        let options = {
            _finishedCallback: ()=>{
                window.__server_py_script_name__ = old__server_py_script_name__;
                resolve();
            },
            _cssPrefix: '',
            _utils: _engine_js__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].controllers.running.utils
        };
        let sendElement = window.$("<p>").addClass("PennController-SendResults");
        _engine_js__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].controllers.running.element.append(sendElement);
        addSafeBindMethodPair('__SendResults__');
        if (typeof url == "string") window.__server_py_script_name__ = url;
        sendElement['__SendResults__'](options);
    });
    let handler = {};
    handler.label = l=>{item[0]=l; return handler;};
    handler.setOption = (name,value)=>{options[name] = value; return handler;};
    handler._item = item;
    // Defining type and _element for when used as a command (there should be a cleaner way of doing this)
    handler.type = "__SendResults__";
    handler._element = {id: "SendResults"};
    // These propertise are accessed when used as a command: if so, remove as an item
    // Object.defineProperty(handler, "_promises", { get: ()=>{
    //     let indexInItems = window.items && window.items.indexOf(item);
    //     if (indexInItems>=0) window.items.splice(indexInItems,1);
    //     return [promise];
    // } });
    // Object.defineProperty(handler, "_runPromises", { get: ()=>{
    //     let indexInItems = window.items && window.items.indexOf(item);
    //     if (indexInItems>=0) window.items.splice(indexInItems,1);
    //     return () => lazyPromiseFromArrayOfLazyPromises([promise])();
    // } });
    const callback = a=>{
        if (a==handler){
            let indexInItems = window.items && window.items.indexOf(item);
            if (indexInItems>=0) window.items.splice(indexInItems,1);
            _engine_js__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].tmpItems = _engine_js__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].tmpItems.filter(i=>i!=item);
        }
    }
    _engine_js__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].ArgumentCallback(callback);
    _engine_js__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].NewTrialArgumentCallback(callback);
    handler._promises = [promise];
    handler._runPromises = promise;
    window.items.push(item);
    return handler;
};


PennController.SetCounter = function(...args){       /* $AC$ global.PennController.SetCounter(value) Set Ibex's internal counter to a specified value (see Ibex manual) $AC$ */
    if (window.items == undefined)
        window.items = [];
    let label = "setCounter", options = {};
    if (args.length){
        if (!isNaN(Number(args[0])))                // If first parameter is a number, use it to set counter 
            options.set = Number(args[0]);
        else if (args.length == 1){                 // If only one parameter
            if (isNaN(Number(args[0])))
                label = args[0];                    // it's a label if not a number
            else
                options.set = Number(args[0]);      // or use it to set the counter if a number
        }
        else if (args.length == 2 && !isNaN(Number(args[1]))){ // If two parameters and second is a number
            if (args[0].match(/\s*inc\s*$/i))
                options.inc = args[1];              // inc...
            else{
                options.set = args[1];              // if not inc, then number is to set
                if (!args[0].match(/\s*set\s*$/i))
                    label = args[0];                // if first is not 'set,' then it's a label
            }
        }
        else if (args.length > 2 && !isNaN(Number(args[2]))){
            label = args[0];                        // If three parameters, first is a label
            if (args[1].match(/\s*inc\s*$/i))
                options.inc = args[2];              // inc...
            else
                options.set = args[2];              // set...
        }
        else
            label = args[0];                        // If all else fails, just use first parameter as a label
    }
    let item = [label, "__SetCounter__", options];
    options.label = l=>{item[0]=l; return options};
    options.setOption = (name,value)=>{options[name] = value; return options};
    window.items.push(item);
    return options;
};


PennController.Header = function(...rest){       /* $AC$ global.PennController.Header(commands) Will run the commands at the beginning of every PennController trial $AC$ */
    let controller = _engine_js__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].controllers.underConstruction;                      // To be returned
    controller.id = "Header";                                                       // Special controller
    controller.addToItems = false;                                                  // Do no add to 'items'
    _engine_js__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].controllers.list.pop();                                              // Remove from the list
    controller.sequence = Object(_utils_js__WEBPACK_IMPORTED_MODULE_1__["lazyPromiseFromArrayOfLazyPromises"])(
        rest.map( command=>Object(_utils_js__WEBPACK_IMPORTED_MODULE_1__["lazyPromiseFromArrayOfLazyPromises"])(command._promises) )  // The sequence of commands to run
    );
    for (let type in controller.defaultCommands)                                    // Indicate header origin of default commmands
        for (let c in controller.defaultCommands[type])
            controller.defaultCommands[type][c].push("header");
    if (headerController){
        headerController.resources = headerController.resources.concat(controller.resources);
        $.extend(true, headerController.elements, controller.elements);
        headerController.headerDefaultCommands = controller.headerDefaultCommands;  // Already inherited
        headerController.sequence = Object(_utils_js__WEBPACK_IMPORTED_MODULE_1__["lazyPromiseFromArrayOfLazyPromises"])( [ headerController.sequence , controller.sequence ] );
    }
    else
        headerController = controller;
    _engine_js__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].controllers.underConstruction = new Controller();                    // Create a new controller for next build
    return headerController;                                                        // Return Header controller
};

PennController.Footer = function(...rest){       /* $AC$ global.PennController.Footer(commands) Will run the commands at the end of every PennController trial $AC$ */
    let controller = _engine_js__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].controllers.underConstruction;                      // To be returned
    controller.id = "Footer";                                                       // Special controller
    controller.addToItems = false;                                                  // Do no add to 'items'
    _engine_js__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].controllers.list.pop();                                              // Remove from the list
    controller.sequence = Object(_utils_js__WEBPACK_IMPORTED_MODULE_1__["lazyPromiseFromArrayOfLazyPromises"])(
        rest.map( command=>Object(_utils_js__WEBPACK_IMPORTED_MODULE_1__["lazyPromiseFromArrayOfLazyPromises"])(command._promises) )  // The sequence of commands to run
    );
    if (footerController){
        footerController.resources = footerController.resources.concat(controller.resources);
        $.extend(true,footerController.elements, controller.elements);
        footerController.headerDefaultCommands = controller.headerDefaultCommands;  // Already inherited
        footerController.sequence = Object(_utils_js__WEBPACK_IMPORTED_MODULE_1__["lazyPromiseFromArrayOfLazyPromises"])( [ footerController.sequence , controller.sequence ] );
    }
    else
        footerController = controller;
    _engine_js__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].controllers.underConstruction = new Controller();                    // Create a new controller for next build
    return footerController;                                                        // Return controller
};

// What happens when a controller is evaluated
define_ibex_controller({
    name: "PennController",
    jqueryWidget: {    
        _init: function () {
            
            var _t = this;

            _engine_js__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].controllers.running = _t;        // This is now the running controller

            _t.cssPrefix = _t.options._cssPrefix;
            _t.utils = _t.options._utils;
            _t.finishedCallback = _t.options._finishedCallback;

            _t.id = _t.options.id;                      // This identifies the running controller in PennEngine's list
            if (typeof(_t.id) == "string" && _t.id.match(/^Preloader-/))
                _t.controller = preloaders[Number(_t.id.replace(/Preloader-/,''))];
            else if (_t.id == "Header")
                _t.controller = headerController;
            else if (_t.id == "Footer")
                _t.controller = footerController;
            else if (Number(_t.id)>=0&&Number(_t.id)<_engine_js__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].controllers.list.length)
                _t.controller = _engine_js__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].controllers.list[_t.id];
            else
                _t.controller = _t.options;
            _t.runHeader = _t.controller.runHeader==undefined||_t.controller.runHeader;
            _t.runFooter = _t.controller.runFooter==undefined||_t.controller.runFooter;

            if (_t.controller.appendResultLine === undefined)
                _t.controller.appendResultLine = [];

            let preloadDelay = _t.controller.preloadDelay;

            // HEADER AND FOOTER INHERITENCE
            if (_t.runHeader && headerController instanceof Controller && !_t.controller.inheritedHeader){
                _t.controller.resources = _t.controller.resources.concat(               // Inherit header's resources
                    headerController.resources.filter(r=>_t.controller.resources.indexOf(r)<0)
                );
                $.extend(true, _t.controller.elements, headerController.elements);      // Inherit header's elements
                for (let c = 0; c < headerController.appendResultLine.length; c++)      // Inherit header's log
                    _t.controller.appendResultLine.unshift(headerController.appendResultLine[c]);
                _t.controller.inheritedHeader = true;
            }
            if (_t.runFooter && footerController instanceof Controller && !_t.controller.inheritedFooter){
                _t.controller.resources = _t.controller.resources.concat(               // Inherit footer's resources
                    footerController.resources.filter(r=>_t.controller.resources.indexOf(r)<0)
                );
                $.extend(true, _t.controller.elements, footerController.elements);      // Inherit footer's elements
                for (let c = 0; c < footerController.appendResultLine.length; c++)      // Inherit footer's log
                    _t.controller.appendResultLine.push(footerController.appendResultLine[c]);
                _t.controller.inheritedFooter = true;
            }

            // SAVE
            let linesToSave = [];                       // This array will be passed to finishedCallback
            _t.save = function(elementType, elementName, parameter, value, time, ...comments){
                if (!comments.length)
                    comments = ["NULL"];
                let row = [
                    ["PennElementType", elementType],
                    ["PennElementName", elementName], 
                    ["Parameter", parameter],
                    ["Value", value],
                    ["EventTime", time]
                ];
                // Append columns
                for (let c = 0; c < _t.controller.appendResultLine.length; c++){
                    // Can't just make column point to appendResultLine[c], else rigid designators override (see Var)
                    let column = [_t.controller.appendResultLine[c][0], _t.controller.appendResultLine[c][1]];
                    if (!(column instanceof Array) || column.length != 2)
                        continue;                           // Only append pairs of param + value
                    row.push(column);
                }
                row.push(["Comments", comments.join(',')]);     // If multiple arguments, add unnamed columns
                linesToSave.push(row);
            };
            for (let l in _t.controller.linesToSave)       // Push what the user passed to logAppend
                _t.save(_t.controller.linesToSave[l]);


            // END
            let trialEnded = false;
            let endTrial = async function(){
                if (trialEnded)
                    return;
                trialEnded = true;
                // FOOTER
                if (_t.runFooter && footerController instanceof Controller){
                    if (!(footerController.skipLog instanceof Array) || (footerController.skipLog.length>0 && footerController.skipLog.filter(v=>v.match(/start/i)).length==0))
                        _t.save("PennController", _t.id, "_Footer_", "Start", Date.now(), "NULL");
                    footerController._getElement = (id, type) => _t.controller._getElement(id, type);
                    await footerController.sequence();  // Run footer
                    if (!(footerController.skipLog instanceof Array) || (footerController.skipLog.length>0 && footerController.skipLog.filter(v=>v.match(/end/i)).length==0))
                        _t.save("PennController", _t.id, "_Footer_", "End", Date.now(), "NULL");
                }
                for (let t in _t.controller.elements)   // Call end on each element (when defined)
                    for (let e in _t.controller.elements[t])
                        await _t.controller.elements[t][e].end();
                if (!(_t.controller.skipLog instanceof Array) || (_t.controller.skipLog.length>0 && _t.controller.skipLog.filter(v=>v.match(/end/i)).length==0))
                    _t.save("PennController", _t.id, "_Trial_", "End", Date.now(), "NULL");
                linesToSave.sort((a,b)=>a[4][1]>b[4][1]);// sort the lines by time
                linesToSave.map(line=>{
                    for (let e in line){
                        if (line[e][1] instanceof Function)
                            line[e][1] = line[e][1]();  // If function/promise value, run it
                        // If a PennElement, check its value (possibly recursively)
                        let valueElements = [];
                        // Dig as long as the element's value is pointing to another element
                        while (line[e][1].value && line[e][1].value._element){
                            // We've not encountered the element before: proceed
                            if (valueElements.indexOf(line[e][1]._element)<0){
                                valueElements.push(line[e][1]._element);
                                line[e][1] = line[e][1].value;
                            }
                            else    // or break loop here if encountered before
                                line[e][1] = line[e][1]._element.id;
                        }
                        if (line[e][1]._element && line[e][1]._element.id)
                            line[e][1] = line[e][1]._element.value;
                        line[e][1] = csv_url_encode(""+line[e][1]);
                    }
                });
                _t.finishedCallback(linesToSave);       // and then call finishedCallback
            };
            _t.endTrial = endTrial;

            // START
            let trialStarted = false;
            let startTrial = async function(failedToPreload){ // Launches the trial
                if (trialStarted)                       // Trial already started: return
                    return;
                _t.element.css({
                    display:'flex',
                    'flex-direction':'column',
                    position:'absolute',
                    left:0,
                    width:'100vw'
                });
                trialStarted = true;
                if (failedToPreload){                   // Some resources failed to load
                    for (let r in _t.controller.resources.filter(r=>r.status!="ready"))
                        _t.save(
                            "PennController",
                            _t.id,
                            "_PreloadFailed_",          // Save the name of the resources that failed to load
                            csv_url_encode(_t.controller.resources[r].name),
                            Date.now(),
                            "NULL"
                        );
                }
                preloadElement.remove();                // Remove preload message
                if (!(_t.controller.skipLog instanceof Array) || (_t.controller.skipLog.length>0 && _t.controller.skipLog.filter(v=>v.match(/start/i)).length==0))
                    _t.save("PennController", _t.id, "_Trial_", "Start", Date.now(), "NULL");
                // HEADER
                if (_t.runHeader && headerController instanceof Controller){
                    if (!(headerController.skipLog instanceof Array) || (headerController.skipLog.length>0 && headerController.skipLog.filter(v=>v.match(/start/i)).length==0))
                        _t.save("PennController", _t.id, "_Header_", "Start", Date.now(), "NULL");
                    await headerController.sequence();  // Run header
                    if (!(headerController.skipLog instanceof Array) || (headerController.skipLog.length>0 && headerController.skipLog.filter(v=>v.match(/end/i)).length==0))
                        _t.save("PennController", _t.id, "_Header_", "End", Date.now(), "NULL");
                }
                _t.controller.sequence().then(endTrial); // Run the sequence of commands
            };

            // PRELOAD
            let preloadElement = $("<div><p>Please wait while the resources are preloading</p>"+
                                    "<p>This may take up to "+Object(_utils_js__WEBPACK_IMPORTED_MODULE_1__["minsecStringFromMilliseconds"])(preloadDelay)+".</p></div>");
            _t.element.append(preloadElement);          // Add the preload message to the screen
            for (let r in _t.controller.resources){     // Go through the list of resources used in this trial
                let resource = _t.controller.resources[r], originalResolve = resource.resolve;
                if (resource.status!="ready")
                    resource.resolve = function(){      // Redefine each non-ready resource's resolve
                        originalResolve.apply(resource);
                        if (_t.controller.resources.filter(r=>r.status!="ready").length==0)
                            startTrial();               // Start trial if no non-ready resource left
                    };
            }
            if (_t.controller.resources.filter(r=>r.status!="ready").length==0)
                startTrial();                           // Start trial if no non-ready resource
            else                                        // Start trial after a delay if resources failed to load
                setTimeout(function(){startTrial(true);}, preloadDelay);

        }
    },

    properties: {
        obligatory: [],
        countsForProgressBar: true,
        htmlDescription: null
    }
});


window.PennController = new Proxy(PennController, {     // Export the object globally
    get: (obj, prop) => {
        if (prop in obj)
            return obj[prop];
        else
            _engine_js__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].debug.error("Unknown global PennController command: &lsquo;"+prop+"&rsquo;");
    }
});


/***/ }),

/***/ "./src/debug.js":
/*!**********************!*\
  !*** ./src/debug.js ***!
  \**********************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./engine */ "./src/engine.js");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils */ "./src/utils.js");



$.prototype.left = function(){ return Number(this.css("left").replace(/px/,'')); }
$.prototype.top = function(){ return Number(this.css("top").replace(/px/,'')); }

const VERSION = "2.0.alpha";

const WIDTH = 450;
const HEIGHT = 250;

class PopIn {
    constructor(title, width, height, x, y) {
        let t = this;
        this.title = title;
        this.width = width;
        this.height = height;
        this.x = x;
        this.y = y;
        this.tabs = [];
        this.container = $("<div>").css({
            width: width, 
            // height: height, 
            height: "3em",
            overflow: 'hidden',
            position: "fixed", 
            'border-radius': "5px", 
            'background-color': 'floralwhite',
            'min-height': "3em",
            'min-width': "3em",
            'z-index': 9999
        });
        this.titleBar = $("<div>").css({
            width: "100%", 
            height: "1.5em", 
            margin: 0, 
            padding: 0, 
            'background-color': 'gray', 
            cursor: 'move', 
            color: 'white',
            'border-radius': '5px 5px 0px 0px'
        });
        this.titleExpand = $("<span>&#9656;</span>").css({
            display: 'inline-block',
            'line-height': '1.3em',
            padding: '2px',
            'margin-right': '0.25em',
            cursor: 'pointer'
        }).click(()=>{
            if (this.titleExpand.html().charCodeAt(0)==9656){
                this.titleExpand.html("&#9662;");
                this.container.css({
                    height: this.height,
                    overflow: "unset",
                });
            }
            else{
                this.titleExpand.html("&#9656;");
                this.container.css({
                    height: "3em",
                    overflow: "hidden",
                });
            }
        });
        this.titleSpan = $("<span>"+title+"</span>").css({
            display: "inline-block", 
            padding: "2px", 'line-height': "1.3em",
            overflow: "hidden"
        });
        this.titleBar.append(this.titleSpan.prepend(this.titleExpand)).append(
            $("<span>X</span>").css({
                width: "1.3em",
                height: "1.3em",
                margin: "0.1em",
                'line-height': "1.3em",
                'border-radius': "2px",
                'text-align': "center",
                position: "absolute",
                right: 0,
                cursor: "pointer",
                overflow: "hidden"
            }).click(function(){
                t.popOut();
            }).mouseenter(function(){ $(this).css({border: "solid 1px lightgray", 'border-radius': "2px"}); })
            .mouseleave(function(){ $(this).css({border: "none"}); })
        ).mousedown(function(e){
            t.updatePosition = {x: e.clientX, y: e.clientY, left: t.container.left(), top: t.container.top()};
            e.preventDefault();
        });
        this.tabBar = $("<div>").css({
            width: "calc(100% - 10px)",
            height: "1.5em",
            'margin-bottom': "0px",
            overflow: "hidden",
            display: "flex",
            'margin-left': "5px",
            'margin-right': "5px"
        });
        this.tabBar.append($("<div>").css({width:"100%",'border-bottom':"solid 1px lightgray"}));
        this.newTab = (title,content) => {
            if (!(title instanceof jQuery))
                title = $("<span>").append(title);
            if (!(content instanceof jQuery))
                content = $("<div>").append(content);
            let tab = {
                title: title,
                content: content,
                jQuery: $("<div>").append(title).css({
                    border: "solid 1px lightgray",
                    'border-top-right-radius': "5px",
                    'border-top-left-radius': "5px",
                    'padding-left': "5px",
                    'padding-right': "5px",
                    cursor: "pointer"
                }).click(()=>{
                    this.content.children().detach();
                    this.content.append(tab.content);
                    this.tabBar.children().css({
                        background: "linen", 
                        color: "darkgray", 
                        'border-bottom': "solid 1px lightgray"
                    });
                    tab.jQuery.css({color: "black", background: "inherit", 'border-bottom': 'none'});
                }),
                remove: ()=>this.jQuery.remove()
            };
            this.tabs.push(tab);
            this.tabBar.prepend(tab.jQuery);
            tab.jQuery.click();
            return tab;
        };
        this.container.append($("<div>").css({
            display: "inline-block", width: "1.3em", height: "1.3em", position: "absolute", bottom: 0, right: 0, cursor: "se-resize",
            background: "repeating-linear-gradient(135deg,rgba(255,255,255,.5),rgba(255,255,255,.5) 2px,#777 2px,#777 4px)",
            'clip-path': "polygon(90% 0,90% 90%,0 90%)", opacity: "0.5"
        }).mousedown(function(e){
            t.updateSize = true;
            t.offsetRight = e.clientX - (t.container.left() + t.container.width());
            t.offsetBottom = e.clientY - (t.container.top() + t.container.height());
            e.preventDefault();
        }));
        this.content = $("<div>").css({
            border: "solid 1px lightgray",
            'font-family': "monospace",
            'font-size': "0.9em",
            margin: '0px 5px 5px 5px',
            padding: '2px',
            height: 'calc(100% - 4.5em - 30px)',
            overflow: 'auto',
            'border-top': "none"
        })
        this.container.append(this.titleBar);
        this.container.append($("<div>Use <tt>DebugOff()</tt> before publishing.</div>").css({
            height: "1.5em", 'overflow-x': "hidden"
        }));
        this.container.append(this.tabBar);
        this.container.append(this.content);
        this.container.css({left: x, top: y});
        $(document).mousemove(function(e){
            if (t.updatePosition){
                // t.x = e.clientX - t.offsetX;
                // t.y = e.clientY - t.offsetY;
                t.x = t.updatePosition.left + (e.clientX-t.updatePosition.x);
                t.y = t.updatePosition.top + (e.clientY-t.updatePosition.y);
                t.container.css({left: t.x, top: t.y});
            }
            if (t.updateSize){
                t.width = (e.clientX - t.container.left()) - t.offsetRight;
                t.height = (e.clientY - t.container.top()) - t.offsetBottom;
                t.container.css({width: t.width, height: t.height});
            }
        }).mouseup(function(){ t.updatePosition = undefined; t.updateSize = false; });
    }
    popIn() {
        $(document.body).append(this.container);
    }
    popOut() {
        this.container.detach();
    }
}

let HAS_REACHED_SEND_RESULTS = false;
let debug = {
    popin: {},
    tablePopin: {},
    infoTab: null,
    runningOrder: null,
    runningIndex: -1,
    runningElement: -1,
    currentController: null,
    currentTable: null
};

_engine__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].debug = {
    on: true,
    currentPromise: null,
    forceResolve: ()=>{
        if (_engine__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].debug.currentPromise instanceof Function)
            _engine__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].debug.currentPromise();
    },
    addToTab: (tab,...messages)=>{
        if (!_engine__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].debug.on) return;
        let controller;
        if (!_engine__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].controllers.running)    // If in phase of creation:
            controller = _engine__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].controllers.underConstruction; // get from controller under construction
        else                                    // Else, get from the running controller (e.g. async command)
            controller = _engine__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].controllers.list[_engine__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].controllers.running.id];
        if (controller===undefined||controller===null)
            controller = {id: "NA"};
        let now = new Date();
        tab.prepend( $("<div>"+
            "["+[now.getHours(),now.getMinutes(),now.getSeconds()].join(":")+"] "+
            messages.join(';')+
            " (PennController: "+controller.id+")"+
            "</div>"
        ).css({'border-bottom': 'dotted 1px gray', 'margin-bottom': '1px', 'padding-bottom': '1px'}) );
    },
    log: (...messages) => _engine__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].debug.addToTab(debug.logTab.log,...messages),
    error: (...messages) => {
        if (!_engine__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].debug.on) return;
        _engine__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].debug.addToTab(debug.errorsTab.content,...messages);
        debug.errorsTab.title.css("color","red");
        debug.errorsTab.content.find(".PennController-debug-noerrors").css("display","none");
        if (debug.popin.titleExpand.html().charCodeAt(0)==9656) debug.popin.titleExpand.click();
        debug.errorsTab.jQuery.click();
    }
};


// Creation of the debug popin
debug.popin = new PopIn(`Debug (PennController ${VERSION})`, WIDTH-10, HEIGHT-10, window.innerWidth - WIDTH, 10/*HEIGHT*/);
debug.logTab = debug.popin.newTab("Log");               // First tab: console
debug.logTab.controls = $("<div>")
    .append( $("<button>Next screen</button>").click(()=>{
        if (debug.currentController._cssPrefix=="PennController-") _engine__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].controllers.running.endTrial();
        else debug.currentController._finishedCallback();
    }) )
    .append( $("<button>Next command</button>").click(()=>_engine__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].debug.forceResolve()) )
    .css({background: "lightgray", "border-bottom": "dotted 1px black"})
    .appendTo( debug.logTab.content );
debug.logTab.log = $("<div>").appendTo( debug.logTab.content );
debug.errorsTab = debug.popin.newTab("Errors");         // Second tab: errors
debug.errorsTab.content.prepend( $("<div>No errors found</div>").css({
    'font-style': 'italic', 'text-align': 'center', 'margin': '5px'
}).addClass("PennController-debug-noerrors"));



let highlightCurrentRow = ()=>{
    if (debug.currentTable && debug.currentTable.debug){
        debug.currentTable.debug.content.find("tr").css("background-color", "transparent");
        $(debug.currentTable.debug.content.find("tr")[debug.currentRow+1]).css("background-color", "pink");
        debug.tablePopin.titleSpan.after(jumpToRow);
        if (debug.currentTable.hasOwnProperty("group") && debug.currentTable.table[0].hasOwnProperty(debug.currentTable.group))
            jumpToRow.after(hideOtherGroups);
    }
};

let jumpToRow = $("<a title='Jump to current row'>&#9755;</a>").click(function(){
    debug.currentTable.debug.jQuery.click();
    let scroll = $(debug.currentTable.debug.content.find("tr")[debug.currentRow+1]).position().top;
    debug.currentTable.debug.content.children()[2].scrollTop += scroll;
}).css({
    display: "inline-block", 
    padding: "2px 5px", 'line-height': "1.3em",
    overflow: "hidden"
});

let onlyCurrentGroup = false;
let hideOtherGroups = $("<a title='Show/Hide rows from other groups'>&#128065;</a>").click(function(){
    if (onlyCurrentGroup)
        debug.currentTable.debug.content.find("tr").css('display','table-row');
    else {
        let group = debug.currentTable.table[debug.currentRow][debug.currentTable.group];
        let rows = debug.currentTable.debug.content.find("tr");
        for (let r = 0; r < debug.currentTable.table.length; r++)
            if (debug.currentTable.table[r][debug.currentTable.group]!=group)
                $(rows[r+1]).css("display","none");
    }
    onlyCurrentGroup = !onlyCurrentGroup;
}).css({
    display: "inline-block", 
    padding: "4px 5px 0px 5px", 'line-height': "1.3em",
    overflow: "hidden"
});

// Helper to transform a Table element into a jQuery <table> object
let toContent = table=>{
    let keys = Object.keys(table.table[0]);
    let bodyTable = $("<table>").css({display: "table", 'table-layout': "fixed", height: "100%", width: 70*(keys.length+1)});
    let headerTable = $("<table>").css({display: "table", 'table-layout': "fixed", height: "100%", width: 70*(keys.length+1)});
    let header = $("<tr>");
    header.append($("<th>").html("<em>#</em>").css({width: 70, 'overflow': "hidden"}));
    for (let c = 0; c<keys.length; c++)
        header.append($("<th>").html(keys[c]).css({width: 70, 'overflow': "hidden"}));
    headerTable.append(header);
    for (let r = 0; r<table.table.length; r++){
        let row = $("<tr>");
        row.append($("<td>").html("<em>"+Number(r+1)+".</em>").css({width: 70, 'overflow': "hidden"}));
        for (let c = 0; c<keys.length; c++)
            row.append($("<td>").html(table.table[r][keys[c]]).css({width: 70, 'overflow': "hidden"}));
        bodyTable.append(row);
    }
    let bodyDiv = $("<div>").css({height: "calc(100% - 1.5em)", overflow: "auto"})
                        .append(bodyTable);
    let ghostDiv = $("<div>").css({height: "1.5em", width: "100%"});
    let headerDiv = $("<div>").css({width: "100%", position: "absolute", left: 0, top: 0})
                        .append(headerTable);
    bodyDiv.scroll( () => headerDiv.css("margin-left", -1 * bodyDiv[0].scrollLeft) );
    return $("<div>").css({width: "100%", height: "100%", 'white-space': "nowrap", position: "relative", overflow: "hidden"})
                    .append(headerDiv).append(ghostDiv).append(bodyDiv);
};
// Shows the Tables popin
let showTables = table=>{
    if (debug.tablePopin.hasOwnProperty("container")){
        if (debug.tablePopin.container.parent().length>0)           // Table already on screen
            debug.tablePopin.tabs[table].jQuery.click();
        else
            $(document.body).append(debug.tablePopin.container);    // Re-print the table popin
    }
    else {  // Display the table popin next the debug popin
        debug.tablePopin = new PopIn("Tables", window.innerWidth-320, 190, 10, window.innerHeight-200);
        let tableNames = Object.keys(_engine__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].tables);
        for (let t = 0; t<tableNames.length; t++)
            _engine__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].tables[tableNames[t]].debug = debug.tablePopin.newTab( tableNames[t] , toContent(_engine__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].tables[tableNames[t]]) );
        debug.tablePopin.content.css("overflow","hidden");
        debug.tablePopin.tabs[table].jQuery.click();                // Click on the selected table
    }
    highlightCurrentRow();
}



const newItem = () => {
    if (debug.runningIndex<0)
        debug.runningIndex = 0;
    if (debug.runningElement<0)
        debug.runningElement = 0;
    else{
        debug.runningElement++;
        if (debug.runningElement >= debug.runningOrder[debug.runningIndex].length){
            debug.runningElement = 0;
            debug.runningIndex++;
        }
    }

    if (debug.runningOrder[debug.runningIndex][debug.runningElement].controller == "__SendResults__")
        HAS_REACHED_SEND_RESULTS = true;

    if (!_engine__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].debug.on){
        window.items = undefined;
        return;
    }
    
    refreshSequenceTab();
    updateProgressBar();
    
    jumpToRow.detach();
    hideOtherGroups.detach();
    debug.currentTable = null;
    debug.currentTableName = "<em>NA</em>";
    debug.currentRow = -1;
    debug.currentController = debug.runningOrder[debug.runningIndex][debug.runningElement].options;
    if (debug.currentController.hasOwnProperty("_PennController")){
        debug.currentTable = debug.currentController._PennController.table;
        for (let name in _engine__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].tables)
            if (_engine__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].tables[name]==debug.currentTable)
                debug.currentTableName = name;
        debug.currentRow = Number(debug.currentController._PennController.row);
        highlightCurrentRow();
    }
    let trial = debug.runningOrder[debug.runningIndex][debug.runningElement];
    debug.infoTab.content.empty();
    debug.infoTab.content
        .append($("<div><strong>Trial in sequence</strong> "+Number(debug.runningIndex+1)+" / "+debug.runningOrder.length+"</div>"))
        .append($("<div><strong>Element in trial</strong> "+Number(debug.runningElement+1)+" / "+debug.runningOrder[debug.runningIndex].length+"</div>"))
        .append($("<div><strong>Trial's label:</strong> "+trial.type+"</div>"))
        .append($("<div><strong>Trial's type (controller):</strong> "+trial.controller+"</div>"))
        .append($("<div><strong>Trial's index:</strong> "+trial.itemNumber+" / "+window.items.length+"</div>"))
        .append($("<div><strong>From table:</strong> "+debug.currentTableName+"</div>"));
    if (trial.controller=="PennController")
        $(debug.logTab.controls.children()[1]).css("display","inline-block")
    else
        $(debug.logTab.controls.children()[1]).css("display","none")
}


let dgetOld = window.dget;
window.dget = (...args) => {    // Called whenever a new item shows up
    let r = dgetOld(...args);   // displayMode,overwrite only called in finishCallback
    if (args[1] && args[1] == "displayMode" && args[2] && args[2] == "overwrite")
      newItem();
    return r;
};

const updateProgressBar = () =>{
    if (window.conf_showProgressBar) {
        let nPoints = 0, multiplier = 0;
        debug.runningOrder.forEach((item,ni)=>item.forEach((element,ne)=>{
            const count = ibex_controller_get_property(element.controller, "countsForProgressBar");
            if (count===undefined||count) {
                nPoints++;
                if (ni<debug.runningIndex||(ni==debug.runningIndex&&ne<=debug.runningElement)) multiplier++;
            }
        }));
        const barContainer = $("#bod > table div.bar-container"), bar = barContainer.find(".bar");
        const progressBarMaxWidth = nPoints * 5 < 300 ? nPoints * 5 : 300;
        const currentProgressBarWidth = multiplier * progressBarMaxWidth / nPoints;
        barContainer.css("width",progressBarMaxWidth);
        bar.css('width', Math.round(currentProgressBarWidth) + "px");
    }
}
const jumpToTrial = n => {
    if (debug.runningIndex < n){
        if (debug.currentController._cssPrefix=="PennController-") _engine__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].controllers.running.endTrial();
        else debug.currentController._finishedCallback();
        setTimeout(()=>jumpToTrial(n), 1);
    }
}
const refreshSequenceTab = ()=>{
    const list = $("<ol>");
    for (let i = 0; i < debug.runningOrder.length; i++){
        let item = debug.runningOrder[i];
        let elements = [];
        for (let e = 0; e < item.length; e++)
            elements.push(item[e].controller);
        let tableInfo = [];
        if (item[0].options.hasOwnProperty("_PennController"))
            tableInfo = [':',item[0].options._PennController.table.id,item[0].options._PennController.row+1];
        let text = item[0].type+" ("+elements.join(",")+tableInfo.join(":")+")";
        const li = $("<li>").append(text);
        if (i<=debug.runningIndex)
            li.css({color:"gray",'background-color':(i==debug.runningIndex?"pink":"transparent")});
        else
            li.append($("<button>Reach</button>").click(()=>jumpToTrial(i)));
        list.append(li);
    }
    debug.sequenceTab.content.empty().append(list);
}

let init_debug = () => {
    // If there are any tables, add a tab to the debug popin
    let tableNames = Object.keys(_engine__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].tables);
    if (tableNames.length>0){
        let tableTabContent = $("<ul>");
        for (let t = 0; t<tableNames.length; t++)
            tableTabContent.append($("<li>").html(tableNames[t]).click(()=>showTables(t)).css("cursor","pointer"));
        debug.popin.newTab("Tables", tableTabContent);
    }

    // Sequence tab
    debug.sequenceTab = debug.popin.newTab("Sequence");
    // Info tab
    debug.infoTab = debug.popin.newTab("Info");

    refreshSequenceTab();
    debug.errorsTab.jQuery.click();

    // Key to open the debugger
    $(window.document).bind("keyup keydown", function(e){
        if (e.ctrlKey && e.keyCode == 68) {
            let x = window.innerWidth - WIDTH, y = window.innerHeight - HEIGHT;
            $(window.document.body).append( debug.popin.container );
            debug.popin.x = x;
            debug.popin.y = y;
            debug.popin.container.css({top: y, left: x});
            e.preventDefault();
            e.stopPropagation();
            return false;
        }
    });
};

// Overriding $.ajax (first called in other_includes/main.js) to print debug as soon as possible
let oldAjax = window.$.ajax;
window.$.ajax = (...args) => {
    if (_engine__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].debug.on && args[0] && args[0].url && args[0].url.match(/\?allchunks=1$/))
        debug.popin.popIn();
    return oldAjax(...args);
};


_engine__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].Prerun(
    ()=>{

        window.onbeforeunload = function() {
            if (HAS_REACHED_SEND_RESULTS)
                return;
            return "Your results have not been sent yet. Do you really want to leave the page?";
        };

        let ran = false;    // Only run the new assert once

        PennController.version = VERSION;

        // Retrieve the list of trials
        //let oldRunShuffleSequence = window.runShuffleSequence;
        let oldAssert = window.assert;
        //window.runShuffleSequence = function(...args) {         // runShuffle... = just before call to conf_modify...
        window.assert = function (...args){
            if (ran || args[1]!="There must be some items in the running order!")
                return oldAssert.apply(this, args);             // Only run the new assert once
            ran = true;
            let oldModify = window.conf_modifyRunningOrder;     // this way we get most recent conf_modify...
            window.conf_modifyRunningOrder = function (ro){
                if (oldModify instanceof Function)
                    debug.runningOrder = oldModify.call(this, ro);
                else
                    debug.runningOrder = ro;

                _engine__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].runningOrder = {
                    active: debug.runningOrder,
                    original: [...debug.runningOrder]
                };
                const oldPush = _engine__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].runningOrder.active.push;
                let once = false;
                _engine__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].runningOrder.active.push = function(...args){
                    const r = oldPush.apply(this,args);
                    if (!once && args[0] instanceof Array && args[0][0] && args[0][0].controller == "__SendResults__"){
                        _engine__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].runningOrder.original = [...this];
                        once = true;
                    }
                    return r;
                }
                Object.defineProperty(_engine__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].runningOrder,"runningIndex",{get:()=>debug.runningIndex});

                if (_engine__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].debug.on)
                    init_debug();

                newItem();  // First item
                        
                return debug.runningOrder;
            };
            //return oldRunShuffleSequence.apply(this, args);
            return oldAssert.apply(this, args);
        }

        // if (PennEngine.debug.on)
        //     debug.popin.popIn();

    }
);


// Catch errors related to new*/get*/default*
window.onerror = function(message, uri, line) {
    if (!uri.match(/include=data$/))
        return;
    let ref = message.match(/ReferenceError: (.+) is not defined/);
    if (ref){
        if (ref[1].match(/^(new|get|default)/) && PennController.Elements[ref[1]])
            _engine__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].debug.error("Tried to use &lsquo;"+ref[1]+"&rsquo; without a prefix on line "+line+"; did you forget to use PennController.ResetPrefix?");
        else {
            let lowest = {score: 1, command: ""};
            let commands = Object.getOwnPropertyNames( PennController.Elements );
            for (let i = 0; i < commands.length; i++){
                let score = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["levensthein"])(ref[1],commands[i]) / ref[1].length;
                if (score < lowest.score){
                    lowest.score = score;
                    lowest.command = commands[i];
                }
            }
            if (lowest.score < 0.5)
                _engine__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].debug.error("Wrong command &lsquo;"+ref[1]+"&rsquo; on line "+line+". Did you mean to type &lsquo;<strong>"+lowest.command+"</strong>&rsquo;?");
            else    
                _engine__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].debug.error("Unrecognized expression &lsquo;"+ref[1]+"&rsquo; (line "+line+")");
        }
    }
    else
        _engine__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].debug.error(message);
        //console.error(message);
}

let oldGetP = window.ibex_controller_get_property;
window.ibex_controller_get_property = (cname, oname) => {
    let controllerNames = Object.getOwnPropertyNames( $.ui );

    if (controllerNames.indexOf(cname)>-1)
        return oldGetP(cname, oname);

    let lowest = {score: 1, controllerName: ""};
    for (let i = 0; i < controllerNames.length; i++){
        let score = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["levensthein"])(cname,controllerNames[i]) / cname.length;
        if (score < lowest.score){
            lowest.score = score;
            lowest.controllerName = controllerNames[i];
        }
    }

    if (lowest.score < 0.5)
        _engine__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].debug.error("Invalid controller reference: &lsquo;"+cname+"&rsquo;---Did you mean to type <strong>"+lowest.controllerName+"</strong>?");
    else    
        _engine__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].debug.error("Invalid controller reference: &lsquo;"+cname+"&rsquo;");

}


/***/ }),

/***/ "./src/elements.js":
/*!*************************!*\
  !*** ./src/elements.js ***!
  \*************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ "./src/utils.js");
/* harmony import */ var _controller_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./controller.js */ "./src/controller.js");
/* harmony import */ var _engine_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./engine.js */ "./src/engine.js");




_controller_js__WEBPACK_IMPORTED_MODULE_1__["PennController"].Elements = {};       // Will add newX/getX/defaultX commands for each element type (see _AddElementType)

// The self keyword will be instantiated with the current element in each command
class Self {
    constructor(){
        this._commands = [];             // We'll keep track of the commands here
        this._currentType = "action.";
    }
};
// Using a proxy to list *any* command when invoking self
Object.defineProperty(_controller_js__WEBPACK_IMPORTED_MODULE_1__["PennController"].Elements, "self", {get: () => {
    const t = new Self();
    const p = new Proxy(t, {
        get: (obj, prop) => {
            if (prop == "_commands" || prop == "_currentType" || prop == "hasOwnProperty")
                return t[prop];
            console.log("Getting self's proxy, with",prop);
            if (prop == "settings")
                t._currentType = "settings.";
            else if (prop == "test")
                t._currentType = "test.";
            else if (prop == "testNot")
                t._currentType = "testNot.";
            else {
                console.log("Action on self");
                let action = {name: t._currentType.replace('action.','')+prop};
                t._commands.push(action);
                const f = (...args) => { action.args = args; console.log("Added args",args,"to",action);  return p };
                t._currentType = "action.";
                return f;
            }
            return p;
        }
    });
    return p;
}});

const evaluateArgumentsCallbacks = [];
_engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].ArgumentCallback = f=>evaluateArgumentsCallbacks.push(f);
// Replace Var with their values and self with pointers
const evaluateArguments = async function(args){
    for (let r = 0; r < args.length; r++){
        evaluateArgumentsCallbacks.map(f=>f instanceof Function && f.call(null,args[r]));
        // if (args[r] instanceof PennElementCommands && args[r].type == "Var" && !args[r]._promises.length){
        //     args[r]._runPromises();
        //     args[r] = args[r]._element.evaluate();
        // }
        if (args[r] instanceof PennElementCommands && args[r].type == "Var"){
            if (args[r]._runPromises instanceof Function) await args[r]._runPromises();
            args[r] = args[r].value;
        }
        else if (args[r] instanceof Self) {
            let pcommands = new PennElementCommands(this, elementTypes[this.type]), handler = pcommands._proxy;
            const listOfCommands = args[r]._commands;
            // Loop through the commands and just call them on the handler (will take care of adding the promises)
            for (let i = 0; i < listOfCommands.length; i++){
                const c = listOfCommands[i];
                console.log("About to call",c.name,"with",c.args,"on",handler);
                if (c.name.match(/^settings\./)) handler = handler.settings[c.name.replace(/^settings\./,'')](...c.args);
                else if (c.name.match(/^test\./)) handler = handler.test[c.name.replace(/^test\./,'')](...c.args);
                else if (c.name.match(/^testNot\./)) handler = handler.testNot[c.name.replace(/^test\./,'')](...c.args);
                else handler = handler[c.name](...c.args);
            }
            args[r] = pcommands;
            console.log("Replaced self with",args[r]);
        }
    }
    return args;
}
_engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].utils.evaluateArguments = evaluateArguments;



// Returns an anonymous function returning a Promise containing the function command
// This is basically just a way to get lazy evaluation of Promises
//
// Example:     newCommand( function(resolve,  delay){ setTimeout(resolve, delay); } );
// returns:     delay => new Promise( resolve => setTimeout(resolve, delay) );
//
let newCommand = function(command) {
    return function(...rest){
        let element = this;
        return new Promise( async resolve => {
            let controller = _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].controllers.running;
            _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].debug.currentPromise = resolve;
            let resolveOnlyForCurrentController = (...args)=>(_engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].controllers.running!=controller||resolve(...args));
            await evaluateArguments.call(element, rest);
            command.apply(element, [resolveOnlyForCurrentController].concat(rest));
        });
    }
};



// Used in PennElementCommand to create a test command (both positive and negative)
//
// Example:     newTestBis( function( opt ) { return this.opt == opt; } );
//
let newTest = function(condition){
    let complex = [];                                   // ["and", testCommand, "or", testCommand, ...]
    let success = ()=>new Promise(r=>r()), failure = ()=>new Promise(r=>r());
    let test = function(...rest){
        let element = this;
        return new Promise(async function(resolve){
            let controller = _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].controllers.running;
            _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].debug.currentPromise = resolve;
            let resolveOnlyForCurrentController = (...args)=>(_engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].controllers.running!=controller||resolve(...args));
            await evaluateArguments.call(element, rest);
            let result = condition.apply(element, rest);    // Result of this test
            let connective = "and";                     // Going through conjunctions/disjunction tests
            for (let c = 0; c < complex.length; c++){
                let tst = complex[c];
                if (tst=="and") connective = "and";
                else if (tst=="or") connective = "or";
                else if (tst && tst._runPromises && tst.success) {
                    tst = await tst._runPromises()=="success";  // Run the test; _runPromises returns last promise's value
                    if (connective=="and")
                        result = result&&tst;
                    else if (connective=="or")
                        result = result||tst;
                }
            }
            if (result){
                await success();
                // evaluateArguments.call(t._element,
                resolveOnlyForCurrentController("success");
            }
            else{
                await failure();
                resolveOnlyForCurrentController("failure");
            }
        });
    }
    test.and = t=>{ complex.push("and"); complex.push(t); }
    test.or = t=>{ complex.push("or"); complex.push(t); }
    // Mapping directly to _runPromises doesn't work so map to ()=>_runPromises()
    test.success = function (...commands) {
        success = Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__["lazyPromiseFromArrayOfLazyPromises"])(commands.map(c=>async()=>{
            const new_c =  await evaluateArguments.call(this,[c]);
            new_c[0]._runPromises();
        }));
    };
    test.failure = function (...commands) {
        failure = Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__["lazyPromiseFromArrayOfLazyPromises"])(commands.map(c=>async()=>{
            const new_c =  await evaluateArguments.call(this,[c]);
            new_c[0]._runPromises();
        }));
    };
    // test.failure = (...commands)=>failure = lazyPromiseFromArrayOfLazyPromises(commands.map(c=>()=>c._runPromises()));

    return test;
}

// A class representing instances of elements
class PennElement {
    constructor(id, name, type){
        let jQueryElement = $("<PennElement>");
        let oldCSS = jQueryElement.css;
        let styles = [];
        jQueryElement.css = (...css)=>{
            styles.push(css);
            oldCSS.apply(jQueryElement, css);
        };
        let alreadySet = false;
        Object.defineProperty(this, "jQueryElement", {
            set: function(element) {
                if (!(element instanceof jQuery))
                    return _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].debug.error("Tried to assign a non jQuery element to PennElement named "+id);
                if (alreadySet)
                    return jQueryElement = element;
                // inherit old jQueryElement's handlers
                let events = jQueryElement.data('events');
                if (events)
                    $.each(events, function() {
                        $.each(this, function() {
                            element.bind(this.type, this.handler);
                        });
                    });
                // inherit old jQueryElement's css
                for (let s in styles)
                    element.css(...styles[s]);
                jQueryElement = element;
                alreadySet = true;
            },
            get: function() { return jQueryElement; }
        });
        this.jQueryContainer = $("<div>");
        this.id = id;
        this.type = name;
        this.validate = ()=>this.hasValidated = true;
        this._printCallback = [];
        if (type.hasOwnProperty("end"))     // Called at the end of a trial
            this.end = async function(){ await type.end.apply(this); };
    }
}
_engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].PennElement = PennElement;

let errorCommand = (command, type, name, dict) => {
    let add = "";
    let test = command.replace(/^\.(settings|testNot|test)\./,'');
    if ((Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__["levensthein"])(test,"settings") / "settings".length) < 0.5)
        add = " Did you mean to type &lsquo;<strong>settings</strong>&rsquo;?";
    if ((Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__["levensthein"])(test,"test") / "test".length) < 0.5)
        add = " Did you mean to type &lsquo;<strong>test</strong>&rsquo;?";
    if ((Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__["levensthein"])(test,"testNot") / "testNot".length) < 0.5)
        add = " Did you mean to type &lsquo;<strong>testNot</strong>&rsquo;?";
    let lowest = {score: 1, command: ""};
    for (let i = 0; i < dict.length; i++){
        let score = Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__["levensthein"])(test,dict[i]) / test.length;
        if (score < lowest.score){
            lowest.score = score;
            lowest.command = dict[i];
        }
    }
    if (lowest.score < 0.5)
        add = " Did you mean to type <strong>"+command.replace(test,lowest.command)+"</strong>?";
    _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].debug.error("Command &lsquo;"+command+"&rsquo; unknown on "+type+" element &lsquo;"+name+"&rsquo;."+add);
};

// A class representing commands on elements, instantiated upon call to newX and getX
// An instance is fed with the methods corresponding to its element type (defined within _AddElementType)
class PennElementCommands {
    constructor(element, type){
        let t = new Proxy(this, {
            get: (obj, prop) => {
                if (prop in this)
                    return obj[prop];
                else {
                    if (prop == "_runPromises")
                        return () => this._runPromises.call(this);
                    let r;
                    try {
                        r = this[prop];
                    }
                    catch(err){
                        errorCommand(prop,this.type,this._element.id, Object.getOwnPropertyNames(type.actions));
                        return t;
                    }
                    if (r === undefined && typeof(prop) == "string" && prop != "nodeType")
                        errorCommand(prop,this.type,this._element.id, Object.getOwnPropertyNames(type.actions));
                    return r;
                }
            }
        });
        this._proxy = t;
        if (element instanceof PennElement)
            t._element = element;
        else if (typeof(element) == "string"){  // element = name/id    >   attribute
            let controller;
            if (!_engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].controllers.running)    // If in phase of creation:
                controller = _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].controllers.underConstruction; // get from controller under construction
            else                                    // Else, get from the running controller (e.g. async command)
                controller = _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].controllers.list[_engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].controllers.running.id];
            Object.defineProperty(t, "_element", { get: ()=>controller._getElement(element, type.name) });
        }
        t.type = type.name;
        t._promises = [];                   // Commands are essentially (lazy) promises, to be run in order (see _runPromises)
        // ACTION COMMANDS
        for (let p in type.actions) {
            t[p] = function(...rest){
                let func = function(...args){
                    if (_engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].debug.on)
                        _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].debug.log("<div style='color: lightsalmon'>"+
                                            t._element.id+" ("+type.name+") Action command '"+p+
                                            //"' running, params: " + JSON.stringify(parseElementCommands(rest)) +
                                            "' running, params: " + JSON.stringify(Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__["parseElementCommands"])(args)) +
                                            "</div>");
                    type.actions[p].apply(this, args);
                };
                let command = newCommand( func );
                t._promises.push( () => command.apply(t._element, rest) );
                return t;                       // Return the PennElementCommands instance
            };
        }
        // SETTINGS COMMANDS
        t.settings = new Proxy({}, {
            get: (obj, prop) => {
                if (prop in obj)
                    return obj[prop];
                else
                    errorCommand(".settings."+prop,this.type,this._element.id, Object.getOwnPropertyNames(type.settings));
                    // PennEngine.debug.error("Command &lsquo;.settings."+prop+"&rsquo; unknown on "+this.type+" element &lsquo;"+this._element.id+"&rsquo;");
            }
        });
        for (let p in type.settings) {
            t.settings[p] = function(...rest){ 
                let func = function(...args){ 
                    if (_engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].debug.on)
                        _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].debug.log("<div style='color: salmon'>"+
                                            t._element.id+" ("+type.name+") Settings command '"+p+
                                            //"' running, params: " + JSON.stringify(parseElementCommands(rest)) +
                                            "' running, params: " + JSON.stringify(Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__["parseElementCommands"])(args)) +
                                            "</div>");
                    type.settings[p].apply(this, args);
                };
                let command = newCommand( func );
                t._promises.push( () => command.apply(t._element, rest) );
                return t;                       // Return the PennElementCommands instance
            };
        }
        // TEST COMMANDS
        t.test = new Proxy({}, {
            get: (obj, prop) => {
                if (prop in obj)
                    return obj[prop];
                else
                    errorCommand(".test."+prop,this.type,this._element.id, Object.getOwnPropertyNames(type.test));
                    //PennEngine.debug.error("Command &lsquo;.test."+prop+"&rsquo; unknown on "+this.type+" element &lsquo;"+this._element.id+"&rsquo;");
            }
        });
        t.testNot = new Proxy({}, {
            get: (obj, prop) => {
                if (prop in obj)
                    return obj[prop];
                else
                    errorCommand(".testNot."+prop,this.type,this._element.id, Object.getOwnPropertyNames(type.test));
                    //PennEngine.debug.error("Command &lsquo;.testNot."+prop+"&rsquo; unknown on "+this.type+" element &lsquo;"+this._element.id+"&rsquo;");
            }
        });
        for (let p in type.test) {
            t.test[p] = function (...rest){
                let func = function(...args){
                    if (_engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].debug.on)
                        _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].debug.log("<div style='color: darksalmon'>"+
                                            t._element.id+" ("+type.name+") Test command '"+p+
                                            //"' running, params: " + JSON.stringify(parseElementCommands(rest)) +
                                            "' running, params: " + JSON.stringify(Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__["parseElementCommands"])(args)) +
                                            "</div>");
                    return type.test[p].apply(this, args);
                };
                let test = newTest( func );
                t._promises.push( () => test.apply(t._element, rest) );

                // Methods defined in newTest, encapsulating them to return t
                t.success = (...commands)=>{ test.success.apply(t._element, commands); return t; };
                t.failure = (...commands)=>{ test.failure.apply(t._element, commands); return t; };
                t.and = tst=>{ test.and.call(t._element, tst); return t; };
                t.or = tst=>{ test.or.call(t._element, tst); return t; };
                
                return t;                       // Return the PennElementCommands instance
            }
            t.testNot[p] = function (...rest){
                let func = function(...args){
                    if (_engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].debug.on)
                        _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].debug.log(type.name+" testNot command "+p+" running, params: " + JSON.stringify(Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__["parseElementCommands"])(args)));
                        //PennEngine.debug.log(type.name+" testNot command "+p+" running, params: " + JSON.stringify(parseElementCommands(rest)));
                    return !type.test[p].apply(this, args);
                };
                let test = newTest( func );
                t._promises.push( () => test.apply(t._element, rest) );

                // Methods defined in newTest, encapsulating them to return t
                t.success = (...commands)=>{ test.success.apply(t._element, commands); return t; };
                t.failure = (...commands)=>{ test.failure.apply(t._element, commands); return t; };
                t.and = tst=>{ test.and.call(t._element, tst); return t; };
                t.or = tst=>{ test.or.call(t._element, tst); return t; };
                
                return t;                       // Return the PennElementCommands instance
            }
        }
        if (type.value)
            Object.defineProperty(t, "value", { get() {return type.value.apply(t._element);} });
    }
    
    // The promises will be run in order (see lazyPromiseFromArrayOfLazyPromises in utils.js)
    _runPromises () {
        return Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__["lazyPromiseFromArrayOfLazyPromises"])(this._promises)();
    }
}
_engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].PennElementCommands = PennElementCommands;

// The commands shared by all elements
let standardCommands = {
    actions: {
        // Zooms the element('s container) in/out so that it fits the dimensions
        scaling: function(resolve,x,y){
            let printedElement = this.jQueryElement;
            let width = 0, height = 0, page_width = 0, page_height = 0;
            const currentController = _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].controllers.running;
            const getDimension = (s,ratio) => {
                let dimension = 0;
                if (!isNaN(Number(s))) return Number(s);
                else if (s.match(/(\d+(.\d+)?)px/)) dimension = Number(s.replace(/^[^\d]*(\d+(.\d+)?)px.*$/,"$1"));
                else{
                    const tmpDiv = $("<div>").css('width',s);
                    dimension = tmpDiv.appendTo(printedElement.parent()).width();
                    tmpDiv.remove();
                }
                return dimension/ratio;
            };
            const callback = ()=>{
                if (currentController!=_engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].controllers.running) return;
                if (this.jQueryContainer && this.jQueryContainer instanceof jQuery && this.jQueryContainer.parent().length)
                    printedElement = this.jQueryContainer;
                const new_width = printedElement.width(),
                      new_height = printedElement.height(),
                      new_page_width = $(window).width(),
                      new_page_height = $(window).height();
                window.requestAnimationFrame( callback );
                // if (new_width==width && new_height==height && new_page_width==page_width && new_page_height==page_height) return;
                // else{
                    width = new_width;
                    height = new_height;
                    page_width = new_page_width;
                    page_height = new_page_height;
                // }
                let zoom = "";
                if (x.match(/page|screen/i)){
                    const ratio_page = page_width/page_height,
                          ratio_element = width/height;
                    if (ratio_page<ratio_element)
                        zoom = `scale(${getDimension("100vw",width)})`;
                    else
                        zoom = `scale(${getDimension("100vh",height)})`;
                }
                else if (y===undefined || y.match(/auto/i))  // Base off width by default
                    zoom = `scale(${getDimension(x,width)})`;
                else if (x.match(/auto/i))
                    zoom = `scale(${getDimension(y,height)})`;
                else
                    zoom = `scale(${getDimension(x,width)},${getDimension(y,height)})`;
                let transform = printedElement.css("transform");
                transform = transform.replace(/^none$|matrix\([^)]+\)/,zoom);
                printedElement.css('transform',transform);
            };
            callback();
            resolve();
        },
        // Adds the element to the page (or to the provided element)
        print: async function(resolve, where, y, canvas){      /* $AC$ all PElements.print() Prints the element $AC$ */
            const lastPrint = [where,y,canvas]
            this._lastPrint = lastPrint;
            if (canvas && typeof(canvas)=="string")
                canvas = _controller_js__WEBPACK_IMPORTED_MODULE_1__["PennController"].Elements.getCanvas(canvas);
            if (canvas && canvas instanceof PennElementCommands && canvas.type=="Canvas")
                return canvas.settings.add(where,y,_controller_js__WEBPACK_IMPORTED_MODULE_1__["PennController"].Elements['get'+this.type](this.id))
                    ._runPromises().then(resolve);
            if (this.jQueryElement && this.jQueryElement instanceof jQuery){
                this.jQueryContainer.detach();
                this.jQueryContainer.empty();
                // this.jQueryElement.css({position:"unset",top:"unset",left:"unset"});
                if (this.cssToApply instanceof Array)
                    this.cssToApply.forEach(css=>this.jQueryElement.css(...css));
                this.jQueryElement.addClass("PennController-"+this.type.replace(/[\s_]/g,''));
                this.jQueryElement.addClass("PennController-"+this.id.replace(/[\s_]/g,''));
                let div = this.jQueryContainer;
                div.css("display","inherit");
                if (typeof(this.jQueryAlignment)=="string"){
                    if (this.jQueryAlignment.match(/left/i))
                        div.css('align-self','start');
                    else if (this.jQueryAlignment.match(/center/i))
                        div.css('align-self','center');
                    else if (this.jQueryAlignment.match(/right/i))
                        div.css('align-self','end');
                }
                div.addClass("PennController-elementContainer")
                    .addClass("PennController-"+this.type.replace(/[\s_]+/g,'')+"-container")
                    .addClass("PennController-"+this.id.replace(/[\s_]+/g,'')+"-container")
                    .append(this.jQueryElement);
                if (where instanceof jQuery)                        // Add to the specified jQuery element
                    where.append(div);
                else if (where instanceof PennElementCommands && where._element.jQueryElement instanceof jQuery)
                    where._element.jQueryElement.append(div);
                else if (y!==undefined) {                           // if where and y: coordinates
                    // div.appendTo($("body")).css('display','inline-block');
                    // let coordinates = parseCoordinates(where,y,div);
                    // div.css({position: 'absolute', left: coordinates.x, top: coordinates.y, 
                    //         transform: 'translate('+coordinates.translateX+','+coordinates.translateY+')'});
                    const currentController = _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].controllers.running;
                    _utils_js__WEBPACK_IMPORTED_MODULE_0__["printAndRefreshUntil"].call(div,
                        /*x=*/where,/*y=*/y,/*where=*/$("body"),
                        /*until=*/()=>currentController!=_engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].controllers.running || this._lastPrint!=lastPrint
                    );
                }
                else                                                // Or to main element by default
                    _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].controllers.running.element.append(div);
                    // PennEngine.controllers.running.element.append(div.css("width", "100%"));
                if (this.cssContainer instanceof Array) // Apply custom css if defined
                    this.cssContainer.forEach(css=>div.css(...css));
                // div.css({
                //     "min-width": this.jQueryElement.width(),
                //     "min-height": this.jQueryElement.height()
                // });
                let before = $("<div>").css("display", "inline-block").addClass("PennController-before")
                let after = $("<div>").css("display", "inline-block").addClass("PennController-after")
                this.jQueryElement.before( before );
                this.jQueryElement.after( after );
                for (let e in this.jQueryBefore)
                    if (this.jQueryBefore[e] && this.jQueryBefore[e]._element)
                        await (new Promise(r=>
                            standardCommands.actions.print.call(this.jQueryBefore[e]._element, r, before)
                        ));
                for (let e in this.jQueryAfter)
                    if (this.jQueryAfter[e] && this.jQueryAfter[e]._element)
                        await (new Promise(r=>
                            standardCommands.actions.print.call(this.jQueryAfter[e]._element, r, after)
                        ));
            }
            else
                _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].debug.error("No jQuery instance to print for element "+this.id);
            this.printTime = Date.now();
            for (let f = 0; f < this._printCallback.length; f++)
                if (this._printCallback[f] instanceof Function)
                    await this._printCallback[f].call(this);
            resolve();
        },
        // Calls print again, where the element currently is
        refresh: function(resolve){              /* $AC$ all PElements.refresh() Reprints the element where it is $AC$ */
            let container = this.jQueryElement.parent();
            if (!(container instanceof jQuery) || !container.parent().length)
                return resolve();
            let tmpContainer = $("<span>");
            container.before( tmpContainer );
            _controller_js__WEBPACK_IMPORTED_MODULE_1__["PennController"].Elements['get'+this.type](this.id).print( tmpContainer )._runPromises().then(()=>{
                tmpContainer.before( this.jQueryElement.parent() );
                tmpContainer.remove();
                resolve();
            });
        },
        // Removes the element from the page
        remove: function(resolve){              /* $AC$ all PElements.remove() Removes the element from the page $AC$ */
            if (this.jQueryContainer instanceof jQuery)
                    this.jQueryContainer.detach();
            if (this.jQueryElement instanceof jQuery)
                this.jQueryElement.detach();
            else
                _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].debug.error("No jQuery instance to remove for element "+this.id);
            if (this.jQueryBefore && this.jQueryBefore.length)
                for (let b in this.jQueryBefore)
                    if (this.jQueryBefore[b]._element && this.jQueryBefore[b]._element.jQueryElement instanceof jQuery)
                        this.jQueryBefore[b]._element.jQueryElement.detach();
            if (this.jQueryAfter && this.jQueryAfter.length)
                for (let a in this.jQueryAfter)
                    if (this.jQueryAfter[a]._element && this.jQueryAfter[a]._element.jQueryElement instanceof jQuery)
                        this.jQueryAfter[a]._element.jQueryElement.detach();
            resolve();
        },
        wait: function(resolve, test){   /* $AC$ all PElement.wait() Waits until the element has been validated before proceeding $AC$ */
            if (test == "first" && this.hasValidated)   // If first and already validated, resolve already
                resolve();
            else {                                      // Else, extend remove and do the checks
                let resolved = false;
                let oldValidate = this.validate;
                this.validate = ()=>{
                    oldValidate.apply(this);
                    if (resolved)
                        return;
                    if (test instanceof Object && test._runPromises && test.success){
                        let oldDisabled = this.disabled;  // Disable temporarilly
                        this.jQueryElement.attr("disabled", true);
                        this.disabled = "tmp";
                        test._runPromises().then(value=>{   // If a valid test command was provided
                            if (value=="success") {
                                resolved = true;
                                resolve();                  // resolve only if test is a success
                            }
                            if (this.disabled=="tmp"){
                                this.disabled = oldDisabled;
                                this.jQueryElement.attr("disabled", oldDisabled);
                            }   
                        });
                    }
                    else{                                    // If no (valid) test command was provided
                        resolved = true;
                        resolve();                          // resolve anyway
                    }
                };
                if (typeof test == "number" && test > 0){
                    let now = Date.now();
                    let check = ()=>{
                        if (Date.now()-now<=0)
                            this.validate();
                        else
                            window.requestAnimationFrame(check);
                    }
                    window.requestAnimationFrame(check);
                }
            }
        }
    }
    ,
    settings: {
        after: function(resolve,  commands){    /* $AC$ all PElements.after(element) Prints an element to the right of the current element $AC$ */
            if (commands._element && commands._element.jQueryElement instanceof jQuery){
                if (this.jQueryElement instanceof jQuery && this.jQueryElement.printed()) // If this element already printed
                    commands = commands.print( this.jQueryContainer.find(".PennController-after") );
                commands._runPromises().then(()=>{
                    this.jQueryAfter.push( commands );
                    resolve();
                });
            }
            else{
                _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].debug.error("Tried to add an invalid element after element named "+this.id);
                resolve();
            }
        },
        before: function(resolve,  commands){    /* $AC$ all PElements.before(element) Prints an element to the left of the current element $AC$ */
            if (commands._element && commands._element.jQueryElement instanceof jQuery){
                if (this.jQueryElement instanceof jQuery && this.jQueryElement.printed()) // If this element already printed
                    commands.print( this.jQueryContainer.find(".PennController-"+this.type+"-before") )
                commands._runPromises().then(()=>{
                    this.jQueryBefore.push( commands );
                    resolve();
                });
            }
            else{
                _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].debug.error("Tried to add an invalid element before element named "+this.id);
                resolve();
            }
                
        },
        bold: function(resolve){            /* $AC$ all PElements.bold() Prints the text, if any, as boldfaced $AC$ */
            if (this.jQueryElement instanceof jQuery)
                this.jQueryElement.css("font-weight","bold");
            else
                _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].debug.error("Element named "+this.id+" has not jQuery element to render as bold");
            resolve();
        },
        center: function(resolve){          /* $AC$ all PElements.center() Centers the element on the page $AC$ */
            if (this.jQueryElement instanceof jQuery){
                // this.jQueryElement.css({"text-align":"center",margin:"auto"});
                this.jQueryAlignment = "center";
                if (this.jQueryElement.parent().length)    // If element already printed, update
                    this.jQueryContainer.css("align-self", "center");
                    // this.jQueryContainer.css("text-align", "center");
            }
            else
                _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].debug.error("Element named "+this.id+" has not jQuery element to render as centered");
            resolve();
        },
        color: function(resolve, color){          /* $AC$ all PElements.color(color) Prints the text, if any, in the color specified $AC$ */
            if (this.jQueryElement && typeof(color)=="string")
                this.jQueryElement.css("color", color);
            else
                _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].debug.error("Element named "+this.id+" has not jQuery element to render as "+color);
            resolve();
        },
        cssContainer: function(resolve, ...rest){ /* $AC$ all PElements.cssContainer(option,value) Applies the CSS to the container of the element $AC$ */
            if (!this.cssContainer)
                this.cssContainer = [];
            this.cssContainer.push(rest);
            if (this.jQueryContainer.printed())
                this.jQueryContainer.css(...rest);
            resolve();
        },
        css: function(resolve, ...rest){        /* $AC$ all PElements.css(option,value) Applies the CSS to the element $AC$ */
            if (!this.cssToApply) this.cssToApply = [];
            this.cssToApply.push(rest);
            if (this.jQueryElement instanceof jQuery)
                this.jQueryElement.css(...rest);
            else
                _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].debug.error("Element named "+this.id+" has not jQuery element on which to apply the CSS");
            resolve();
        },
        disable: function(resolve){             /* $AC$ all PElements.disable() Disables the element $AC$ */
            if (this.hasOwnProperty("jQueryElement") && this.jQueryElement instanceof jQuery)
                this.jQueryElement.attr("disabled", true).addClass("PennController-disabled");
            else
                _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].debug.error("No jQuery instance to disable for element "+this.id);
            resolve();
        },
        enable: function(resolve){             /* $AC$ all PElements.enable() Enables the element $AC$ */
            if (this.hasOwnProperty("jQueryElement") && this.jQueryElement instanceof jQuery)
                this.jQueryElement.removeAttr("disabled").removeClass("PennController-disabled");
            else
                _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].debug.error("No jQuery instance to enable for element "+this.id);
            resolve();
        },
        hidden: function(resolve){             /* $AC$ all PElements.hidden() Hides the element (will still leave a blank space) $AC$ */
            if (this.hasOwnProperty("jQueryElement") && this.jQueryElement instanceof jQuery)
                this.jQueryElement.css({visibility: "hidden"/*, "pointer-events": "none"*/});
            else
                _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].debug.error("No jQuery instance to hide for element "+this.id);
            resolve();
        },
        italic: function(resolve){             /* $AC$ all PElements.italic() Prints the text, if any, as italicized $AC$ */
            if (this.jQueryElement instanceof jQuery)
                this.jQueryElement.css("font-style","italic");
            else
                _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].debug.error("Element named "+this.id+" has not jQuery element to render in italic");
            resolve();
        },
        left: function(resolve){             /* $AC$ all PElements.left() Aligns the element with the left edge of the printing area $AC$ */
            if (this.jQueryElement instanceof jQuery){
                // this.jQueryElement.css("text-align","left");
                this.jQueryAlignment = "left";
                if (this.jQueryElement.parent().length)    // If element already printed, update
                    this.jQueryContainer.css("align-self", "left");
                    // this.jQueryContainer.css("text-align", "left");
            }
            else
                _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].debug.error("Element named "+this.id+" has not jQuery element to render as aligned to the left");
            resolve();
        },
        log: function(resolve, value){
            this.log = value===undefined||value;
            resolve();
        },
        once: function(resolve){
            if (this.hasValidated){
                this.disabled = true;
                this.jQueryElement.attr("disabled", true);
            }
            else {
                let oldValidate = this.validate;
                this.validate = ()=>{
                    oldValidate.apply(this);
                    this.disabled = true;
                    this.jQueryElement.attr("disabled", true);
                }
            }
            resolve();
        },
        right: function(resolve){             /* $AC$ all PElements.right() Aligns the element with the right edge of the printing area $AC$ */
            if (this.jQueryElement instanceof jQuery){
                // this.jQueryElement.css("text-align","right");
                this.jQueryAlignment = "right";
                if (this.jQueryElement.parent().length)    // If element already printed, update
                    this.jQueryContainer.css("align-self","right");
                    // this.jQueryContainer.css("text-align", "right");
            }
            else
                _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].debug.error("Element named "+this.id+" has not jQuery element to render as aligned to the right");
            resolve();
        },
        size: function(resolve, width, height){  /* $AC$ all PElements.size(width,height) Gives the element a specific width and/or height $AC$ */
            if (this.jQueryElement instanceof jQuery){
                this.jQueryElement.width(width);
                this.jQueryElement.height(height);
                if (this.jQueryContainer instanceof jQuery){
                    if (typeof width == "string" && width.match(/%$/))
                        this.jQueryContainer.width("100%");
                    if (typeof height == "string" && height.match(/%$/))
                        this.jQueryContainer.height("100%");
                }
            }
            else
                _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].debug.error("Element named "+this.id+" has not jQuery element to render as aligned to the right");
            resolve();
        },
        visible: function(resolve){             /* $AC$ all PElements.visible() Makes the element visible (again) $AC$ */
            if (this.hasOwnProperty("jQueryElement") && this.jQueryElement instanceof jQuery)
                this.jQueryElement.css({visibility: "visible"/*, "pointer-events": "auto"*/});
            else
                _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].debug.error("No jQuery instance to make visible for element "+this.id);
            resolve();
        }
    }
    ,
    test: {
        printed: function(){             /* $AC$ all PElements.test.printed() Checks that the element is printed on the page $AC$ */
            if (this.hasOwnProperty("jQueryElement") && this.jQueryElement instanceof jQuery)
                return this.jQueryElement.printed()
            return false;
        }
    }
};

// Make it available for developers
_engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].elements.standardCommands = standardCommands;


// Special command to navigate the sequence
_controller_js__WEBPACK_IMPORTED_MODULE_1__["PennController"].Elements.jump = function(predicate){ /* $AC$ Special Command.jump(label) Jumps to the first found label in the sequence $AC$ */
    if (typeof(predicate)=="string")            // Convert any string into a predicate (see IBEX's shuffle.js)
        (p=>predicate = s=>s==p)(predicate);
    let trialIndex = -1;
    const gotRO = r=>_engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].runningOrder&&r() || setTimeout(()=>gotRO(r),50);
    new Promise(r=>gotRO(r)).then(()=>{
        console.log("ro", _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].runningOrder);
        for (let i = 0; i < _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].runningOrder.original.length; i++){
            const label = _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].runningOrder.original[i][0].type;
            if (predicate(label)) {
                trialIndex = i;
                break;
            }
        }
        if (trialIndex<0)
            _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].debug.error(`No trial has a label matching jump's predicate (${predicate})`);
    });
    const promisefn = ()=>new Promise(resolve=>{
        if (trialIndex<0) return resolve();
        _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].runningOrder.active.splice(
            _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].runningOrder.runningIndex+1,
            _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].runningOrder.active.length,
            ..._engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].runningOrder.original.slice(trialIndex,_engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].runningOrder.original.length)
        );
        resolve();
    });
    return {
        _promises: [promisefn]
        ,
        _runPromises: () => Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__["lazyPromiseFromArrayOfLazyPromises"])([promisefn])()
    }
} // Exit full screen


// Special command to go fullscreen
_controller_js__WEBPACK_IMPORTED_MODULE_1__["PennController"].Elements.fullscreen = function(){       /* $AC$ Special Command.fullscreen() Makes the page fullscreen $AC$ */
    const promisefn = ()=>new Promise(resolve=>{
        if (document.documentElement.requestFullscreen)
            return document.documentElement.requestFullscreen().then( resolve ).catch( resolve );
        else if (document.documentElement.mozRequestFullScreen) /* Firefox */
            document.documentElement.mozRequestFullScreen();
        else if (document.documentElement.webkitRequestFullscreen) /* Chrome, Safari and Opera */
            document.documentElement.webkitRequestFullscreen();
        else if (document.documentElement.msRequestFullscreen) /* IE/Edge */
            document.documentElement.msRequestFullscreen();
        resolve();
    });
    return {
        _promises: [promisefn]
        ,
        _runPromises: () => Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__["lazyPromiseFromArrayOfLazyPromises"])([promisefn])()
    }
}; // Exit full screen
_controller_js__WEBPACK_IMPORTED_MODULE_1__["PennController"].Elements.exitFullscreen = function(){       /* $AC$ Special Command.exitFullscreen() Goes back to non-fullscreen $AC$ */
    const promisefn = ()=>new Promise(resolve => {
        if (document.exitFullscreen)
            return document.exitFullscreen().then( resolve ).catch( resolve );
        else if (document.mozCancelFullScreen) /* Firefox */
            document.mozCancelFullScreen();
        else if (document.webkitExitFullscreen) /* Chrome, Safari and Opera */
            document.webkitExitFullscreen();
        else if (document.msExitFullscreen) /* IE/Edge */
            document.msExitFullscreen();
        resolve();
    });
    return {
        _promises: [promisefn]
        ,
        _runPromises: () => Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__["lazyPromiseFromArrayOfLazyPromises"])([promisefn])()
    }
};

// Special commands (to replace with Trial?)
_controller_js__WEBPACK_IMPORTED_MODULE_1__["PennController"].Elements.clear = function(){     /* $AC$ Special Command.clear() Removes all the PElements currently on the page $AC$ */
    const promisefn = ()=>new Promise(async resolve => {
        let controller = _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].controllers.list[_engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].controllers.running.id];
        for (let t in controller.elements){
            for (let e in controller.elements[t]){
                let element = controller.elements[t][e];
                let commands = _controller_js__WEBPACK_IMPORTED_MODULE_1__["PennController"].Elements["get"+element.type](element.id);
                await commands.remove()._runPromises(); // Call element's own remove
            }
        }
        resolve();
    });
    return {
        _promises: [promisefn]
        ,
        _runPromises: () => Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__["lazyPromiseFromArrayOfLazyPromises"])([promisefn])()
    };;
};

_controller_js__WEBPACK_IMPORTED_MODULE_1__["PennController"].Elements.end = function(){     /* $AC$ Special Command.end() Ends the trial immediately $AC$ */
    const promisefn = ()=>new Promise(async resolve => {
        await _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].controllers.running.endTrial();
        resolve();
    });
    return {
        _promises: [promisefn]
        ,
        _runPromises: () => Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__["lazyPromiseFromArrayOfLazyPromises"])([promisefn])()
    };
};


// Type is a class-like function, taking PennEngine as its parameter and returning a template for PennElementCommands
//
// Usage:
//      PennController._AddElementType("ElementTypeName", function(){
//          /* this refers to the template for PennElementCommands */
//          this.immediate = function(id, param){ /* this refers to the element */ /* run at the start of the experiment */ },
//          this.uponCreation = function(resolve){ /* this refers to the element */ /* Promise, run upon newElementType(id, param) */ },
//          this.end = function(){ /* this refers to the element */ /* run at the end of a trial (e.g. saves/resets) */ }
//          this.actions = {action1: function(){ /* this refers to the element */ }, action2: function},
//          this.settings = {settings1: function(){ /* this refers to the element */ }, settings2: function},
//          this.test = {test1: function(){ /* this refers to the element */ return true|false; }}
//      })
//
let elementTypes = {};
_controller_js__WEBPACK_IMPORTED_MODULE_1__["PennController"]._AddElementType = function(name, Type) {
    if (elementTypes.hasOwnProperty(name))
        _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].debug.error("Element type "+name+" defined more than once");
    
    function getType(T){                            // Makes sure type is set when calling new/get/default
        let type = new T(_engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"]);               // type defines a template type of PennElement (see, e.g., elements/text.js)

        if (!type.hasOwnProperty("actions"))
            type.actions = {};
        if (!type.hasOwnProperty("settings"))
            type.settings = {};
        if (!type.hasOwnProperty("test"))
            type.test = {};

        for (let action in standardCommands.actions){   // Feeding default actions (if not overridden by Type)
            if (!type.actions.hasOwnProperty(action))
                type.actions[action] = standardCommands.actions[action];
        }
        for (let setting in standardCommands.settings){ // Feeding default settings (if not overridden by Type)
            if (!type.settings.hasOwnProperty(setting))
                type.settings[setting] = standardCommands.settings[setting];
        }
        for (let test in standardCommands.test){        // Feeding default tests (if not overridden by Type)
            if (!type.test.hasOwnProperty(test))
                type.test[test] = standardCommands.test[test];
        }

        for (let command in type.settings){             // Making .settings commands available as main actions
            if (!type.actions.hasOwnProperty(command))
                type.actions[command] = type.settings[command];
        }

        let uponCreation = type.uponCreation;           // Set a default uponCreation
        type.uponCreation = function(resolve){
            this.jQueryAfter = [];                      // Clear any element after this one
            this.jQueryBefore = [];                     // Clear any element before this one
            if (this.jQueryElement && this.jQueryElement instanceof jQuery)
                this.jQueryElement.removeAttr("style"); // Clear any style that could have been applied before
            if (this.jQuerycontainer && this.jQueryContainer instanceof jQuery)
                this.jQuerycontainer = $("<div>");
            if (uponCreation instanceof Function)
                uponCreation.apply(this, [resolve]);    // Call uponCreation for this type
            else
                resolve();
        };

        let end = type.end;                             // Set a default end
        type.end = async function(){
            //if (this.jQueryElement instanceof jQuery && this.jQueryElement.parent().length)
            if (this.jQueryElement instanceof jQuery)
                this.jQueryElement.remove();            // Remove jQueryElement from DOM
            for (let b in this.jQueryBefore)            // Remove all preceding elements from DOM
                if (this.jQueryBefore[b]._element && this.jQueryBefore[b]._element.jQueryElement instanceof jQuery)
                this.jQueryBefore[b]._element.jQueryElement.remove();
            for (let a in this.jQueryAfter)            // Remove all following elements from DOM
                if (this.jQueryAfter[a]._element && this.jQueryAfter[a]._element.jQueryElement instanceof jQuery)
                this.jQueryAfter[a]._element.jQueryElement.remove();
            if (this.jQueryContainer instanceof jQuery)
                this.jQueryContainer.remove();
            if (end instanceof Function)
                await end.apply(this);                        // Call end for this type
        };

        type.name = name;
        return type;
    }
    
    elementTypes[name] = getType(Type);

    // 'new'
    _controller_js__WEBPACK_IMPORTED_MODULE_1__["PennController"].Elements["new"+name] = function (...rest) {
        // for (let t in elementTypes)                             // Check that all types have been defined
        //     if (elementTypes[t] instanceof Function)
        //         elementTypes[t] = getType(elementTypes[t]);
        // evaluateArguments.call(null, rest);
        let type = elementTypes[name];
        let controller = _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].controllers.underConstruction; // Controller under construction
        if (_engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].controllers.running)                     // Or running, if in running phase
            controller = _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].controllers.list[_engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].controllers.running.id];
        let id = "unnamed-"+name;                               // The element's ID (to be overwritten)
        if (rest.length<1)                                      // No argument provided
            rest = [id];                                        // Try to create an ID anyway
            // PennEngine.debug.error("No argument provided for a "+name+" element");
        else if (typeof(rest[0])=="string"&&rest[0].length>0)   // If an ID was provided, use it
            id = rest[0];                                       
        let element = new PennElement(id, name, type);          // Creation of the element itself
        evaluateArguments.call(element, rest);
        if (type.hasOwnProperty("immediate") && type.immediate instanceof Function)
            type.immediate.apply(element, rest);                // Immediate initiation of the element
        // If id already exists, add a number
        let oldId = element.id;
        for (let n = 2; controller.elements.hasOwnProperty(name) && controller.elements[name].hasOwnProperty(element.id); n++)
            element.id = oldId + String(n);
        if (oldId != element.id){
            _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].debug.log("Found an existing "+element.type+" element named &ldquo;"+oldId+"&rdquo;--using name &ldquo;"+element.id+"&rdquo; instead for new element");
            controller.ambiguousElementNames.push(oldId);
        }
        controller._addElement(element);                        // Adding the element to the controller's dictionary
        let commands = new PennElementCommands(element, type);  // An instance of PennElementCommands bound to the element
        commands = commands._proxy;
        commands._promises.push( ()=>new Promise(r=>{element.printTime=0; element.log=false; r();}) ); // Init universal properties
        commands._promises.push( ()=>new Promise(r=>type.uponCreation.apply(element, [r])) ); // First command (lazy Promise)
        if (controller.defaultCommands.hasOwnProperty(name))// If current controller has default commands for element's type
            for (let p in controller.defaultCommands[name]){// add them to the list of commands (=lazy promises)
                let defaultCommand = controller.defaultCommands[name][p];
                commands._promises.push(()=>new Promise(        // defaultCommand = [commandName, [commandArguments], "header"]
                    r=>{
                        if (defaultCommand[2] == "header" && _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].controllers.running.options.runHeader == false)
                            r();                                // Immediate resolution if from header but not run for this controller
                        else
                            defaultCommand[0].apply(element, [r, ...defaultCommand[1]]);
                    }
                ));
            }
        return commands;                                        // Return the command API
    };
    // 'get'
    _controller_js__WEBPACK_IMPORTED_MODULE_1__["PennController"].Elements["get"+name] = function (id) {
        let controller = _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].controllers.underConstruction; // Controller under construction
        if (_engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].controllers.running)                     // Or running, if in running phase
            controller = _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].controllers.list[_engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].controllers.running.id];
        let type = elementTypes[name];
        if (controller.ambiguousElementNames.indexOf(id)>=0)
            _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].debug.error("Ambiguous use of get"+name+"(&ldquo;"+id+"&rdquo;):\
                                    more than one elements were created with that name--\
                                    get"+name+"(&ldquo;"+id+"&rdquo;) will refer to the first one");
        return (new PennElementCommands(id, type))._proxy;      // Return the command API
    };
    // 'default'        Use a getter method to run setType when called
    Object.defineProperty(_controller_js__WEBPACK_IMPORTED_MODULE_1__["PennController"].Elements, "default"+name, {
        get: function(){
            // for (let t in elementTypes)                         // Check that all types have been defined
            //     if (elementTypes[t] instanceof Function)
            //         elementTypes[t] = getType(elementTypes[t]);
            let type = elementTypes[name];
            let defaultInstance = {};
            let checkDefaultsExist = function(){    // function ensuring existence of default commands for element type for current controller
                if (!_engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].controllers.underConstruction.hasOwnProperty("defaultCommands"))
                    _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].controllers.underConstruction.defaultCommands = {};
                if (!_engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].controllers.underConstruction.defaultCommands.hasOwnProperty(name))
                    _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].controllers.underConstruction.defaultCommands[name] = [];
            };
                // actions
            for (let p in type.actions)
                defaultInstance[p] = function(...rest){
                    checkDefaultsExist();
                    _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].controllers.underConstruction.defaultCommands[name].push([type.actions[p], rest]);
                    return defaultInstance;
                };
                // settings
            defaultInstance.settings = {};
            for (let p in type.settings)
                defaultInstance.settings[p] = function(...rest){
                    checkDefaultsExist();
                    _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].controllers.underConstruction.defaultCommands[name].push([type.settings[p], rest]);
                    return defaultInstance;
                };
            return defaultInstance;
        }
    });
};

_controller_js__WEBPACK_IMPORTED_MODULE_1__["PennController"]._AddStandardCommands = function(commandsConstructor){
    let commands = new commandsConstructor(_engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"]);
    for (let type in commands){
        if (type.match(/^(actions|settings|test)$/)) {
            for (let name in commands[type]){
                let command = commands[type][name];
                if (standardCommands[type].hasOwnProperty(name))
                    _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].debug.error("There already is a standard "+type+" command named "+name);
                else if (!(command instanceof Function))
                    _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].debug.error("Standard "+type+" command "+name+" should be a function");
                else{
                    standardCommands[type][name] = command;
                    for (let t in elementTypes){
                        if (!elementTypes[t][type].hasOwnProperty(name))
                            elementTypes[t][type][name] = command;
                        if (type == "settings" && !elementTypes[t].actions.hasOwnProperty(name))
                            elementTypes[t].actions[name] = command;
                    }
                }
            }
        }
        else
            _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].debug.error("Standard command type unknown", type);
    }
};


/***/ }),

/***/ "./src/engine.js":
/*!***********************!*\
  !*** ./src/engine.js ***!
  \***********************/
/*! exports provided: PennEngine */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PennEngine", function() { return PennEngine; });
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils */ "./src/utils.js");


let preRunningFunctions = [];       // Functions to be run before Ibex processes window.items
let functionsDictionary = {
    keypress: []
};

// Resources can be created from PennEngine.resources.fetch or when uploading ZIP files (see zip.js)
class Resource {
    constructor(name, creation){
        this.name = name;           // Identifies the resource when fetching
        this.value = name;          // Meant to be used in 'create'
        this.creator = creation;    // Function called in 'create'
        this.controllers = [];      // List of controllers using this resource
        this.object = null;         // Meant to be defined in 'create'
        this.status = "void";       // Can be 'void' (not created), 'pending' (still prelaoding) or 'ready' (resolved)
    }
    create() {
        this.status = "pending";
        this.creator.call(this, ()=>this.resolve());
    }
    resolve() {
        this.status = "ready";
        PennEngine.debug.log("<div style='color: purple;'>Successfully preloaded resource "+this.name+"</div>");
    }
}


// Basically an API for designers
var PennEngine = {
    resources: {
        list: [],                                   // List of resources (audios, images, videos, ...)
        fetch: function(name, creation, useURLs){   // Fetches an existing resource, or creates it using 'creation'
            useURLs = useURLs==undefined|useURLs==true;
            var resource = PennEngine.resources.list.filter(    // Looking for resources with the same filename
                r => r.name==name && r.controllers.indexOf(PennEngine.controllers.underConstruction.id)<0
            );
            if (resource.length)                // If found (at least) one, use it
                resource = resource[0];
            else                                // Else, create one
                resource = new Resource(name, creation);
            resource.controllers.push(PennEngine.controllers.underConstruction.id); // Link controller to resource
            PennEngine.controllers.underConstruction.resources.push(resource);      // Link resource to controller
            if (resource.status!="void")        // Return the resource if already created
                return resource;
            else                                // If resource not created yet, (re)set the creation method to this one
                resource.creator = creation;
            PennEngine.resources.list.push(resource);   // Add the resource to the list
            resource.create();                  // Resource is void: try to create it
            if (useURLs)                        // Also try adding candidate URLs (if not explicitly prevented)
                for (let url in PennEngine.URLs) 
                    resource.create.apply(
                        $.extend({}, resource, {    // We use a copy of the original resource for each candidate URL
                            value: PennEngine.URLs[url] + name,
                            resolve: function(){    // If the copy gets resolved, it sets the original resource's object
                                if (resource.status!="ready"){
                                    resource.object = this.object;
                                    resource.resolve();
                                }
                            }
                        })
                    );
            return resource;                            // Return the resource itself
        }
    }
    ,
    controllers: {
        list: [],
        running: null,
        underConstruction: null
    }
    ,
    elements: {
        list: [/*{nameEl1Ctrl1: {}, nameEl2Ctrl1: {}}, {nameEl1Ctrl2: {}, nameEl2Ctrl2: {}}*/]
    }
    ,
    events: {                                   // Event handlers
        keypress: f=> {                                // Keypress, triggered only when *new* keypress
            let toAdd = [ f , PennEngine.controllers.running||PennEngine.controllers.underConstruction ];
            functionsDictionary.keypress.push( toAdd );                 // Add the event function to the list
            if (PennEngine.controllers.running){
                let oldEndTrial = PennEngine.controllers._endTrial;
                PennEngine.controllers.running._endTrial = async function(){
                    await oldEndTrial.apply(PennEngine.controllers.running);
                    toAdd[0] = ()=>{};                                  // Clear event at end of trial
                };
            }
            else {
                let oldSequence = PennEngine.controllers.underConstruction.sequence;
                PennEngine.controllers.underConstruction.sequence = Object(_utils__WEBPACK_IMPORTED_MODULE_0__["lazyPromiseFromArrayOfLazyPromises"])(
                    [ oldSequence , r=>{ toAdd[0]=()=>{}; r(); } ]      // Clear event at end of trial
                );
            }
        }
    }
    ,
    URLs: []
    ,
    utils: {
        guidGenerator: _utils__WEBPACK_IMPORTED_MODULE_0__["guidGenerator"],
        parseCoordinates: _utils__WEBPACK_IMPORTED_MODULE_0__["parseCoordinates"],
        printAndRefreshUntil: _utils__WEBPACK_IMPORTED_MODULE_0__["printAndRefreshUntil"],
        levensthein: _utils__WEBPACK_IMPORTED_MODULE_0__["levensthein"],
        upload: _utils__WEBPACK_IMPORTED_MODULE_0__["upload"],
        overToScale: _utils__WEBPACK_IMPORTED_MODULE_0__["overToScale"]
    }
    ,
    tmpItems: []        //  PennController() adds {PennController: id}, PennController.Template adds {PennTemplate: [...]}
    ,
    tables: {}
    ,
    Prerun: function(func){
        preRunningFunctions.push(func);
    }
};


// Run functions before sequence of items is generated
// __SendResults__ is created right before the sequence gets generated from items
let old_ibex_controller_set_properties = window.ibex_controller_set_properties;
window.ibex_controller_set_properties = function (name, options) {

    old_ibex_controller_set_properties(name, options);

    if (name!="__SendResults__")                            // Make sure to run only upon SendResults' creation
        return;

    // Keypress events
    document.addEventListener('keydown', e=>{
        if (e.repeat)                                       // If this is a key holding, don't fire
            return;
        if (PennEngine.controllers.running)                 // Fire event: run functions
            for (let f = 0; f < functionsDictionary.keypress.length; f++)
                if ( PennEngine.controllers.running == functionsDictionary.keypress[f][1] ||
                     PennEngine.controllers.running.id == functionsDictionary.keypress[f][1]
                    )
                        functionsDictionary.keypress[f][0].apply(this, [e]);
    });

    // Pre-running functions
    for (let f in preRunningFunctions)
        if (preRunningFunctions[f] instanceof Function)
            preRunningFunctions[f].call();

}


/***/ }),

/***/ "./src/index_core.js":
/*!***************************!*\
  !*** ./src/index_core.js ***!
  \***************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ "./src/utils.js");
/* harmony import */ var _engine_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./engine.js */ "./src/engine.js");
/* harmony import */ var _debug_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./debug.js */ "./src/debug.js");
/* harmony import */ var _controller_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./controller.js */ "./src/controller.js");
/* harmony import */ var _elements_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./elements.js */ "./src/elements.js");
/* harmony import */ var _zip_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./zip.js */ "./src/zip.js");
/* harmony import */ var _tables_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./tables.js */ "./src/tables.js");
/* harmony import */ var _resetprefix_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./resetprefix.js */ "./src/resetprefix.js");
/* harmony import */ var _resetprefix_js__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(_resetprefix_js__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var _items_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./items.js */ "./src/items.js");
                    // bunch of utility functions
                   // defines PennEngine [local]
                    // the debug object
               // defines PennController and calls define_ibex_controller
                 // constructor for element types [fed with PennEngine]
                      // adds the PreloadZip global command [imports jszip and jszip-utils]
                   // defines Template    [imports jquery-csv]

              // defines ResetPrefix



/***/ }),

/***/ "./src/items.js":
/*!**********************!*\
  !*** ./src/items.js ***!
  \**********************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _engine_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./engine.js */ "./src/engine.js");
/* harmony import */ var _controller_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./controller.js */ "./src/controller.js");



// Process PennEngine.tmpItems immediately before Ibex processes window.items
//
//      example_data.js:
//          PennController( ... );
//          PennController( ... );
//          PennController.Template( . => PennController( ... ) );
//          PennController.Template( . => ["Message", {}, "PennController", PennController( ... )] );
//          var items = [ ["consent", "Form", {}] , ["send", "__SendResults__", {}] ];
//
//      produces:
//          PennEngine.tmpItems = [
//              PennController(),
//              PennController(),
//              {PennTemplate: [ a = PennController(), b = PennController() ]},
//              {PennTemplate: [ [label, "Message", {}, "PennController", c = PennController()] ]},
//              ["consent", "Form", {}],
//              ["send", "__SendResults__", {}]
//              a,
//              b,
//              c
//          ]
_engine_js__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].Prerun(()=>{
    
    let includedControllers = [];

    // Converts any PennController() into a [label, "PennController", controller] item (if not already included)
    function convertItem (item) {
        if (item instanceof _controller_js__WEBPACK_IMPORTED_MODULE_1__["Controller"])
            if (includedControllers.indexOf(item)<0 && item.addToItems)
                return [item.useLabel||"unlabeled", "PennController", item];
            else                                        // Return only if not already included (mind duplicates) and addToItems==true
                return null;                            // Null if already included
        return item;                                    // Non-PennController item: return as is
    }

    if (window.items instanceof Array)                  // PennController() pushes PennEngine.tmpItems even from within window.items
        for (let a = 0; a < window.items.length; a++)   // If in window.items, then PennController() was called within it
            if (window.items[a] instanceof Array && window.items[a].length>2)   // Sanity check
                for (let c = 2; c < window.items[a].length; c += 2)
                    includedControllers.push(window.items[a][c]); // Add every controller (even non-PennController) / parameter object

    let tmpItems = [];                                  // Local copy: pushed with every item in order 

    for (let i = 0; i < _engine_js__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].tmpItems.length; i++){ // Go through the array
        let item = _engine_js__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].tmpItems[i];
        let itemsToAdd = [];                            // Yet another tmp array, probed to fill includedControllers

        if (item instanceof Object && item.hasOwnProperty("PennTemplate"))
            for (let t = 0; t < item.PennTemplate.length; t++)  // If template, add items from within
                itemsToAdd.push( convertItem(item.PennTemplate[t]) );
        else
            itemsToAdd.push( convertItem(item) );      // Add item after conversion (if need be)

        for (let a = 0; a < itemsToAdd.length; a++)    // Preventing addition of duplicates, just in case
            if (itemsToAdd[a] instanceof Array && itemsToAdd[a].length>2)   // Sanity check
                for (let c = 2; c < itemsToAdd[a].length; c += 2)
                    includedControllers.push(itemsToAdd[a][c]);

        tmpItems = tmpItems.concat(itemsToAdd);
    }

    if (window.items instanceof Array)
        for (let i = 0; i < window.items.length; i++)  // Add remaining items defined after PennController/PennTemplate's
            if (tmpItems.indexOf(window.items[i])<0)
                tmpItems.push(window.items[i]);

    // Replace global items variable (and filter 'null' controllers)
    window.items = tmpItems.filter(e=>(e instanceof Array && e.length > 2));

    if (!window.shuffleSequence)                            // Run in order defined if nothing specified
        window.conf_shuffleSequence = window.seq(window.anyType);

});

/***/ }),

/***/ "./src/resetprefix.js":
/*!****************************!*\
  !*** ./src/resetprefix.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports) {

let newPrefix = (p,o) => {
    let descriptors = Object.getOwnPropertyDescriptors(o);
    for (let d in descriptors){
        let descriptor = descriptors[d];
        if (descriptor.value instanceof Function)
            p[d] = descriptor.value;                   // new/get
        else if (descriptor.get instanceof Function)
            Object.defineProperty(p, d, descriptor);   // default
    }
};

// This allows the users to call the instruction methods as global functions
window.PennController.ResetPrefix = function(prefixName) { /* $AC$ global.PennController.ResetPrefix(prefix) Resets the prefix for the new* and get* commands; pass null to make them global $AC$ */
    if (typeof(prefixName)=="string"){
        if (window[prefixName])
            throw "ERROR: prefix string already used for another JS object";
        window[prefixName] = {};                // Create an object
        var prefix = window[prefixName];        // Point to the object
    }
    else
        var prefix = window;                    // If no (valid) prefix name, drop any prefix (object = window)
    newPrefix(prefix,window.PennController.Elements);
    newPrefix(prefix,window.PennController);
};

/***/ }),

/***/ "./src/tables.js":
/*!***********************!*\
  !*** ./src/tables.js ***!
  \***********************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var jquery_csv__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jquery-csv */ "./node_modules/jquery-csv/src/jquery.csv.js");
/* harmony import */ var jquery_csv__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jquery_csv__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _controller_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./controller.js */ "./src/controller.js");
/* harmony import */ var _engine_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./engine.js */ "./src/engine.js");
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils.js */ "./src/utils.js");





_engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].tables = {};         // Dictionary of named tables
var defaultTable = {};          // A dummy object representing the default table handler
let groupLists = [];            // An array index all the list of groups from the different tables along with which is running

// The TABLE class contains an 2x2 Array-Object and defines Item, Group/List and Label
class Table {
    constructor(table, id) {
        if (!(table instanceof Array) || table.length < 1 || !Object.keys(table[0]).length)
            return _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].debug.error("Invalid format for table when creating new table");
        this.id = id||"unnamed";
        this.table = table;
        for (let col in table[0]) {
            if (col.match(/^item$/i))
                this.item = col;
            if (col.match(/^(group|list)$/i))
                this.group = col;
            if (col.match(/^label$/i))
                this.label = col;
        }
    }
    setItem(col) {                                  // Obsolete since beta 0.4 (not relying on latin square)
        if (this.table[0].hasOwnProperty(col))
            this.item = col;
        else
            _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].debug.log("Error when setting table's item column: no column found with the name "+col);
        return this;
    }
    setGroup(col) {
        if (this.table[0].hasOwnProperty(col))
            this.group = col;
        else
            _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].debug.log("Error when setting table's group column: no column found with the name "+col);
        return this;
    }
    setLabel(col) {
        if (this.table[0].hasOwnProperty(col))
            this.label = col;
        else
            _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].debug.log("Error when setting table's label column: no column found with the name "+col);
        return this;
    }
    filter(...args) {
        if (args.length == 2 && typeof(args[0]) == "string" && (typeof(args[1]) == "string" || args[1] instanceof RegExp)){
            if (this.table[0].hasOwnProperty(args[0])){
                let match = args[1];
                if (typeof(match)=="string")
                    match = new RegExp("^"+match+"$");
                let returnTable = [];
                for (let row = 0; row < this.table.length; row++){
                    if (this.table[row][args[0]].match(match))
                        returnTable.push(this.table[row]);
                }
                if (!returnTable.length)
                    _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].debug.error("Empty table with filter:", args[0], args[1]);
                returnTable = new Table(returnTable, this.id);
                if (this.group)
                    returnTable.setGroup(this.group);
                if (this.label)
                    returnTable.setLabel(this.label);
                return returnTable;
            }
            else
                return _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].debug.error("No column named \u2018"+args[0]+"\u2019 found in the table for filtering");
        }
        else if (args.length && args[0] instanceof Function){
            let returnTable = [];
            for (let row = 0; row < this.table.length; row++){
                if (args[0].call(this, this.table[row]))
                    returnTable.push(this.table[row]);
            }
            if (!returnTable.length)
                _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].debug.error("Empty table after filter:", args[0]);
            return (new Table(returnTable,this.id)).setGroup(this.group).setLabel(this.label);
        }
    }
}

class TableHandler {
    constructor(name){
        this.name = name;
        this.actions = [];
    }
    setItem(col) {                                  // Obsolete since beta 0.4 (not relying on latin square)
        this.actions.push(["setItem", col]);
        return this;
    }
    setGroup(col) {
        this.actions.push(["setGroup", col]);
        return this;
    }
    setLabel(col) {
        this.actions.push(["setLabel", col]);
        return this;
    }
    filter(...args) {                               // Return a new handler so as not to contaminate original table
        let handler = new TableHandler(this.name);
        for (let a = 0; a<this.actions.length; a++)
            handler.actions.push(this.actions[a]);
        handler.actions.push(["filter", args])
        return handler;
    }
    setItemColumn(col){ 
        return this.setItem(col); 
    }
    setGroupColumn(col){ 
        return this.setGroup(col); 
    }
    setLabelColumn(col){ 
        return this.setLabel(col); 
    }
}


// Checks that the string 'table' is of the right format, and return a csv-formatted object
function _checkTable(table){
    if (table.charCodeAt(0) === 0xFEFF)
        table = table.slice(1);
    if (!table.match(/[\n\r]$/))
        table = table + '\n';                               // Last row ignored if doesn't end with linebreak
    let commaTable = [], tabTable = [];
    try {
        let tmpTable = $.csv.toArrays(table, {separator: ","});
        let columns = tmpTable[0];
        for (let r = 1; r<tmpTable.length; r++){
            let obj = {};
            columns.map((v,i)=>obj[v] = tmpTable[r][i]);
            commaTable.push(obj);
        }
    }
    catch(err){
        commaTable.push({});
    }
    try {
        let tmpTable = $.csv.toArrays(table, {separator: "\t"});
        let columns = tmpTable[0];
        for (let r = 1; r<tmpTable.length; r++){
            let obj = {};
            columns.map((v,i)=>obj[v] = tmpTable[r][i]);
            tabTable.push(obj);
        }
    }
    catch(err){
        tabTable.push({});
    }
    if (Object.keys(commaTable[0]).length > Object.keys(tabTable[0]).length)
        return commaTable;                              // Return comma-based table if more columns
    else if (Object.keys(tabTable[0]).length)           // Check that there is at least one column
        return tabTable;
    return _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].debug.error("Format of table is invalid");
}


// Injects ajax requests to CSV files inside ajax request to CHUNKS_INCLUDES
let ajaxTables = [];
let oldAjax = window["$"].ajax;
window["$"].ajax = function(...args){
    if (args[0] && args[0].url && args[0].url.match(/allchunks=1$/)){
        let oldSuccess = args[0].success;
        args[0].success = d=>{
            if (ajaxTables.length==0)
                return oldSuccess(d);
            let ajaxRequests = [], success;
            for (let i = ajaxTables.length-1; i >= 0; i--){
                if (i == ajaxTables.length-1)
                    success = data => { _controller_js__WEBPACK_IMPORTED_MODULE_1__["PennController"].AddTable(ajaxTables[i].name, data); oldSuccess(d); };
                else
                    success = data => { _controller_js__WEBPACK_IMPORTED_MODULE_1__["PennController"].AddTable(ajaxTables[i].name, data); ajaxRequests[0](); };
                ajaxRequests.push( ()=>$.ajax({
                    url: ajaxTables[i].table,
                    cache: false,
                    dataType: 'text',
                    success: success
                }) );
            }
            ajaxRequests[0]();
        }
    }
    return oldAjax(...args);
}

// Adds a table to the dictionary
_controller_js__WEBPACK_IMPORTED_MODULE_1__["PennController"].AddTable = function(name, table) {
    if (typeof(name)!="string"||typeof(table)!="string")
        return _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].debug.error("Table "+name+" not added: tables and table names should be strings");
    if (_engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].tables.hasOwnProperty(name))
        _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].debug.log("A table named "+name+" already exists; overriding it");
    if (table.match(/^http/)) {
        ajaxTables.push({name: name, table: table});
        return;
    }
    table = _checkTable(table);
    if (table)
        table = new Table(table, name);
    else
        return _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].debug.error("Table "+name+" does not have the right format.");
    _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].tables[name] = table;
}

// Returns a table from the dictionary
_controller_js__WEBPACK_IMPORTED_MODULE_1__["PennController"].GetTable = function(name) {
    return new TableHandler(name);
};



let asyncFeedItems = [];                        // All Template functions are executed after setup

// The main function
// PennController.Template("table.csv",         // Optional, or reference to a Table object
//     (row) => PennController(                 // Or () => ["Message", {...}, "PennController", PennController(...)]
//         p(row.text)
//         ,
//         p(row.image)
//         ,
//         p.key("FJ")
//     )    
_controller_js__WEBPACK_IMPORTED_MODULE_1__["PennController"].Template = function (tableName, func) {       /* $AC$ global.PennController.Template(table,penncontroller) Generates trials from a table $AC$ */
                                // FeedItems deprecated since 1.0
    if (window.items)
        for (let i in window.items)
            if (_engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].tmpItems.indexOf(window.items[i])<0)
                _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].tmpItems.push(window.items[i]);
    let templateItems = {PennTemplate: []};
    _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].tmpItems.push(templateItems);
    
    asyncFeedItems.push(function(){                                 // The code below will be executed after setup        
        let tmpItemsLength = _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].tmpItems.length;            // Any PennController() in template pushes indesirably
        let table;
        if (tableName instanceof Function) {                        // No table name specified, try to automatically detect
            func = tableName;
            let tableNames = Object.keys(_engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].tables);
            if (tableNames.length && _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].tables[tableNames[0]] instanceof Table)
                table = _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].tables[tableNames[0]];
            else
                return _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].debug.error("No valid table detected");
        }
        else if (typeof(tableName)=="string") {                     // Table name was specified
            if (_engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].tables.hasOwnProperty(tableName)) {                 // Check that it has been added
                if (_engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].tables[tableName] instanceof Table)
                    table = _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].tables[tableName];
                else
                    return _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].debug.error("Table "+tableName+" does not have the right format.");
            }
            else {                                                  // If not added, return an error
                let tableList = Object.keys(_engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].tables);
                let add = "";
                for (let i = 0; i < tableList.length; i++){
                    if ((Object(_utils_js__WEBPACK_IMPORTED_MODULE_3__["levensthein"])(tableName,tableList[i]) / tableList[i].length) < 0.5)
                        add = " Did you mean to type &lsquo;<strong>"+tableList[i]+"</strong>&rsquo;?";
                }
                return _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].debug.error("No table found with name "+tableName+"."+add);
            }
        }
        else if (tableName instanceof TableHandler){                // TableHandler: retrieve Table instance
            if (Object.keys(_engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].tables).length<1)
                return _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].debug.error("No table was defined");
            else {
                if (tableName.name == defaultTable)                 // Default: take first table
                    table = _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].tables[Object.keys(_engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].tables)[0]];
                else if (tableName.name && _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].tables.hasOwnProperty(tableName.name))
                    table = _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].tables[tableName.name];                 // Take table with corresponding name
                else {
                    let tableList = Object.keys(_engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].tables);
                    let add = "";
                    for (let i = 0; i < tableList.length; i++){
                        if ((Object(_utils_js__WEBPACK_IMPORTED_MODULE_3__["levensthein"])(tableName.name,tableList[i]) / tableList[i].length) < 0.5)
                            add = " Did you mean to type &lsquo;</strong>"+tableList[i]+"</strong>&rsquo;?";
                    }
                    return _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].debug.error("No table named "+tableName.name+" was found."+add);
                }
                for (let a = 0; a < tableName.actions.length; a++){
                    let arg = tableName.actions[a][1];
                    switch (tableName.actions[a][0]){
                        case "setItem":
                        table.setItem(arg);
                        break;
                        case "setLabel":
                        table.setLabel(arg);
                        break;
                        case "setGroup":
                        table.setGroup(arg);
                        break;
                        case "filter":
                        table = table.filter(...arg);
                        break;
                    }
                }
            }
        }
        else
            return _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].debug.error("Bad format for Template's first argument (should be a PennController table, table name or function from rows to Ibex elements)");

        if (!(func instanceof Function))
            return _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].debug.error("The function passed to PennController.Template is ill-defined");

        let groups = [];                                            // The different groups listed in the table
        let runningGroup;                                           // Which group will be running now
        if (table.group){
            for (let row = 0; row < table.table.length; row++)
                if (groups.indexOf(table.table[row][table.group])<0)
                    groups.push(table.table[row][table.group]);
            groups.sort();                                              // Sort the groups

            groupLists.map(g=> {                                        // Check in previous tables
                let overlap = groups.filter((v,i)=>v==g.groups[i]);     // Keep the values in both tables' groups
                if (groups.indexOf(g.runningGroup)>-1 && overlap.length==g.groups.length && overlap.length==groups.length)
                    runningGroup = g.runningGroup;                      // If the groups are the same, use the same runningGroup
            });
            if (runningGroup===undefined){
                let counter = window.__counter_value_from_server__;     // Retrieve counter value from server
                if (typeof(window.counterOverride)=="number")
                    counter = counterOverride;                          // If user defined custom counter value
                runningGroup = groups[counter % groups.length];         // Find out the group currently running
            }
            groupLists.push({                                           // Add the current groups list
                runningGroup: runningGroup,
                groups: groups
            });
        }

        let itemsToAdd = [];
        for (let row = 0; row < table.table.length; row++) {        // Going through the table
            if (table.group){                                       // GROUP DESIGN
                let rowGroup = table.table[row][table.group];       // The group of this row
                if (rowGroup != runningGroup)
                    continue;                                       // Ignore this row if not the right group
            }
            let label = undefined;                                  // The label
            let line = new Proxy(table.table[row], {                // Creating a proxy to catch column reference errors
                get: (obj, prop) => {
                    if (prop in table.table[row])
                        return obj[prop];
                    else{
                        let columns = Object.keys(table.table[row]);
                        let add = "";
                        for (let i = 0; i < columns.length; i++){
                            if ((Object(_utils_js__WEBPACK_IMPORTED_MODULE_3__["levensthein"])(prop,columns[i]) / columns[i].length) < 0.5)
                                add = " Did you mean to type &lsquo;<strong>"+columns[i]+"</strong>&rsquo;?";
                        }
                        _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].debug.error("No column named &lsquo;"+prop+"&rsquo; found in table "+table.id+"."+add);
                    }
                    return "";
                }
            });
            let content;
            try {
                content = func.call(null, line);                   // Create each item's content by calling func on each row
            }
            catch(err){
                window.onerror(err.name+": "+err.message, "include=data", "inside PennController.Template");
            }
            //let content = func(line);                             // Create each item's content by calling func on each row
            if (!(content instanceof Array)){                       // The PennController function returns an object (must be PennController)
                label = content.useLabel;                           // Use the (Penn)Controller's label
                content.addToItems = false;                         // Adding it right here, right now
                content = ["PennController", content];              // Pass it along with "PennController"
            }
            else if (content.length%2 && typeof(content[0])=="string"){
                label = content[0];                                 // If content is an odd array, its first member is the label
                content.splice(0,1);                                // Remove the label from content
            }
            if (!label){
                if (table.label && table.table[row].hasOwnProperty(table.label))
                    label = table.table[row][table.label];            // Use the label column if defined
                else if (table.item && table.table[row].hasOwnProperty(table.item))
                    label = "Item-"+table.table[row][table.item];     // Use the item column otherwise, if defined
                else
                    label = "Item-"+row;
            }
            let item = [label];
            for (let c in content){
                if (content[c] instanceof Object)                   // Add pointers to the table to any controller
                    content[c]._PennController = {table: table, row: row};
                item.push(content[c]);                              // Add the elements
            }
            
            itemsToAdd.push(item);
        }

        templateItems.PennTemplate = itemsToAdd;

        while (_engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].tmpItems.length>tmpItemsLength)          // Any PennController() in template pushes indesirably
            _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].tmpItems.pop();                             // PennTemplate contains items & will add them to window.items

    });

    if (!window.items)
        window.items = [];                                      // Create items so it can be fed later

    // Handle inappropriate calls
    return {
        log: ()=>_engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].debug.error("Tried to call .log command on PennController.Template(); .log commands should be called on PennController()"),
        label: ()=>_engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].debug.error("Tried to call .label command on PennController.Template(); .label commands should be called on PennController()"),
        setOption: ()=>_engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].debug.error("Tried to call .setOption command on PennController.Template(); .setOption commands should be called on PennController()"),
        noHeader: ()=>_engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].debug.error("Tried to call .noHeader command on PennController.Template(); .noHeader commands should be called on PennController()"),
        noFooter: ()=>_engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].debug.error("Tried to call .noFooter command on PennController.Template(); .noFooter commands should be called on PennController()")
    };
};
_controller_js__WEBPACK_IMPORTED_MODULE_1__["PennController"].FeedItems = (tableName, func) => _controller_js__WEBPACK_IMPORTED_MODULE_1__["PennController"].Template(tableName, func);

let loadingMessageElement;
$(document).ready(function(){
    loadingMessageElement = document.createElement("P");
    loadingMessageElement.style["text-align"] = "center";
    loadingMessageElement.innerHTML = "Loading, please wait..."; // A message in case PennController+Tables incur slow down
    loadingMessageElement.id = "FirstLoadingMessage";
    document.body.appendChild(loadingMessageElement);
});

// Inject items with Template before sequence is generated (no need to mess with latin-square designs)
_engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].Prerun(()=>{
    for (let entry in window.CHUNKS_DICT) {                 // Convert any csv/tsv into a table
        if (entry.match(/\.(html?|mp3)$/i))
            continue;
        let table = _checkTable(window.CHUNKS_DICT[entry]); // Try to interpret it as a CSV
        if (table){                                         // Success: add it to the list and return
            table = new Table(table, entry);
            _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].tables[entry] = table;
        }
        else {
            table = $.csv.toObjects(window.CHUNKS_DICT[entry], {separator: "\t"});
            if (Object.keys(table[0]).length > 1){              // Try to interpret it as a TSV
                table = new Table(table, entry);
                _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].tables[entry] = table;
            }
        }
    }
    for (let i = 0; i < asyncFeedItems.length; i++)
        asyncFeedItems[i].call();                           // Run FeedItems now that CHUNK_DICT is defined
    if (loadingMessageElement)                              // Remove the loading message (but not before 500ms)
        document.body.removeChild(loadingMessageElement);

});

Object.defineProperty(_controller_js__WEBPACK_IMPORTED_MODULE_1__["PennController"], "defaultTable", {
    get: function(){
        let table = new TableHandler();
        table.name = defaultTable;
        return table;
    }
});


/***/ }),

/***/ "./src/utils.js":
/*!**********************!*\
  !*** ./src/utils.js ***!
  \**********************/
/*! exports provided: lazyPromiseFromArrayOfLazyPromises, hexFromArrayBuffer, overToScale, upload, getMimetype, minsecStringFromMilliseconds, guidGenerator, parseElementCommands, parseCoordinates, printAndRefreshUntil, levensthein */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "lazyPromiseFromArrayOfLazyPromises", function() { return lazyPromiseFromArrayOfLazyPromises; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "hexFromArrayBuffer", function() { return hexFromArrayBuffer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "overToScale", function() { return overToScale; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "upload", function() { return upload; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getMimetype", function() { return getMimetype; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "minsecStringFromMilliseconds", function() { return minsecStringFromMilliseconds; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "guidGenerator", function() { return guidGenerator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "parseElementCommands", function() { return parseElementCommands; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "parseCoordinates", function() { return parseCoordinates; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "printAndRefreshUntil", function() { return printAndRefreshUntil; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "levensthein", function() { return levensthein; });
// Returns a lazy Promise that will be fulfilled only after executing a sequence lazy Promises
function lazyPromiseFromArrayOfLazyPromises(arrayOfLazyPromises) {
    return () => new Promise(async function (resolve){
        for (let p in arrayOfLazyPromises){
            if (arrayOfLazyPromises[p] instanceof Function)
                var value = await arrayOfLazyPromises[p]();
        }
        // Resolve with the last value
        resolve(value);
    });
}

function hexFromArrayBuffer (array) {
    const uint = new Uint8Array(array);
    let bytes = [];
    uint.forEach((byte) => {
        bytes.push(byte.toString(16));
    })
    return bytes.join('').toUpperCase();
}


const checkForScale = function(scale){
    const transform = this.css("transform").match(/matrix\(\s*(-?\d+(.\d+)?),[^,]+,[^,]+,\s*(-?\d+(.\d+)?),/);
    if (transform){
        scale.x = scale.x * Number(transform[1]);
        scale.y = scale.y * Number(transform[3]);
    }
    return scale;
}
function overToScale(x,y){
    let element = this, inspected_element = element;
    let scale = {x: 1, y: 1};
    while (inspected_element){
        checkForScale.call(inspected_element, scale);
        inspected_element = inspected_element.parent();
        if (inspected_element[0]===document) inspected_element = undefined;
    }
    let offset = element.offset(), w = element.width(), h= element.height(), scale_w = w*scale.x, scale_h = h*scale.y;
    return offset.left <= x && offset.top <= y && offset.left+scale_w >= x && offset.top+scale_h>=y;
}


async function upload(url,filename,file,mimeType){
    let presignedPostData;
    try {
        presignedPostData = await new Promise((resolve,reject) => {
            const xhr = new XMLHttpRequest();
            const addParamCharacter = (url.match(/\?/) ? "&" : "?");
            xhr.open("GET", url+addParamCharacter+"filename="+encodeURIComponent(filename)+"&mimetype="+encodeURIComponent(mimeType), true);
            xhr.setRequestHeader("Content-Type", "application/json");
            xhr.onerror = e=>reject("Could not GET "+url+";");
            xhr.onload = function() {
                let obj = null;
                try{
                    obj = JSON.parse(this.responseText);
                }
                catch {
                    obj = this.responseText;
                }
                console.log("response",obj);
                resolve(obj);
            };
            console.log("before sending xhr");
            xhr.send();
            console.log("after sending xhr");
        });
    } catch (e){
        return new Promise((resolve,reject)=>reject(e));
    }
    console.log("presignedPostData",presignedPostData);
    const formData = new FormData();
    if (presignedPostData===undefined || typeof presignedPostData=="string"){
        formData.append('fileName', filename);
        formData.append('mimeType', mimeType);
        formData.append('file', file);
    }
    else{
        Object.keys(presignedPostData).forEach(key => {
            if (key=="url")
                url = presignedPostData.url;
            else
                formData.append(key, presignedPostData[key]) 
        });
        // Actual file has to be appended last.
        formData.append("file", file);
        if (presignedPostData.key)
            filename = presignedPostData.key;
    }
    return new Promise((resolve, reject) => {
        const xhr = new XMLHttpRequest();
        xhr.open("POST", url, true);
        xhr.onload = () => resolve(filename);
        xhr.onerror = () => reject(xhr.responseText);
        try {
            xhr.send(formData);
        } catch (e){
            return reject("Could not POST to "+url+"; "+e);
        }
    });
}

// See https://mimesniff.spec.whatwg.org/#matching-an-image-type-pattern
// See https://en.wikipedia.org/wiki/List_of_file_signatures
function getMimetype (signature, filename) {
    // IMAGE
    if (signature.match(/^00000[12]00/i))
        return 'image/x-icon';
    if (signature.match(/424D/i))
        return 'image/bmp';
    if (signature.match(/^89504E470?D0?A1A0?A/i))   // For some reason 0 is sometimes dropped...
        return 'image/png';
    if (signature.match(/^474946383[79]61/i))
        return 'image/gif';
    if (signature.match(/^52494646........574542505650/i))   // Longest = 28 bytes
        return 'image/webp';
    if (signature.match(/^FFD8FF/i))
        return 'image/jpeg';
    // AUDIO/VIDEO
    if (signature.match(/^2E736E64/i))
        return 'audio/basic';
    if (signature.match(/^464F524D........41494646/i))
        return 'audio/aiff';
    if (signature.match(/^(fff[b3a2]|494433)/i))    //  b = mpeg-1 audio, 3 = mpeg-2, a = 1protected, 2 = 2protected
        return 'audio/mpeg';
    if (signature.match(/^4F67675300/i))
        return 'application/ogg';
    if (signature.match(/^4D546864......06/i))
        return 'audio/midi';
    if (signature.match(/^52494646........41564920/i))
        return 'video/avi';
    if (signature.match(/^52494646.{4,8}57415645/i)) // Apparently sometimes less than 8 bytes in between...
        return 'audio/wave';
    if (signature.match(/^1A45DFA3/i))    // Could be sthg else than webm
        return 'video/webm';
    // OTHER
    if (signature.match(/^25504446/i))
        return 'application/pdf';
    if (signature.match(/^504B0304/i))
        return 'application/zip';
    else{
        let r = filename.match(/\.([^.]+)$/);
        if (r){
            switch(r[1].toLowerCase()){
                case 'bmp':
                    return 'image/bmp';
                case 'png':
                    return 'image/png'; 
                case 'gif':
                    return 'image/gif'; 
                case 'webp':
                    return 'image/webp';
                case 'jpg':
                case 'jpeg':
                    return 'image/jpeg';
                case 'mp3':
                    return 'audio/mpeg';
                case 'ogg':
                case 'oga':
                    return 'audio/ogg';
                case 'midi':
                case 'mid':
                    return 'audio/midi';
                case 'wav':
                    return 'audio/wave';
                case 'webm':
                    return 'video/webm';
                case 'avi':
                    return 'video/avi';
                case 'mp4':
                    return 'video/mp4';
                case 'ogv':
                    return 'video/ogg';
                case 'mov':
                    return 'video/quicktime';
                default:
                    return '';
            }
        }
        else
            return '';
    }
}


function minsecStringFromMilliseconds(n){
    let s = (n / 1000) % 60, m = Math.trunc(n / 60000);
    return (m>0?m+"min":"")+(s>0?s+"s":"");
}

// From https://stackoverflow.com/questions/105034/create-guid-uuid-in-javascript
function guidGenerator() {
    var S4 = function() {
       return (((1+Math.random())*0x10000)|0).toString(16).substring(1);
    };
    return (S4()+S4()+"-"+S4()+"-"+S4()+"-"+S4()+"-"+S4()+S4()+S4());
}

// Converts any PennElementCommand in 'array' into a string
function parseElementCommands(array){
    return array.map(e=>{
        if (e instanceof Object && e.hasOwnProperty("_promises") && e.type && e._element)
            return e.type + ":" + e._element.id;
        else
            return e;
    });
}

// Parses "bottom|left|center|middle|right|top at ..."
function parseCoordinates(x,y){
    // let coordinates = {x:x,y:y,translateX:0,translateY:0};
    const transform = this.css("transform").match(/matrix\(\s*(-?\d+(.\d+)?),[^,]+,[^,]+,\s*(-?\d+(.\d+)?),/);
    const style = window.getComputedStyle(this[0]);
    const original_width = Number(style.width.replace(/px$/,'')), 
          original_height = Number(style.height.replace(/px$/,''));
    let width = original_width, height = original_height;
    if (transform){
        width = Math.abs(width * transform[1]);
        height = Math.abs(height * transform[3]);
    }
    let anchorX = String(x).match(/^(.+)\s+at\s+(.+)$/i);
    let anchorY = String(y).match(/^(.+)\s+at\s+(.+)$/i);
    if (anchorX)// && anchorX[2].match(/^-?\d+(\.\d+)?$/))   // raw number
        x = String(anchorX[2]);
    if (anchorY)// && anchorY[2].match(/^-?\d+(\.\d+)?$/))   // raw number
        y = String(anchorY[2]);
    if (!isNaN(x)) x = x+"px";   // raw number
    if (!isNaN(y)) y = y+"px";   // raw number
    if (anchorX){
        if (anchorX[1].match(/top|bottom/i)) throw "Passed Y coordinate in place of X";
        else if (anchorX[1].match(/center|middle/i))
            x = `calc(${x} - ${original_width/2}px)`;
        else if (anchorX[1].match(/right/i))
            x = `calc(${x} - ${width-(width-original_width)/2}px)`;
        else
            x = `calc(${x} + ${(width-original_width)/2}px)`;
    }
    else
        x = `calc(${x} + ${(width-original_width)/2}px)`;
    if (anchorY){
        if (anchorY[1].match(/left|right/i)) throw "Passed X coordinate in place of Y";
        else if (anchorY[1].match(/center|middle/i))
            y = `calc(${y} - ${original_height/2}px)`;
        else if (anchorY[1].match(/bottom/i))
            y = `calc(${y} - ${height-(height-original_height)/2}px)`;
        else
            y = `calc(${y} + ${(height-original_height)/2}px)`;
    }
    else
        y = `calc(${y} + ${(height-original_height)/2}px)`;
    return {x: x, y: y};
}
function RefreshUntil(x,y,element,until,oldCss){
    if (until instanceof Function && until())
        return this.css(oldCss);
    const coordinates = parseCoordinates.call(this,x,y);
    this.css({position: 'absolute', left: coordinates.x, top: coordinates.y});
    window.requestAnimationFrame( ()=>RefreshUntil.call(this,x,y,element,until,oldCss) );
}
// Call on a jQuery element
function printAndRefreshUntil(x,y,element,until){
    element = element || $("body");
    const parentDOM = this.parent()[0];
    const oldCss = {
        display: this.css("display"), 
        position: this.css("position"),
        left: this.css("left"),
        top: this.css("top")
    };
    if (parentDOM === undefined || parentDOM != element[0]) this.appendTo(element).css('display','inline-block');
    RefreshUntil.call(this,x,y,element,until,oldCss);
}

// Returns the Levensthein distance between two words
function levensthein(s,t){
    let d = [];
    d[0] = ("a"+t).split("").map((c,n)=>n);
    for (let i = 1; i < s.length+1; i++)
        d[i] = [i,...t.split("").map(()=>0)];

    for (let j = 1; j < t.length+1; j++)
        for (let i = 1; i < s.length+1; i++){
            let substitutionCost = s.charAt(i)!=t.charAt(j);
            let deletion = d[i-1][j] + 1;
            let insertion = d[i][j-1] + 1;
            let substitution = d[i-1][j-1] + substitutionCost;
            if (deletion<insertion&&deletion<substitution)
                d[i][j] = deletion;
            else if (insertion<deletion&&insertion<substitution)
                d[i][j] = insertion;
            else
                d[i][j] = substitution;
        }
    return d[s.length][t.length];
}

let specialKeys = [
    "Unidentified",
    "Alt",
    "AltGraph",
    "CapsLock",
    "Control",
    "Fn",
    "FnLock",
    "Meta",
    "NumLock",
    "ScrollLock",
    "Shift",
    "Symbol",
    "SymbolLock",
    "Hyper",
    "Super",
    "Enter",
    "Tab",
    "ArrowDown",
    "ArrowLeft",
    "ArrowRight",
    "ArrowUp",
    "End",
    "Home",
    "PageDown",
    "PageUp",
    "Backspace",
    "Clear",
    "Copy",
    "CrSel",
    "Cut",
    "Delete",
    "EraseEof",
    "ExSel",
    "Insert",
    "Paste",
    "Redo",
    "Undo",
    "Accept",
    "Again",
    "Attn",
    "Cancel",
    "ContextMenu",
    "Escape",
    "Execute",
    "Find",
    "Help",
    "Pause",
    "Play",
    "Props",
    "Select",
    "ZoomIn",
    "ZoomOut",
    "BrightnessDown",
    "BrightnessUp",
    "Eject",
    "LogOff",
    "Power",
    "PowerOff",
    "PrintScreen",
    "Hibernate",
    "Standby",
    "WakeUp",
    "AllCandidates",
    "Alphanumeric",
    "CodeInput",
    "Compose",
    "Convert",
    "Dead",
    "FinalMode",
    "GroupFirst",
    "GroupLast",
    "GroupNext",
    "GroupPrevious",
    "ModeChange",
    "NextCandidate",
    "NonConvert",
    "PreviousCandidate",
    "Process",
    "SingleCandidate",
    "HangulMode",
    "HanjaMode",
    "JunjaMode",
    "Eisu",
    "Hankaku",
    "Hiragana",
    "HiraganaKatakana",
    "KanaMode",
    "KanjiMode",
    "Katakana",
    "Romaji",
    "Zenkaku",
    "ZenkakuHankaku",
    "F1",
    "F2",
    "F3",
    "F4",
    "F5",
    "F6",
    "F7",
    "F8",
    "F9",
    "F10",
    "F11",
    "F12",
    "Soft1",
    "Soft2",
    "Soft3",
    "Soft4",
    "ChannelDown",
    "ChannelUp",
    "Close",
    "MailForward",
    "MailReply",
    "MailSend",
    "MediaClose",
    "MediaFastForward",
    "MediaPause",
    "MediaPlay",
    "MediaPlayPause",
    "MediaRecord",
    "MediaRewind",
    "MediaStop",
    "MediaTrackNext",
    "MediaTrackPrevious",
    "New",
    "Open",
    "Print",
    "Save",
    "SpellCheck",
    "Key11",
    "Key12",
    "AudioBalanceLeft",
    "AudioBalanceRight",
    "AudioBassBoostDown",
    "AudioBassBoostToggle",
    "AudioBassBoostUp",
    "AudioFaderFront",
    "AudioFaderRear",
    "AudioSurroundModeNext",
    "AudioTrebleDown",
    "AudioTrebleUp",
    "AudioVolumeDown",
    "AudioVolumeUp",
    "AudioVolumeMute",
    "MicrophoneToggle",
    "MicrophoneVolumeDown",
    "MicrophoneVolumeUp",
    "MicrophoneVolumeMute",
    "SpeechCorrectionList",
    "SpeechInputToggle",
    "LaunchApplication1",
    "LaunchApplication2",
    "LaunchCalendar",
    "LaunchContacts",
    "LaunchMail",
    "LaunchMediaPlayer",
    "LaunchMusicPlayer",
    "LaunchPhone",
    "LaunchScreenSaver",
    "LaunchSpreadsheet",
    "LaunchWebBrowser",
    "LaunchWebCam",
    "LaunchWordProcessor",
    "BrowserBack",
    "BrowserFavorites",
    "BrowserForward",
    "BrowserHome",
    "BrowserRefresh",
    "BrowserSearch",
    "BrowserStop",
    "AppSwitch",
    "Call",
    "Camera",
    "CameraFocus",
    "EndCall",
    "GoBack",
    "GoHome",
    "HeadsetHook",
    "LastNumberRedial",
    "Notification",
    "MannerMode",
    "VoiceDial",
    "TV",
    "TV3DMode",
    "TVAntennaCable",
    "TVAudioDescription",
    "TVAudioDescriptionMixDown",
    "TVAudioDescriptionMixUp",
    "TVContentsMenu",
    "TVDataService",
    "TVInput",
    "TVInputComponent1",
    "TVInputComponent2",
    "TVInputComposite1",
    "TVInputComposite2",
    "TVInputHDMI1",
    "TVInputHDMI2",
    "TVInputHDMI3",
    "TVInputHDMI4",
    "TVInputVGA1",
    "TVMediaContext",
    "TVNetwork",
    "TVNumberEntry",
    "TVPower",
    "TVRadioService",
    "TVSatellite",
    "TVSatelliteBS",
    "TVSatelliteCS",
    "TVSatelliteToggle",
    "TVTerrestrialAnalog",
    "TVTerrestrialDigital",
    "TVTimer",
    "AVRInput",
    "AVRPower",
    "ColorF0Red",
    "ColorF1Green",
    "ColorF2Yellow",
    "ColorF3Blue",
    "ColorF4Grey",
    "ColorF5Brown",
    "ClosedCaptionToggle",
    "Dimmer",
    "DisplaySwap",
    "DVR",
    "Exit",
    "FavoriteClear0",
    "FavoriteClear1",
    "FavoriteClear2",
    "FavoriteClear3",
    "FavoriteRecall0",
    "FavoriteRecall1",
    "FavoriteRecall2",
    "FavoriteRecall3",
    "FavoriteStore0",
    "FavoriteStore1",
    "FavoriteStore2",
    "FavoriteStore3",
    "Guide",
    "GuideNextDay",
    "GuidePreviousDay",
    "Info",
    "InstantReplay",
    "Link",
    "ListProgram",
    "LiveContent",
    "Lock",
    "MediaApps",
    "MediaAudioTrack",
    "MediaLast",
    "MediaSkipBackward",
    "MediaSkipForward",
    "MediaStepBackward",
    "MediaStepForward",
    "MediaTopMenu",
    "NavigateIn",
    "NavigateNext",
    "NavigateOut",
    "NavigatePrevious",
    "NextFavoriteChannel",
    "NextUserProfile",
    "OnDemand",
    "Pairing",
    "PinPDown",
    "PinPMove",
    "PinPToggle",
    "PinPUp",
    "PlaySpeedDown",
    "PlaySpeedReset",
    "PlaySpeedUp",
    "RandomToggle",
    "RcLowBattery",
    "RecordSpeedNext",
    "RfBypass",
    "ScanChannelsToggle",
    "ScreenModeNext",
    "Settings",
    "SplitScreenToggle",
    "STBInput",
    "STBPower",
    "Subtitle",
    "Teletext",
    "VideoModeNext",
    "Wink",
    "ZoomToggle",
    "AudioVolumeDown",
    "AudioVolumeUp",
    "AudioVolumeMute",
    "BrowserBack",
    "BrowserForward",
    "ChannelDown",
    "ChannelUp",
    "ContextMenu",
    "Eject",
    "End",
    "Enter",
    "Home",
    "MediaFastForward",
    "MediaPlay",
    "MediaPlayPause",
    "MediaRecord",
    "MediaRewind",
    "MediaStop",
    "MediaNextTrack",
    "MediaPause",
    "MediaPreviousTrack",
    "Power"
];
let specialKeysUpper = specialKeys.map(k=>k.toUpperCase());

String.prototype.isSpecialKey = function (caseSensitive) { 
    if (caseSensitive)
        return specialKeys.indexOf(this)>-1;
    else
        return specialKeysUpper.indexOf(this.toUpperCase())>-1;
}

// Tests whether the element belongs to the document's body
jQuery.fn.printed = function(){
    let e = this.parent();
    while (e.length){
        if (e[0]==document.body)
            return true;
        e = e.parent();
    }
    return false;
}


/***/ }),

/***/ "./src/zip.js":
/*!********************!*\
  !*** ./src/zip.js ***!
  \********************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var jszip_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jszip-utils */ "./node_modules/jszip-utils/lib/index.js");
/* harmony import */ var jszip_utils__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jszip_utils__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ "./src/utils.js");
/* harmony import */ var _controller_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./controller.js */ "./src/controller.js");
/* harmony import */ var _engine_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./engine.js */ "./src/engine.js");
/* harmony import */ var file_saver__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! file-saver */ "./node_modules/file-saver/dist/FileSaver.min.js");
/* harmony import */ var file_saver__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(file_saver__WEBPACK_IMPORTED_MODULE_4__);
//import * as JSZip from 'jszip';
var JSZip = __webpack_require__(/*! jszip */ "./node_modules/jszip/dist/jszip.min.js");






let _URLsToLoad = [];

_engine_js__WEBPACK_IMPORTED_MODULE_3__["PennEngine"].utils.JSZip = JSZip;                                 // Pass JSZip to PennEngin.utils to make it accessible
_engine_js__WEBPACK_IMPORTED_MODULE_3__["PennEngine"].utils.JSZip.getBinaryContent = jszip_utils__WEBPACK_IMPORTED_MODULE_0__["getBinaryContent"];     // from element type development (see, e.g., voicerecorder)
_engine_js__WEBPACK_IMPORTED_MODULE_3__["PennEngine"].utils.saveAs = file_saver__WEBPACK_IMPORTED_MODULE_4__["saveAs"];                               // saveAs is also useful to provide a way to download archive

// Loads the file at each URL passed as an argument
// Files can be ZIP files, image files or audio files
_controller_js__WEBPACK_IMPORTED_MODULE_2__["PennController"].PreloadZip = function () {   /* $AC$ global.PennController.PreloadZip() Silently downloads a ZIP file containing resources $AC$ */
    for (let url in arguments)
        _URLsToLoad.push(arguments[url]);
};

// Internal loading of the zip files
// Will be executed when jQuery is ready
function _preloadZip () {
    if (!_URLsToLoad.length) return;        // If no zip file to download, that's it, we're done
    var getZipFile = function(url){         // Called for each URL that was passed
        function removeURL() {              // Called to remove a URL from the array (when unzipped done, or error)
            let index = _URLsToLoad.indexOf(url);
            if (index >= 0)
                _URLsToLoad.splice(index,1);
        }
        var zip = new JSZip();
        Object(jszip_utils__WEBPACK_IMPORTED_MODULE_0__["getBinaryContent"])(url, function(error, data) {
            if (error) {
                removeURL();    // Problem with downloading the file: remove the URL from the array
                _engine_js__WEBPACK_IMPORTED_MODULE_3__["PennEngine"].debug.error("Error downloading "+url+":", error);
                throw error;    // Throw the error
            }
            zip.loadAsync(data).then(function(){                // Load the zip object with the data stream
                _engine_js__WEBPACK_IMPORTED_MODULE_3__["PennEngine"].debug.log("Download of "+url+" complete");
                var unzippedFilesSoFar = 0;                     // Number of files unzipped
                zip.forEach(function(path, file){               // Going through each zip file
                    file.async('arraybuffer').then(function(content){   // Unzip the file
                        if (!path.match(/__MACOS.+\/\.[^\/]+$/)) {                            // Excluding weird MACOS zip files
                            let filename = path.replace(/^.*?([^\/]+)$/,"$1");                // Get rid of path, keep just filename
                            let type = Object(_utils_js__WEBPACK_IMPORTED_MODULE_1__["getMimetype"])( Object(_utils_js__WEBPACK_IMPORTED_MODULE_1__["hexFromArrayBuffer"])(content.slice(0,28)) , filename ); // Get type using magic numbers (see utils.js)
                            if (type){                                                        // Add only type was recognized
                                let url = URL.createObjectURL(new Blob([content], {type: type}));   // The URL of the Blob
                                console.log("Found a resource named",filename,"of type",type,"with url",url);
                                var resourceFound = false;                                    // Check extent resources
                                for (let r in _engine_js__WEBPACK_IMPORTED_MODULE_3__["PennEngine"].resources.list){
                                    let resource = _engine_js__WEBPACK_IMPORTED_MODULE_3__["PennEngine"].resources.list[r];
                                    if (resource.name==filename && resource.status!="ready"){
                                        console.log("Applying create to a copye of",filename);
                                        resource.create.apply(                              // Create the resource's object
                                            $.extend({}, resource, {                        // using a copy of the resource found
                                                value: url,                                 // with its value set to the Blob's URL
                                                object: null,                               // No object yet
                                                resolve: function() {                       // and its resolve taking care of object
                                                    console.log("Resolving",filename,"current status",resource.status);
                                                    if (resource.status=="ready")
                                                        return;                             // Assign copy's object to original's
                                                    resource.object = this.object;
                                                    console.log("Set",filename," object to",resource.object,"calling resolve now");
                                                    resource.resolve();
                                                }
                                            })
                                        );
                                        resourceFound = true;
                                    }
                                }
                                if (!resourceFound)                     // If no resource was found:
                                    _engine_js__WEBPACK_IMPORTED_MODULE_3__["PennEngine"].resources.list.push({    // add a new one to the list
                                        name: filename,
                                        value: url,                     // Use the Blob's URL
                                        controllers: [],
                                        object: null,
                                        status: "void",
                                        create: function(){ this.status="pending"; },
                                        resolve: function(){ this.status="ready"; }
                                    });
                            }
                        }
                        unzippedFilesSoFar++;                           // Keep track of progression
                        if (unzippedFilesSoFar >= Object.keys(zip.files).length)    // All files unzipped:
                            removeURL();                                            // remove the URL from the array
                    });
                });
            });
        });
    };
    
    for (let u in _URLsToLoad) {    // Fetch the zip file
        let url = _URLsToLoad[u];
        let extension = url.match(/^https?:\/\/.+\.(zip)$/i);
        if (typeof(url) != "string" || !extension) {
            _engine_js__WEBPACK_IMPORTED_MODULE_3__["PennEngine"].debug.log("Preload: entry #"+u+" is not a valid URL, ignoring it");
            continue;
        }
        else if (extension[1].toLowerCase() == "zip")
            getZipFile(url);
    }
};

_engine_js__WEBPACK_IMPORTED_MODULE_3__["PennEngine"].Prerun( _preloadZip);


/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,