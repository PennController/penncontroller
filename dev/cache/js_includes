/* This software is licensed under a BSD license; see the LICENSE file for details. */

define_ibex_controller({
name: "AcceptabilityJudgment",

jqueryWidget: {
    _init: function () {
        var opts = {
            options:     this.options,
            triggers:    [1],
            children:    [this.options._dashed ? "DashedSentence" : "FlashSentence",
                          this.options._dashed ? {
                                                     s: this.options.s,
                                                     mode: this.options.mode,
                                                     display: this.options.display,
                                                     blankText: this.options.blankText,
                                                     wordTime: this.options.wordTime,
                                                     wordPauseTime: this.options.wordPauseTime,
                                                     sentenceDescType: this.options.sentenceDescType,
                                                     showAhead: this.options.showAhead,
                                                     showBehind: this.options.showBehind
                                                 } :
                                                 {
                                                     s: this.options.s,
                                                     timeout: null, // Already present for 'Question'
                                                     audio: this.options.audio,
                                                     audioMessage: this.options.audioMessage,
                                                     audioTrigger: this.options.audioTrigger
                                                 },
                          this.options._dashed ? "!Question" : (this.options.s.audio ? "*Question" : "Question"),
                          { q:                   this.options.q,
                            as:                  this.options.as,
                            hasCorrect:          dget(this.options, "hasCorrect", false),
                            presentAsScale:      this.options.presentAsScale,
                            presentHorizontally: this.options.presentHorizontally,
                            autoFirstChar:       typeof(this.options.autoFirstChar) == "undefined" ? this.options.presentAsScale : this.options.autoFirstChar,
                            randomOrder:         this.options.randomOrder,
                            showNumbers:         this.options.showNumbers,
                            timeout:             this.options.timeout,
                            instructions:        this.options.instructions,
                            leftComment:         this.options.leftComment,
                            rightComment:        this.options.rightComment }]/*,
            manipulators: [
                [0, function(div) { div.css('font-size', "larger"); return div; }]
            ]*/
        };

        this.element.VBox(opts);
    }
},

properties: {
    obligatory: ["s", "as"],
    htmlDescription:
        function (opts) {
            var s = ibex_controller_get_property("FlashSentence", "htmlDescription")(opts);
            var q = ibex_controller_get_property("Question", "htmlDescription")(opts);
            var p =
                $("<p>")
                .append($("<p>").append("Q: ").append($(q)))
                .append("<br>").append($("<b>").text("S:"))
                .append($(s));
             return p;
        }
}
});


/* This software is licensed under a BSD license; see the LICENSE file for details. */

define_ibex_controller({
    name: "DashedAcceptabilityJudgment",
    jqueryWidget: {
        _init: function () {
            this.options._dashed = true;
            if (this.options.mode === undefined)
                this.options.mode = "speeded acceptability";
            $(this.element).AcceptabilityJudgment(this.options);
        }
    },
    properties: {
        obligatory: ["s", "as"],
        htmlDescription: function (opts) {
            var s = ibex_controller_get_property("DashedSentence", "htmlDescription")(opts);
            var q = ibex_controller_get_property("Question", "htmlDescription")(opts);
            var p =
                $("<p>")
                .append($("<p>").append("Q: ").append($(q)))
                .append("<br>").append($("<b>").text("S:"))
                .append($(s));
            return p;
        }
    }
});

/* This software is licensed under a BSD license; see the LICENSE file for details. */

function boolToInt(x) { if (x) return 1; else return 0; }

define_ibex_controller({
name: "DashedSentence",

jqueryWidget: {
    _init: function() {
        this.cssPrefix = this.options._cssPrefix;
        this.utils = this.options._utils;
        this.finishedCallback = this.options._finishedCallback;

        if (typeof(this.options.s) == "string") {
            // replace all linebreaks (and surrounding space) with 'space-return-space'
            var inputString = this.options.s.replace(/\s*[\r\n]\s*/g, " \r ");
            this.words = inputString.split(/[ \t]+/);
        } else {
            assert_is_arraylike(this.options.s, "Bad value for 's' option of DashedSentence.");
            this.words = this.options.s;
        }
        this.mode = dget(this.options, "mode", "self-paced reading");
        assert(this.mode == "self-paced reading" || this.mode == "speeded acceptability",
               "Value of 'mode' option for DashedSentence controller must be either " +
               "'self-paced reading' or 'speeded acceptability'.");
        this.display = dget(this.options, "display", "dashed");
        this.blankText = dget(this.options, "blankText", "\u2014\u2014"/*mdash*/);
        this.wordTime = dget(this.options, "wordTime", this.display == "in place" ? 400 : 300); // Only for speeded accpetability.
        this.wordPauseTime = dget(this.options, "wordPauseTime", this.display == "in place" ? 0 : 100); // Ditto.
        this.showAhead = dget(this.options, "showAhead", true);
        this.showBehind = dget(this.options, "showBehind", true);
        assert(this.display == "dashed" || this.display == "in place",
               "Value of 'display' option for DashedSentence controller must be either " +
               "'dashed' (default) or 'in place'.");

        this.currentWord = 0;

        // Is there a "stopping point" specified?
        this.stoppingPoint = this.words.length;
        for (var i = 0; i < this.words.length; ++i) {
            if (stringStartsWith("@", this.words[i])) {
                this.words[i] = this.words[i].substring(1);
                this.stoppingPoint = i + 1;
                break;
            }
        }

        this.hideUnderscores = dget(this.options, "hideUnderscores", true);
        if (this.hideUnderscores) {
            this.words = $.map(this.words, function(word) { return word.replace(/_/g, ' ') });
        }

        this.mainDiv = $("<div>");
        this.element.append(this.mainDiv);

        this.background = this.element.css('background-color') || "white";
        this.isIE7;
        /*@cc_on this.isIE = true; @*/
        if (this.isIE)
            this.background = "white";

        // Defaults.
        this.unshownBorderColor = dget(this.options, "unshownBorderColor", "#9ea4b1");
        this.shownBorderColor = dget(this.options, "shownBorderColor", "black");
        this.unshownWordColor = dget(this.options, "unshownWordColor", this.background);
        this.shownWordColor = dget(this.options, "shownWordColor", "black");

        // Precalculate MD5 of sentence.
        this.sentenceDescType = dget(this.options, "sentenceDescType", "literal");
        assert(this.sentenceDescType == "md5" || this.sentenceDescType == "literal", "Bad value for 'sentenceDescType' option of DashedSentence.");
        if (this.sentenceDescType == "md5") {
            var canonicalSentence = this.words.join(' ');
            this.sentenceDesc = hex_md5(canonicalSentence);
        }
        else {
	    if (typeof(this.options.s) == "string")
		this.sentenceDesc = csv_url_encode(this.options.s);
	    else
		this.sentenceDesc = csv_url_encode(this.options.s.join(' '));
        }

        this.mainDiv.addClass(this.cssPrefix + "sentence");

        this.resultsLines = [];
        if (this.mode == "self-paced reading") {
            // Don't want to be allocating arrays in time-critical code.
            this.sprResults = [];
            for (var i = 0; i < this.words.length; ++i)
                this.sprResults[i] = new Array(2);
        }
        this.previousTime = null;

        if (this.display == "in place") {
            this.wordSpan = $(document.createElement("span")).text(this.blankText);
            if (conf_centerItems) {
                this.mainDiv.css('text-align', 'center');
                this.wordSpan.css('text-align', 'center');
            }
            this.mainDiv.append(this.wordSpan);

            this.blankWord = this.blankWord_inplace;
            this.showWord = this.showWord_inplace;
        }
        else { // dashed
            this.blankTextSpan = $("<span>").text(this.blankText);
            this.mainDiv.append(this.blankTextSpan.css("position","absolute"));

            this.blankWord = this.blankWord_dashed;
            this.showWord = this.showWord_dashed;

            this.wordISpans = []; // Inner spans.
            this.wordOSpans = []; // Outer spans.
            this.owsnjq = []; // 'outer word spans no jQuery'.
            this.iwsnjq = []; // 'inner word spans no jQuery'.
            for (var j = 0; j < this.words.length; ++j) {
                if ( this.words[j] == "\r" ) {
                    this.mainDiv.append('<br/>');

                    if (j <= this.stoppingPoint)
                        this.stoppingPoint--;
                    
                    continue;
                }

                var ispan;
                var ospan = $(document.createElement("span"))
                            .addClass(this.cssPrefix + 'ospan')
                            .append(ispan = $(document.createElement("span"))
                                            .addClass(this.cssPrefix + 'ispan')
                                            .text(this.words[j]));
                if (! this.showAhead)
                    ospan.css('border-color', this.background);
                this.mainDiv.append(ospan);
                if (j + 1 < this.words.length)
                    this.mainDiv.append("&nbsp; ");
                this.wordISpans.push(ispan);
                this.wordOSpans.push(ospan);
                this.iwsnjq.push(ispan[0]);
                this.owsnjq.push(ospan[0]);
            }
            console.log(this.wordOSpans);
            setTimeout( ()=> {this.newlines = this.wordOSpans.map( 
                (s,i) => i<this.wordOSpans.length-1 && $(s).offset().top < this.wordOSpans[i+1].offset().top 
            ); console.log(this.newlines); } , 100 );
        }

        if (this.mode == "speeded acceptability") {
            this.showWord(0);
            var t = this;
            function wordTimeout() {
                t.blankWord(t.currentWord);
                ++(t.currentWord);
                if (t.currentWord >= t.stoppingPoint)
                    t.finishedCallback([[["Sentence (or sentence MD5)", t.sentenceDesc]]]);
                else
                    t.utils.setTimeout(wordPauseTimeout, t.wordPauseTime);
            }
            function wordPauseTimeout() {
                t.showWord(t.currentWord);
                t.utils.clearTimeout(wordPauseTimeout);
                t.utils.setTimeout(wordTimeout, t.wordTime);
            }
            this.utils.setTimeout(wordTimeout, this.wordTime);
        }
        else if (this.mode == "self-paced reading") {
            var t = this;
            // Inlining this to minimize function calls in code for updating screen after space is pressed.
/*            function goToNext(time) {
                t.recordSprResult(time, t.currentWord);

                if (t.currentWord - 1 >= 0)
                    t.blankWord(t.currentWord - 1);
                if (t.currentWord < t.stoppingPoint)
                    t.showWord(t.currentWord);
                ++(t.currentWord);
                if (t.currentWord > t.stoppingPoint) {
                    t.processSprResults();
                    t.finishedCallback(t.resultsLines);
                }

                return false;
            }*/

            this.safeBind($(document), 'keydown', function(e) {
                var time = new Date().getTime();
                var code = e.keyCode;

                if (code == 32) {
                    // *** goToNext() ***
//                    t.recordSprResult(time, t.currentWord);
                    var word = t.currentWord;
                    if (word > 0 && word <= t.stoppingPoint) {
                        var rs = t.sprResults[word-1];
                        rs[0] = time;
                        rs[1] = t.previousTime;
                    }
                    t.previousTime = time;

                    if (t.currentWord - 1 >= 0)
                        t.blankWord(t.currentWord - 1);
                    if (t.currentWord < t.stoppingPoint)
                        t.showWord(t.currentWord);
                    ++(t.currentWord);
                    if (t.currentWord > t.stoppingPoint) {
                        t.processSprResults();
                        t.finishedCallback(t.resultsLines);
                    }
                    return false;
                    // ***
                }
                else {
                    return true;
                }
            });

            // For iPhone/iPod touch -- add button for going to next word.
            if (isIPhone) {
                var btext = dget(this.options, "iPhoneNextButtonText", "next");
                var next = $("<div>")
                           .addClass(this.cssPrefix + "iphone-next")
                           .text(btext);
                this.element.append(next);
                next.click(function () {
                    var time = new Date().getTime();

                    // *** goToNext() ***
                    //t.recordSprResult(time, t.currentWord);
                    var word = t.currentWord;
                    if (word > 0 && word < t.stoppingPoint) {
                        var rs = t.sprResults[word-1];
                        rs[0] = time;
                        rs[1] = t.previousTime;
                    }
                    t.previousTime = time;

                    if (t.currentWord - 1 >= 0)
                        t.blankWord(t.currentWord - 1);
                    if (t.currentWord < t.stoppingPoint)
                        t.showWord(t.currentWord);
                    ++(t.currentWord);
                    if (t.currentWord > t.stoppingPoint) {
                        t.processSprResults();
                        t.finishedCallback(t.resultsLines);
                    }

                    return false;
                    // ***
                });
            }
        }
    },

    // Not using JQuery in these two methods just in case it slows things down too much.
    // NOTE: [0] subscript gets DOM object from JQuery selector.
    blankWord_dashed: function(w) {
        if (this.currentWord <= this.stoppingPoint) {
            this.owsnjq[w].style.borderColor = this.unshownBorderColor;
            this.iwsnjq[w].style.visibility = "hidden";
            if (! this.showBehind)
                this.owsnjq[w].style.borderColor = this.background;
        }
    },
    showWord_dashed: function(w) {
        this.blankTextSpan.remove();
        if (this.currentWord < this.stoppingPoint) {
            if (this.showAhead || this.showBehind)
                this.owsnjq[w].style.borderColor = this.shownBorderColor;
            this.iwsnjq[w].style.visibility = "visible";
        }
    },

    blankWord_inplace: function (w) {
        if (this.wordPauseTime > 0 && this.currentWord <= this.stoppingPoint) {
            this.wordSpan.empty();
        }
    },
    showWord_inplace: function (w) {
        if (this.currentWord < this.stoppingPoint) {
            this.wordSpan.text(this.words[this.currentWord]);
        }
    },

    // Inlining this now.
    /*recordSprResult: function(time, word) {
        if (word > 0 && word < this.stoppingPoint) {
            var rs = this.sprResults[word-1];
            rs[0] = time;
            rs[1] = this.previousTime;
        }
        this.previousTime = time;
    },*/

    processSprResults: function () {
        var nonSpaceWords = [];
        for (var i = 0; i < this.words.length; ++i) {
        	if ( this.words[i] != "\r" )
	            nonSpaceWords.push(this.words[i]);
        }

        var word_numbers = [];
        var words = [];
        var reading_times= [];
        var newlines = [];
        for (var i = 0; i < nonSpaceWords.length; ++i) {
            word_numbers.push(i+1);
            words.push(csv_url_encode(nonSpaceWords[i].replace(/\s+/g,'_')));
            reading_times.push(this.sprResults[i][0] - this.sprResults[i][1])
            newlines.push((this.display != "in place") &&
                          boolToInt(((i+1) < this.wordOSpans.length) &&
                          (this.wordOSpans[i].offset().top != this.wordOSpans[i+1].offset().top)));
            // this.resultsLines.push([
            //     ["Word number", i+1],
            //     ["Word", csv_url_encode(nonSpaceWords[i])],
            //     ["Reading time", this.sprResults[i][0] - this.sprResults[i][1]],
            //     ["Newline?", (this.display != "in place") &&
            //                  boolToInt(((i+1) < this.wordOSpans.length) &&
            //                 (this.wordOSpans[i].offset().top != this.wordOSpans[i+1].offset().top))],
            //                 //  this.newlines[i] ],
            //     ["Sentence (or sentence MD5)", this.sentenceDesc]
            // ]);
        }
        this.resultsLines.push([
            // ["Word number", word_numbers.join(" ")],
            ["Word", words.join(" ")],
            ["Reading time", reading_times.join(" ")],
            ["Newline?", newlines.join(" ")],
            ["Sentence (or sentence MD5)", this.sentenceDesc]
        ])
    }
},

properties: {
    obligatory: ["s"],
    htmlDescription: function (opts) {
        return $(document.createElement("div")).text(opts.s);
    }
}
});


/* This software is licensed under a BSD license; see the LICENSE file for details. */

(function () {
var soundId = 0;

define_ibex_controller({
name: "FlashSentence",

init: function () {

},

jqueryWidget: {
    _init: function () {
        var self = this;
        self.cssPrefix = self.options._cssPrefix;

        var $loading;
        var doneLoading = false;
        if (typeof(self.options.s) != "string") {
            if (self.options.s.audio) {
                if (self.options.audioMessage) {
                    self.element.append($loading = $("<div>").addClass(self.cssPrefix + 'loading'));
                    setTimeout(function () {
                        if (! doneLoading)
                            $loading.text(conf_loadingMessage);
                    }, 250);
                }
                withSoundManager(completeInit);
            }
            else {
                self.sentenceDom = htmlCodeToDOM(self.options.s)
                completeInit();
            }
        }
        else {
            self.sentenceDom = $("<div>").text(self.options.s);
            completeInit();
        }
        this.sentenceDescType = dget(this.options, "sentenceDescType", "literal");
        assert(this.sentenceDescType == "literal", "Bad value for 'sentenceDescType' option of FlashSentence controller ('md5' no longer supported).");

        function completeInit(sm) {
            if (sm) {
                if (self.options.audioMessage) {
                    if (typeof(self.options.audioMessage) != "string") {
                        self.sentenceDom = $(htmlCodeToDOM(self.options.audioMessage));
                    }
                    else {
                        self.sentenceDom = $("<div>").text(self.options.audioMessage);
                    }
                }
                var names = null;
                if ($.isArray(self.options.s.audio))
                    names = self.options.s.audio;
                else
                    names = [self.options.s.audio];
                var urls = [ ];
                for (var i = 0; i < names.length; ++i) {
                    if (names[i].match(/^(?:https?)|(?:ftps?):\/\//))
                        urls.push(names[i]);
                    else
                        urls.push(__server_py_script_name__ + '?resource=' + escape(names[i]));
                }
                var sids = [ ];
                for (var i = 0; i < names.length; ++i)
                    sids.push(soundId++);
                for (var i = 0; i < names.length; ++i)
                    sm.createSound('sound' + sids[i], urls[i]);

                var nextSoundToPlayIndex = 0;

                function hideSD() { if (self.sentenceDom) self.sentenceDom.hide(); }
                if (self.options.audioTrigger == "click") {
                    self.sentenceDom.css('cursor', 'pointer');
                    self.sentenceDom.click(function () {
                        hideSD();
                        sm.play('sound' + sids[nextSoundToPlayIndex++], { onfinish: fin });
                    });
                }
                else { // Immediate
                    hideSD();
                    sm.play('sound' + sids[nextSoundToPlayIndex++], { onfinish: fin });
                }

                function fin() {
                    if (nextSoundToPlayIndex >= names.length)
                        setTimeout(function () { self.finishedCallback([[["Sentence (or sentence MD5)", self.sentenceMD5]]]); }, 200);
                    else
                        sm.play('sound' + sids[nextSoundToPlayIndex++], { onfinish: fin });
                }
            }

            self.finishedCallback = self.options._finishedCallback;
            self.utils = self.options._utils;

            self.timeout = dget(self.options, "timeout", 2000);

            self.sentenceMD5 = csv_url_encode(self.options.s.html ? self.options.s.html : (self.options.s.audio ? self.options.s.audio+'' : (self.options.s+'')));

            self.element.addClass(self.cssPrefix + "flashed-sentence");
            if (self.sentenceDom) {
                if ($loading) {
                    doneLoading = true;
                    $loading.replaceWith(self.sentenceDom)
                }
                else
                    self.element.append(self.sentenceDom);
            }

            if (self.timeout) {
                self.utils.setTimeout(function() {
                    self.finishedCallback([[["Sentence (or sentence MD5)", self.sentenceMD5]]]);
                }, self.timeout);
            }
            else if (! self.options.s.audio) {
                // Give results without actually finishing.
                if (self.utils.setResults)
                    self.utils.setResults([[["Sentence (or sentence MD5)", self.sentenceMD5]]]);
            }
        }
    }
},

properties: {
    obligatory: ["s"],
    htmlDescription: function (opts) {
        return $(document.createElement("div")).text(opts.s)[0];
    }
}
});

})();


/* This software is licensed under a BSD license; see the LICENSE file for details. */

define_ibex_controller({
name: "Form",

jqueryWidget: {
    _init: function () {
        this.cssPrefix = this.options._cssPrefix;
        this.finishedCallback = this.options._finishedCallback;
        this.utils = this.options._utils;

        this.html = dget(this.options, "html");
        this.continueOnReturn = dget(this.options, "continueOnReturn", false);
        this.continueMessage = dget(this.options, "continueMessage", "Click here to continue");
        this.checkedValue = dget(this.options, "checkedValue", "yes");
        this.uncheckedValue = dget(this.options, "uncheckedValue", "no");
        this.validators = dget(this.options, "validators", { });
        this.errorCSSClass = dget(this.options, "errorCSSClass", "error");
        this.saveReactionTime = dget(this.options, "saveReactionTime", false);
        this.obligatoryErrorGenerator =
            dget(this.options, "obligatoryErrorGenerator",
                 function (field) { return "The \u2018" + field + "\u2019 field is obligatory."; });
        this.obligatoryCheckboxErrorGenerator =
            dget(this.options, "obligatoryCheckboxErrorGenerator",
                 function (field) { return "You must check the " + field + " checkbox to continue."; });
        this.obligatoryRadioErrorGenerator =
            dget(this.options, "obligatoryRadioErrorGenerator",
                 function (field) { return "You must select an option for \u2018" + field + "\u2019."; });

        var t = this;

        function alertOrAddError(name, error) {
            var ae = $("label." + escape(t.errorCSSClass) + "[for=__ALL_FIELDS__]");
            if (ae.length > 0) {
                ae.addClass(t.cssPrefix + "error-text").text(error);
                return;
            }

            var e = $("label." + escape(t.errorCSSClass) + "[for=" + escape(name) + "]");
            if (e.length > 0)
                e.addClass(t.cssPrefix + "error-text").text(error);
            else 
                alert(error);
        }

        var HAS_LOADED = false;

        function handleClick(dom) {
            return function (e) {
                var answerTime = new Date().getTime();

                e.preventDefault();
                if (! HAS_LOADED) return;

                // Get rid of any previous errors.
                $("." + t.cssPrefix + "error-text").empty();

                var rlines = [];

                var inps = $(dom).find("input[type=text]");
                var tas = $(dom).find("textarea");
                for (var i = 0; i < tas.length; ++i) { inps.push(tas[i]); }

                for (var i = 0; i < inps.length; ++i) {
                    var inp = $(inps[i]);

                    if (inp.hasClass("obligatory") && ((! inp.attr('value')) || inp.attr('value').match(/^\s*$/))) {
                        alertOrAddError(inp.attr('name'), t.obligatoryErrorGenerator(inp.attr('name')));
                        return;
                    }

                    if (t.validators[inp.attr('name')]) {
                        var er = t.validators[inp.attr('name')](inp.attr('value'));
                        if (typeof(er) == "string") {
                            alertOrAddError(inp.attr('name'), er);
                            return;
                        }
                    }

                    rlines.push([["Field name", csv_url_encode(inp.attr('name'))],
                                 ["Field value", csv_url_encode(inp.attr('value'))]]);
                }

                var checks = $(dom).find("input[type=checkbox]");
                for (var i = 0; i < checks.length; ++i) {
                    var check = $(checks[i]);
 
                    // Checkboxes with the 'obligatory' class must be checked.
                    if (! check.attr('checked') && check.hasClass('obligatory')) {
                        alertOrAddError(check.attr('name'), t.obligatoryCheckboxErrorGenerator(check.attr('name')));
                        return;
                    }

                    rlines.push([["Field name", check.attr('name')],
                                 ["Field value", check.attr('checked') ? t.checkedValue : t.uncheckedValue]]);
                }

                var rads = $(dom).find("input[type=radio]");
                // Sort by name.
                var rgs = { };
                for (var i = 0; i < rads.length; ++i) {
                    var rad = $(rads[i]);
                    if (rad.attr('name')) {
                        if (! rgs[rad.attr('name')])
                            rgs[rad.attr('name')] = [];
                        rgs[rad.attr('name')].push(rad);
                    }
                }
                for (k in rgs) {
                    // Check if it's oblig.
                    var oblig = false;
                    var oneIsSelected = false;
                    var oneThatWasSelected;
                    var val;
                    for (var i = 0; i < rgs[k].length; ++i) {
                        if (rgs[k][i].hasClass('obligatory')) oblig = true;
                        if (rgs[k][i].attr('checked')) {
                            oneIsSelected = true;
                            oneThatWasSelected = i;
                            val = rgs[k][i].attr('value');
                        }
                    }
                    if (oblig && (! oneIsSelected)) {
                        alertOrAddError(rgs[k][0].attr('name'), t.obligatoryRadioErrorGenerator(rgs[k][0].attr('name')));
                        return;
                    }
                    if (oneIsSelected) {
                        rlines.push([["Field name", rgs[k][0].attr('name')],
                                     ["Field value", rgs[k][oneThatWasSelected].attr('value')]]);
                    }
                }

                if (t.saveReactionTime) {
                    rlines.push([["Field name", "_REACTION_TIME_"],
                                 ["Field value", answerTime - t.creationTime]]);
                }
                t.finishedCallback(rlines);
            }
        }

        var dom = htmlCodeToDOM(this.html, function (dom) {
            HAS_LOADED = true;

            if (t.continueOnReturn) {
                t.safeBind($(dom).find("input[type=text]"), 'keydown', function (e) { if (e.keyCode == 13) { console.log("H"); return handler(e);  } });
            }
        });
        var handler = handleClick(dom);

        this.element.append(dom);

        if (this.continueMessage) {
            this.element.append($("<p>").append($("<a>").attr('href', '').text("\u2192 " + this.continueMessage)
                                                .addClass(ibex_controller_name_to_css_prefix("Message") + "continue-link")
                                                .click(handler)));
        }

        this.creationTime = new Date().getTime();
    }
},

properties: {
    obligatory: ["html"],
    countsForProgressBar: false,
    htmlDescription: function (opts) {
        return htmlCodeToDOM(opts.html);
    }
}
});


/* This software is licensed under a BSD license; see the LICENSE file for details. */

define_ibex_controller({
name: "Message",

jqueryWidget: {
    _init: function () {
        this.cssPrefix = this.options._cssPrefix;
        this.utils = this.options._utils;
        this.finishedCallback = this.options._finishedCallback;

        this.html = this.options.html;
        this.element.addClass(this.cssPrefix + "message");
        this.element.append(htmlCodeToDOM(this.html));

        // Bit of copy/pasting from 'Separator' here.
        this.transfer = dget(this.options, "transfer", "click");
        assert((! this.transfer) || this.transfer == "click" || this.transfer == "keypress" || typeof(this.transfer) == "number",
               "Value of 'transfer' option of Message must either be the string 'click' or a number");

        if (this.transfer == "click") {
            this.continueMessage = dget(this.options, "continueMessage", "Click here to continue.");
            this.consentRequired = dget(this.options, "consentRequired", false);
            this.consentMessage = dget(this.options, "consentMessage", "I have read the above and agree to do the experiment.");
            this.consentErrorMessage = dget(this.options, "consentErrorMessage", "You must consent before continuing.");

            // Add the consent checkbox if necessary.
            var checkbox = null;
            if (this.consentRequired) {
                var names = { };
                var checkbox;
                var message;
                var dom =
                    $(document.createElement("form"))
                    .append($(document.createElement("table"))
                            .css('border', 'none').css('padding', 0).css('margin', 0)
                            .append($(document.createElement("tr"))
                                    .append($(document.createElement("td"))
                                            .css('border', 0).css('padding-left', 0).css('margin-left', 0)
                                            .append(checkbox = $(document.createElement("input"))
                                                    .attr('id', 'consent_checkbox')
                                                    .attr('type', 'checkbox')
                                                    .attr('checked', 0)))
                                    .append(message = $(document.createElement("td"))
                                            .css('border', 0).css('margin-left', 0).css('padding-left', 0)
                                            .append($("<label>")
                                                    .attr('for', 'consent_checkbox')
                                                    .text(this.consentMessage)))));

                this.element.append(dom);
                // Change cursor to pointer when hovering over the message (have to use JS because
                // IE doesn't support :hover for anything other than links).
                message.mouseover(function () {
                    message.css('cursor', "default");
                });
            }

            var t = this;
            // Get a proper lexical scope for the checkbox element so we can capture it in a closure.
            // ALEX: Looking at this again, I don't see why it's necessary to create a local scope here
            // but I am leaving it in as I may be missing something and it won't do any harm.
            (function (checkbox) {
                t.element.append(
                    $(document.createElement("p"))
                    .css('clear', 'left')
                        .append($(document.createElement("a"))
                            .attr('href', '')
                            .addClass(t.cssPrefix + 'continue-link')
                            .text("\u2192 " + t.continueMessage)
                            .click(function () {
                                if ((! checkbox) || checkbox.attr('checked'))
                                    t.finishedCallback();
                                else
                                    alert(t.consentErrorMessage);
                                return false;
                            }))
                );
            })(checkbox);
        }
        else if (this.transfer == "keypress") {
            var t = this;
            this.safeBind($(document), 'keydown', function () {
                t.finishedCallback(null);
                return false;
            });
        }
        else if (typeof(this.transfer) == "number") {
            assert(! this.consentRequired, "The 'consentRequired' option of the Message controller can only be set to true if the 'transfer' option is set to 'click'.");
            this.utils.setTimeout(this.finishedCallback, this.transfer);
        }
    }
},

properties: {
    obligatory: ["html"],
    countsForProgressBar: false,
    htmlDescription: function (opts) {
        return truncateHTML(htmlCodeToDOM(opts.html), 100);
    }
}
});

/*!
 * PennController for IBEX
 * This software is licensed under a BSD license; see the LICENSE file for details.
 * 
 *  - Version 2.1.beta
 *  - Last Update:  2021, October 21
 *  - Major changes in version 2.1.beta:
 *    * Improved resource creation and zip downloads
 * 
 */
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index_core.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/@zip.js/zip.js/index.js":
/*!**********************************************!*\
  !*** ./node_modules/@zip.js/zip.js/index.js ***!
  \**********************************************/
/*! exports provided: fs, configure, initShimAsyncCodec, ZipReader, ZipWriter, Reader, Writer, TextReader, TextWriter, Data64URIReader, Data64URIWriter, BlobReader, BlobWriter, HttpReader, HttpRangeReader, Uint8ArrayWriter, Uint8ArrayReader, ERR_HTTP_RANGE, ERR_BAD_FORMAT, ERR_EOCDR_NOT_FOUND, ERR_EOCDR_ZIP64_NOT_FOUND, ERR_EOCDR_LOCATOR_ZIP64_NOT_FOUND, ERR_CENTRAL_DIRECTORY_NOT_FOUND, ERR_LOCAL_FILE_HEADER_NOT_FOUND, ERR_EXTRAFIELD_ZIP64_NOT_FOUND, ERR_ENCRYPTED, ERR_UNSUPPORTED_ENCRYPTION, ERR_UNSUPPORTED_COMPRESSION, ERR_INVALID_SIGNATURE, ERR_INVALID_PASSWORD, ERR_DUPLICATED_NAME, ERR_INVALID_COMMENT, ERR_INVALID_ENTRY_NAME, ERR_INVALID_ENTRY_COMMENT, ERR_INVALID_VERSION, ERR_INVALID_EXTRAFIELD_TYPE, ERR_INVALID_EXTRAFIELD_DATA, ERR_INVALID_ENCRYPTION_STRENGTH, ERR_UNSUPPORTED_FORMAT, ERR_ABORT, getMimeType, terminateWorkers */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _lib_core_codecs_deflate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lib/core/codecs/deflate.js */ "./node_modules/@zip.js/zip.js/lib/core/codecs/deflate.js");
/* harmony import */ var _lib_core_codecs_inflate_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./lib/core/codecs/inflate.js */ "./node_modules/@zip.js/zip.js/lib/core/codecs/inflate.js");
/* harmony import */ var _lib_core_configuration_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./lib/core/configuration.js */ "./node_modules/@zip.js/zip.js/lib/core/configuration.js");
/* harmony import */ var _lib_core_util_mime_type_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./lib/core/util/mime-type.js */ "./node_modules/@zip.js/zip.js/lib/core/util/mime-type.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getMimeType", function() { return _lib_core_util_mime_type_js__WEBPACK_IMPORTED_MODULE_3__["default"]; });

/* harmony import */ var _lib_core_codecs_codec_pool_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./lib/core/codecs/codec-pool.js */ "./node_modules/@zip.js/zip.js/lib/core/codecs/codec-pool.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "terminateWorkers", function() { return _lib_core_codecs_codec_pool_js__WEBPACK_IMPORTED_MODULE_4__["terminateWorkers"]; });

/* harmony import */ var _lib_zip_fs_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./lib/zip-fs.js */ "./node_modules/@zip.js/zip.js/lib/zip-fs.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "fs", function() { return _lib_zip_fs_js__WEBPACK_IMPORTED_MODULE_5__["fs"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "configure", function() { return _lib_zip_fs_js__WEBPACK_IMPORTED_MODULE_5__["configure"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "initShimAsyncCodec", function() { return _lib_zip_fs_js__WEBPACK_IMPORTED_MODULE_5__["initShimAsyncCodec"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ZipReader", function() { return _lib_zip_fs_js__WEBPACK_IMPORTED_MODULE_5__["ZipReader"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ZipWriter", function() { return _lib_zip_fs_js__WEBPACK_IMPORTED_MODULE_5__["ZipWriter"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Reader", function() { return _lib_zip_fs_js__WEBPACK_IMPORTED_MODULE_5__["Reader"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Writer", function() { return _lib_zip_fs_js__WEBPACK_IMPORTED_MODULE_5__["Writer"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TextReader", function() { return _lib_zip_fs_js__WEBPACK_IMPORTED_MODULE_5__["TextReader"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TextWriter", function() { return _lib_zip_fs_js__WEBPACK_IMPORTED_MODULE_5__["TextWriter"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Data64URIReader", function() { return _lib_zip_fs_js__WEBPACK_IMPORTED_MODULE_5__["Data64URIReader"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Data64URIWriter", function() { return _lib_zip_fs_js__WEBPACK_IMPORTED_MODULE_5__["Data64URIWriter"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BlobReader", function() { return _lib_zip_fs_js__WEBPACK_IMPORTED_MODULE_5__["BlobReader"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BlobWriter", function() { return _lib_zip_fs_js__WEBPACK_IMPORTED_MODULE_5__["BlobWriter"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "HttpReader", function() { return _lib_zip_fs_js__WEBPACK_IMPORTED_MODULE_5__["HttpReader"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "HttpRangeReader", function() { return _lib_zip_fs_js__WEBPACK_IMPORTED_MODULE_5__["HttpRangeReader"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Uint8ArrayWriter", function() { return _lib_zip_fs_js__WEBPACK_IMPORTED_MODULE_5__["Uint8ArrayWriter"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Uint8ArrayReader", function() { return _lib_zip_fs_js__WEBPACK_IMPORTED_MODULE_5__["Uint8ArrayReader"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ERR_HTTP_RANGE", function() { return _lib_zip_fs_js__WEBPACK_IMPORTED_MODULE_5__["ERR_HTTP_RANGE"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ERR_BAD_FORMAT", function() { return _lib_zip_fs_js__WEBPACK_IMPORTED_MODULE_5__["ERR_BAD_FORMAT"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ERR_EOCDR_NOT_FOUND", function() { return _lib_zip_fs_js__WEBPACK_IMPORTED_MODULE_5__["ERR_EOCDR_NOT_FOUND"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ERR_EOCDR_ZIP64_NOT_FOUND", function() { return _lib_zip_fs_js__WEBPACK_IMPORTED_MODULE_5__["ERR_EOCDR_ZIP64_NOT_FOUND"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ERR_EOCDR_LOCATOR_ZIP64_NOT_FOUND", function() { return _lib_zip_fs_js__WEBPACK_IMPORTED_MODULE_5__["ERR_EOCDR_LOCATOR_ZIP64_NOT_FOUND"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ERR_CENTRAL_DIRECTORY_NOT_FOUND", function() { return _lib_zip_fs_js__WEBPACK_IMPORTED_MODULE_5__["ERR_CENTRAL_DIRECTORY_NOT_FOUND"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ERR_LOCAL_FILE_HEADER_NOT_FOUND", function() { return _lib_zip_fs_js__WEBPACK_IMPORTED_MODULE_5__["ERR_LOCAL_FILE_HEADER_NOT_FOUND"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ERR_EXTRAFIELD_ZIP64_NOT_FOUND", function() { return _lib_zip_fs_js__WEBPACK_IMPORTED_MODULE_5__["ERR_EXTRAFIELD_ZIP64_NOT_FOUND"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ERR_ENCRYPTED", function() { return _lib_zip_fs_js__WEBPACK_IMPORTED_MODULE_5__["ERR_ENCRYPTED"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ERR_UNSUPPORTED_ENCRYPTION", function() { return _lib_zip_fs_js__WEBPACK_IMPORTED_MODULE_5__["ERR_UNSUPPORTED_ENCRYPTION"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ERR_UNSUPPORTED_COMPRESSION", function() { return _lib_zip_fs_js__WEBPACK_IMPORTED_MODULE_5__["ERR_UNSUPPORTED_COMPRESSION"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ERR_INVALID_SIGNATURE", function() { return _lib_zip_fs_js__WEBPACK_IMPORTED_MODULE_5__["ERR_INVALID_SIGNATURE"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ERR_INVALID_PASSWORD", function() { return _lib_zip_fs_js__WEBPACK_IMPORTED_MODULE_5__["ERR_INVALID_PASSWORD"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ERR_DUPLICATED_NAME", function() { return _lib_zip_fs_js__WEBPACK_IMPORTED_MODULE_5__["ERR_DUPLICATED_NAME"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ERR_INVALID_COMMENT", function() { return _lib_zip_fs_js__WEBPACK_IMPORTED_MODULE_5__["ERR_INVALID_COMMENT"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ERR_INVALID_ENTRY_NAME", function() { return _lib_zip_fs_js__WEBPACK_IMPORTED_MODULE_5__["ERR_INVALID_ENTRY_NAME"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ERR_INVALID_ENTRY_COMMENT", function() { return _lib_zip_fs_js__WEBPACK_IMPORTED_MODULE_5__["ERR_INVALID_ENTRY_COMMENT"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ERR_INVALID_VERSION", function() { return _lib_zip_fs_js__WEBPACK_IMPORTED_MODULE_5__["ERR_INVALID_VERSION"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ERR_INVALID_EXTRAFIELD_TYPE", function() { return _lib_zip_fs_js__WEBPACK_IMPORTED_MODULE_5__["ERR_INVALID_EXTRAFIELD_TYPE"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ERR_INVALID_EXTRAFIELD_DATA", function() { return _lib_zip_fs_js__WEBPACK_IMPORTED_MODULE_5__["ERR_INVALID_EXTRAFIELD_DATA"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ERR_INVALID_ENCRYPTION_STRENGTH", function() { return _lib_zip_fs_js__WEBPACK_IMPORTED_MODULE_5__["ERR_INVALID_ENCRYPTION_STRENGTH"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ERR_UNSUPPORTED_FORMAT", function() { return _lib_zip_fs_js__WEBPACK_IMPORTED_MODULE_5__["ERR_UNSUPPORTED_FORMAT"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ERR_ABORT", function() { return _lib_zip_fs_js__WEBPACK_IMPORTED_MODULE_5__["ERR_ABORT"]; });

/*
 Copyright (c) 2021 Gildas Lormeau. All rights reserved.

 Redistribution and use in source and binary forms, with or without
 modification, are permitted provided that the following conditions are met:

 1. Redistributions of source code must retain the above copyright notice,
 this list of conditions and the following disclaimer.

 2. Redistributions in binary form must reproduce the above copyright 
 notice, this list of conditions and the following disclaimer in 
 the documentation and/or other materials provided with the distribution.

 3. The names of the authors may not be used to endorse or promote products
 derived from this software without specific prior written permission.

 THIS SOFTWARE IS PROVIDED ''AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,
 INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
 FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL JCRAFT,
 INC. OR ANY CONTRIBUTORS TO THIS SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT,
 INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
 OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */









Object(_lib_core_configuration_js__WEBPACK_IMPORTED_MODULE_2__["configure"])({ Deflate: _lib_core_codecs_deflate_js__WEBPACK_IMPORTED_MODULE_0__["default"], Inflate: _lib_core_codecs_inflate_js__WEBPACK_IMPORTED_MODULE_1__["default"] });




/***/ }),

/***/ "./node_modules/@zip.js/zip.js/lib/core/codecs/aes-crypto.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@zip.js/zip.js/lib/core/codecs/aes-crypto.js ***!
  \*******************************************************************/
/*! exports provided: AESDecrypt, AESEncrypt, ERR_INVALID_PASSWORD */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AESDecrypt", function() { return AESDecrypt; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AESEncrypt", function() { return AESEncrypt; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ERR_INVALID_PASSWORD", function() { return ERR_INVALID_PASSWORD; });
/* harmony import */ var _sjcl_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./sjcl.js */ "./node_modules/@zip.js/zip.js/lib/core/codecs/sjcl.js");
/*
 Copyright (c) 2021 Gildas Lormeau. All rights reserved.

 Redistribution and use in source and binary forms, with or without
 modification, are permitted provided that the following conditions are met:

 1. Redistributions of source code must retain the above copyright notice,
 this list of conditions and the following disclaimer.

 2. Redistributions in binary form must reproduce the above copyright 
 notice, this list of conditions and the following disclaimer in 
 the documentation and/or other materials provided with the distribution.

 3. The names of the authors may not be used to endorse or promote products
 derived from this software without specific prior written permission.

 THIS SOFTWARE IS PROVIDED ''AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,
 INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
 FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL JCRAFT,
 INC. OR ANY CONTRIBUTORS TO THIS SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT,
 INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
 OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/* global crypto, TextEncoder */





const ERR_INVALID_PASSWORD = "Invalid pasword";
const BLOCK_LENGTH = 16;
const RAW_FORMAT = "raw";
const PBKDF2_ALGORITHM = { name: "PBKDF2" };
const HASH_ALGORITHM = { name: "HMAC" };
const HASH_FUNCTION = "SHA-1";
const BASE_KEY_ALGORITHM = Object.assign({ hash: HASH_ALGORITHM }, PBKDF2_ALGORITHM);
const DERIVED_BITS_ALGORITHM = Object.assign({ iterations: 1000, hash: { name: HASH_FUNCTION } }, PBKDF2_ALGORITHM);
const DERIVED_BITS_USAGE = ["deriveBits"];
const SALT_LENGTH = [8, 12, 16];
const KEY_LENGTH = [16, 24, 32];
const SIGNATURE_LENGTH = 10;
const COUNTER_DEFAULT_VALUE = [0, 0, 0, 0];
const codecBytes = _sjcl_js__WEBPACK_IMPORTED_MODULE_0__["codec"].bytes;
const Aes = _sjcl_js__WEBPACK_IMPORTED_MODULE_0__["cipher"].aes;
const CtrGladman = _sjcl_js__WEBPACK_IMPORTED_MODULE_0__["mode"].ctrGladman;
const HmacSha1 = _sjcl_js__WEBPACK_IMPORTED_MODULE_0__["misc"].hmacSha1;
class AESDecrypt {

	constructor(password, signed, strength) {
		Object.assign(this, {
			password,
			signed,
			strength: strength - 1,
			pendingInput: new Uint8Array(0)
		});
	}

	async append(input) {
		const aesCrypto = this;
		if (aesCrypto.password) {
			const preamble = subarray(input, 0, SALT_LENGTH[aesCrypto.strength] + 2);
			await createDecryptionKeys(aesCrypto, preamble, aesCrypto.password);
			aesCrypto.password = null;
			aesCrypto.aesCtrGladman = new CtrGladman(new Aes(aesCrypto.keys.key), Array.from(COUNTER_DEFAULT_VALUE));
			aesCrypto.hmac = new HmacSha1(aesCrypto.keys.authentication);
			input = subarray(input, SALT_LENGTH[aesCrypto.strength] + 2);
		}
		const output = new Uint8Array(input.length - SIGNATURE_LENGTH - ((input.length - SIGNATURE_LENGTH) % BLOCK_LENGTH));
		return append(aesCrypto, input, output, 0, SIGNATURE_LENGTH, true);
	}

	flush() {
		const aesCrypto = this;
		const pendingInput = aesCrypto.pendingInput;
		const chunkToDecrypt = subarray(pendingInput, 0, pendingInput.length - SIGNATURE_LENGTH);
		const originalSignature = subarray(pendingInput, pendingInput.length - SIGNATURE_LENGTH);
		let decryptedChunkArray = new Uint8Array(0);
		if (chunkToDecrypt.length) {
			const encryptedChunk = codecBytes.toBits(chunkToDecrypt);
			aesCrypto.hmac.update(encryptedChunk);
			const decryptedChunk = aesCrypto.aesCtrGladman.update(encryptedChunk);
			decryptedChunkArray = codecBytes.fromBits(decryptedChunk);
		}
		let valid = true;
		if (aesCrypto.signed) {
			const signature = subarray(codecBytes.fromBits(aesCrypto.hmac.digest()), 0, SIGNATURE_LENGTH);
			for (let indexSignature = 0; indexSignature < SIGNATURE_LENGTH; indexSignature++) {
				if (signature[indexSignature] != originalSignature[indexSignature]) {
					valid = false;
				}
			}
		}
		return {
			valid,
			data: decryptedChunkArray
		};
	}
}

class AESEncrypt {

	constructor(password, strength) {
		Object.assign(this, {
			password,
			strength: strength - 1,
			pendingInput: new Uint8Array(0)
		});
	}

	async append(input) {
		const aesCrypto = this;
		let preamble = new Uint8Array(0);
		if (aesCrypto.password) {
			preamble = await createEncryptionKeys(aesCrypto, aesCrypto.password);
			aesCrypto.password = null;
			aesCrypto.aesCtrGladman = new CtrGladman(new Aes(aesCrypto.keys.key), Array.from(COUNTER_DEFAULT_VALUE));
			aesCrypto.hmac = new HmacSha1(aesCrypto.keys.authentication);
		}
		const output = new Uint8Array(preamble.length + input.length - (input.length % BLOCK_LENGTH));
		output.set(preamble, 0);
		return append(aesCrypto, input, output, preamble.length, 0);
	}

	flush() {
		const aesCrypto = this;
		let encryptedChunkArray = new Uint8Array(0);
		if (aesCrypto.pendingInput.length) {
			const encryptedChunk = aesCrypto.aesCtrGladman.update(codecBytes.toBits(aesCrypto.pendingInput));
			aesCrypto.hmac.update(encryptedChunk);
			encryptedChunkArray = codecBytes.fromBits(encryptedChunk);
		}
		const signature = subarray(codecBytes.fromBits(aesCrypto.hmac.digest()), 0, SIGNATURE_LENGTH);
		return {
			data: concat(encryptedChunkArray, signature),
			signature
		};
	}
}



function append(aesCrypto, input, output, paddingStart, paddingEnd, verifySignature) {
	const inputLength = input.length - paddingEnd;
	if (aesCrypto.pendingInput.length) {
		input = concat(aesCrypto.pendingInput, input);
		output = expand(output, inputLength - (inputLength % BLOCK_LENGTH));
	}
	let offset;
	for (offset = 0; offset <= inputLength - BLOCK_LENGTH; offset += BLOCK_LENGTH) {
		const inputChunk = codecBytes.toBits(subarray(input, offset, offset + BLOCK_LENGTH));
		if (verifySignature) {
			aesCrypto.hmac.update(inputChunk);
		}
		const outputChunk = aesCrypto.aesCtrGladman.update(inputChunk);
		if (!verifySignature) {
			aesCrypto.hmac.update(outputChunk);
		}
		output.set(codecBytes.fromBits(outputChunk), offset + paddingStart);
	}
	aesCrypto.pendingInput = subarray(input, offset);
	return output;
}

async function createDecryptionKeys(decrypt, preambleArray, password) {
	await createKeys(decrypt, password, subarray(preambleArray, 0, SALT_LENGTH[decrypt.strength]));
	const passwordVerification = subarray(preambleArray, SALT_LENGTH[decrypt.strength]);
	const passwordVerificationKey = decrypt.keys.passwordVerification;
	if (passwordVerificationKey[0] != passwordVerification[0] || passwordVerificationKey[1] != passwordVerification[1]) {
		throw new Error(ERR_INVALID_PASSWORD);
	}
}

async function createEncryptionKeys(encrypt, password) {
	const salt = crypto.getRandomValues(new Uint8Array(SALT_LENGTH[encrypt.strength]));
	await createKeys(encrypt, password, salt);
	return concat(salt, encrypt.keys.passwordVerification);
}

async function createKeys(target, password, salt) {
	const encodedPassword = (new TextEncoder()).encode(password);
	const basekey = await crypto.subtle.importKey(RAW_FORMAT, encodedPassword, BASE_KEY_ALGORITHM, false, DERIVED_BITS_USAGE);
	const derivedBits = await crypto.subtle.deriveBits(Object.assign({ salt }, DERIVED_BITS_ALGORITHM), basekey, 8 * ((KEY_LENGTH[target.strength] * 2) + 2));
	const compositeKey = new Uint8Array(derivedBits);
	target.keys = {
		key: codecBytes.toBits(subarray(compositeKey, 0, KEY_LENGTH[target.strength])),
		authentication: codecBytes.toBits(subarray(compositeKey, KEY_LENGTH[target.strength], KEY_LENGTH[target.strength] * 2)),
		passwordVerification: subarray(compositeKey, KEY_LENGTH[target.strength] * 2)
	};
}

function concat(leftArray, rightArray) {
	let array = leftArray;
	if (leftArray.length + rightArray.length) {
		array = new Uint8Array(leftArray.length + rightArray.length);
		array.set(leftArray, 0);
		array.set(rightArray, leftArray.length);
	}
	return array;
}

function expand(inputArray, length) {
	if (length && length > inputArray.length) {
		const array = inputArray;
		inputArray = new Uint8Array(length);
		inputArray.set(array, 0);
	}
	return inputArray;
}

function subarray(array, begin, end) {
	return array.subarray(begin, end);
}

/***/ }),

/***/ "./node_modules/@zip.js/zip.js/lib/core/codecs/codec-pool-worker.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@zip.js/zip.js/lib/core/codecs/codec-pool-worker.js ***!
  \**************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _codec_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./codec.js */ "./node_modules/@zip.js/zip.js/lib/core/codecs/codec.js");

      function getAbsoluteUrl(relativeUrl) {
        const publicPath = __webpack_require__.p;

        let url = '';

        if (!publicPath || publicPath.indexOf('://') < 0) {
          url += window.location.protocol + '//' + window.location.host;
        }

        if (publicPath) {
          url += publicPath;
        } else {
          url += '/';
        }

        return url + relativeUrl;
      }
/*
 Copyright (c) 2021 Gildas Lormeau. All rights reserved.

 Redistribution and use in source and binary forms, with or without
 modification, are permitted provided that the following conditions are met:

 1. Redistributions of source code must retain the above copyright notice,
 this list of conditions and the following disclaimer.

 2. Redistributions in binary form must reproduce the above copyright 
 notice, this list of conditions and the following disclaimer in 
 the documentation and/or other materials provided with the distribution.

 3. The names of the authors may not be used to endorse or promote products
 derived from this software without specific prior written permission.

 THIS SOFTWARE IS PROVIDED ''AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,
 INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
 FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL JCRAFT,
 INC. OR ANY CONTRIBUTORS TO THIS SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT,
 INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
 OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/* global Worker, URL */

"use strict";



const MESSAGE_INIT = "init";
const MESSAGE_APPEND = "append";
const MESSAGE_FLUSH = "flush";
const MESSAGE_EVENT_TYPE = "message";

let classicWorkersSupported = true;

/* harmony default export */ __webpack_exports__["default"] = ((workerData, codecConstructor, options, config, onTaskFinished, webWorker, scripts) => {
	Object.assign(workerData, {
		busy: true,
		codecConstructor,
		options: Object.assign({}, options),
		scripts,
		terminate() {
			if (workerData.worker && !workerData.busy) {
				workerData.worker.terminate();
				workerData.interface = null;
			}
		},
		onTaskFinished() {
			workerData.busy = false;
			onTaskFinished(workerData);
		}
	});
	return webWorker ? createWebWorkerInterface(workerData, config) : createWorkerInterface(workerData, config);
});

function createWorkerInterface(workerData, config) {
	const interfaceCodec = Object(_codec_js__WEBPACK_IMPORTED_MODULE_0__["createCodec"])(workerData.codecConstructor, workerData.options, config);
	return {
		async append(data) {
			try {
				return await interfaceCodec.append(data);
			} catch (error) {
				workerData.onTaskFinished();
				throw error;
			}
		},
		async flush() {
			try {
				return await interfaceCodec.flush();
			} finally {
				workerData.onTaskFinished();
			}
		}
	};
}

function createWebWorkerInterface(workerData, config) {
	let messageTask;
	const moduleType = { type: "module" };
	if (!workerData.interface) {
		if (!classicWorkersSupported) {
			workerData.worker = getWorker(moduleType);
		} else {
			try {
				workerData.worker = getWorker();
			} catch (error) {
				classicWorkersSupported = false;
				workerData.worker = getWorker(moduleType);
			}
		}
		workerData.worker.addEventListener(MESSAGE_EVENT_TYPE, onMessage, false);
		workerData.interface = {
			append(data) {
				return initAndSendMessage({ type: MESSAGE_APPEND, data });
			},
			flush() {
				return initAndSendMessage({ type: MESSAGE_FLUSH });
			}
		};
	}
	return workerData.interface;

	function getWorker(options = {}) {
		return new Worker(new URL(workerData.scripts[0], ({ url: getAbsoluteUrl('node_modules/@zip.js/zip.js/lib/core/codecs/codec-pool-worker.js') }).url), options);
	}

	async function initAndSendMessage(message) {
		if (!messageTask) {
			const options = workerData.options;
			const scripts = workerData.scripts.slice(1);
			await sendMessage({ scripts, type: MESSAGE_INIT, options, config: { chunkSize: config.chunkSize } });
		}
		return sendMessage(message);
	}

	function sendMessage(message) {
		const worker = workerData.worker;
		const result = new Promise((resolve, reject) => messageTask = { resolve, reject });
		try {
			if (message.data) {
				try {
					message.data = message.data.buffer;
					worker.postMessage(message, [message.data]);
				} catch (error) {
					worker.postMessage(message);
				}
			} else {
				worker.postMessage(message);
			}
		} catch (error) {
			messageTask.reject(error);
			messageTask = null;
			workerData.onTaskFinished();
		}
		return result;
	}

	function onMessage(event) {
		const message = event.data;
		if (messageTask) {
			const reponseError = message.error;
			const type = message.type;
			if (reponseError) {
				const error = new Error(reponseError.message);
				error.stack = reponseError.stack;
				messageTask.reject(error);
				messageTask = null;
				workerData.onTaskFinished();
			} else if (type == MESSAGE_INIT || type == MESSAGE_FLUSH || type == MESSAGE_APPEND) {
				const data = message.data;
				if (type == MESSAGE_FLUSH) {
					messageTask.resolve({ data: new Uint8Array(data), signature: message.signature });
					messageTask = null;
					workerData.onTaskFinished();
				} else {
					messageTask.resolve(data && new Uint8Array(data));
				}
			}
		}
	}
}

/***/ }),

/***/ "./node_modules/@zip.js/zip.js/lib/core/codecs/codec-pool.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@zip.js/zip.js/lib/core/codecs/codec-pool.js ***!
  \*******************************************************************/
/*! exports provided: createCodec, terminateWorkers, CODEC_DEFLATE, CODEC_INFLATE, ERR_INVALID_SIGNATURE, ERR_INVALID_PASSWORD */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createCodec", function() { return createCodec; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "terminateWorkers", function() { return terminateWorkers; });
/* harmony import */ var _codec_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./codec.js */ "./node_modules/@zip.js/zip.js/lib/core/codecs/codec.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "CODEC_DEFLATE", function() { return _codec_js__WEBPACK_IMPORTED_MODULE_0__["CODEC_DEFLATE"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "CODEC_INFLATE", function() { return _codec_js__WEBPACK_IMPORTED_MODULE_0__["CODEC_INFLATE"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ERR_INVALID_SIGNATURE", function() { return _codec_js__WEBPACK_IMPORTED_MODULE_0__["ERR_INVALID_SIGNATURE"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ERR_INVALID_PASSWORD", function() { return _codec_js__WEBPACK_IMPORTED_MODULE_0__["ERR_INVALID_PASSWORD"]; });

/* harmony import */ var _codec_pool_worker_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./codec-pool-worker.js */ "./node_modules/@zip.js/zip.js/lib/core/codecs/codec-pool-worker.js");
/*
 Copyright (c) 2021 Gildas Lormeau. All rights reserved.

 Redistribution and use in source and binary forms, with or without
 modification, are permitted provided that the following conditions are met:

 1. Redistributions of source code must retain the above copyright notice,
 this list of conditions and the following disclaimer.

 2. Redistributions in binary form must reproduce the above copyright 
 notice, this list of conditions and the following disclaimer in 
 the documentation and/or other materials provided with the distribution.

 3. The names of the authors may not be used to endorse or promote products
 derived from this software without specific prior written permission.

 THIS SOFTWARE IS PROVIDED ''AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,
 INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
 FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL JCRAFT,
 INC. OR ANY CONTRIBUTORS TO THIS SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT,
 INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
 OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/* global setTimeout, clearTimeout */






let pool = [];
let pendingRequests = [];



function createCodec(codecConstructor, options, config) {
	const streamCopy = !options.compressed && !options.signed && !options.encrypted;
	const webWorker = !streamCopy && (options.useWebWorkers || (options.useWebWorkers === undefined && config.useWebWorkers));
	const scripts = webWorker && config.workerScripts ? config.workerScripts[options.codecType] : [];
	if (pool.length < config.maxWorkers) {
		const workerData = {};
		pool.push(workerData);
		return Object(_codec_pool_worker_js__WEBPACK_IMPORTED_MODULE_1__["default"])(workerData, codecConstructor, options, config, onTaskFinished, webWorker, scripts);
	} else {
		const workerData = pool.find(workerData => !workerData.busy);
		if (workerData) {
			clearTerminateTimeout(workerData);
			return Object(_codec_pool_worker_js__WEBPACK_IMPORTED_MODULE_1__["default"])(workerData, codecConstructor, options, config, onTaskFinished, webWorker, scripts);
		} else {
			return new Promise(resolve => pendingRequests.push({ resolve, codecConstructor, options, webWorker, scripts }));
		}
	}

	function onTaskFinished(workerData) {
		if (pendingRequests.length) {
			const [{ resolve, codecConstructor, options, webWorker, scripts }] = pendingRequests.splice(0, 1);
			resolve(Object(_codec_pool_worker_js__WEBPACK_IMPORTED_MODULE_1__["default"])(workerData, codecConstructor, options, config, onTaskFinished, webWorker, scripts));
		} else if (workerData.worker) {
			clearTerminateTimeout(workerData);
			if (Number.isFinite(config.terminateWorkerTimeout) && config.terminateWorkerTimeout >= 0) {
				workerData.terminateTimeout = setTimeout(() => {
					pool = pool.filter(data => data != workerData);
					workerData.terminate();
				}, config.terminateWorkerTimeout);
			}
		} else {
			pool = pool.filter(data => data != workerData);
		}
	}
}

function clearTerminateTimeout(workerData) {
	if (workerData.terminateTimeout) {
		clearTimeout(workerData.terminateTimeout);
		workerData.terminateTimeout = null;
	}
}

function terminateWorkers() {
	pool.forEach(workerData => {
		clearTerminateTimeout(workerData);
		workerData.terminate();
	});
}

/***/ }),

/***/ "./node_modules/@zip.js/zip.js/lib/core/codecs/codec.js":
/*!**************************************************************!*\
  !*** ./node_modules/@zip.js/zip.js/lib/core/codecs/codec.js ***!
  \**************************************************************/
/*! exports provided: Inflate, Deflate, createCodec, CODEC_DEFLATE, CODEC_INFLATE, ERR_INVALID_SIGNATURE, ERR_INVALID_PASSWORD */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Inflate", function() { return Inflate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Deflate", function() { return Deflate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createCodec", function() { return createCodec; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CODEC_DEFLATE", function() { return CODEC_DEFLATE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CODEC_INFLATE", function() { return CODEC_INFLATE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ERR_INVALID_SIGNATURE", function() { return ERR_INVALID_SIGNATURE; });
/* harmony import */ var _crc32_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./crc32.js */ "./node_modules/@zip.js/zip.js/lib/core/codecs/crc32.js");
/* harmony import */ var _aes_crypto_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./aes-crypto.js */ "./node_modules/@zip.js/zip.js/lib/core/codecs/aes-crypto.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ERR_INVALID_PASSWORD", function() { return _aes_crypto_js__WEBPACK_IMPORTED_MODULE_1__["ERR_INVALID_PASSWORD"]; });

/* harmony import */ var _zip_crypto_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./zip-crypto.js */ "./node_modules/@zip.js/zip.js/lib/core/codecs/zip-crypto.js");
/*
 Copyright (c) 2021 Gildas Lormeau. All rights reserved.

 Redistribution and use in source and binary forms, with or without
 modification, are permitted provided that the following conditions are met:

 1. Redistributions of source code must retain the above copyright notice,
 this list of conditions and the following disclaimer.

 2. Redistributions in binary form must reproduce the above copyright 
 notice, this list of conditions and the following disclaimer in 
 the documentation and/or other materials provided with the distribution.

 3. The names of the authors may not be used to endorse or promote products
 derived from this software without specific prior written permission.

 THIS SOFTWARE IS PROVIDED ''AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,
 INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
 FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL JCRAFT,
 INC. OR ANY CONTRIBUTORS TO THIS SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT,
 INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
 OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */







const CODEC_DEFLATE = "deflate";
const CODEC_INFLATE = "inflate";
const ERR_INVALID_SIGNATURE = "Invalid signature";

class Inflate {

	constructor(codecConstructor, {
		signature,
		password,
		signed,
		compressed,
		zipCrypto,
		passwordVerification,
		encryptionStrength
	}, { chunkSize }) {
		const encrypted = Boolean(password);
		Object.assign(this, {
			signature,
			encrypted,
			signed,
			compressed,
			inflate: compressed && new codecConstructor({ chunkSize }),
			crc32: signed && new _crc32_js__WEBPACK_IMPORTED_MODULE_0__["default"](),
			zipCrypto,
			decrypt: encrypted && zipCrypto ?
				new _zip_crypto_js__WEBPACK_IMPORTED_MODULE_2__["ZipCryptoDecrypt"](password, passwordVerification) :
				new _aes_crypto_js__WEBPACK_IMPORTED_MODULE_1__["AESDecrypt"](password, signed, encryptionStrength)
		});
	}

	async append(data) {
		const codec = this;
		if (codec.encrypted && data.length) {
			data = await codec.decrypt.append(data);
		}
		if (codec.compressed && data.length) {
			data = await codec.inflate.append(data);
		}
		if ((!codec.encrypted || codec.zipCrypto) && codec.signed && data.length) {
			codec.crc32.append(data);
		}
		return data;
	}

	async flush() {
		const codec = this;
		let signature;
		let data = new Uint8Array(0);
		if (codec.encrypted) {
			const result = codec.decrypt.flush();
			if (!result.valid) {
				throw new Error(ERR_INVALID_SIGNATURE);
			}
			data = result.data;
		}
		if ((!codec.encrypted || codec.zipCrypto) && codec.signed) {
			const dataViewSignature = new DataView(new Uint8Array(4).buffer);
			signature = codec.crc32.get();
			dataViewSignature.setUint32(0, signature);
			if (codec.signature != dataViewSignature.getUint32(0, false)) {
				throw new Error(ERR_INVALID_SIGNATURE);
			}
		}
		if (codec.compressed) {
			data = (await codec.inflate.append(data)) || new Uint8Array(0);
			await codec.inflate.flush();
		}
		return { data, signature };
	}
}

class Deflate {

	constructor(codecConstructor, {
		encrypted,
		signed,
		compressed,
		level,
		zipCrypto,
		password,
		passwordVerification,
		encryptionStrength
	}, { chunkSize }) {
		Object.assign(this, {
			encrypted,
			signed,
			compressed,
			deflate: compressed && new codecConstructor({ level: level || 5, chunkSize }),
			crc32: signed && new _crc32_js__WEBPACK_IMPORTED_MODULE_0__["default"](),
			zipCrypto,
			encrypt: encrypted && zipCrypto ?
				new _zip_crypto_js__WEBPACK_IMPORTED_MODULE_2__["ZipCryptoEncrypt"](password, passwordVerification) :
				new _aes_crypto_js__WEBPACK_IMPORTED_MODULE_1__["AESEncrypt"](password, encryptionStrength)
		});
	}

	async append(inputData) {
		const codec = this;
		let data = inputData;
		if (codec.compressed && inputData.length) {
			data = await codec.deflate.append(inputData);
		}
		if (codec.encrypted && data.length) {
			data = await codec.encrypt.append(data);
		}
		if ((!codec.encrypted || codec.zipCrypto) && codec.signed && inputData.length) {
			codec.crc32.append(inputData);
		}
		return data;
	}

	async flush() {
		const codec = this;
		let signature;
		let data = new Uint8Array(0);
		if (codec.compressed) {
			data = (await codec.deflate.flush()) || new Uint8Array(0);
		}
		if (codec.encrypted) {
			data = await codec.encrypt.append(data);
			const result = codec.encrypt.flush();
			signature = result.signature;
			const newData = new Uint8Array(data.length + result.data.length);
			newData.set(data, 0);
			newData.set(result.data, data.length);
			data = newData;
		}
		if ((!codec.encrypted || codec.zipCrypto) && codec.signed) {
			signature = codec.crc32.get();
		}
		return { data, signature };
	}
}



function createCodec(codecConstructor, options, config) {
	if (options.codecType.startsWith(CODEC_DEFLATE)) {
		return new Deflate(codecConstructor, options, config);
	} else if (options.codecType.startsWith(CODEC_INFLATE)) {
		return new Inflate(codecConstructor, options, config);
	}
}

/***/ }),

/***/ "./node_modules/@zip.js/zip.js/lib/core/codecs/crc32.js":
/*!**************************************************************!*\
  !*** ./node_modules/@zip.js/zip.js/lib/core/codecs/crc32.js ***!
  \**************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/*
 Copyright (c) 2021 Gildas Lormeau. All rights reserved.

 Redistribution and use in source and binary forms, with or without
 modification, are permitted provided that the following conditions are met:

 1. Redistributions of source code must retain the above copyright notice,
 this list of conditions and the following disclaimer.

 2. Redistributions in binary form must reproduce the above copyright 
 notice, this list of conditions and the following disclaimer in 
 the documentation and/or other materials provided with the distribution.

 3. The names of the authors may not be used to endorse or promote products
 derived from this software without specific prior written permission.

 THIS SOFTWARE IS PROVIDED ''AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,
 INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
 FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL JCRAFT,
 INC. OR ANY CONTRIBUTORS TO THIS SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT,
 INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
 OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */



const table = [];
for (let i = 0; i < 256; i++) {
	let t = i;
	for (let j = 0; j < 8; j++) {
		if (t & 1) {
			t = (t >>> 1) ^ 0xEDB88320;
		} else {
			t = t >>> 1;
		}
	}
	table[i] = t;
}

class Crc32 {

	constructor(crc) {
		this.crc = crc || -1;
	}

	append(data) {
		let crc = this.crc | 0;
		for (let offset = 0, length = data.length | 0; offset < length; offset++) {
			crc = (crc >>> 8) ^ table[(crc ^ data[offset]) & 0xFF];
		}
		this.crc = crc;
	}

	get() {
		return ~this.crc;
	}
}

/* harmony default export */ __webpack_exports__["default"] = (Crc32);

/***/ }),

/***/ "./node_modules/@zip.js/zip.js/lib/core/codecs/deflate.js":
/*!****************************************************************!*\
  !*** ./node_modules/@zip.js/zip.js/lib/core/codecs/deflate.js ***!
  \****************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/*
 Copyright (c) 2021 Gildas Lormeau. All rights reserved.

 Redistribution and use in source and binary forms, with or without
 modification, are permitted provided that the following conditions are met:

 1. Redistributions of source code must retain the above copyright notice,
 this list of conditions and the following disclaimer.

 2. Redistributions in binary form must reproduce the above copyright 
 notice, this list of conditions and the following disclaimer in 
 the documentation and/or other materials provided with the distribution.

 3. The names of the authors may not be used to endorse or promote products
 derived from this software without specific prior written permission.

 THIS SOFTWARE IS PROVIDED ''AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,
 INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
 FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL JCRAFT,
 INC. OR ANY CONTRIBUTORS TO THIS SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT,
 INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
 OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * This program is based on JZlib 1.0.2 ymnk, JCraft,Inc.
 * JZlib is based on zlib-1.1.3, so all credit should go authors
 * Jean-loup Gailly(jloup@gzip.org) and Mark Adler(madler@alumni.caltech.edu)
 * and contributors of zlib.
 */



// Global

const MAX_BITS = 15;
const D_CODES = 30;
const BL_CODES = 19;

const LENGTH_CODES = 29;
const LITERALS = 256;
const L_CODES = (LITERALS + 1 + LENGTH_CODES);
const HEAP_SIZE = (2 * L_CODES + 1);

const END_BLOCK = 256;

// Bit length codes must not exceed MAX_BL_BITS bits
const MAX_BL_BITS = 7;

// repeat previous bit length 3-6 times (2 bits of repeat count)
const REP_3_6 = 16;

// repeat a zero length 3-10 times (3 bits of repeat count)
const REPZ_3_10 = 17;

// repeat a zero length 11-138 times (7 bits of repeat count)
const REPZ_11_138 = 18;

// The lengths of the bit length codes are sent in order of decreasing
// probability, to avoid transmitting the lengths for unused bit
// length codes.

const Buf_size = 8 * 2;

// JZlib version : "1.0.2"
const Z_DEFAULT_COMPRESSION = -1;

// compression strategy
const Z_FILTERED = 1;
const Z_HUFFMAN_ONLY = 2;
const Z_DEFAULT_STRATEGY = 0;

const Z_NO_FLUSH = 0;
const Z_PARTIAL_FLUSH = 1;
const Z_FULL_FLUSH = 3;
const Z_FINISH = 4;

const Z_OK = 0;
const Z_STREAM_END = 1;
const Z_NEED_DICT = 2;
const Z_STREAM_ERROR = -2;
const Z_DATA_ERROR = -3;
const Z_BUF_ERROR = -5;

// Tree

function extractArray(array) {
	return flatArray(array.map(([length, value]) => (new Array(length)).fill(value, 0, length)));
}

function flatArray(array) {
	return array.reduce((a, b) => a.concat(Array.isArray(b) ? flatArray(b) : b), []);
}

// see definition of array dist_code below
const _dist_code = [0, 1, 2, 3].concat(...extractArray([
	[2, 4], [2, 5], [4, 6], [4, 7], [8, 8], [8, 9], [16, 10], [16, 11], [32, 12], [32, 13], [64, 14], [64, 15], [2, 0], [1, 16],
	[1, 17], [2, 18], [2, 19], [4, 20], [4, 21], [8, 22], [8, 23], [16, 24], [16, 25], [32, 26], [32, 27], [64, 28], [64, 29]
]));

function Tree() {
	const that = this;

	// dyn_tree; // the dynamic tree
	// max_code; // largest code with non zero frequency
	// stat_desc; // the corresponding static tree

	// Compute the optimal bit lengths for a tree and update the total bit
	// length
	// for the current block.
	// IN assertion: the fields freq and dad are set, heap[heap_max] and
	// above are the tree nodes sorted by increasing frequency.
	// OUT assertions: the field len is set to the optimal bit length, the
	// array bl_count contains the frequencies for each bit length.
	// The length opt_len is updated; static_len is also updated if stree is
	// not null.
	function gen_bitlen(s) {
		const tree = that.dyn_tree;
		const stree = that.stat_desc.static_tree;
		const extra = that.stat_desc.extra_bits;
		const base = that.stat_desc.extra_base;
		const max_length = that.stat_desc.max_length;
		let h; // heap index
		let n, m; // iterate over the tree elements
		let bits; // bit length
		let xbits; // extra bits
		let f; // frequency
		let overflow = 0; // number of elements with bit length too large

		for (bits = 0; bits <= MAX_BITS; bits++)
			s.bl_count[bits] = 0;

		// In a first pass, compute the optimal bit lengths (which may
		// overflow in the case of the bit length tree).
		tree[s.heap[s.heap_max] * 2 + 1] = 0; // root of the heap

		for (h = s.heap_max + 1; h < HEAP_SIZE; h++) {
			n = s.heap[h];
			bits = tree[tree[n * 2 + 1] * 2 + 1] + 1;
			if (bits > max_length) {
				bits = max_length;
				overflow++;
			}
			tree[n * 2 + 1] = bits;
			// We overwrite tree[n*2+1] which is no longer needed

			if (n > that.max_code)
				continue; // not a leaf node

			s.bl_count[bits]++;
			xbits = 0;
			if (n >= base)
				xbits = extra[n - base];
			f = tree[n * 2];
			s.opt_len += f * (bits + xbits);
			if (stree)
				s.static_len += f * (stree[n * 2 + 1] + xbits);
		}
		if (overflow === 0)
			return;

		// This happens for example on obj2 and pic of the Calgary corpus
		// Find the first bit length which could increase:
		do {
			bits = max_length - 1;
			while (s.bl_count[bits] === 0)
				bits--;
			s.bl_count[bits]--; // move one leaf down the tree
			s.bl_count[bits + 1] += 2; // move one overflow item as its brother
			s.bl_count[max_length]--;
			// The brother of the overflow item also moves one step up,
			// but this does not affect bl_count[max_length]
			overflow -= 2;
		} while (overflow > 0);

		for (bits = max_length; bits !== 0; bits--) {
			n = s.bl_count[bits];
			while (n !== 0) {
				m = s.heap[--h];
				if (m > that.max_code)
					continue;
				if (tree[m * 2 + 1] != bits) {
					s.opt_len += (bits - tree[m * 2 + 1]) * tree[m * 2];
					tree[m * 2 + 1] = bits;
				}
				n--;
			}
		}
	}

	// Reverse the first len bits of a code, using straightforward code (a
	// faster
	// method would use a table)
	// IN assertion: 1 <= len <= 15
	function bi_reverse(code, // the value to invert
		len // its bit length
	) {
		let res = 0;
		do {
			res |= code & 1;
			code >>>= 1;
			res <<= 1;
		} while (--len > 0);
		return res >>> 1;
	}

	// Generate the codes for a given tree and bit counts (which need not be
	// optimal).
	// IN assertion: the array bl_count contains the bit length statistics for
	// the given tree and the field len is set for all tree elements.
	// OUT assertion: the field code is set for all tree elements of non
	// zero code length.
	function gen_codes(tree, // the tree to decorate
		max_code, // largest code with non zero frequency
		bl_count // number of codes at each bit length
	) {
		const next_code = []; // next code value for each
		// bit length
		let code = 0; // running code value
		let bits; // bit index
		let n; // code index
		let len;

		// The distribution counts are first used to generate the code values
		// without bit reversal.
		for (bits = 1; bits <= MAX_BITS; bits++) {
			next_code[bits] = code = ((code + bl_count[bits - 1]) << 1);
		}

		// Check that the bit counts in bl_count are consistent. The last code
		// must be all ones.
		// Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,
		// "inconsistent bit counts");
		// Tracev((stderr,"gen_codes: max_code %d ", max_code));

		for (n = 0; n <= max_code; n++) {
			len = tree[n * 2 + 1];
			if (len === 0)
				continue;
			// Now reverse the bits
			tree[n * 2] = bi_reverse(next_code[len]++, len);
		}
	}

	// Construct one Huffman tree and assigns the code bit strings and lengths.
	// Update the total bit length for the current block.
	// IN assertion: the field freq is set for all tree elements.
	// OUT assertions: the fields len and code are set to the optimal bit length
	// and corresponding code. The length opt_len is updated; static_len is
	// also updated if stree is not null. The field max_code is set.
	that.build_tree = function (s) {
		const tree = that.dyn_tree;
		const stree = that.stat_desc.static_tree;
		const elems = that.stat_desc.elems;
		let n, m; // iterate over heap elements
		let max_code = -1; // largest code with non zero frequency
		let node; // new node being created

		// Construct the initial heap, with least frequent element in
		// heap[1]. The sons of heap[n] are heap[2*n] and heap[2*n+1].
		// heap[0] is not used.
		s.heap_len = 0;
		s.heap_max = HEAP_SIZE;

		for (n = 0; n < elems; n++) {
			if (tree[n * 2] !== 0) {
				s.heap[++s.heap_len] = max_code = n;
				s.depth[n] = 0;
			} else {
				tree[n * 2 + 1] = 0;
			}
		}

		// The pkzip format requires that at least one distance code exists,
		// and that at least one bit should be sent even if there is only one
		// possible code. So to avoid special checks later on we force at least
		// two codes of non zero frequency.
		while (s.heap_len < 2) {
			node = s.heap[++s.heap_len] = max_code < 2 ? ++max_code : 0;
			tree[node * 2] = 1;
			s.depth[node] = 0;
			s.opt_len--;
			if (stree)
				s.static_len -= stree[node * 2 + 1];
			// node is 0 or 1 so it does not have extra bits
		}
		that.max_code = max_code;

		// The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,
		// establish sub-heaps of increasing lengths:

		for (n = Math.floor(s.heap_len / 2); n >= 1; n--)
			s.pqdownheap(tree, n);

		// Construct the Huffman tree by repeatedly combining the least two
		// frequent nodes.

		node = elems; // next internal node of the tree
		do {
			// n = node of least frequency
			n = s.heap[1];
			s.heap[1] = s.heap[s.heap_len--];
			s.pqdownheap(tree, 1);
			m = s.heap[1]; // m = node of next least frequency

			s.heap[--s.heap_max] = n; // keep the nodes sorted by frequency
			s.heap[--s.heap_max] = m;

			// Create a new node father of n and m
			tree[node * 2] = (tree[n * 2] + tree[m * 2]);
			s.depth[node] = Math.max(s.depth[n], s.depth[m]) + 1;
			tree[n * 2 + 1] = tree[m * 2 + 1] = node;

			// and insert the new node in the heap
			s.heap[1] = node++;
			s.pqdownheap(tree, 1);
		} while (s.heap_len >= 2);

		s.heap[--s.heap_max] = s.heap[1];

		// At this point, the fields freq and dad are set. We can now
		// generate the bit lengths.

		gen_bitlen(s);

		// The field len is now set, we can generate the bit codes
		gen_codes(tree, that.max_code, s.bl_count);
	};

}

Tree._length_code = [0, 1, 2, 3, 4, 5, 6, 7].concat(...extractArray([
	[2, 8], [2, 9], [2, 10], [2, 11], [4, 12], [4, 13], [4, 14], [4, 15], [8, 16], [8, 17], [8, 18], [8, 19],
	[16, 20], [16, 21], [16, 22], [16, 23], [32, 24], [32, 25], [32, 26], [31, 27], [1, 28]]));

Tree.base_length = [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 14, 16, 20, 24, 28, 32, 40, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 0];

Tree.base_dist = [0, 1, 2, 3, 4, 6, 8, 12, 16, 24, 32, 48, 64, 96, 128, 192, 256, 384, 512, 768, 1024, 1536, 2048, 3072, 4096, 6144, 8192, 12288, 16384,
	24576];

// Mapping from a distance to a distance code. dist is the distance - 1 and
// must not have side effects. _dist_code[256] and _dist_code[257] are never
// used.
Tree.d_code = function (dist) {
	return ((dist) < 256 ? _dist_code[dist] : _dist_code[256 + ((dist) >>> 7)]);
};

// extra bits for each length code
Tree.extra_lbits = [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0];

// extra bits for each distance code
Tree.extra_dbits = [0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13];

// extra bits for each bit length code
Tree.extra_blbits = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 7];

Tree.bl_order = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];

// StaticTree

function StaticTree(static_tree, extra_bits, extra_base, elems, max_length) {
	const that = this;
	that.static_tree = static_tree;
	that.extra_bits = extra_bits;
	that.extra_base = extra_base;
	that.elems = elems;
	that.max_length = max_length;
}

StaticTree.static_ltree = [12, 8, 140, 8, 76, 8, 204, 8, 44, 8, 172, 8, 108, 8, 236, 8, 28, 8, 156, 8, 92, 8, 220, 8, 60, 8, 188, 8, 124, 8, 252, 8, 2, 8,
	130, 8, 66, 8, 194, 8, 34, 8, 162, 8, 98, 8, 226, 8, 18, 8, 146, 8, 82, 8, 210, 8, 50, 8, 178, 8, 114, 8, 242, 8, 10, 8, 138, 8, 74, 8, 202, 8, 42,
	8, 170, 8, 106, 8, 234, 8, 26, 8, 154, 8, 90, 8, 218, 8, 58, 8, 186, 8, 122, 8, 250, 8, 6, 8, 134, 8, 70, 8, 198, 8, 38, 8, 166, 8, 102, 8, 230, 8,
	22, 8, 150, 8, 86, 8, 214, 8, 54, 8, 182, 8, 118, 8, 246, 8, 14, 8, 142, 8, 78, 8, 206, 8, 46, 8, 174, 8, 110, 8, 238, 8, 30, 8, 158, 8, 94, 8,
	222, 8, 62, 8, 190, 8, 126, 8, 254, 8, 1, 8, 129, 8, 65, 8, 193, 8, 33, 8, 161, 8, 97, 8, 225, 8, 17, 8, 145, 8, 81, 8, 209, 8, 49, 8, 177, 8, 113,
	8, 241, 8, 9, 8, 137, 8, 73, 8, 201, 8, 41, 8, 169, 8, 105, 8, 233, 8, 25, 8, 153, 8, 89, 8, 217, 8, 57, 8, 185, 8, 121, 8, 249, 8, 5, 8, 133, 8,
	69, 8, 197, 8, 37, 8, 165, 8, 101, 8, 229, 8, 21, 8, 149, 8, 85, 8, 213, 8, 53, 8, 181, 8, 117, 8, 245, 8, 13, 8, 141, 8, 77, 8, 205, 8, 45, 8,
	173, 8, 109, 8, 237, 8, 29, 8, 157, 8, 93, 8, 221, 8, 61, 8, 189, 8, 125, 8, 253, 8, 19, 9, 275, 9, 147, 9, 403, 9, 83, 9, 339, 9, 211, 9, 467, 9,
	51, 9, 307, 9, 179, 9, 435, 9, 115, 9, 371, 9, 243, 9, 499, 9, 11, 9, 267, 9, 139, 9, 395, 9, 75, 9, 331, 9, 203, 9, 459, 9, 43, 9, 299, 9, 171, 9,
	427, 9, 107, 9, 363, 9, 235, 9, 491, 9, 27, 9, 283, 9, 155, 9, 411, 9, 91, 9, 347, 9, 219, 9, 475, 9, 59, 9, 315, 9, 187, 9, 443, 9, 123, 9, 379,
	9, 251, 9, 507, 9, 7, 9, 263, 9, 135, 9, 391, 9, 71, 9, 327, 9, 199, 9, 455, 9, 39, 9, 295, 9, 167, 9, 423, 9, 103, 9, 359, 9, 231, 9, 487, 9, 23,
	9, 279, 9, 151, 9, 407, 9, 87, 9, 343, 9, 215, 9, 471, 9, 55, 9, 311, 9, 183, 9, 439, 9, 119, 9, 375, 9, 247, 9, 503, 9, 15, 9, 271, 9, 143, 9,
	399, 9, 79, 9, 335, 9, 207, 9, 463, 9, 47, 9, 303, 9, 175, 9, 431, 9, 111, 9, 367, 9, 239, 9, 495, 9, 31, 9, 287, 9, 159, 9, 415, 9, 95, 9, 351, 9,
	223, 9, 479, 9, 63, 9, 319, 9, 191, 9, 447, 9, 127, 9, 383, 9, 255, 9, 511, 9, 0, 7, 64, 7, 32, 7, 96, 7, 16, 7, 80, 7, 48, 7, 112, 7, 8, 7, 72, 7,
	40, 7, 104, 7, 24, 7, 88, 7, 56, 7, 120, 7, 4, 7, 68, 7, 36, 7, 100, 7, 20, 7, 84, 7, 52, 7, 116, 7, 3, 8, 131, 8, 67, 8, 195, 8, 35, 8, 163, 8,
	99, 8, 227, 8];

StaticTree.static_dtree = [0, 5, 16, 5, 8, 5, 24, 5, 4, 5, 20, 5, 12, 5, 28, 5, 2, 5, 18, 5, 10, 5, 26, 5, 6, 5, 22, 5, 14, 5, 30, 5, 1, 5, 17, 5, 9, 5,
	25, 5, 5, 5, 21, 5, 13, 5, 29, 5, 3, 5, 19, 5, 11, 5, 27, 5, 7, 5, 23, 5];

StaticTree.static_l_desc = new StaticTree(StaticTree.static_ltree, Tree.extra_lbits, LITERALS + 1, L_CODES, MAX_BITS);

StaticTree.static_d_desc = new StaticTree(StaticTree.static_dtree, Tree.extra_dbits, 0, D_CODES, MAX_BITS);

StaticTree.static_bl_desc = new StaticTree(null, Tree.extra_blbits, 0, BL_CODES, MAX_BL_BITS);

// Deflate

const MAX_MEM_LEVEL = 9;
const DEF_MEM_LEVEL = 8;

function Config(good_length, max_lazy, nice_length, max_chain, func) {
	const that = this;
	that.good_length = good_length;
	that.max_lazy = max_lazy;
	that.nice_length = nice_length;
	that.max_chain = max_chain;
	that.func = func;
}

const STORED = 0;
const FAST = 1;
const SLOW = 2;
const config_table = [
	new Config(0, 0, 0, 0, STORED),
	new Config(4, 4, 8, 4, FAST),
	new Config(4, 5, 16, 8, FAST),
	new Config(4, 6, 32, 32, FAST),
	new Config(4, 4, 16, 16, SLOW),
	new Config(8, 16, 32, 32, SLOW),
	new Config(8, 16, 128, 128, SLOW),
	new Config(8, 32, 128, 256, SLOW),
	new Config(32, 128, 258, 1024, SLOW),
	new Config(32, 258, 258, 4096, SLOW)
];

const z_errmsg = ["need dictionary", // Z_NEED_DICT
	// 2
	"stream end", // Z_STREAM_END 1
	"", // Z_OK 0
	"", // Z_ERRNO (-1)
	"stream error", // Z_STREAM_ERROR (-2)
	"data error", // Z_DATA_ERROR (-3)
	"", // Z_MEM_ERROR (-4)
	"buffer error", // Z_BUF_ERROR (-5)
	"",// Z_VERSION_ERROR (-6)
	""];

// block not completed, need more input or more output
const NeedMore = 0;

// block flush performed
const BlockDone = 1;

// finish started, need only more output at next deflate
const FinishStarted = 2;

// finish done, accept no more input or output
const FinishDone = 3;

// preset dictionary flag in zlib header
const PRESET_DICT = 0x20;

const INIT_STATE = 42;
const BUSY_STATE = 113;
const FINISH_STATE = 666;

// The deflate compression method
const Z_DEFLATED = 8;

const STORED_BLOCK = 0;
const STATIC_TREES = 1;
const DYN_TREES = 2;

const MIN_MATCH = 3;
const MAX_MATCH = 258;
const MIN_LOOKAHEAD = (MAX_MATCH + MIN_MATCH + 1);

function smaller(tree, n, m, depth) {
	const tn2 = tree[n * 2];
	const tm2 = tree[m * 2];
	return (tn2 < tm2 || (tn2 == tm2 && depth[n] <= depth[m]));
}

function Deflate() {

	const that = this;
	let strm; // pointer back to this zlib stream
	let status; // as the name implies
	// pending_buf; // output still pending
	let pending_buf_size; // size of pending_buf
	// pending_out; // next pending byte to output to the stream
	// pending; // nb of bytes in the pending buffer
	let last_flush; // value of flush param for previous deflate call

	let w_size; // LZ77 window size (32K by default)
	let w_bits; // log2(w_size) (8..16)
	let w_mask; // w_size - 1

	let window;
	// Sliding window. Input bytes are read into the second half of the window,
	// and move to the first half later to keep a dictionary of at least wSize
	// bytes. With this organization, matches are limited to a distance of
	// wSize-MAX_MATCH bytes, but this ensures that IO is always
	// performed with a length multiple of the block size. Also, it limits
	// the window size to 64K, which is quite useful on MSDOS.
	// To do: use the user input buffer as sliding window.

	let window_size;
	// Actual size of window: 2*wSize, except when the user input buffer
	// is directly used as sliding window.

	let prev;
	// Link to older string with same hash index. To limit the size of this
	// array to 64K, this link is maintained only for the last 32K strings.
	// An index in this array is thus a window index modulo 32K.

	let head; // Heads of the hash chains or NIL.

	let ins_h; // hash index of string to be inserted
	let hash_size; // number of elements in hash table
	let hash_bits; // log2(hash_size)
	let hash_mask; // hash_size-1

	// Number of bits by which ins_h must be shifted at each input
	// step. It must be such that after MIN_MATCH steps, the oldest
	// byte no longer takes part in the hash key, that is:
	// hash_shift * MIN_MATCH >= hash_bits
	let hash_shift;

	// Window position at the beginning of the current output block. Gets
	// negative when the window is moved backwards.

	let block_start;

	let match_length; // length of best match
	let prev_match; // previous match
	let match_available; // set if previous match exists
	let strstart; // start of string to insert
	let match_start; // start of matching string
	let lookahead; // number of valid bytes ahead in window

	// Length of the best match at previous step. Matches not greater than this
	// are discarded. This is used in the lazy match evaluation.
	let prev_length;

	// To speed up deflation, hash chains are never searched beyond this
	// length. A higher limit improves compression ratio but degrades the speed.
	let max_chain_length;

	// Attempt to find a better match only when the current match is strictly
	// smaller than this value. This mechanism is used only for compression
	// levels >= 4.
	let max_lazy_match;

	// Insert new strings in the hash table only if the match length is not
	// greater than this length. This saves time but degrades compression.
	// max_insert_length is used only for compression levels <= 3.

	let level; // compression level (1..9)
	let strategy; // favor or force Huffman coding

	// Use a faster search when the previous match is longer than this
	let good_match;

	// Stop searching when current match exceeds this
	let nice_match;

	let dyn_ltree; // literal and length tree
	let dyn_dtree; // distance tree
	let bl_tree; // Huffman tree for bit lengths

	const l_desc = new Tree(); // desc for literal tree
	const d_desc = new Tree(); // desc for distance tree
	const bl_desc = new Tree(); // desc for bit length tree

	// that.heap_len; // number of elements in the heap
	// that.heap_max; // element of largest frequency
	// The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.
	// The same heap array is used to build all trees.

	// Depth of each subtree used as tie breaker for trees of equal frequency
	that.depth = [];

	let l_buf; // index for literals or lengths */

	// Size of match buffer for literals/lengths. There are 4 reasons for
	// limiting lit_bufsize to 64K:
	// - frequencies can be kept in 16 bit counters
	// - if compression is not successful for the first block, all input
	// data is still in the window so we can still emit a stored block even
	// when input comes from standard input. (This can also be done for
	// all blocks if lit_bufsize is not greater than 32K.)
	// - if compression is not successful for a file smaller than 64K, we can
	// even emit a stored file instead of a stored block (saving 5 bytes).
	// This is applicable only for zip (not gzip or zlib).
	// - creating new Huffman trees less frequently may not provide fast
	// adaptation to changes in the input data statistics. (Take for
	// example a binary file with poorly compressible code followed by
	// a highly compressible string table.) Smaller buffer sizes give
	// fast adaptation but have of course the overhead of transmitting
	// trees more frequently.
	// - I can't count above 4
	let lit_bufsize;

	let last_lit; // running index in l_buf

	// Buffer for distances. To simplify the code, d_buf and l_buf have
	// the same number of elements. To use different lengths, an extra flag
	// array would be necessary.

	let d_buf; // index of pendig_buf

	// that.opt_len; // bit length of current block with optimal trees
	// that.static_len; // bit length of current block with static trees
	let matches; // number of string matches in current block
	let last_eob_len; // bit length of EOB code for last block

	// Output buffer. bits are inserted starting at the bottom (least
	// significant bits).
	let bi_buf;

	// Number of valid bits in bi_buf. All bits above the last valid bit
	// are always zero.
	let bi_valid;

	// number of codes at each bit length for an optimal tree
	that.bl_count = [];

	// heap used to build the Huffman trees
	that.heap = [];

	dyn_ltree = [];
	dyn_dtree = [];
	bl_tree = [];

	function lm_init() {
		window_size = 2 * w_size;

		head[hash_size - 1] = 0;
		for (let i = 0; i < hash_size - 1; i++) {
			head[i] = 0;
		}

		// Set the default configuration parameters:
		max_lazy_match = config_table[level].max_lazy;
		good_match = config_table[level].good_length;
		nice_match = config_table[level].nice_length;
		max_chain_length = config_table[level].max_chain;

		strstart = 0;
		block_start = 0;
		lookahead = 0;
		match_length = prev_length = MIN_MATCH - 1;
		match_available = 0;
		ins_h = 0;
	}

	function init_block() {
		let i;
		// Initialize the trees.
		for (i = 0; i < L_CODES; i++)
			dyn_ltree[i * 2] = 0;
		for (i = 0; i < D_CODES; i++)
			dyn_dtree[i * 2] = 0;
		for (i = 0; i < BL_CODES; i++)
			bl_tree[i * 2] = 0;

		dyn_ltree[END_BLOCK * 2] = 1;
		that.opt_len = that.static_len = 0;
		last_lit = matches = 0;
	}

	// Initialize the tree data structures for a new zlib stream.
	function tr_init() {

		l_desc.dyn_tree = dyn_ltree;
		l_desc.stat_desc = StaticTree.static_l_desc;

		d_desc.dyn_tree = dyn_dtree;
		d_desc.stat_desc = StaticTree.static_d_desc;

		bl_desc.dyn_tree = bl_tree;
		bl_desc.stat_desc = StaticTree.static_bl_desc;

		bi_buf = 0;
		bi_valid = 0;
		last_eob_len = 8; // enough lookahead for inflate

		// Initialize the first block of the first file:
		init_block();
	}

	// Restore the heap property by moving down the tree starting at node k,
	// exchanging a node with the smallest of its two sons if necessary,
	// stopping
	// when the heap property is re-established (each father smaller than its
	// two sons).
	that.pqdownheap = function (tree, // the tree to restore
		k // node to move down
	) {
		const heap = that.heap;
		const v = heap[k];
		let j = k << 1; // left son of k
		while (j <= that.heap_len) {
			// Set j to the smallest of the two sons:
			if (j < that.heap_len && smaller(tree, heap[j + 1], heap[j], that.depth)) {
				j++;
			}
			// Exit if v is smaller than both sons
			if (smaller(tree, v, heap[j], that.depth))
				break;

			// Exchange v with the smallest son
			heap[k] = heap[j];
			k = j;
			// And continue down the tree, setting j to the left son of k
			j <<= 1;
		}
		heap[k] = v;
	};

	// Scan a literal or distance tree to determine the frequencies of the codes
	// in the bit length tree.
	function scan_tree(tree,// the tree to be scanned
		max_code // and its largest code of non zero frequency
	) {
		let prevlen = -1; // last emitted length
		let curlen; // length of current code
		let nextlen = tree[0 * 2 + 1]; // length of next code
		let count = 0; // repeat count of the current code
		let max_count = 7; // max repeat count
		let min_count = 4; // min repeat count

		if (nextlen === 0) {
			max_count = 138;
			min_count = 3;
		}
		tree[(max_code + 1) * 2 + 1] = 0xffff; // guard

		for (let n = 0; n <= max_code; n++) {
			curlen = nextlen;
			nextlen = tree[(n + 1) * 2 + 1];
			if (++count < max_count && curlen == nextlen) {
				continue;
			} else if (count < min_count) {
				bl_tree[curlen * 2] += count;
			} else if (curlen !== 0) {
				if (curlen != prevlen)
					bl_tree[curlen * 2]++;
				bl_tree[REP_3_6 * 2]++;
			} else if (count <= 10) {
				bl_tree[REPZ_3_10 * 2]++;
			} else {
				bl_tree[REPZ_11_138 * 2]++;
			}
			count = 0;
			prevlen = curlen;
			if (nextlen === 0) {
				max_count = 138;
				min_count = 3;
			} else if (curlen == nextlen) {
				max_count = 6;
				min_count = 3;
			} else {
				max_count = 7;
				min_count = 4;
			}
		}
	}

	// Construct the Huffman tree for the bit lengths and return the index in
	// bl_order of the last bit length code to send.
	function build_bl_tree() {
		let max_blindex; // index of last bit length code of non zero freq

		// Determine the bit length frequencies for literal and distance trees
		scan_tree(dyn_ltree, l_desc.max_code);
		scan_tree(dyn_dtree, d_desc.max_code);

		// Build the bit length tree:
		bl_desc.build_tree(that);
		// opt_len now includes the length of the tree representations, except
		// the lengths of the bit lengths codes and the 5+5+4 bits for the
		// counts.

		// Determine the number of bit length codes to send. The pkzip format
		// requires that at least 4 bit length codes be sent. (appnote.txt says
		// 3 but the actual value used is 4.)
		for (max_blindex = BL_CODES - 1; max_blindex >= 3; max_blindex--) {
			if (bl_tree[Tree.bl_order[max_blindex] * 2 + 1] !== 0)
				break;
		}
		// Update opt_len to include the bit length tree and counts
		that.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;

		return max_blindex;
	}

	// Output a byte on the stream.
	// IN assertion: there is enough room in pending_buf.
	function put_byte(p) {
		that.pending_buf[that.pending++] = p;
	}

	function put_short(w) {
		put_byte(w & 0xff);
		put_byte((w >>> 8) & 0xff);
	}

	function putShortMSB(b) {
		put_byte((b >> 8) & 0xff);
		put_byte((b & 0xff) & 0xff);
	}

	function send_bits(value, length) {
		let val;
		const len = length;
		if (bi_valid > Buf_size - len) {
			val = value;
			// bi_buf |= (val << bi_valid);
			bi_buf |= ((val << bi_valid) & 0xffff);
			put_short(bi_buf);
			bi_buf = val >>> (Buf_size - bi_valid);
			bi_valid += len - Buf_size;
		} else {
			// bi_buf |= (value) << bi_valid;
			bi_buf |= (((value) << bi_valid) & 0xffff);
			bi_valid += len;
		}
	}

	function send_code(c, tree) {
		const c2 = c * 2;
		send_bits(tree[c2] & 0xffff, tree[c2 + 1] & 0xffff);
	}

	// Send a literal or distance tree in compressed form, using the codes in
	// bl_tree.
	function send_tree(tree,// the tree to be sent
		max_code // and its largest code of non zero frequency
	) {
		let n; // iterates over all tree elements
		let prevlen = -1; // last emitted length
		let curlen; // length of current code
		let nextlen = tree[0 * 2 + 1]; // length of next code
		let count = 0; // repeat count of the current code
		let max_count = 7; // max repeat count
		let min_count = 4; // min repeat count

		if (nextlen === 0) {
			max_count = 138;
			min_count = 3;
		}

		for (n = 0; n <= max_code; n++) {
			curlen = nextlen;
			nextlen = tree[(n + 1) * 2 + 1];
			if (++count < max_count && curlen == nextlen) {
				continue;
			} else if (count < min_count) {
				do {
					send_code(curlen, bl_tree);
				} while (--count !== 0);
			} else if (curlen !== 0) {
				if (curlen != prevlen) {
					send_code(curlen, bl_tree);
					count--;
				}
				send_code(REP_3_6, bl_tree);
				send_bits(count - 3, 2);
			} else if (count <= 10) {
				send_code(REPZ_3_10, bl_tree);
				send_bits(count - 3, 3);
			} else {
				send_code(REPZ_11_138, bl_tree);
				send_bits(count - 11, 7);
			}
			count = 0;
			prevlen = curlen;
			if (nextlen === 0) {
				max_count = 138;
				min_count = 3;
			} else if (curlen == nextlen) {
				max_count = 6;
				min_count = 3;
			} else {
				max_count = 7;
				min_count = 4;
			}
		}
	}

	// Send the header for a block using dynamic Huffman trees: the counts, the
	// lengths of the bit length codes, the literal tree and the distance tree.
	// IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.
	function send_all_trees(lcodes, dcodes, blcodes) {
		let rank; // index in bl_order

		send_bits(lcodes - 257, 5); // not +255 as stated in appnote.txt
		send_bits(dcodes - 1, 5);
		send_bits(blcodes - 4, 4); // not -3 as stated in appnote.txt
		for (rank = 0; rank < blcodes; rank++) {
			send_bits(bl_tree[Tree.bl_order[rank] * 2 + 1], 3);
		}
		send_tree(dyn_ltree, lcodes - 1); // literal tree
		send_tree(dyn_dtree, dcodes - 1); // distance tree
	}

	// Flush the bit buffer, keeping at most 7 bits in it.
	function bi_flush() {
		if (bi_valid == 16) {
			put_short(bi_buf);
			bi_buf = 0;
			bi_valid = 0;
		} else if (bi_valid >= 8) {
			put_byte(bi_buf & 0xff);
			bi_buf >>>= 8;
			bi_valid -= 8;
		}
	}

	// Send one empty static block to give enough lookahead for inflate.
	// This takes 10 bits, of which 7 may remain in the bit buffer.
	// The current inflate code requires 9 bits of lookahead. If the
	// last two codes for the previous block (real code plus EOB) were coded
	// on 5 bits or less, inflate may have only 5+3 bits of lookahead to decode
	// the last real code. In this case we send two empty static blocks instead
	// of one. (There are no problems if the previous block is stored or fixed.)
	// To simplify the code, we assume the worst case of last real code encoded
	// on one bit only.
	function _tr_align() {
		send_bits(STATIC_TREES << 1, 3);
		send_code(END_BLOCK, StaticTree.static_ltree);

		bi_flush();

		// Of the 10 bits for the empty block, we have already sent
		// (10 - bi_valid) bits. The lookahead for the last real code (before
		// the EOB of the previous block) was thus at least one plus the length
		// of the EOB plus what we have just sent of the empty static block.
		if (1 + last_eob_len + 10 - bi_valid < 9) {
			send_bits(STATIC_TREES << 1, 3);
			send_code(END_BLOCK, StaticTree.static_ltree);
			bi_flush();
		}
		last_eob_len = 7;
	}

	// Save the match info and tally the frequency counts. Return true if
	// the current block must be flushed.
	function _tr_tally(dist, // distance of matched string
		lc // match length-MIN_MATCH or unmatched char (if dist==0)
	) {
		let out_length, in_length, dcode;
		that.pending_buf[d_buf + last_lit * 2] = (dist >>> 8) & 0xff;
		that.pending_buf[d_buf + last_lit * 2 + 1] = dist & 0xff;

		that.pending_buf[l_buf + last_lit] = lc & 0xff;
		last_lit++;

		if (dist === 0) {
			// lc is the unmatched char
			dyn_ltree[lc * 2]++;
		} else {
			matches++;
			// Here, lc is the match length - MIN_MATCH
			dist--; // dist = match distance - 1
			dyn_ltree[(Tree._length_code[lc] + LITERALS + 1) * 2]++;
			dyn_dtree[Tree.d_code(dist) * 2]++;
		}

		if ((last_lit & 0x1fff) === 0 && level > 2) {
			// Compute an upper bound for the compressed length
			out_length = last_lit * 8;
			in_length = strstart - block_start;
			for (dcode = 0; dcode < D_CODES; dcode++) {
				out_length += dyn_dtree[dcode * 2] * (5 + Tree.extra_dbits[dcode]);
			}
			out_length >>>= 3;
			if ((matches < Math.floor(last_lit / 2)) && out_length < Math.floor(in_length / 2))
				return true;
		}

		return (last_lit == lit_bufsize - 1);
		// We avoid equality with lit_bufsize because of wraparound at 64K
		// on 16 bit machines and because stored blocks are restricted to
		// 64K-1 bytes.
	}

	// Send the block data compressed using the given Huffman trees
	function compress_block(ltree, dtree) {
		let dist; // distance of matched string
		let lc; // match length or unmatched char (if dist === 0)
		let lx = 0; // running index in l_buf
		let code; // the code to send
		let extra; // number of extra bits to send

		if (last_lit !== 0) {
			do {
				dist = ((that.pending_buf[d_buf + lx * 2] << 8) & 0xff00) | (that.pending_buf[d_buf + lx * 2 + 1] & 0xff);
				lc = (that.pending_buf[l_buf + lx]) & 0xff;
				lx++;

				if (dist === 0) {
					send_code(lc, ltree); // send a literal byte
				} else {
					// Here, lc is the match length - MIN_MATCH
					code = Tree._length_code[lc];

					send_code(code + LITERALS + 1, ltree); // send the length
					// code
					extra = Tree.extra_lbits[code];
					if (extra !== 0) {
						lc -= Tree.base_length[code];
						send_bits(lc, extra); // send the extra length bits
					}
					dist--; // dist is now the match distance - 1
					code = Tree.d_code(dist);

					send_code(code, dtree); // send the distance code
					extra = Tree.extra_dbits[code];
					if (extra !== 0) {
						dist -= Tree.base_dist[code];
						send_bits(dist, extra); // send the extra distance bits
					}
				} // literal or match pair ?

				// Check that the overlay between pending_buf and d_buf+l_buf is
				// ok:
			} while (lx < last_lit);
		}

		send_code(END_BLOCK, ltree);
		last_eob_len = ltree[END_BLOCK * 2 + 1];
	}

	// Flush the bit buffer and align the output on a byte boundary
	function bi_windup() {
		if (bi_valid > 8) {
			put_short(bi_buf);
		} else if (bi_valid > 0) {
			put_byte(bi_buf & 0xff);
		}
		bi_buf = 0;
		bi_valid = 0;
	}

	// Copy a stored block, storing first the length and its
	// one's complement if requested.
	function copy_block(buf, // the input data
		len, // its length
		header // true if block header must be written
	) {
		bi_windup(); // align on byte boundary
		last_eob_len = 8; // enough lookahead for inflate

		if (header) {
			put_short(len);
			put_short(~len);
		}

		that.pending_buf.set(window.subarray(buf, buf + len), that.pending);
		that.pending += len;
	}

	// Send a stored block
	function _tr_stored_block(buf, // input block
		stored_len, // length of input block
		eof // true if this is the last block for a file
	) {
		send_bits((STORED_BLOCK << 1) + (eof ? 1 : 0), 3); // send block type
		copy_block(buf, stored_len, true); // with header
	}

	// Determine the best encoding for the current block: dynamic trees, static
	// trees or store, and output the encoded block to the zip file.
	function _tr_flush_block(buf, // input block, or NULL if too old
		stored_len, // length of input block
		eof // true if this is the last block for a file
	) {
		let opt_lenb, static_lenb;// opt_len and static_len in bytes
		let max_blindex = 0; // index of last bit length code of non zero freq

		// Build the Huffman trees unless a stored block is forced
		if (level > 0) {
			// Construct the literal and distance trees
			l_desc.build_tree(that);

			d_desc.build_tree(that);

			// At this point, opt_len and static_len are the total bit lengths
			// of
			// the compressed block data, excluding the tree representations.

			// Build the bit length tree for the above two trees, and get the
			// index
			// in bl_order of the last bit length code to send.
			max_blindex = build_bl_tree();

			// Determine the best encoding. Compute first the block length in
			// bytes
			opt_lenb = (that.opt_len + 3 + 7) >>> 3;
			static_lenb = (that.static_len + 3 + 7) >>> 3;

			if (static_lenb <= opt_lenb)
				opt_lenb = static_lenb;
		} else {
			opt_lenb = static_lenb = stored_len + 5; // force a stored block
		}

		if ((stored_len + 4 <= opt_lenb) && buf != -1) {
			// 4: two words for the lengths
			// The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.
			// Otherwise we can't have processed more than WSIZE input bytes
			// since
			// the last block flush, because compression would have been
			// successful. If LIT_BUFSIZE <= WSIZE, it is never too late to
			// transform a block into a stored block.
			_tr_stored_block(buf, stored_len, eof);
		} else if (static_lenb == opt_lenb) {
			send_bits((STATIC_TREES << 1) + (eof ? 1 : 0), 3);
			compress_block(StaticTree.static_ltree, StaticTree.static_dtree);
		} else {
			send_bits((DYN_TREES << 1) + (eof ? 1 : 0), 3);
			send_all_trees(l_desc.max_code + 1, d_desc.max_code + 1, max_blindex + 1);
			compress_block(dyn_ltree, dyn_dtree);
		}

		// The above check is made mod 2^32, for files larger than 512 MB
		// and uLong implemented on 32 bits.

		init_block();

		if (eof) {
			bi_windup();
		}
	}

	function flush_block_only(eof) {
		_tr_flush_block(block_start >= 0 ? block_start : -1, strstart - block_start, eof);
		block_start = strstart;
		strm.flush_pending();
	}

	// Fill the window when the lookahead becomes insufficient.
	// Updates strstart and lookahead.
	//
	// IN assertion: lookahead < MIN_LOOKAHEAD
	// OUT assertions: strstart <= window_size-MIN_LOOKAHEAD
	// At least one byte has been read, or avail_in === 0; reads are
	// performed for at least two bytes (required for the zip translate_eol
	// option -- not supported here).
	function fill_window() {
		let n, m;
		let p;
		let more; // Amount of free space at the end of the window.

		do {
			more = (window_size - lookahead - strstart);

			// Deal with !@#$% 64K limit:
			if (more === 0 && strstart === 0 && lookahead === 0) {
				more = w_size;
			} else if (more == -1) {
				// Very unlikely, but possible on 16 bit machine if strstart ==
				// 0
				// and lookahead == 1 (input done one byte at time)
				more--;

				// If the window is almost full and there is insufficient
				// lookahead,
				// move the upper half to the lower one to make room in the
				// upper half.
			} else if (strstart >= w_size + w_size - MIN_LOOKAHEAD) {
				window.set(window.subarray(w_size, w_size + w_size), 0);

				match_start -= w_size;
				strstart -= w_size; // we now have strstart >= MAX_DIST
				block_start -= w_size;

				// Slide the hash table (could be avoided with 32 bit values
				// at the expense of memory usage). We slide even when level ==
				// 0
				// to keep the hash table consistent if we switch back to level
				// > 0
				// later. (Using level 0 permanently is not an optimal usage of
				// zlib, so we don't care about this pathological case.)

				n = hash_size;
				p = n;
				do {
					m = (head[--p] & 0xffff);
					head[p] = (m >= w_size ? m - w_size : 0);
				} while (--n !== 0);

				n = w_size;
				p = n;
				do {
					m = (prev[--p] & 0xffff);
					prev[p] = (m >= w_size ? m - w_size : 0);
					// If n is not on any hash chain, prev[n] is garbage but
					// its value will never be used.
				} while (--n !== 0);
				more += w_size;
			}

			if (strm.avail_in === 0)
				return;

			// If there was no sliding:
			// strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&
			// more == window_size - lookahead - strstart
			// => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)
			// => more >= window_size - 2*WSIZE + 2
			// In the BIG_MEM or MMAP case (not yet supported),
			// window_size == input_size + MIN_LOOKAHEAD &&
			// strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.
			// Otherwise, window_size == 2*WSIZE so more >= 2.
			// If there was sliding, more >= WSIZE. So in all cases, more >= 2.

			n = strm.read_buf(window, strstart + lookahead, more);
			lookahead += n;

			// Initialize the hash value now that we have some input:
			if (lookahead >= MIN_MATCH) {
				ins_h = window[strstart] & 0xff;
				ins_h = (((ins_h) << hash_shift) ^ (window[strstart + 1] & 0xff)) & hash_mask;
			}
			// If the whole input has less than MIN_MATCH bytes, ins_h is
			// garbage,
			// but this is not important since only literal bytes will be
			// emitted.
		} while (lookahead < MIN_LOOKAHEAD && strm.avail_in !== 0);
	}

	// Copy without compression as much as possible from the input stream,
	// return
	// the current block state.
	// This function does not insert new strings in the dictionary since
	// uncompressible data is probably not useful. This function is used
	// only for the level=0 compression option.
	// NOTE: this function should be optimized to avoid extra copying from
	// window to pending_buf.
	function deflate_stored(flush) {
		// Stored blocks are limited to 0xffff bytes, pending_buf is limited
		// to pending_buf_size, and each stored block has a 5 byte header:

		let max_block_size = 0xffff;
		let max_start;

		if (max_block_size > pending_buf_size - 5) {
			max_block_size = pending_buf_size - 5;
		}

		// Copy as much as possible from input to output:
		// eslint-disable-next-line no-constant-condition
		while (true) {
			// Fill the window as much as possible:
			if (lookahead <= 1) {
				fill_window();
				if (lookahead === 0 && flush == Z_NO_FLUSH)
					return NeedMore;
				if (lookahead === 0)
					break; // flush the current block
			}

			strstart += lookahead;
			lookahead = 0;

			// Emit a stored block if pending_buf will be full:
			max_start = block_start + max_block_size;
			if (strstart === 0 || strstart >= max_start) {
				// strstart === 0 is possible when wraparound on 16-bit machine
				lookahead = (strstart - max_start);
				strstart = max_start;

				flush_block_only(false);
				if (strm.avail_out === 0)
					return NeedMore;

			}

			// Flush if we may have to slide, otherwise block_start may become
			// negative and the data will be gone:
			if (strstart - block_start >= w_size - MIN_LOOKAHEAD) {
				flush_block_only(false);
				if (strm.avail_out === 0)
					return NeedMore;
			}
		}

		flush_block_only(flush == Z_FINISH);
		if (strm.avail_out === 0)
			return (flush == Z_FINISH) ? FinishStarted : NeedMore;

		return flush == Z_FINISH ? FinishDone : BlockDone;
	}

	function longest_match(cur_match) {
		let chain_length = max_chain_length; // max hash chain length
		let scan = strstart; // current string
		let match; // matched string
		let len; // length of current match
		let best_len = prev_length; // best match length so far
		const limit = strstart > (w_size - MIN_LOOKAHEAD) ? strstart - (w_size - MIN_LOOKAHEAD) : 0;
		let _nice_match = nice_match;

		// Stop when cur_match becomes <= limit. To simplify the code,
		// we prevent matches with the string of window index 0.

		const wmask = w_mask;

		const strend = strstart + MAX_MATCH;
		let scan_end1 = window[scan + best_len - 1];
		let scan_end = window[scan + best_len];

		// The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of
		// 16.
		// It is easy to get rid of this optimization if necessary.

		// Do not waste too much time if we already have a good match:
		if (prev_length >= good_match) {
			chain_length >>= 2;
		}

		// Do not look for matches beyond the end of the input. This is
		// necessary
		// to make deflate deterministic.
		if (_nice_match > lookahead)
			_nice_match = lookahead;

		do {
			match = cur_match;

			// Skip to next match if the match length cannot increase
			// or if the match length is less than 2:
			if (window[match + best_len] != scan_end || window[match + best_len - 1] != scan_end1 || window[match] != window[scan]
				|| window[++match] != window[scan + 1])
				continue;

			// The check at best_len-1 can be removed because it will be made
			// again later. (This heuristic is not always a win.)
			// It is not necessary to compare scan[2] and match[2] since they
			// are always equal when the other bytes match, given that
			// the hash keys are equal and that HASH_BITS >= 8.
			scan += 2;
			match++;

			// We check for insufficient lookahead only every 8th comparison;
			// the 256th check will be made at strstart+258.
			// eslint-disable-next-line no-empty
			do {
			} while (window[++scan] == window[++match] && window[++scan] == window[++match] && window[++scan] == window[++match]
			&& window[++scan] == window[++match] && window[++scan] == window[++match] && window[++scan] == window[++match]
			&& window[++scan] == window[++match] && window[++scan] == window[++match] && scan < strend);

			len = MAX_MATCH - (strend - scan);
			scan = strend - MAX_MATCH;

			if (len > best_len) {
				match_start = cur_match;
				best_len = len;
				if (len >= _nice_match)
					break;
				scan_end1 = window[scan + best_len - 1];
				scan_end = window[scan + best_len];
			}

		} while ((cur_match = (prev[cur_match & wmask] & 0xffff)) > limit && --chain_length !== 0);

		if (best_len <= lookahead)
			return best_len;
		return lookahead;
	}

	// Compress as much as possible from the input stream, return the current
	// block state.
	// This function does not perform lazy evaluation of matches and inserts
	// new strings in the dictionary only for unmatched strings or for short
	// matches. It is used only for the fast compression options.
	function deflate_fast(flush) {
		// short hash_head = 0; // head of the hash chain
		let hash_head = 0; // head of the hash chain
		let bflush; // set if current block must be flushed

		// eslint-disable-next-line no-constant-condition
		while (true) {
			// Make sure that we always have enough lookahead, except
			// at the end of the input file. We need MAX_MATCH bytes
			// for the next match, plus MIN_MATCH bytes to insert the
			// string following the next match.
			if (lookahead < MIN_LOOKAHEAD) {
				fill_window();
				if (lookahead < MIN_LOOKAHEAD && flush == Z_NO_FLUSH) {
					return NeedMore;
				}
				if (lookahead === 0)
					break; // flush the current block
			}

			// Insert the string window[strstart .. strstart+2] in the
			// dictionary, and set hash_head to the head of the hash chain:
			if (lookahead >= MIN_MATCH) {
				ins_h = (((ins_h) << hash_shift) ^ (window[(strstart) + (MIN_MATCH - 1)] & 0xff)) & hash_mask;

				// prev[strstart&w_mask]=hash_head=head[ins_h];
				hash_head = (head[ins_h] & 0xffff);
				prev[strstart & w_mask] = head[ins_h];
				head[ins_h] = strstart;
			}

			// Find the longest match, discarding those <= prev_length.
			// At this point we have always match_length < MIN_MATCH

			if (hash_head !== 0 && ((strstart - hash_head) & 0xffff) <= w_size - MIN_LOOKAHEAD) {
				// To simplify the code, we prevent matches with the string
				// of window index 0 (in particular we have to avoid a match
				// of the string with itself at the start of the input file).
				if (strategy != Z_HUFFMAN_ONLY) {
					match_length = longest_match(hash_head);
				}
				// longest_match() sets match_start
			}
			if (match_length >= MIN_MATCH) {
				// check_match(strstart, match_start, match_length);

				bflush = _tr_tally(strstart - match_start, match_length - MIN_MATCH);

				lookahead -= match_length;

				// Insert new strings in the hash table only if the match length
				// is not too large. This saves time but degrades compression.
				if (match_length <= max_lazy_match && lookahead >= MIN_MATCH) {
					match_length--; // string at strstart already in hash table
					do {
						strstart++;

						ins_h = ((ins_h << hash_shift) ^ (window[(strstart) + (MIN_MATCH - 1)] & 0xff)) & hash_mask;
						// prev[strstart&w_mask]=hash_head=head[ins_h];
						hash_head = (head[ins_h] & 0xffff);
						prev[strstart & w_mask] = head[ins_h];
						head[ins_h] = strstart;

						// strstart never exceeds WSIZE-MAX_MATCH, so there are
						// always MIN_MATCH bytes ahead.
					} while (--match_length !== 0);
					strstart++;
				} else {
					strstart += match_length;
					match_length = 0;
					ins_h = window[strstart] & 0xff;

					ins_h = (((ins_h) << hash_shift) ^ (window[strstart + 1] & 0xff)) & hash_mask;
					// If lookahead < MIN_MATCH, ins_h is garbage, but it does
					// not
					// matter since it will be recomputed at next deflate call.
				}
			} else {
				// No match, output a literal byte

				bflush = _tr_tally(0, window[strstart] & 0xff);
				lookahead--;
				strstart++;
			}
			if (bflush) {

				flush_block_only(false);
				if (strm.avail_out === 0)
					return NeedMore;
			}
		}

		flush_block_only(flush == Z_FINISH);
		if (strm.avail_out === 0) {
			if (flush == Z_FINISH)
				return FinishStarted;
			else
				return NeedMore;
		}
		return flush == Z_FINISH ? FinishDone : BlockDone;
	}

	// Same as above, but achieves better compression. We use a lazy
	// evaluation for matches: a match is finally adopted only if there is
	// no better match at the next window position.
	function deflate_slow(flush) {
		// short hash_head = 0; // head of hash chain
		let hash_head = 0; // head of hash chain
		let bflush; // set if current block must be flushed
		let max_insert;

		// Process the input block.
		// eslint-disable-next-line no-constant-condition
		while (true) {
			// Make sure that we always have enough lookahead, except
			// at the end of the input file. We need MAX_MATCH bytes
			// for the next match, plus MIN_MATCH bytes to insert the
			// string following the next match.

			if (lookahead < MIN_LOOKAHEAD) {
				fill_window();
				if (lookahead < MIN_LOOKAHEAD && flush == Z_NO_FLUSH) {
					return NeedMore;
				}
				if (lookahead === 0)
					break; // flush the current block
			}

			// Insert the string window[strstart .. strstart+2] in the
			// dictionary, and set hash_head to the head of the hash chain:

			if (lookahead >= MIN_MATCH) {
				ins_h = (((ins_h) << hash_shift) ^ (window[(strstart) + (MIN_MATCH - 1)] & 0xff)) & hash_mask;
				// prev[strstart&w_mask]=hash_head=head[ins_h];
				hash_head = (head[ins_h] & 0xffff);
				prev[strstart & w_mask] = head[ins_h];
				head[ins_h] = strstart;
			}

			// Find the longest match, discarding those <= prev_length.
			prev_length = match_length;
			prev_match = match_start;
			match_length = MIN_MATCH - 1;

			if (hash_head !== 0 && prev_length < max_lazy_match && ((strstart - hash_head) & 0xffff) <= w_size - MIN_LOOKAHEAD) {
				// To simplify the code, we prevent matches with the string
				// of window index 0 (in particular we have to avoid a match
				// of the string with itself at the start of the input file).

				if (strategy != Z_HUFFMAN_ONLY) {
					match_length = longest_match(hash_head);
				}
				// longest_match() sets match_start

				if (match_length <= 5 && (strategy == Z_FILTERED || (match_length == MIN_MATCH && strstart - match_start > 4096))) {

					// If prev_match is also MIN_MATCH, match_start is garbage
					// but we will ignore the current match anyway.
					match_length = MIN_MATCH - 1;
				}
			}

			// If there was a match at the previous step and the current
			// match is not better, output the previous match:
			if (prev_length >= MIN_MATCH && match_length <= prev_length) {
				max_insert = strstart + lookahead - MIN_MATCH;
				// Do not insert strings in hash table beyond this.

				// check_match(strstart-1, prev_match, prev_length);

				bflush = _tr_tally(strstart - 1 - prev_match, prev_length - MIN_MATCH);

				// Insert in hash table all strings up to the end of the match.
				// strstart-1 and strstart are already inserted. If there is not
				// enough lookahead, the last two strings are not inserted in
				// the hash table.
				lookahead -= prev_length - 1;
				prev_length -= 2;
				do {
					if (++strstart <= max_insert) {
						ins_h = (((ins_h) << hash_shift) ^ (window[(strstart) + (MIN_MATCH - 1)] & 0xff)) & hash_mask;
						// prev[strstart&w_mask]=hash_head=head[ins_h];
						hash_head = (head[ins_h] & 0xffff);
						prev[strstart & w_mask] = head[ins_h];
						head[ins_h] = strstart;
					}
				} while (--prev_length !== 0);
				match_available = 0;
				match_length = MIN_MATCH - 1;
				strstart++;

				if (bflush) {
					flush_block_only(false);
					if (strm.avail_out === 0)
						return NeedMore;
				}
			} else if (match_available !== 0) {

				// If there was no match at the previous position, output a
				// single literal. If there was a match but the current match
				// is longer, truncate the previous match to a single literal.

				bflush = _tr_tally(0, window[strstart - 1] & 0xff);

				if (bflush) {
					flush_block_only(false);
				}
				strstart++;
				lookahead--;
				if (strm.avail_out === 0)
					return NeedMore;
			} else {
				// There is no previous match to compare with, wait for
				// the next step to decide.

				match_available = 1;
				strstart++;
				lookahead--;
			}
		}

		if (match_available !== 0) {
			bflush = _tr_tally(0, window[strstart - 1] & 0xff);
			match_available = 0;
		}
		flush_block_only(flush == Z_FINISH);

		if (strm.avail_out === 0) {
			if (flush == Z_FINISH)
				return FinishStarted;
			else
				return NeedMore;
		}

		return flush == Z_FINISH ? FinishDone : BlockDone;
	}

	function deflateReset(strm) {
		strm.total_in = strm.total_out = 0;
		strm.msg = null; //

		that.pending = 0;
		that.pending_out = 0;

		status = BUSY_STATE;

		last_flush = Z_NO_FLUSH;

		tr_init();
		lm_init();
		return Z_OK;
	}

	that.deflateInit = function (strm, _level, bits, _method, memLevel, _strategy) {
		if (!_method)
			_method = Z_DEFLATED;
		if (!memLevel)
			memLevel = DEF_MEM_LEVEL;
		if (!_strategy)
			_strategy = Z_DEFAULT_STRATEGY;

		// byte[] my_version=ZLIB_VERSION;

		//
		// if (!version || version[0] != my_version[0]
		// || stream_size != sizeof(z_stream)) {
		// return Z_VERSION_ERROR;
		// }

		strm.msg = null;

		if (_level == Z_DEFAULT_COMPRESSION)
			_level = 6;

		if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || _method != Z_DEFLATED || bits < 9 || bits > 15 || _level < 0 || _level > 9 || _strategy < 0
			|| _strategy > Z_HUFFMAN_ONLY) {
			return Z_STREAM_ERROR;
		}

		strm.dstate = that;

		w_bits = bits;
		w_size = 1 << w_bits;
		w_mask = w_size - 1;

		hash_bits = memLevel + 7;
		hash_size = 1 << hash_bits;
		hash_mask = hash_size - 1;
		hash_shift = Math.floor((hash_bits + MIN_MATCH - 1) / MIN_MATCH);

		window = new Uint8Array(w_size * 2);
		prev = [];
		head = [];

		lit_bufsize = 1 << (memLevel + 6); // 16K elements by default

		// We overlay pending_buf and d_buf+l_buf. This works since the average
		// output size for (length,distance) codes is <= 24 bits.
		that.pending_buf = new Uint8Array(lit_bufsize * 4);
		pending_buf_size = lit_bufsize * 4;

		d_buf = Math.floor(lit_bufsize / 2);
		l_buf = (1 + 2) * lit_bufsize;

		level = _level;

		strategy = _strategy;

		return deflateReset(strm);
	};

	that.deflateEnd = function () {
		if (status != INIT_STATE && status != BUSY_STATE && status != FINISH_STATE) {
			return Z_STREAM_ERROR;
		}
		// Deallocate in reverse order of allocations:
		that.pending_buf = null;
		head = null;
		prev = null;
		window = null;
		// free
		that.dstate = null;
		return status == BUSY_STATE ? Z_DATA_ERROR : Z_OK;
	};

	that.deflateParams = function (strm, _level, _strategy) {
		let err = Z_OK;

		if (_level == Z_DEFAULT_COMPRESSION) {
			_level = 6;
		}
		if (_level < 0 || _level > 9 || _strategy < 0 || _strategy > Z_HUFFMAN_ONLY) {
			return Z_STREAM_ERROR;
		}

		if (config_table[level].func != config_table[_level].func && strm.total_in !== 0) {
			// Flush the last buffer:
			err = strm.deflate(Z_PARTIAL_FLUSH);
		}

		if (level != _level) {
			level = _level;
			max_lazy_match = config_table[level].max_lazy;
			good_match = config_table[level].good_length;
			nice_match = config_table[level].nice_length;
			max_chain_length = config_table[level].max_chain;
		}
		strategy = _strategy;
		return err;
	};

	that.deflateSetDictionary = function (strm, dictionary, dictLength) {
		let length = dictLength;
		let n, index = 0;

		if (!dictionary || status != INIT_STATE)
			return Z_STREAM_ERROR;

		if (length < MIN_MATCH)
			return Z_OK;
		if (length > w_size - MIN_LOOKAHEAD) {
			length = w_size - MIN_LOOKAHEAD;
			index = dictLength - length; // use the tail of the dictionary
		}
		window.set(dictionary.subarray(index, index + length), 0);

		strstart = length;
		block_start = length;

		// Insert all strings in the hash table (except for the last two bytes).
		// s->lookahead stays null, so s->ins_h will be recomputed at the next
		// call of fill_window.

		ins_h = window[0] & 0xff;
		ins_h = (((ins_h) << hash_shift) ^ (window[1] & 0xff)) & hash_mask;

		for (n = 0; n <= length - MIN_MATCH; n++) {
			ins_h = (((ins_h) << hash_shift) ^ (window[(n) + (MIN_MATCH - 1)] & 0xff)) & hash_mask;
			prev[n & w_mask] = head[ins_h];
			head[ins_h] = n;
		}
		return Z_OK;
	};

	that.deflate = function (_strm, flush) {
		let i, header, level_flags, old_flush, bstate;

		if (flush > Z_FINISH || flush < 0) {
			return Z_STREAM_ERROR;
		}

		if (!_strm.next_out || (!_strm.next_in && _strm.avail_in !== 0) || (status == FINISH_STATE && flush != Z_FINISH)) {
			_strm.msg = z_errmsg[Z_NEED_DICT - (Z_STREAM_ERROR)];
			return Z_STREAM_ERROR;
		}
		if (_strm.avail_out === 0) {
			_strm.msg = z_errmsg[Z_NEED_DICT - (Z_BUF_ERROR)];
			return Z_BUF_ERROR;
		}

		strm = _strm; // just in case
		old_flush = last_flush;
		last_flush = flush;

		// Write the zlib header
		if (status == INIT_STATE) {
			header = (Z_DEFLATED + ((w_bits - 8) << 4)) << 8;
			level_flags = ((level - 1) & 0xff) >> 1;

			if (level_flags > 3)
				level_flags = 3;
			header |= (level_flags << 6);
			if (strstart !== 0)
				header |= PRESET_DICT;
			header += 31 - (header % 31);

			status = BUSY_STATE;
			putShortMSB(header);
		}

		// Flush as much pending output as possible
		if (that.pending !== 0) {
			strm.flush_pending();
			if (strm.avail_out === 0) {
				// console.log(" avail_out==0");
				// Since avail_out is 0, deflate will be called again with
				// more output space, but possibly with both pending and
				// avail_in equal to zero. There won't be anything to do,
				// but this is not an error situation so make sure we
				// return OK instead of BUF_ERROR at next call of deflate:
				last_flush = -1;
				return Z_OK;
			}

			// Make sure there is something to do and avoid duplicate
			// consecutive
			// flushes. For repeated and useless calls with Z_FINISH, we keep
			// returning Z_STREAM_END instead of Z_BUFF_ERROR.
		} else if (strm.avail_in === 0 && flush <= old_flush && flush != Z_FINISH) {
			strm.msg = z_errmsg[Z_NEED_DICT - (Z_BUF_ERROR)];
			return Z_BUF_ERROR;
		}

		// User must not provide more input after the first FINISH:
		if (status == FINISH_STATE && strm.avail_in !== 0) {
			_strm.msg = z_errmsg[Z_NEED_DICT - (Z_BUF_ERROR)];
			return Z_BUF_ERROR;
		}

		// Start a new block or continue the current one.
		if (strm.avail_in !== 0 || lookahead !== 0 || (flush != Z_NO_FLUSH && status != FINISH_STATE)) {
			bstate = -1;
			switch (config_table[level].func) {
				case STORED:
					bstate = deflate_stored(flush);
					break;
				case FAST:
					bstate = deflate_fast(flush);
					break;
				case SLOW:
					bstate = deflate_slow(flush);
					break;
				default:
			}

			if (bstate == FinishStarted || bstate == FinishDone) {
				status = FINISH_STATE;
			}
			if (bstate == NeedMore || bstate == FinishStarted) {
				if (strm.avail_out === 0) {
					last_flush = -1; // avoid BUF_ERROR next call, see above
				}
				return Z_OK;
				// If flush != Z_NO_FLUSH && avail_out === 0, the next call
				// of deflate should use the same flush parameter to make sure
				// that the flush is complete. So we don't have to output an
				// empty block here, this will be done at next call. This also
				// ensures that for a very small output buffer, we emit at most
				// one empty block.
			}

			if (bstate == BlockDone) {
				if (flush == Z_PARTIAL_FLUSH) {
					_tr_align();
				} else { // FULL_FLUSH or SYNC_FLUSH
					_tr_stored_block(0, 0, false);
					// For a full flush, this empty block will be recognized
					// as a special marker by inflate_sync().
					if (flush == Z_FULL_FLUSH) {
						// state.head[s.hash_size-1]=0;
						for (i = 0; i < hash_size/*-1*/; i++)
							// forget history
							head[i] = 0;
					}
				}
				strm.flush_pending();
				if (strm.avail_out === 0) {
					last_flush = -1; // avoid BUF_ERROR at next call, see above
					return Z_OK;
				}
			}
		}

		if (flush != Z_FINISH)
			return Z_OK;
		return Z_STREAM_END;
	};
}

// ZStream

function ZStream() {
	const that = this;
	that.next_in_index = 0;
	that.next_out_index = 0;
	// that.next_in; // next input byte
	that.avail_in = 0; // number of bytes available at next_in
	that.total_in = 0; // total nb of input bytes read so far
	// that.next_out; // next output byte should be put there
	that.avail_out = 0; // remaining free space at next_out
	that.total_out = 0; // total nb of bytes output so far
	// that.msg;
	// that.dstate;
}

ZStream.prototype = {
	deflateInit: function (level, bits) {
		const that = this;
		that.dstate = new Deflate();
		if (!bits)
			bits = MAX_BITS;
		return that.dstate.deflateInit(that, level, bits);
	},

	deflate: function (flush) {
		const that = this;
		if (!that.dstate) {
			return Z_STREAM_ERROR;
		}
		return that.dstate.deflate(that, flush);
	},

	deflateEnd: function () {
		const that = this;
		if (!that.dstate)
			return Z_STREAM_ERROR;
		const ret = that.dstate.deflateEnd();
		that.dstate = null;
		return ret;
	},

	deflateParams: function (level, strategy) {
		const that = this;
		if (!that.dstate)
			return Z_STREAM_ERROR;
		return that.dstate.deflateParams(that, level, strategy);
	},

	deflateSetDictionary: function (dictionary, dictLength) {
		const that = this;
		if (!that.dstate)
			return Z_STREAM_ERROR;
		return that.dstate.deflateSetDictionary(that, dictionary, dictLength);
	},

	// Read a new buffer from the current input stream, update the
	// total number of bytes read. All deflate() input goes through
	// this function so some applications may wish to modify it to avoid
	// allocating a large strm->next_in buffer and copying from it.
	// (See also flush_pending()).
	read_buf: function (buf, start, size) {
		const that = this;
		let len = that.avail_in;
		if (len > size)
			len = size;
		if (len === 0)
			return 0;
		that.avail_in -= len;
		buf.set(that.next_in.subarray(that.next_in_index, that.next_in_index + len), start);
		that.next_in_index += len;
		that.total_in += len;
		return len;
	},

	// Flush as much pending output as possible. All deflate() output goes
	// through this function so some applications may wish to modify it
	// to avoid allocating a large strm->next_out buffer and copying into it.
	// (See also read_buf()).
	flush_pending: function () {
		const that = this;
		let len = that.dstate.pending;

		if (len > that.avail_out)
			len = that.avail_out;
		if (len === 0)
			return;

		// if (that.dstate.pending_buf.length <= that.dstate.pending_out || that.next_out.length <= that.next_out_index
		// || that.dstate.pending_buf.length < (that.dstate.pending_out + len) || that.next_out.length < (that.next_out_index +
		// len)) {
		// console.log(that.dstate.pending_buf.length + ", " + that.dstate.pending_out + ", " + that.next_out.length + ", " +
		// that.next_out_index + ", " + len);
		// console.log("avail_out=" + that.avail_out);
		// }

		that.next_out.set(that.dstate.pending_buf.subarray(that.dstate.pending_out, that.dstate.pending_out + len), that.next_out_index);

		that.next_out_index += len;
		that.dstate.pending_out += len;
		that.total_out += len;
		that.avail_out -= len;
		that.dstate.pending -= len;
		if (that.dstate.pending === 0) {
			that.dstate.pending_out = 0;
		}
	}
};

// Deflate

function ZipDeflate(options) {
	const that = this;
	const z = new ZStream();
	const bufsize = getMaximumCompressedSize(options && options.chunkSize ? options.chunkSize : 64 * 1024);
	const flush = Z_NO_FLUSH;
	const buf = new Uint8Array(bufsize);
	let level = options ? options.level : Z_DEFAULT_COMPRESSION;
	if (typeof level == "undefined")
		level = Z_DEFAULT_COMPRESSION;
	z.deflateInit(level);
	z.next_out = buf;

	that.append = function (data, onprogress) {
		let err, array, lastIndex = 0, bufferIndex = 0, bufferSize = 0;
		const buffers = [];
		if (!data.length)
			return;
		z.next_in_index = 0;
		z.next_in = data;
		z.avail_in = data.length;
		do {
			z.next_out_index = 0;
			z.avail_out = bufsize;
			err = z.deflate(flush);
			if (err != Z_OK)
				throw new Error("deflating: " + z.msg);
			if (z.next_out_index)
				if (z.next_out_index == bufsize)
					buffers.push(new Uint8Array(buf));
				else
					buffers.push(buf.slice(0, z.next_out_index));
			bufferSize += z.next_out_index;
			if (onprogress && z.next_in_index > 0 && z.next_in_index != lastIndex) {
				onprogress(z.next_in_index);
				lastIndex = z.next_in_index;
			}
		} while (z.avail_in > 0 || z.avail_out === 0);
		if (buffers.length > 1) {
			array = new Uint8Array(bufferSize);
			buffers.forEach(function (chunk) {
				array.set(chunk, bufferIndex);
				bufferIndex += chunk.length;
			});
		} else {
			array = buffers[0] || new Uint8Array(0);
		}
		return array;
	};
	that.flush = function () {
		let err, array, bufferIndex = 0, bufferSize = 0;
		const buffers = [];
		do {
			z.next_out_index = 0;
			z.avail_out = bufsize;
			err = z.deflate(Z_FINISH);
			if (err != Z_STREAM_END && err != Z_OK)
				throw new Error("deflating: " + z.msg);
			if (bufsize - z.avail_out > 0)
				buffers.push(buf.slice(0, z.next_out_index));
			bufferSize += z.next_out_index;
		} while (z.avail_in > 0 || z.avail_out === 0);
		z.deflateEnd();
		array = new Uint8Array(bufferSize);
		buffers.forEach(function (chunk) {
			array.set(chunk, bufferIndex);
			bufferIndex += chunk.length;
		});
		return array;
	};
}

function getMaximumCompressedSize(uncompressedSize) {
	return uncompressedSize + (5 * (Math.floor(uncompressedSize / 16383) + 1));
}

/* harmony default export */ __webpack_exports__["default"] = (ZipDeflate);

/***/ }),

/***/ "./node_modules/@zip.js/zip.js/lib/core/codecs/inflate.js":
/*!****************************************************************!*\
  !*** ./node_modules/@zip.js/zip.js/lib/core/codecs/inflate.js ***!
  \****************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/*
 Copyright (c) 2021 Gildas Lormeau. All rights reserved.

 Redistribution and use in source and binary forms, with or without
 modification, are permitted provided that the following conditions are met:

 1. Redistributions of source code must retain the above copyright notice,
 this list of conditions and the following disclaimer.

 2. Redistributions in binary form must reproduce the above copyright 
 notice, this list of conditions and the following disclaimer in 
 the documentation and/or other materials provided with the distribution.

 3. The names of the authors may not be used to endorse or promote products
 derived from this software without specific prior written permission.

 THIS SOFTWARE IS PROVIDED ''AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,
 INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
 FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL JCRAFT,
 INC. OR ANY CONTRIBUTORS TO THIS SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT,
 INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
 OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * This program is based on JZlib 1.0.2 ymnk, JCraft,Inc.
 * JZlib is based on zlib-1.1.3, so all credit should go authors
 * Jean-loup Gailly(jloup@gzip.org) and Mark Adler(madler@alumni.caltech.edu)
 * and contributors of zlib.
 */



// Global
const MAX_BITS = 15;

const Z_OK = 0;
const Z_STREAM_END = 1;
const Z_NEED_DICT = 2;
const Z_STREAM_ERROR = -2;
const Z_DATA_ERROR = -3;
const Z_MEM_ERROR = -4;
const Z_BUF_ERROR = -5;

const inflate_mask = [0x00000000, 0x00000001, 0x00000003, 0x00000007, 0x0000000f, 0x0000001f, 0x0000003f, 0x0000007f, 0x000000ff, 0x000001ff, 0x000003ff,
	0x000007ff, 0x00000fff, 0x00001fff, 0x00003fff, 0x00007fff, 0x0000ffff];

const MANY = 1440;

// JZlib version : "1.0.2"
const Z_NO_FLUSH = 0;
const Z_FINISH = 4;

// InfTree
const fixed_bl = 9;
const fixed_bd = 5;

const fixed_tl = [96, 7, 256, 0, 8, 80, 0, 8, 16, 84, 8, 115, 82, 7, 31, 0, 8, 112, 0, 8, 48, 0, 9, 192, 80, 7, 10, 0, 8, 96, 0, 8, 32, 0, 9, 160, 0, 8, 0,
	0, 8, 128, 0, 8, 64, 0, 9, 224, 80, 7, 6, 0, 8, 88, 0, 8, 24, 0, 9, 144, 83, 7, 59, 0, 8, 120, 0, 8, 56, 0, 9, 208, 81, 7, 17, 0, 8, 104, 0, 8, 40,
	0, 9, 176, 0, 8, 8, 0, 8, 136, 0, 8, 72, 0, 9, 240, 80, 7, 4, 0, 8, 84, 0, 8, 20, 85, 8, 227, 83, 7, 43, 0, 8, 116, 0, 8, 52, 0, 9, 200, 81, 7, 13,
	0, 8, 100, 0, 8, 36, 0, 9, 168, 0, 8, 4, 0, 8, 132, 0, 8, 68, 0, 9, 232, 80, 7, 8, 0, 8, 92, 0, 8, 28, 0, 9, 152, 84, 7, 83, 0, 8, 124, 0, 8, 60,
	0, 9, 216, 82, 7, 23, 0, 8, 108, 0, 8, 44, 0, 9, 184, 0, 8, 12, 0, 8, 140, 0, 8, 76, 0, 9, 248, 80, 7, 3, 0, 8, 82, 0, 8, 18, 85, 8, 163, 83, 7,
	35, 0, 8, 114, 0, 8, 50, 0, 9, 196, 81, 7, 11, 0, 8, 98, 0, 8, 34, 0, 9, 164, 0, 8, 2, 0, 8, 130, 0, 8, 66, 0, 9, 228, 80, 7, 7, 0, 8, 90, 0, 8,
	26, 0, 9, 148, 84, 7, 67, 0, 8, 122, 0, 8, 58, 0, 9, 212, 82, 7, 19, 0, 8, 106, 0, 8, 42, 0, 9, 180, 0, 8, 10, 0, 8, 138, 0, 8, 74, 0, 9, 244, 80,
	7, 5, 0, 8, 86, 0, 8, 22, 192, 8, 0, 83, 7, 51, 0, 8, 118, 0, 8, 54, 0, 9, 204, 81, 7, 15, 0, 8, 102, 0, 8, 38, 0, 9, 172, 0, 8, 6, 0, 8, 134, 0,
	8, 70, 0, 9, 236, 80, 7, 9, 0, 8, 94, 0, 8, 30, 0, 9, 156, 84, 7, 99, 0, 8, 126, 0, 8, 62, 0, 9, 220, 82, 7, 27, 0, 8, 110, 0, 8, 46, 0, 9, 188, 0,
	8, 14, 0, 8, 142, 0, 8, 78, 0, 9, 252, 96, 7, 256, 0, 8, 81, 0, 8, 17, 85, 8, 131, 82, 7, 31, 0, 8, 113, 0, 8, 49, 0, 9, 194, 80, 7, 10, 0, 8, 97,
	0, 8, 33, 0, 9, 162, 0, 8, 1, 0, 8, 129, 0, 8, 65, 0, 9, 226, 80, 7, 6, 0, 8, 89, 0, 8, 25, 0, 9, 146, 83, 7, 59, 0, 8, 121, 0, 8, 57, 0, 9, 210,
	81, 7, 17, 0, 8, 105, 0, 8, 41, 0, 9, 178, 0, 8, 9, 0, 8, 137, 0, 8, 73, 0, 9, 242, 80, 7, 4, 0, 8, 85, 0, 8, 21, 80, 8, 258, 83, 7, 43, 0, 8, 117,
	0, 8, 53, 0, 9, 202, 81, 7, 13, 0, 8, 101, 0, 8, 37, 0, 9, 170, 0, 8, 5, 0, 8, 133, 0, 8, 69, 0, 9, 234, 80, 7, 8, 0, 8, 93, 0, 8, 29, 0, 9, 154,
	84, 7, 83, 0, 8, 125, 0, 8, 61, 0, 9, 218, 82, 7, 23, 0, 8, 109, 0, 8, 45, 0, 9, 186, 0, 8, 13, 0, 8, 141, 0, 8, 77, 0, 9, 250, 80, 7, 3, 0, 8, 83,
	0, 8, 19, 85, 8, 195, 83, 7, 35, 0, 8, 115, 0, 8, 51, 0, 9, 198, 81, 7, 11, 0, 8, 99, 0, 8, 35, 0, 9, 166, 0, 8, 3, 0, 8, 131, 0, 8, 67, 0, 9, 230,
	80, 7, 7, 0, 8, 91, 0, 8, 27, 0, 9, 150, 84, 7, 67, 0, 8, 123, 0, 8, 59, 0, 9, 214, 82, 7, 19, 0, 8, 107, 0, 8, 43, 0, 9, 182, 0, 8, 11, 0, 8, 139,
	0, 8, 75, 0, 9, 246, 80, 7, 5, 0, 8, 87, 0, 8, 23, 192, 8, 0, 83, 7, 51, 0, 8, 119, 0, 8, 55, 0, 9, 206, 81, 7, 15, 0, 8, 103, 0, 8, 39, 0, 9, 174,
	0, 8, 7, 0, 8, 135, 0, 8, 71, 0, 9, 238, 80, 7, 9, 0, 8, 95, 0, 8, 31, 0, 9, 158, 84, 7, 99, 0, 8, 127, 0, 8, 63, 0, 9, 222, 82, 7, 27, 0, 8, 111,
	0, 8, 47, 0, 9, 190, 0, 8, 15, 0, 8, 143, 0, 8, 79, 0, 9, 254, 96, 7, 256, 0, 8, 80, 0, 8, 16, 84, 8, 115, 82, 7, 31, 0, 8, 112, 0, 8, 48, 0, 9,
	193, 80, 7, 10, 0, 8, 96, 0, 8, 32, 0, 9, 161, 0, 8, 0, 0, 8, 128, 0, 8, 64, 0, 9, 225, 80, 7, 6, 0, 8, 88, 0, 8, 24, 0, 9, 145, 83, 7, 59, 0, 8,
	120, 0, 8, 56, 0, 9, 209, 81, 7, 17, 0, 8, 104, 0, 8, 40, 0, 9, 177, 0, 8, 8, 0, 8, 136, 0, 8, 72, 0, 9, 241, 80, 7, 4, 0, 8, 84, 0, 8, 20, 85, 8,
	227, 83, 7, 43, 0, 8, 116, 0, 8, 52, 0, 9, 201, 81, 7, 13, 0, 8, 100, 0, 8, 36, 0, 9, 169, 0, 8, 4, 0, 8, 132, 0, 8, 68, 0, 9, 233, 80, 7, 8, 0, 8,
	92, 0, 8, 28, 0, 9, 153, 84, 7, 83, 0, 8, 124, 0, 8, 60, 0, 9, 217, 82, 7, 23, 0, 8, 108, 0, 8, 44, 0, 9, 185, 0, 8, 12, 0, 8, 140, 0, 8, 76, 0, 9,
	249, 80, 7, 3, 0, 8, 82, 0, 8, 18, 85, 8, 163, 83, 7, 35, 0, 8, 114, 0, 8, 50, 0, 9, 197, 81, 7, 11, 0, 8, 98, 0, 8, 34, 0, 9, 165, 0, 8, 2, 0, 8,
	130, 0, 8, 66, 0, 9, 229, 80, 7, 7, 0, 8, 90, 0, 8, 26, 0, 9, 149, 84, 7, 67, 0, 8, 122, 0, 8, 58, 0, 9, 213, 82, 7, 19, 0, 8, 106, 0, 8, 42, 0, 9,
	181, 0, 8, 10, 0, 8, 138, 0, 8, 74, 0, 9, 245, 80, 7, 5, 0, 8, 86, 0, 8, 22, 192, 8, 0, 83, 7, 51, 0, 8, 118, 0, 8, 54, 0, 9, 205, 81, 7, 15, 0, 8,
	102, 0, 8, 38, 0, 9, 173, 0, 8, 6, 0, 8, 134, 0, 8, 70, 0, 9, 237, 80, 7, 9, 0, 8, 94, 0, 8, 30, 0, 9, 157, 84, 7, 99, 0, 8, 126, 0, 8, 62, 0, 9,
	221, 82, 7, 27, 0, 8, 110, 0, 8, 46, 0, 9, 189, 0, 8, 14, 0, 8, 142, 0, 8, 78, 0, 9, 253, 96, 7, 256, 0, 8, 81, 0, 8, 17, 85, 8, 131, 82, 7, 31, 0,
	8, 113, 0, 8, 49, 0, 9, 195, 80, 7, 10, 0, 8, 97, 0, 8, 33, 0, 9, 163, 0, 8, 1, 0, 8, 129, 0, 8, 65, 0, 9, 227, 80, 7, 6, 0, 8, 89, 0, 8, 25, 0, 9,
	147, 83, 7, 59, 0, 8, 121, 0, 8, 57, 0, 9, 211, 81, 7, 17, 0, 8, 105, 0, 8, 41, 0, 9, 179, 0, 8, 9, 0, 8, 137, 0, 8, 73, 0, 9, 243, 80, 7, 4, 0, 8,
	85, 0, 8, 21, 80, 8, 258, 83, 7, 43, 0, 8, 117, 0, 8, 53, 0, 9, 203, 81, 7, 13, 0, 8, 101, 0, 8, 37, 0, 9, 171, 0, 8, 5, 0, 8, 133, 0, 8, 69, 0, 9,
	235, 80, 7, 8, 0, 8, 93, 0, 8, 29, 0, 9, 155, 84, 7, 83, 0, 8, 125, 0, 8, 61, 0, 9, 219, 82, 7, 23, 0, 8, 109, 0, 8, 45, 0, 9, 187, 0, 8, 13, 0, 8,
	141, 0, 8, 77, 0, 9, 251, 80, 7, 3, 0, 8, 83, 0, 8, 19, 85, 8, 195, 83, 7, 35, 0, 8, 115, 0, 8, 51, 0, 9, 199, 81, 7, 11, 0, 8, 99, 0, 8, 35, 0, 9,
	167, 0, 8, 3, 0, 8, 131, 0, 8, 67, 0, 9, 231, 80, 7, 7, 0, 8, 91, 0, 8, 27, 0, 9, 151, 84, 7, 67, 0, 8, 123, 0, 8, 59, 0, 9, 215, 82, 7, 19, 0, 8,
	107, 0, 8, 43, 0, 9, 183, 0, 8, 11, 0, 8, 139, 0, 8, 75, 0, 9, 247, 80, 7, 5, 0, 8, 87, 0, 8, 23, 192, 8, 0, 83, 7, 51, 0, 8, 119, 0, 8, 55, 0, 9,
	207, 81, 7, 15, 0, 8, 103, 0, 8, 39, 0, 9, 175, 0, 8, 7, 0, 8, 135, 0, 8, 71, 0, 9, 239, 80, 7, 9, 0, 8, 95, 0, 8, 31, 0, 9, 159, 84, 7, 99, 0, 8,
	127, 0, 8, 63, 0, 9, 223, 82, 7, 27, 0, 8, 111, 0, 8, 47, 0, 9, 191, 0, 8, 15, 0, 8, 143, 0, 8, 79, 0, 9, 255];
const fixed_td = [80, 5, 1, 87, 5, 257, 83, 5, 17, 91, 5, 4097, 81, 5, 5, 89, 5, 1025, 85, 5, 65, 93, 5, 16385, 80, 5, 3, 88, 5, 513, 84, 5, 33, 92, 5,
	8193, 82, 5, 9, 90, 5, 2049, 86, 5, 129, 192, 5, 24577, 80, 5, 2, 87, 5, 385, 83, 5, 25, 91, 5, 6145, 81, 5, 7, 89, 5, 1537, 85, 5, 97, 93, 5,
	24577, 80, 5, 4, 88, 5, 769, 84, 5, 49, 92, 5, 12289, 82, 5, 13, 90, 5, 3073, 86, 5, 193, 192, 5, 24577];

// Tables for deflate from PKZIP's appnote.txt.
const cplens = [ // Copy lengths for literal codes 257..285
	3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0];

// see note #13 above about 258
const cplext = [ // Extra bits for literal codes 257..285
	0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 112, 112 // 112==invalid
];

const cpdist = [ // Copy offsets for distance codes 0..29
	1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577];

const cpdext = [ // Extra bits for distance codes
	0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13];

// If BMAX needs to be larger than 16, then h and x[] should be uLong.
const BMAX = 15; // maximum bit length of any code

function InfTree() {
	const that = this;

	let hn; // hufts used in space
	let v; // work area for huft_build
	let c; // bit length count table
	let r; // table entry for structure assignment
	let u; // table stack
	let x; // bit offsets, then code stack

	function huft_build(b, // code lengths in bits (all assumed <=
		// BMAX)
		bindex, n, // number of codes (assumed <= 288)
		s, // number of simple-valued codes (0..s-1)
		d, // list of base values for non-simple codes
		e, // list of extra bits for non-simple codes
		t, // result: starting table
		m, // maximum lookup bits, returns actual
		hp,// space for trees
		hn,// hufts used in space
		v // working area: values in order of bit length
	) {
		// Given a list of code lengths and a maximum table size, make a set of
		// tables to decode that set of codes. Return Z_OK on success,
		// Z_BUF_ERROR
		// if the given code set is incomplete (the tables are still built in
		// this
		// case), Z_DATA_ERROR if the input is invalid (an over-subscribed set
		// of
		// lengths), or Z_MEM_ERROR if not enough memory.

		let a; // counter for codes of length k
		let f; // i repeats in table every f entries
		let g; // maximum code length
		let h; // table level
		let i; // counter, current code
		let j; // counter
		let k; // number of bits in current code
		let l; // bits per table (returned in m)
		let mask; // (1 << w) - 1, to avoid cc -O bug on HP
		let p; // pointer into c[], b[], or v[]
		let q; // points to current table
		let w; // bits before this table == (l * h)
		let xp; // pointer into x
		let y; // number of dummy codes added
		let z; // number of entries in current table

		// Generate counts for each bit length

		p = 0;
		i = n;
		do {
			c[b[bindex + p]]++;
			p++;
			i--; // assume all entries <= BMAX
		} while (i !== 0);

		if (c[0] == n) { // null input--all zero length codes
			t[0] = -1;
			m[0] = 0;
			return Z_OK;
		}

		// Find minimum and maximum length, bound *m by those
		l = m[0];
		for (j = 1; j <= BMAX; j++)
			if (c[j] !== 0)
				break;
		k = j; // minimum code length
		if (l < j) {
			l = j;
		}
		for (i = BMAX; i !== 0; i--) {
			if (c[i] !== 0)
				break;
		}
		g = i; // maximum code length
		if (l > i) {
			l = i;
		}
		m[0] = l;

		// Adjust last length count to fill out codes, if needed
		for (y = 1 << j; j < i; j++, y <<= 1) {
			if ((y -= c[j]) < 0) {
				return Z_DATA_ERROR;
			}
		}
		if ((y -= c[i]) < 0) {
			return Z_DATA_ERROR;
		}
		c[i] += y;

		// Generate starting offsets into the value table for each length
		x[1] = j = 0;
		p = 1;
		xp = 2;
		while (--i !== 0) { // note that i == g from above
			x[xp] = (j += c[p]);
			xp++;
			p++;
		}

		// Make a table of values in order of bit lengths
		i = 0;
		p = 0;
		do {
			if ((j = b[bindex + p]) !== 0) {
				v[x[j]++] = i;
			}
			p++;
		} while (++i < n);
		n = x[g]; // set n to length of v

		// Generate the Huffman codes and for each, make the table entries
		x[0] = i = 0; // first Huffman code is zero
		p = 0; // grab values in bit order
		h = -1; // no tables yet--level -1
		w = -l; // bits decoded == (l * h)
		u[0] = 0; // just to keep compilers happy
		q = 0; // ditto
		z = 0; // ditto

		// go through the bit lengths (k already is bits in shortest code)
		for (; k <= g; k++) {
			a = c[k];
			while (a-- !== 0) {
				// here i is the Huffman code of length k bits for value *p
				// make tables up to required level
				while (k > w + l) {
					h++;
					w += l; // previous table always l bits
					// compute minimum size table less than or equal to l bits
					z = g - w;
					z = (z > l) ? l : z; // table size upper limit
					if ((f = 1 << (j = k - w)) > a + 1) { // try a k-w bit table
						// too few codes for
						// k-w bit table
						f -= a + 1; // deduct codes from patterns left
						xp = k;
						if (j < z) {
							while (++j < z) { // try smaller tables up to z bits
								if ((f <<= 1) <= c[++xp])
									break; // enough codes to use up j bits
								f -= c[xp]; // else deduct codes from patterns
							}
						}
					}
					z = 1 << j; // table entries for j-bit table

					// allocate new table
					if (hn[0] + z > MANY) { // (note: doesn't matter for fixed)
						return Z_DATA_ERROR; // overflow of MANY
					}
					u[h] = q = /* hp+ */hn[0]; // DEBUG
					hn[0] += z;

					// connect to last table, if there is one
					if (h !== 0) {
						x[h] = i; // save pattern for backing up
						r[0] = /* (byte) */j; // bits in this table
						r[1] = /* (byte) */l; // bits to dump before this table
						j = i >>> (w - l);
						r[2] = /* (int) */(q - u[h - 1] - j); // offset to this table
						hp.set(r, (u[h - 1] + j) * 3);
						// to
						// last
						// table
					} else {
						t[0] = q; // first table is returned result
					}
				}

				// set up table entry in r
				r[1] = /* (byte) */(k - w);
				if (p >= n) {
					r[0] = 128 + 64; // out of values--invalid code
				} else if (v[p] < s) {
					r[0] = /* (byte) */(v[p] < 256 ? 0 : 32 + 64); // 256 is
					// end-of-block
					r[2] = v[p++]; // simple code is just the value
				} else {
					r[0] = /* (byte) */(e[v[p] - s] + 16 + 64); // non-simple--look
					// up in lists
					r[2] = d[v[p++] - s];
				}

				// fill code-like entries with r
				f = 1 << (k - w);
				for (j = i >>> w; j < z; j += f) {
					hp.set(r, (q + j) * 3);
				}

				// backwards increment the k-bit code i
				for (j = 1 << (k - 1); (i & j) !== 0; j >>>= 1) {
					i ^= j;
				}
				i ^= j;

				// backup over finished tables
				mask = (1 << w) - 1; // needed on HP, cc -O bug
				while ((i & mask) != x[h]) {
					h--; // don't need to update q
					w -= l;
					mask = (1 << w) - 1;
				}
			}
		}
		// Return Z_BUF_ERROR if we were given an incomplete table
		return y !== 0 && g != 1 ? Z_BUF_ERROR : Z_OK;
	}

	function initWorkArea(vsize) {
		let i;
		if (!hn) {
			hn = []; // []; //new Array(1);
			v = []; // new Array(vsize);
			c = new Int32Array(BMAX + 1); // new Array(BMAX + 1);
			r = []; // new Array(3);
			u = new Int32Array(BMAX); // new Array(BMAX);
			x = new Int32Array(BMAX + 1); // new Array(BMAX + 1);
		}
		if (v.length < vsize) {
			v = []; // new Array(vsize);
		}
		for (i = 0; i < vsize; i++) {
			v[i] = 0;
		}
		for (i = 0; i < BMAX + 1; i++) {
			c[i] = 0;
		}
		for (i = 0; i < 3; i++) {
			r[i] = 0;
		}
		// for(int i=0; i<BMAX; i++){u[i]=0;}
		u.set(c.subarray(0, BMAX), 0);
		// for(int i=0; i<BMAX+1; i++){x[i]=0;}
		x.set(c.subarray(0, BMAX + 1), 0);
	}

	that.inflate_trees_bits = function (c, // 19 code lengths
		bb, // bits tree desired/actual depth
		tb, // bits tree result
		hp, // space for trees
		z // for messages
	) {
		let result;
		initWorkArea(19);
		hn[0] = 0;
		result = huft_build(c, 0, 19, 19, null, null, tb, bb, hp, hn, v);

		if (result == Z_DATA_ERROR) {
			z.msg = "oversubscribed dynamic bit lengths tree";
		} else if (result == Z_BUF_ERROR || bb[0] === 0) {
			z.msg = "incomplete dynamic bit lengths tree";
			result = Z_DATA_ERROR;
		}
		return result;
	};

	that.inflate_trees_dynamic = function (nl, // number of literal/length codes
		nd, // number of distance codes
		c, // that many (total) code lengths
		bl, // literal desired/actual bit depth
		bd, // distance desired/actual bit depth
		tl, // literal/length tree result
		td, // distance tree result
		hp, // space for trees
		z // for messages
	) {
		let result;

		// build literal/length tree
		initWorkArea(288);
		hn[0] = 0;
		result = huft_build(c, 0, nl, 257, cplens, cplext, tl, bl, hp, hn, v);
		if (result != Z_OK || bl[0] === 0) {
			if (result == Z_DATA_ERROR) {
				z.msg = "oversubscribed literal/length tree";
			} else if (result != Z_MEM_ERROR) {
				z.msg = "incomplete literal/length tree";
				result = Z_DATA_ERROR;
			}
			return result;
		}

		// build distance tree
		initWorkArea(288);
		result = huft_build(c, nl, nd, 0, cpdist, cpdext, td, bd, hp, hn, v);

		if (result != Z_OK || (bd[0] === 0 && nl > 257)) {
			if (result == Z_DATA_ERROR) {
				z.msg = "oversubscribed distance tree";
			} else if (result == Z_BUF_ERROR) {
				z.msg = "incomplete distance tree";
				result = Z_DATA_ERROR;
			} else if (result != Z_MEM_ERROR) {
				z.msg = "empty distance tree with lengths";
				result = Z_DATA_ERROR;
			}
			return result;
		}

		return Z_OK;
	};

}

InfTree.inflate_trees_fixed = function (bl, // literal desired/actual bit depth
	bd, // distance desired/actual bit depth
	tl,// literal/length tree result
	td// distance tree result
) {
	bl[0] = fixed_bl;
	bd[0] = fixed_bd;
	tl[0] = fixed_tl;
	td[0] = fixed_td;
	return Z_OK;
};

// InfCodes

// waiting for "i:"=input,
// "o:"=output,
// "x:"=nothing
const START = 0; // x: set up for LEN
const LEN = 1; // i: get length/literal/eob next
const LENEXT = 2; // i: getting length extra (have base)
const DIST = 3; // i: get distance next
const DISTEXT = 4;// i: getting distance extra
const COPY = 5; // o: copying bytes in window, waiting
// for space
const LIT = 6; // o: got literal, waiting for output
// space
const WASH = 7; // o: got eob, possibly still output
// waiting
const END = 8; // x: got eob and all data flushed
const BADCODE = 9;// x: got error

function InfCodes() {
	const that = this;

	let mode; // current inflate_codes mode

	// mode dependent information
	let len = 0;

	let tree; // pointer into tree
	let tree_index = 0;
	let need = 0; // bits needed

	let lit = 0;

	// if EXT or COPY, where and how much
	let get = 0; // bits to get for extra
	let dist = 0; // distance back to copy from

	let lbits = 0; // ltree bits decoded per branch
	let dbits = 0; // dtree bits decoder per branch
	let ltree; // literal/length/eob tree
	let ltree_index = 0; // literal/length/eob tree
	let dtree; // distance tree
	let dtree_index = 0; // distance tree

	// Called with number of bytes left to write in window at least 258
	// (the maximum string length) and number of input bytes available
	// at least ten. The ten bytes are six bytes for the longest length/
	// distance pair plus four bytes for overloading the bit buffer.

	function inflate_fast(bl, bd, tl, tl_index, td, td_index, s, z) {
		let t; // temporary pointer
		let tp; // temporary pointer
		let tp_index; // temporary pointer
		let e; // extra bits or operation
		let b; // bit buffer
		let k; // bits in bit buffer
		let p; // input data pointer
		let n; // bytes available there
		let q; // output window write pointer
		let m; // bytes to end of window or read pointer
		let ml; // mask for literal/length tree
		let md; // mask for distance tree
		let c; // bytes to copy
		let d; // distance back to copy from
		let r; // copy source pointer

		let tp_index_t_3; // (tp_index+t)*3

		// load input, output, bit values
		p = z.next_in_index;
		n = z.avail_in;
		b = s.bitb;
		k = s.bitk;
		q = s.write;
		m = q < s.read ? s.read - q - 1 : s.end - q;

		// initialize masks
		ml = inflate_mask[bl];
		md = inflate_mask[bd];

		// do until not enough input or output space for fast loop
		do { // assume called with m >= 258 && n >= 10
			// get literal/length code
			while (k < (20)) { // max bits for literal/length code
				n--;
				b |= (z.read_byte(p++) & 0xff) << k;
				k += 8;
			}

			t = b & ml;
			tp = tl;
			tp_index = tl_index;
			tp_index_t_3 = (tp_index + t) * 3;
			if ((e = tp[tp_index_t_3]) === 0) {
				b >>= (tp[tp_index_t_3 + 1]);
				k -= (tp[tp_index_t_3 + 1]);

				s.window[q++] = /* (byte) */tp[tp_index_t_3 + 2];
				m--;
				continue;
			}
			do {

				b >>= (tp[tp_index_t_3 + 1]);
				k -= (tp[tp_index_t_3 + 1]);

				if ((e & 16) !== 0) {
					e &= 15;
					c = tp[tp_index_t_3 + 2] + (/* (int) */b & inflate_mask[e]);

					b >>= e;
					k -= e;

					// decode distance base of block to copy
					while (k < (15)) { // max bits for distance code
						n--;
						b |= (z.read_byte(p++) & 0xff) << k;
						k += 8;
					}

					t = b & md;
					tp = td;
					tp_index = td_index;
					tp_index_t_3 = (tp_index + t) * 3;
					e = tp[tp_index_t_3];

					do {

						b >>= (tp[tp_index_t_3 + 1]);
						k -= (tp[tp_index_t_3 + 1]);

						if ((e & 16) !== 0) {
							// get extra bits to add to distance base
							e &= 15;
							while (k < (e)) { // get extra bits (up to 13)
								n--;
								b |= (z.read_byte(p++) & 0xff) << k;
								k += 8;
							}

							d = tp[tp_index_t_3 + 2] + (b & inflate_mask[e]);

							b >>= (e);
							k -= (e);

							// do the copy
							m -= c;
							if (q >= d) { // offset before dest
								// just copy
								r = q - d;
								if (q - r > 0 && 2 > (q - r)) {
									s.window[q++] = s.window[r++]; // minimum
									// count is
									// three,
									s.window[q++] = s.window[r++]; // so unroll
									// loop a
									// little
									c -= 2;
								} else {
									s.window.set(s.window.subarray(r, r + 2), q);
									q += 2;
									r += 2;
									c -= 2;
								}
							} else { // else offset after destination
								r = q - d;
								do {
									r += s.end; // force pointer in window
								} while (r < 0); // covers invalid distances
								e = s.end - r;
								if (c > e) { // if source crosses,
									c -= e; // wrapped copy
									if (q - r > 0 && e > (q - r)) {
										do {
											s.window[q++] = s.window[r++];
										} while (--e !== 0);
									} else {
										s.window.set(s.window.subarray(r, r + e), q);
										q += e;
										r += e;
										e = 0;
									}
									r = 0; // copy rest from start of window
								}

							}

							// copy all or what's left
							if (q - r > 0 && c > (q - r)) {
								do {
									s.window[q++] = s.window[r++];
								} while (--c !== 0);
							} else {
								s.window.set(s.window.subarray(r, r + c), q);
								q += c;
								r += c;
								c = 0;
							}
							break;
						} else if ((e & 64) === 0) {
							t += tp[tp_index_t_3 + 2];
							t += (b & inflate_mask[e]);
							tp_index_t_3 = (tp_index + t) * 3;
							e = tp[tp_index_t_3];
						} else {
							z.msg = "invalid distance code";

							c = z.avail_in - n;
							c = (k >> 3) < c ? k >> 3 : c;
							n += c;
							p -= c;
							k -= c << 3;

							s.bitb = b;
							s.bitk = k;
							z.avail_in = n;
							z.total_in += p - z.next_in_index;
							z.next_in_index = p;
							s.write = q;

							return Z_DATA_ERROR;
						}
						// eslint-disable-next-line no-constant-condition
					} while (true);
					break;
				}

				if ((e & 64) === 0) {
					t += tp[tp_index_t_3 + 2];
					t += (b & inflate_mask[e]);
					tp_index_t_3 = (tp_index + t) * 3;
					if ((e = tp[tp_index_t_3]) === 0) {

						b >>= (tp[tp_index_t_3 + 1]);
						k -= (tp[tp_index_t_3 + 1]);

						s.window[q++] = /* (byte) */tp[tp_index_t_3 + 2];
						m--;
						break;
					}
				} else if ((e & 32) !== 0) {

					c = z.avail_in - n;
					c = (k >> 3) < c ? k >> 3 : c;
					n += c;
					p -= c;
					k -= c << 3;

					s.bitb = b;
					s.bitk = k;
					z.avail_in = n;
					z.total_in += p - z.next_in_index;
					z.next_in_index = p;
					s.write = q;

					return Z_STREAM_END;
				} else {
					z.msg = "invalid literal/length code";

					c = z.avail_in - n;
					c = (k >> 3) < c ? k >> 3 : c;
					n += c;
					p -= c;
					k -= c << 3;

					s.bitb = b;
					s.bitk = k;
					z.avail_in = n;
					z.total_in += p - z.next_in_index;
					z.next_in_index = p;
					s.write = q;

					return Z_DATA_ERROR;
				}
				// eslint-disable-next-line no-constant-condition
			} while (true);
		} while (m >= 258 && n >= 10);

		// not enough input or output--restore pointers and return
		c = z.avail_in - n;
		c = (k >> 3) < c ? k >> 3 : c;
		n += c;
		p -= c;
		k -= c << 3;

		s.bitb = b;
		s.bitk = k;
		z.avail_in = n;
		z.total_in += p - z.next_in_index;
		z.next_in_index = p;
		s.write = q;

		return Z_OK;
	}

	that.init = function (bl, bd, tl, tl_index, td, td_index) {
		mode = START;
		lbits = /* (byte) */bl;
		dbits = /* (byte) */bd;
		ltree = tl;
		ltree_index = tl_index;
		dtree = td;
		dtree_index = td_index;
		tree = null;
	};

	that.proc = function (s, z, r) {
		let j; // temporary storage
		let tindex; // temporary pointer
		let e; // extra bits or operation
		let b = 0; // bit buffer
		let k = 0; // bits in bit buffer
		let p = 0; // input data pointer
		let n; // bytes available there
		let q; // output window write pointer
		let m; // bytes to end of window or read pointer
		let f; // pointer to copy strings from

		// copy input/output information to locals (UPDATE macro restores)
		p = z.next_in_index;
		n = z.avail_in;
		b = s.bitb;
		k = s.bitk;
		q = s.write;
		m = q < s.read ? s.read - q - 1 : s.end - q;

		// process input and output based on current state
		// eslint-disable-next-line no-constant-condition
		while (true) {
			switch (mode) {
				// waiting for "i:"=input, "o:"=output, "x:"=nothing
				case START: // x: set up for LEN
					if (m >= 258 && n >= 10) {

						s.bitb = b;
						s.bitk = k;
						z.avail_in = n;
						z.total_in += p - z.next_in_index;
						z.next_in_index = p;
						s.write = q;
						r = inflate_fast(lbits, dbits, ltree, ltree_index, dtree, dtree_index, s, z);

						p = z.next_in_index;
						n = z.avail_in;
						b = s.bitb;
						k = s.bitk;
						q = s.write;
						m = q < s.read ? s.read - q - 1 : s.end - q;

						if (r != Z_OK) {
							mode = r == Z_STREAM_END ? WASH : BADCODE;
							break;
						}
					}
					need = lbits;
					tree = ltree;
					tree_index = ltree_index;

					mode = LEN;
				/* falls through */
				case LEN: // i: get length/literal/eob next
					j = need;

					while (k < (j)) {
						if (n !== 0)
							r = Z_OK;
						else {

							s.bitb = b;
							s.bitk = k;
							z.avail_in = n;
							z.total_in += p - z.next_in_index;
							z.next_in_index = p;
							s.write = q;
							return s.inflate_flush(z, r);
						}
						n--;
						b |= (z.read_byte(p++) & 0xff) << k;
						k += 8;
					}

					tindex = (tree_index + (b & inflate_mask[j])) * 3;

					b >>>= (tree[tindex + 1]);
					k -= (tree[tindex + 1]);

					e = tree[tindex];

					if (e === 0) { // literal
						lit = tree[tindex + 2];
						mode = LIT;
						break;
					}
					if ((e & 16) !== 0) { // length
						get = e & 15;
						len = tree[tindex + 2];
						mode = LENEXT;
						break;
					}
					if ((e & 64) === 0) { // next table
						need = e;
						tree_index = tindex / 3 + tree[tindex + 2];
						break;
					}
					if ((e & 32) !== 0) { // end of block
						mode = WASH;
						break;
					}
					mode = BADCODE; // invalid code
					z.msg = "invalid literal/length code";
					r = Z_DATA_ERROR;

					s.bitb = b;
					s.bitk = k;
					z.avail_in = n;
					z.total_in += p - z.next_in_index;
					z.next_in_index = p;
					s.write = q;
					return s.inflate_flush(z, r);

				case LENEXT: // i: getting length extra (have base)
					j = get;

					while (k < (j)) {
						if (n !== 0)
							r = Z_OK;
						else {

							s.bitb = b;
							s.bitk = k;
							z.avail_in = n;
							z.total_in += p - z.next_in_index;
							z.next_in_index = p;
							s.write = q;
							return s.inflate_flush(z, r);
						}
						n--;
						b |= (z.read_byte(p++) & 0xff) << k;
						k += 8;
					}

					len += (b & inflate_mask[j]);

					b >>= j;
					k -= j;

					need = dbits;
					tree = dtree;
					tree_index = dtree_index;
					mode = DIST;
				/* falls through */
				case DIST: // i: get distance next
					j = need;

					while (k < (j)) {
						if (n !== 0)
							r = Z_OK;
						else {

							s.bitb = b;
							s.bitk = k;
							z.avail_in = n;
							z.total_in += p - z.next_in_index;
							z.next_in_index = p;
							s.write = q;
							return s.inflate_flush(z, r);
						}
						n--;
						b |= (z.read_byte(p++) & 0xff) << k;
						k += 8;
					}

					tindex = (tree_index + (b & inflate_mask[j])) * 3;

					b >>= tree[tindex + 1];
					k -= tree[tindex + 1];

					e = (tree[tindex]);
					if ((e & 16) !== 0) { // distance
						get = e & 15;
						dist = tree[tindex + 2];
						mode = DISTEXT;
						break;
					}
					if ((e & 64) === 0) { // next table
						need = e;
						tree_index = tindex / 3 + tree[tindex + 2];
						break;
					}
					mode = BADCODE; // invalid code
					z.msg = "invalid distance code";
					r = Z_DATA_ERROR;

					s.bitb = b;
					s.bitk = k;
					z.avail_in = n;
					z.total_in += p - z.next_in_index;
					z.next_in_index = p;
					s.write = q;
					return s.inflate_flush(z, r);

				case DISTEXT: // i: getting distance extra
					j = get;

					while (k < (j)) {
						if (n !== 0)
							r = Z_OK;
						else {

							s.bitb = b;
							s.bitk = k;
							z.avail_in = n;
							z.total_in += p - z.next_in_index;
							z.next_in_index = p;
							s.write = q;
							return s.inflate_flush(z, r);
						}
						n--;
						b |= (z.read_byte(p++) & 0xff) << k;
						k += 8;
					}

					dist += (b & inflate_mask[j]);

					b >>= j;
					k -= j;

					mode = COPY;
				/* falls through */
				case COPY: // o: copying bytes in window, waiting for space
					f = q - dist;
					while (f < 0) { // modulo window size-"while" instead
						f += s.end; // of "if" handles invalid distances
					}
					while (len !== 0) {

						if (m === 0) {
							if (q == s.end && s.read !== 0) {
								q = 0;
								m = q < s.read ? s.read - q - 1 : s.end - q;
							}
							if (m === 0) {
								s.write = q;
								r = s.inflate_flush(z, r);
								q = s.write;
								m = q < s.read ? s.read - q - 1 : s.end - q;

								if (q == s.end && s.read !== 0) {
									q = 0;
									m = q < s.read ? s.read - q - 1 : s.end - q;
								}

								if (m === 0) {
									s.bitb = b;
									s.bitk = k;
									z.avail_in = n;
									z.total_in += p - z.next_in_index;
									z.next_in_index = p;
									s.write = q;
									return s.inflate_flush(z, r);
								}
							}
						}

						s.window[q++] = s.window[f++];
						m--;

						if (f == s.end)
							f = 0;
						len--;
					}
					mode = START;
					break;
				case LIT: // o: got literal, waiting for output space
					if (m === 0) {
						if (q == s.end && s.read !== 0) {
							q = 0;
							m = q < s.read ? s.read - q - 1 : s.end - q;
						}
						if (m === 0) {
							s.write = q;
							r = s.inflate_flush(z, r);
							q = s.write;
							m = q < s.read ? s.read - q - 1 : s.end - q;

							if (q == s.end && s.read !== 0) {
								q = 0;
								m = q < s.read ? s.read - q - 1 : s.end - q;
							}
							if (m === 0) {
								s.bitb = b;
								s.bitk = k;
								z.avail_in = n;
								z.total_in += p - z.next_in_index;
								z.next_in_index = p;
								s.write = q;
								return s.inflate_flush(z, r);
							}
						}
					}
					r = Z_OK;

					s.window[q++] = /* (byte) */lit;
					m--;

					mode = START;
					break;
				case WASH: // o: got eob, possibly more output
					if (k > 7) { // return unused byte, if any
						k -= 8;
						n++;
						p--; // can always return one
					}

					s.write = q;
					r = s.inflate_flush(z, r);
					q = s.write;
					m = q < s.read ? s.read - q - 1 : s.end - q;

					if (s.read != s.write) {
						s.bitb = b;
						s.bitk = k;
						z.avail_in = n;
						z.total_in += p - z.next_in_index;
						z.next_in_index = p;
						s.write = q;
						return s.inflate_flush(z, r);
					}
					mode = END;
				/* falls through */
				case END:
					r = Z_STREAM_END;
					s.bitb = b;
					s.bitk = k;
					z.avail_in = n;
					z.total_in += p - z.next_in_index;
					z.next_in_index = p;
					s.write = q;
					return s.inflate_flush(z, r);

				case BADCODE: // x: got error

					r = Z_DATA_ERROR;

					s.bitb = b;
					s.bitk = k;
					z.avail_in = n;
					z.total_in += p - z.next_in_index;
					z.next_in_index = p;
					s.write = q;
					return s.inflate_flush(z, r);

				default:
					r = Z_STREAM_ERROR;

					s.bitb = b;
					s.bitk = k;
					z.avail_in = n;
					z.total_in += p - z.next_in_index;
					z.next_in_index = p;
					s.write = q;
					return s.inflate_flush(z, r);
			}
		}
	};

	that.free = function () {
		// ZFREE(z, c);
	};

}

// InfBlocks

// Table for deflate from PKZIP's appnote.txt.
const border = [ // Order of the bit length code lengths
	16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];

const TYPE = 0; // get type bits (3, including end bit)
const LENS = 1; // get lengths for stored
const STORED = 2;// processing stored block
const TABLE = 3; // get table lengths
const BTREE = 4; // get bit lengths tree for a dynamic
// block
const DTREE = 5; // get length, distance trees for a
// dynamic block
const CODES = 6; // processing fixed or dynamic block
const DRY = 7; // output remaining window bytes
const DONELOCKS = 8; // finished last block, done
const BADBLOCKS = 9; // ot a data error--stuck here

function InfBlocks(z, w) {
	const that = this;

	let mode = TYPE; // current inflate_block mode

	let left = 0; // if STORED, bytes left to copy

	let table = 0; // table lengths (14 bits)
	let index = 0; // index into blens (or border)
	let blens; // bit lengths of codes
	const bb = [0]; // bit length tree depth
	const tb = [0]; // bit length decoding tree

	const codes = new InfCodes(); // if CODES, current state

	let last = 0; // true if this block is the last block

	let hufts = new Int32Array(MANY * 3); // single malloc for tree space
	const check = 0; // check on output
	const inftree = new InfTree();

	that.bitk = 0; // bits in bit buffer
	that.bitb = 0; // bit buffer
	that.window = new Uint8Array(w); // sliding window
	that.end = w; // one byte after sliding window
	that.read = 0; // window read pointer
	that.write = 0; // window write pointer

	that.reset = function (z, c) {
		if (c)
			c[0] = check;
		// if (mode == BTREE || mode == DTREE) {
		// }
		if (mode == CODES) {
			codes.free(z);
		}
		mode = TYPE;
		that.bitk = 0;
		that.bitb = 0;
		that.read = that.write = 0;
	};

	that.reset(z, null);

	// copy as much as possible from the sliding window to the output area
	that.inflate_flush = function (z, r) {
		let n;
		let p;
		let q;

		// local copies of source and destination pointers
		p = z.next_out_index;
		q = that.read;

		// compute number of bytes to copy as far as end of window
		n = /* (int) */((q <= that.write ? that.write : that.end) - q);
		if (n > z.avail_out)
			n = z.avail_out;
		if (n !== 0 && r == Z_BUF_ERROR)
			r = Z_OK;

		// update counters
		z.avail_out -= n;
		z.total_out += n;

		// copy as far as end of window
		z.next_out.set(that.window.subarray(q, q + n), p);
		p += n;
		q += n;

		// see if more to copy at beginning of window
		if (q == that.end) {
			// wrap pointers
			q = 0;
			if (that.write == that.end)
				that.write = 0;

			// compute bytes to copy
			n = that.write - q;
			if (n > z.avail_out)
				n = z.avail_out;
			if (n !== 0 && r == Z_BUF_ERROR)
				r = Z_OK;

			// update counters
			z.avail_out -= n;
			z.total_out += n;

			// copy
			z.next_out.set(that.window.subarray(q, q + n), p);
			p += n;
			q += n;
		}

		// update pointers
		z.next_out_index = p;
		that.read = q;

		// done
		return r;
	};

	that.proc = function (z, r) {
		let t; // temporary storage
		let b; // bit buffer
		let k; // bits in bit buffer
		let p; // input data pointer
		let n; // bytes available there
		let q; // output window write pointer
		let m; // bytes to end of window or read pointer

		let i;

		// copy input/output information to locals (UPDATE macro restores)
		// {
		p = z.next_in_index;
		n = z.avail_in;
		b = that.bitb;
		k = that.bitk;
		// }
		// {
		q = that.write;
		m = /* (int) */(q < that.read ? that.read - q - 1 : that.end - q);
		// }

		// process input based on current state
		// DEBUG dtree
		// eslint-disable-next-line no-constant-condition
		while (true) {
			let bl, bd, tl, td, bl_, bd_, tl_, td_;
			switch (mode) {
				case TYPE:

					while (k < (3)) {
						if (n !== 0) {
							r = Z_OK;
						} else {
							that.bitb = b;
							that.bitk = k;
							z.avail_in = n;
							z.total_in += p - z.next_in_index;
							z.next_in_index = p;
							that.write = q;
							return that.inflate_flush(z, r);
						}
						n--;
						b |= (z.read_byte(p++) & 0xff) << k;
						k += 8;
					}
					t = /* (int) */(b & 7);
					last = t & 1;

					switch (t >>> 1) {
						case 0: // stored
							// {
							b >>>= (3);
							k -= (3);
							// }
							t = k & 7; // go to byte boundary

							// {
							b >>>= (t);
							k -= (t);
							// }
							mode = LENS; // get length of stored block
							break;
						case 1: // fixed
							// {
							bl = []; // new Array(1);
							bd = []; // new Array(1);
							tl = [[]]; // new Array(1);
							td = [[]]; // new Array(1);

							InfTree.inflate_trees_fixed(bl, bd, tl, td);
							codes.init(bl[0], bd[0], tl[0], 0, td[0], 0);
							// }

							// {
							b >>>= (3);
							k -= (3);
							// }

							mode = CODES;
							break;
						case 2: // dynamic

							// {
							b >>>= (3);
							k -= (3);
							// }

							mode = TABLE;
							break;
						case 3: // illegal

							// {
							b >>>= (3);
							k -= (3);
							// }
							mode = BADBLOCKS;
							z.msg = "invalid block type";
							r = Z_DATA_ERROR;

							that.bitb = b;
							that.bitk = k;
							z.avail_in = n;
							z.total_in += p - z.next_in_index;
							z.next_in_index = p;
							that.write = q;
							return that.inflate_flush(z, r);
					}
					break;
				case LENS:

					while (k < (32)) {
						if (n !== 0) {
							r = Z_OK;
						} else {
							that.bitb = b;
							that.bitk = k;
							z.avail_in = n;
							z.total_in += p - z.next_in_index;
							z.next_in_index = p;
							that.write = q;
							return that.inflate_flush(z, r);
						}
						n--;
						b |= (z.read_byte(p++) & 0xff) << k;
						k += 8;
					}

					if ((((~b) >>> 16) & 0xffff) != (b & 0xffff)) {
						mode = BADBLOCKS;
						z.msg = "invalid stored block lengths";
						r = Z_DATA_ERROR;

						that.bitb = b;
						that.bitk = k;
						z.avail_in = n;
						z.total_in += p - z.next_in_index;
						z.next_in_index = p;
						that.write = q;
						return that.inflate_flush(z, r);
					}
					left = (b & 0xffff);
					b = k = 0; // dump bits
					mode = left !== 0 ? STORED : (last !== 0 ? DRY : TYPE);
					break;
				case STORED:
					if (n === 0) {
						that.bitb = b;
						that.bitk = k;
						z.avail_in = n;
						z.total_in += p - z.next_in_index;
						z.next_in_index = p;
						that.write = q;
						return that.inflate_flush(z, r);
					}

					if (m === 0) {
						if (q == that.end && that.read !== 0) {
							q = 0;
							m = /* (int) */(q < that.read ? that.read - q - 1 : that.end - q);
						}
						if (m === 0) {
							that.write = q;
							r = that.inflate_flush(z, r);
							q = that.write;
							m = /* (int) */(q < that.read ? that.read - q - 1 : that.end - q);
							if (q == that.end && that.read !== 0) {
								q = 0;
								m = /* (int) */(q < that.read ? that.read - q - 1 : that.end - q);
							}
							if (m === 0) {
								that.bitb = b;
								that.bitk = k;
								z.avail_in = n;
								z.total_in += p - z.next_in_index;
								z.next_in_index = p;
								that.write = q;
								return that.inflate_flush(z, r);
							}
						}
					}
					r = Z_OK;

					t = left;
					if (t > n)
						t = n;
					if (t > m)
						t = m;
					that.window.set(z.read_buf(p, t), q);
					p += t;
					n -= t;
					q += t;
					m -= t;
					if ((left -= t) !== 0)
						break;
					mode = last !== 0 ? DRY : TYPE;
					break;
				case TABLE:

					while (k < (14)) {
						if (n !== 0) {
							r = Z_OK;
						} else {
							that.bitb = b;
							that.bitk = k;
							z.avail_in = n;
							z.total_in += p - z.next_in_index;
							z.next_in_index = p;
							that.write = q;
							return that.inflate_flush(z, r);
						}

						n--;
						b |= (z.read_byte(p++) & 0xff) << k;
						k += 8;
					}

					table = t = (b & 0x3fff);
					if ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29) {
						mode = BADBLOCKS;
						z.msg = "too many length or distance symbols";
						r = Z_DATA_ERROR;

						that.bitb = b;
						that.bitk = k;
						z.avail_in = n;
						z.total_in += p - z.next_in_index;
						z.next_in_index = p;
						that.write = q;
						return that.inflate_flush(z, r);
					}
					t = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);
					if (!blens || blens.length < t) {
						blens = []; // new Array(t);
					} else {
						for (i = 0; i < t; i++) {
							blens[i] = 0;
						}
					}

					// {
					b >>>= (14);
					k -= (14);
					// }

					index = 0;
					mode = BTREE;
				/* falls through */
				case BTREE:
					while (index < 4 + (table >>> 10)) {
						while (k < (3)) {
							if (n !== 0) {
								r = Z_OK;
							} else {
								that.bitb = b;
								that.bitk = k;
								z.avail_in = n;
								z.total_in += p - z.next_in_index;
								z.next_in_index = p;
								that.write = q;
								return that.inflate_flush(z, r);
							}
							n--;
							b |= (z.read_byte(p++) & 0xff) << k;
							k += 8;
						}

						blens[border[index++]] = b & 7;

						// {
						b >>>= (3);
						k -= (3);
						// }
					}

					while (index < 19) {
						blens[border[index++]] = 0;
					}

					bb[0] = 7;
					t = inftree.inflate_trees_bits(blens, bb, tb, hufts, z);
					if (t != Z_OK) {
						r = t;
						if (r == Z_DATA_ERROR) {
							blens = null;
							mode = BADBLOCKS;
						}

						that.bitb = b;
						that.bitk = k;
						z.avail_in = n;
						z.total_in += p - z.next_in_index;
						z.next_in_index = p;
						that.write = q;
						return that.inflate_flush(z, r);
					}

					index = 0;
					mode = DTREE;
				/* falls through */
				case DTREE:
					// eslint-disable-next-line no-constant-condition
					while (true) {
						t = table;
						if (index >= 258 + (t & 0x1f) + ((t >> 5) & 0x1f)) {
							break;
						}

						let j, c;

						t = bb[0];

						while (k < (t)) {
							if (n !== 0) {
								r = Z_OK;
							} else {
								that.bitb = b;
								that.bitk = k;
								z.avail_in = n;
								z.total_in += p - z.next_in_index;
								z.next_in_index = p;
								that.write = q;
								return that.inflate_flush(z, r);
							}
							n--;
							b |= (z.read_byte(p++) & 0xff) << k;
							k += 8;
						}

						// if (tb[0] == -1) {
						// System.err.println("null...");
						// }

						t = hufts[(tb[0] + (b & inflate_mask[t])) * 3 + 1];
						c = hufts[(tb[0] + (b & inflate_mask[t])) * 3 + 2];

						if (c < 16) {
							b >>>= (t);
							k -= (t);
							blens[index++] = c;
						} else { // c == 16..18
							i = c == 18 ? 7 : c - 14;
							j = c == 18 ? 11 : 3;

							while (k < (t + i)) {
								if (n !== 0) {
									r = Z_OK;
								} else {
									that.bitb = b;
									that.bitk = k;
									z.avail_in = n;
									z.total_in += p - z.next_in_index;
									z.next_in_index = p;
									that.write = q;
									return that.inflate_flush(z, r);
								}
								n--;
								b |= (z.read_byte(p++) & 0xff) << k;
								k += 8;
							}

							b >>>= (t);
							k -= (t);

							j += (b & inflate_mask[i]);

							b >>>= (i);
							k -= (i);

							i = index;
							t = table;
							if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {
								blens = null;
								mode = BADBLOCKS;
								z.msg = "invalid bit length repeat";
								r = Z_DATA_ERROR;

								that.bitb = b;
								that.bitk = k;
								z.avail_in = n;
								z.total_in += p - z.next_in_index;
								z.next_in_index = p;
								that.write = q;
								return that.inflate_flush(z, r);
							}

							c = c == 16 ? blens[i - 1] : 0;
							do {
								blens[i++] = c;
							} while (--j !== 0);
							index = i;
						}
					}

					tb[0] = -1;
					// {
					bl_ = []; // new Array(1);
					bd_ = []; // new Array(1);
					tl_ = []; // new Array(1);
					td_ = []; // new Array(1);
					bl_[0] = 9; // must be <= 9 for lookahead assumptions
					bd_[0] = 6; // must be <= 9 for lookahead assumptions

					t = table;
					t = inftree.inflate_trees_dynamic(257 + (t & 0x1f), 1 + ((t >> 5) & 0x1f), blens, bl_, bd_, tl_, td_, hufts, z);

					if (t != Z_OK) {
						if (t == Z_DATA_ERROR) {
							blens = null;
							mode = BADBLOCKS;
						}
						r = t;

						that.bitb = b;
						that.bitk = k;
						z.avail_in = n;
						z.total_in += p - z.next_in_index;
						z.next_in_index = p;
						that.write = q;
						return that.inflate_flush(z, r);
					}
					codes.init(bl_[0], bd_[0], hufts, tl_[0], hufts, td_[0]);
					// }
					mode = CODES;
				/* falls through */
				case CODES:
					that.bitb = b;
					that.bitk = k;
					z.avail_in = n;
					z.total_in += p - z.next_in_index;
					z.next_in_index = p;
					that.write = q;

					if ((r = codes.proc(that, z, r)) != Z_STREAM_END) {
						return that.inflate_flush(z, r);
					}
					r = Z_OK;
					codes.free(z);

					p = z.next_in_index;
					n = z.avail_in;
					b = that.bitb;
					k = that.bitk;
					q = that.write;
					m = /* (int) */(q < that.read ? that.read - q - 1 : that.end - q);

					if (last === 0) {
						mode = TYPE;
						break;
					}
					mode = DRY;
				/* falls through */
				case DRY:
					that.write = q;
					r = that.inflate_flush(z, r);
					q = that.write;
					m = /* (int) */(q < that.read ? that.read - q - 1 : that.end - q);
					if (that.read != that.write) {
						that.bitb = b;
						that.bitk = k;
						z.avail_in = n;
						z.total_in += p - z.next_in_index;
						z.next_in_index = p;
						that.write = q;
						return that.inflate_flush(z, r);
					}
					mode = DONELOCKS;
				/* falls through */
				case DONELOCKS:
					r = Z_STREAM_END;

					that.bitb = b;
					that.bitk = k;
					z.avail_in = n;
					z.total_in += p - z.next_in_index;
					z.next_in_index = p;
					that.write = q;
					return that.inflate_flush(z, r);
				case BADBLOCKS:
					r = Z_DATA_ERROR;

					that.bitb = b;
					that.bitk = k;
					z.avail_in = n;
					z.total_in += p - z.next_in_index;
					z.next_in_index = p;
					that.write = q;
					return that.inflate_flush(z, r);

				default:
					r = Z_STREAM_ERROR;

					that.bitb = b;
					that.bitk = k;
					z.avail_in = n;
					z.total_in += p - z.next_in_index;
					z.next_in_index = p;
					that.write = q;
					return that.inflate_flush(z, r);
			}
		}
	};

	that.free = function (z) {
		that.reset(z, null);
		that.window = null;
		hufts = null;
		// ZFREE(z, s);
	};

	that.set_dictionary = function (d, start, n) {
		that.window.set(d.subarray(start, start + n), 0);
		that.read = that.write = n;
	};

	// Returns true if inflate is currently at the end of a block generated
	// by Z_SYNC_FLUSH or Z_FULL_FLUSH.
	that.sync_point = function () {
		return mode == LENS ? 1 : 0;
	};

}

// Inflate

// preset dictionary flag in zlib header
const PRESET_DICT = 0x20;

const Z_DEFLATED = 8;

const METHOD = 0; // waiting for method byte
const FLAG = 1; // waiting for flag byte
const DICT4 = 2; // four dictionary check bytes to go
const DICT3 = 3; // three dictionary check bytes to go
const DICT2 = 4; // two dictionary check bytes to go
const DICT1 = 5; // one dictionary check byte to go
const DICT0 = 6; // waiting for inflateSetDictionary
const BLOCKS = 7; // decompressing blocks
const DONE = 12; // finished check, done
const BAD = 13; // got an error--stay here

const mark = [0, 0, 0xff, 0xff];

function Inflate() {
	const that = this;

	that.mode = 0; // current inflate mode

	// mode dependent information
	that.method = 0; // if FLAGS, method byte

	// if CHECK, check values to compare
	that.was = [0]; // new Array(1); // computed check value
	that.need = 0; // stream check value

	// if BAD, inflateSync's marker bytes count
	that.marker = 0;

	// mode independent information
	that.wbits = 0; // log2(window size) (8..15, defaults to 15)

	// this.blocks; // current inflate_blocks state

	function inflateReset(z) {
		if (!z || !z.istate)
			return Z_STREAM_ERROR;

		z.total_in = z.total_out = 0;
		z.msg = null;
		z.istate.mode = BLOCKS;
		z.istate.blocks.reset(z, null);
		return Z_OK;
	}

	that.inflateEnd = function (z) {
		if (that.blocks)
			that.blocks.free(z);
		that.blocks = null;
		// ZFREE(z, z->state);
		return Z_OK;
	};

	that.inflateInit = function (z, w) {
		z.msg = null;
		that.blocks = null;

		// set window size
		if (w < 8 || w > 15) {
			that.inflateEnd(z);
			return Z_STREAM_ERROR;
		}
		that.wbits = w;

		z.istate.blocks = new InfBlocks(z, 1 << w);

		// reset state
		inflateReset(z);
		return Z_OK;
	};

	that.inflate = function (z, f) {
		let r;
		let b;

		if (!z || !z.istate || !z.next_in)
			return Z_STREAM_ERROR;
		const istate = z.istate;
		f = f == Z_FINISH ? Z_BUF_ERROR : Z_OK;
		r = Z_BUF_ERROR;
		// eslint-disable-next-line no-constant-condition
		while (true) {
			switch (istate.mode) {
				case METHOD:

					if (z.avail_in === 0)
						return r;
					r = f;

					z.avail_in--;
					z.total_in++;
					if (((istate.method = z.read_byte(z.next_in_index++)) & 0xf) != Z_DEFLATED) {
						istate.mode = BAD;
						z.msg = "unknown compression method";
						istate.marker = 5; // can't try inflateSync
						break;
					}
					if ((istate.method >> 4) + 8 > istate.wbits) {
						istate.mode = BAD;
						z.msg = "invalid window size";
						istate.marker = 5; // can't try inflateSync
						break;
					}
					istate.mode = FLAG;
				/* falls through */
				case FLAG:

					if (z.avail_in === 0)
						return r;
					r = f;

					z.avail_in--;
					z.total_in++;
					b = (z.read_byte(z.next_in_index++)) & 0xff;

					if ((((istate.method << 8) + b) % 31) !== 0) {
						istate.mode = BAD;
						z.msg = "incorrect header check";
						istate.marker = 5; // can't try inflateSync
						break;
					}

					if ((b & PRESET_DICT) === 0) {
						istate.mode = BLOCKS;
						break;
					}
					istate.mode = DICT4;
				/* falls through */
				case DICT4:

					if (z.avail_in === 0)
						return r;
					r = f;

					z.avail_in--;
					z.total_in++;
					istate.need = ((z.read_byte(z.next_in_index++) & 0xff) << 24) & 0xff000000;
					istate.mode = DICT3;
				/* falls through */
				case DICT3:

					if (z.avail_in === 0)
						return r;
					r = f;

					z.avail_in--;
					z.total_in++;
					istate.need += ((z.read_byte(z.next_in_index++) & 0xff) << 16) & 0xff0000;
					istate.mode = DICT2;
				/* falls through */
				case DICT2:

					if (z.avail_in === 0)
						return r;
					r = f;

					z.avail_in--;
					z.total_in++;
					istate.need += ((z.read_byte(z.next_in_index++) & 0xff) << 8) & 0xff00;
					istate.mode = DICT1;
				/* falls through */
				case DICT1:

					if (z.avail_in === 0)
						return r;
					r = f;

					z.avail_in--;
					z.total_in++;
					istate.need += (z.read_byte(z.next_in_index++) & 0xff);
					istate.mode = DICT0;
					return Z_NEED_DICT;
				case DICT0:
					istate.mode = BAD;
					z.msg = "need dictionary";
					istate.marker = 0; // can try inflateSync
					return Z_STREAM_ERROR;
				case BLOCKS:

					r = istate.blocks.proc(z, r);
					if (r == Z_DATA_ERROR) {
						istate.mode = BAD;
						istate.marker = 0; // can try inflateSync
						break;
					}
					if (r == Z_OK) {
						r = f;
					}
					if (r != Z_STREAM_END) {
						return r;
					}
					r = f;
					istate.blocks.reset(z, istate.was);
					istate.mode = DONE;
				/* falls through */
				case DONE:
					return Z_STREAM_END;
				case BAD:
					return Z_DATA_ERROR;
				default:
					return Z_STREAM_ERROR;
			}
		}
	};

	that.inflateSetDictionary = function (z, dictionary, dictLength) {
		let index = 0, length = dictLength;
		if (!z || !z.istate || z.istate.mode != DICT0)
			return Z_STREAM_ERROR;
		const istate = z.istate;
		if (length >= (1 << istate.wbits)) {
			length = (1 << istate.wbits) - 1;
			index = dictLength - length;
		}
		istate.blocks.set_dictionary(dictionary, index, length);
		istate.mode = BLOCKS;
		return Z_OK;
	};

	that.inflateSync = function (z) {
		let n; // number of bytes to look at
		let p; // pointer to bytes
		let m; // number of marker bytes found in a row
		let r, w; // temporaries to save total_in and total_out

		// set up
		if (!z || !z.istate)
			return Z_STREAM_ERROR;
		const istate = z.istate;
		if (istate.mode != BAD) {
			istate.mode = BAD;
			istate.marker = 0;
		}
		if ((n = z.avail_in) === 0)
			return Z_BUF_ERROR;
		p = z.next_in_index;
		m = istate.marker;

		// search
		while (n !== 0 && m < 4) {
			if (z.read_byte(p) == mark[m]) {
				m++;
			} else if (z.read_byte(p) !== 0) {
				m = 0;
			} else {
				m = 4 - m;
			}
			p++;
			n--;
		}

		// restore
		z.total_in += p - z.next_in_index;
		z.next_in_index = p;
		z.avail_in = n;
		istate.marker = m;

		// return no joy or set up to restart on a new block
		if (m != 4) {
			return Z_DATA_ERROR;
		}
		r = z.total_in;
		w = z.total_out;
		inflateReset(z);
		z.total_in = r;
		z.total_out = w;
		istate.mode = BLOCKS;
		return Z_OK;
	};

	// Returns true if inflate is currently at the end of a block generated
	// by Z_SYNC_FLUSH or Z_FULL_FLUSH. This function is used by one PPP
	// implementation to provide an additional safety check. PPP uses
	// Z_SYNC_FLUSH
	// but removes the length bytes of the resulting empty stored block. When
	// decompressing, PPP checks that at the end of input packet, inflate is
	// waiting for these length bytes.
	that.inflateSyncPoint = function (z) {
		if (!z || !z.istate || !z.istate.blocks)
			return Z_STREAM_ERROR;
		return z.istate.blocks.sync_point();
	};
}

// ZStream

function ZStream() {
}

ZStream.prototype = {
	inflateInit: function (bits) {
		const that = this;
		that.istate = new Inflate();
		if (!bits)
			bits = MAX_BITS;
		return that.istate.inflateInit(that, bits);
	},

	inflate: function (f) {
		const that = this;
		if (!that.istate)
			return Z_STREAM_ERROR;
		return that.istate.inflate(that, f);
	},

	inflateEnd: function () {
		const that = this;
		if (!that.istate)
			return Z_STREAM_ERROR;
		const ret = that.istate.inflateEnd(that);
		that.istate = null;
		return ret;
	},

	inflateSync: function () {
		const that = this;
		if (!that.istate)
			return Z_STREAM_ERROR;
		return that.istate.inflateSync(that);
	},
	inflateSetDictionary: function (dictionary, dictLength) {
		const that = this;
		if (!that.istate)
			return Z_STREAM_ERROR;
		return that.istate.inflateSetDictionary(that, dictionary, dictLength);
	},
	read_byte: function (start) {
		const that = this;
		return that.next_in[start];
	},
	read_buf: function (start, size) {
		const that = this;
		return that.next_in.subarray(start, start + size);
	}
};

// Inflater

function ZipInflate(options) {
	const that = this;
	const z = new ZStream();
	const bufsize = options && options.chunkSize ? Math.floor(options.chunkSize * 2) : 128 * 1024;
	const flush = Z_NO_FLUSH;
	const buf = new Uint8Array(bufsize);
	let nomoreinput = false;

	z.inflateInit();
	z.next_out = buf;

	that.append = function (data, onprogress) {
		const buffers = [];
		let err, array, lastIndex = 0, bufferIndex = 0, bufferSize = 0;
		if (data.length === 0)
			return;
		z.next_in_index = 0;
		z.next_in = data;
		z.avail_in = data.length;
		do {
			z.next_out_index = 0;
			z.avail_out = bufsize;
			if ((z.avail_in === 0) && (!nomoreinput)) { // if buffer is empty and more input is available, refill it
				z.next_in_index = 0;
				nomoreinput = true;
			}
			err = z.inflate(flush);
			if (nomoreinput && (err === Z_BUF_ERROR)) {
				if (z.avail_in !== 0)
					throw new Error("inflating: bad input");
			} else if (err !== Z_OK && err !== Z_STREAM_END)
				throw new Error("inflating: " + z.msg);
			if ((nomoreinput || err === Z_STREAM_END) && (z.avail_in === data.length))
				throw new Error("inflating: bad input");
			if (z.next_out_index)
				if (z.next_out_index === bufsize)
					buffers.push(new Uint8Array(buf));
				else
					buffers.push(buf.slice(0, z.next_out_index));
			bufferSize += z.next_out_index;
			if (onprogress && z.next_in_index > 0 && z.next_in_index != lastIndex) {
				onprogress(z.next_in_index);
				lastIndex = z.next_in_index;
			}
		} while (z.avail_in > 0 || z.avail_out === 0);
		if (buffers.length > 1) {
			array = new Uint8Array(bufferSize);
			buffers.forEach(function (chunk) {
				array.set(chunk, bufferIndex);
				bufferIndex += chunk.length;
			});
		} else {
			array = buffers[0] || new Uint8Array(0);
		}
		return array;
	};
	that.flush = function () {
		z.inflateEnd();
	};
}

/* harmony default export */ __webpack_exports__["default"] = (ZipInflate);

/***/ }),

/***/ "./node_modules/@zip.js/zip.js/lib/core/codecs/sjcl.js":
/*!*************************************************************!*\
  !*** ./node_modules/@zip.js/zip.js/lib/core/codecs/sjcl.js ***!
  \*************************************************************/
/*! exports provided: cipher, codec, misc, mode */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "cipher", function() { return cipher; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "codec", function() { return codec; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "misc", function() { return misc; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mode", function() { return mode; });
// Derived from https://github.com/xqdoo00o/jszip/blob/master/lib/sjcl.js

/** @fileOverview Javascript cryptography implementation.
 *
 * Crush to remove comments, shorten variable names and
 * generally reduce transmission size.
 *
 * @author Emily Stark
 * @author Mike Hamburg
 * @author Dan Boneh
 */


/*jslint indent: 2, bitwise: false, nomen: false, plusplus: false, white: false, regexp: false */

/** @fileOverview Arrays of bits, encoded as arrays of Numbers.
 *
 * @author Emily Stark
 * @author Mike Hamburg
 * @author Dan Boneh
 */

/**
 * Arrays of bits, encoded as arrays of Numbers.
 * @namespace
 * @description
 * <p>
 * These objects are the currency accepted by SJCL's crypto functions.
 * </p>
 *
 * <p>
 * Most of our crypto primitives operate on arrays of 4-byte words internally,
 * but many of them can take arguments that are not a multiple of 4 bytes.
 * This library encodes arrays of bits (whose size need not be a multiple of 8
 * bits) as arrays of 32-bit words.  The bits are packed, big-endian, into an
 * array of words, 32 bits at a time.  Since the words are double-precision
 * floating point numbers, they fit some extra data.  We use this (in a private,
 * possibly-changing manner) to encode the number of bits actually  present
 * in the last word of the array.
 * </p>
 *
 * <p>
 * Because bitwise ops clear this out-of-band data, these arrays can be passed
 * to ciphers like AES which want arrays of words.
 * </p>
 */
const bitArray = {
	/**
	 * Concatenate two bit arrays.
	 * @param {bitArray} a1 The first array.
	 * @param {bitArray} a2 The second array.
	 * @return {bitArray} The concatenation of a1 and a2.
	 */
	concat(a1, a2) {
		if (a1.length === 0 || a2.length === 0) {
			return a1.concat(a2);
		}

		const last = a1[a1.length - 1], shift = bitArray.getPartial(last);
		if (shift === 32) {
			return a1.concat(a2);
		} else {
			return bitArray._shiftRight(a2, shift, last | 0, a1.slice(0, a1.length - 1));
		}
	},

	/**
	 * Find the length of an array of bits.
	 * @param {bitArray} a The array.
	 * @return {Number} The length of a, in bits.
	 */
	bitLength(a) {
		const l = a.length;
		if (l === 0) {
			return 0;
		}
		const x = a[l - 1];
		return (l - 1) * 32 + bitArray.getPartial(x);
	},

	/**
	 * Truncate an array.
	 * @param {bitArray} a The array.
	 * @param {Number} len The length to truncate to, in bits.
	 * @return {bitArray} A new array, truncated to len bits.
	 */
	clamp(a, len) {
		if (a.length * 32 < len) {
			return a;
		}
		a = a.slice(0, Math.ceil(len / 32));
		const l = a.length;
		len = len & 31;
		if (l > 0 && len) {
			a[l - 1] = bitArray.partial(len, a[l - 1] & 0x80000000 >> (len - 1), 1);
		}
		return a;
	},

	/**
	 * Make a partial word for a bit array.
	 * @param {Number} len The number of bits in the word.
	 * @param {Number} x The bits.
	 * @param {Number} [_end=0] Pass 1 if x has already been shifted to the high side.
	 * @return {Number} The partial word.
	 */
	partial(len, x, _end) {
		if (len === 32) {
			return x;
		}
		return (_end ? x | 0 : x << (32 - len)) + len * 0x10000000000;
	},

	/**
	 * Get the number of bits used by a partial word.
	 * @param {Number} x The partial word.
	 * @return {Number} The number of bits used by the partial word.
	 */
	getPartial(x) {
		return Math.round(x / 0x10000000000) || 32;
	},

	/** Shift an array right.
	 * @param {bitArray} a The array to shift.
	 * @param {Number} shift The number of bits to shift.
	 * @param {Number} [carry=0] A byte to carry in
	 * @param {bitArray} [out=[]] An array to prepend to the output.
	 * @private
	 */
	_shiftRight(a, shift, carry, out) {
		if (out === undefined) {
			out = [];
		}

		for (; shift >= 32; shift -= 32) {
			out.push(carry);
			carry = 0;
		}
		if (shift === 0) {
			return out.concat(a);
		}

		for (let i = 0; i < a.length; i++) {
			out.push(carry | a[i] >>> shift);
			carry = a[i] << (32 - shift);
		}
		const last2 = a.length ? a[a.length - 1] : 0;
		const shift2 = bitArray.getPartial(last2);
		out.push(bitArray.partial(shift + shift2 & 31, (shift + shift2 > 32) ? carry : out.pop(), 1));
		return out;
	}
};

/** @fileOverview Bit array codec implementations.
 *
 * @author Emily Stark
 * @author Mike Hamburg
 * @author Dan Boneh
 */

/**
 * Arrays of bytes
 * @namespace
 */
const codec = {
	bytes: {
		/** Convert from a bitArray to an array of bytes. */
		fromBits(arr) {
			const bl = bitArray.bitLength(arr);
			const byteLength = bl / 8;
			const out = new Uint8Array(byteLength);
			let tmp;
			for (let i = 0; i < byteLength; i++) {
				if ((i & 3) === 0) {
					tmp = arr[i / 4];
				}
				out[i] = tmp >>> 24;
				tmp <<= 8;
			}
			return out;
		},
		/** Convert from an array of bytes to a bitArray. */
		toBits(bytes) {
			const out = [];
			let i;
			let tmp = 0;
			for (i = 0; i < bytes.length; i++) {
				tmp = tmp << 8 | bytes[i];
				if ((i & 3) === 3) {
					out.push(tmp);
					tmp = 0;
				}
			}
			if (i & 3) {
				out.push(bitArray.partial(8 * (i & 3), tmp));
			}
			return out;
		}
	}
};

const hash = {};

/**
 * Context for a SHA-1 operation in progress.
 * @constructor
 */
hash.sha1 = function (hash) {
	if (hash) {
		this._h = hash._h.slice(0);
		this._buffer = hash._buffer.slice(0);
		this._length = hash._length;
	} else {
		this.reset();
	}
};

hash.sha1.prototype = {
	/**
	 * The hash's block size, in bits.
	 * @constant
	 */
	blockSize: 512,

	/**
	 * Reset the hash state.
	 * @return this
	 */
	reset: function () {
		const sha1 = this;
		sha1._h = this._init.slice(0);
		sha1._buffer = [];
		sha1._length = 0;
		return sha1;
	},

	/**
	 * Input several words to the hash.
	 * @param {bitArray|String} data the data to hash.
	 * @return this
	 */
	update: function (data) {
		const sha1 = this;
		if (typeof data === "string") {
			data = codec.utf8String.toBits(data);
		}
		const b = sha1._buffer = bitArray.concat(sha1._buffer, data);
		const ol = sha1._length;
		const nl = sha1._length = ol + bitArray.bitLength(data);
		if (nl > 9007199254740991) {
			throw new Error("Cannot hash more than 2^53 - 1 bits");
		}
		const c = new Uint32Array(b);
		let j = 0;
		for (let i = sha1.blockSize + ol - ((sha1.blockSize + ol) & (sha1.blockSize - 1)); i <= nl;
			i += sha1.blockSize) {
			sha1._block(c.subarray(16 * j, 16 * (j + 1)));
			j += 1;
		}
		b.splice(0, 16 * j);
		return sha1;
	},

	/**
	 * Complete hashing and output the hash value.
	 * @return {bitArray} The hash value, an array of 5 big-endian words. TODO
	 */
	finalize: function () {
		const sha1 = this;
		let b = sha1._buffer;
		const h = sha1._h;

		// Round out and push the buffer
		b = bitArray.concat(b, [bitArray.partial(1, 1)]);
		// Round out the buffer to a multiple of 16 words, less the 2 length words.
		for (let i = b.length + 2; i & 15; i++) {
			b.push(0);
		}

		// append the length
		b.push(Math.floor(sha1._length / 0x100000000));
		b.push(sha1._length | 0);

		while (b.length) {
			sha1._block(b.splice(0, 16));
		}

		sha1.reset();
		return h;
	},

	/**
	 * The SHA-1 initialization vector.
	 * @private
	 */
	_init: [0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0],

	/**
	 * The SHA-1 hash key.
	 * @private
	 */
	_key: [0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xCA62C1D6],

	/**
	 * The SHA-1 logical functions f(0), f(1), ..., f(79).
	 * @private
	 */
	_f: function (t, b, c, d) {
		if (t <= 19) {
			return (b & c) | (~b & d);
		} else if (t <= 39) {
			return b ^ c ^ d;
		} else if (t <= 59) {
			return (b & c) | (b & d) | (c & d);
		} else if (t <= 79) {
			return b ^ c ^ d;
		}
	},

	/**
	 * Circular left-shift operator.
	 * @private
	 */
	_S: function (n, x) {
		return (x << n) | (x >>> 32 - n);
	},

	/**
	 * Perform one cycle of SHA-1.
	 * @param {Uint32Array|bitArray} words one block of words.
	 * @private
	 */
	_block: function (words) {
		const sha1 = this;
		const h = sha1._h;
		// When words is passed to _block, it has 16 elements. SHA1 _block
		// function extends words with new elements (at the end there are 80 elements). 
		// The problem is that if we use Uint32Array instead of Array, 
		// the length of Uint32Array cannot be changed. Thus, we replace words with a 
		// normal Array here.
		const w = Array(80); // do not use Uint32Array here as the instantiation is slower
		for (let j = 0; j < 16; j++) {
			w[j] = words[j];
		}

		let a = h[0];
		let b = h[1];
		let c = h[2];
		let d = h[3];
		let e = h[4];

		for (let t = 0; t <= 79; t++) {
			if (t >= 16) {
				w[t] = sha1._S(1, w[t - 3] ^ w[t - 8] ^ w[t - 14] ^ w[t - 16]);
			}
			const tmp = (sha1._S(5, a) + sha1._f(t, b, c, d) + e + w[t] +
				sha1._key[Math.floor(t / 20)]) | 0;
			e = d;
			d = c;
			c = sha1._S(30, b);
			b = a;
			a = tmp;
		}

		h[0] = (h[0] + a) | 0;
		h[1] = (h[1] + b) | 0;
		h[2] = (h[2] + c) | 0;
		h[3] = (h[3] + d) | 0;
		h[4] = (h[4] + e) | 0;
	}
};

/** @fileOverview Low-level AES implementation.
 *
 * This file contains a low-level implementation of AES, optimized for
 * size and for efficiency on several browsers.  It is based on
 * OpenSSL's aes_core.c, a public-domain implementation by Vincent
 * Rijmen, Antoon Bosselaers and Paulo Barreto.
 *
 * An older version of this implementation is available in the public
 * domain, but this one is (c) Emily Stark, Mike Hamburg, Dan Boneh,
 * Stanford University 2008-2010 and BSD-licensed for liability
 * reasons.
 *
 * @author Emily Stark
 * @author Mike Hamburg
 * @author Dan Boneh
 */

const cipher = {};

/**
 * Schedule out an AES key for both encryption and decryption.  This
 * is a low-level class.  Use a cipher mode to do bulk encryption.
 *
 * @constructor
 * @param {Array} key The key as an array of 4, 6 or 8 words.
 */
cipher.aes = class {
	constructor(key) {
		/**
		 * The expanded S-box and inverse S-box tables.  These will be computed
		 * on the client so that we don't have to send them down the wire.
		 *
		 * There are two tables, _tables[0] is for encryption and
		 * _tables[1] is for decryption.
		 *
		 * The first 4 sub-tables are the expanded S-box with MixColumns.  The
		 * last (_tables[01][4]) is the S-box itself.
		 *
		 * @private
		 */
		const aes = this;
		aes._tables = [[[], [], [], [], []], [[], [], [], [], []]];

		if (!aes._tables[0][0][0]) {
			aes._precompute();
		}

		const sbox = aes._tables[0][4];
		const decTable = aes._tables[1];
		const keyLen = key.length;

		let i, encKey, decKey, rcon = 1;

		if (keyLen !== 4 && keyLen !== 6 && keyLen !== 8) {
			throw new Error("invalid aes key size");
		}

		aes._key = [encKey = key.slice(0), decKey = []];

		// schedule encryption keys
		for (i = keyLen; i < 4 * keyLen + 28; i++) {
			let tmp = encKey[i - 1];

			// apply sbox
			if (i % keyLen === 0 || (keyLen === 8 && i % keyLen === 4)) {
				tmp = sbox[tmp >>> 24] << 24 ^ sbox[tmp >> 16 & 255] << 16 ^ sbox[tmp >> 8 & 255] << 8 ^ sbox[tmp & 255];

				// shift rows and add rcon
				if (i % keyLen === 0) {
					tmp = tmp << 8 ^ tmp >>> 24 ^ rcon << 24;
					rcon = rcon << 1 ^ (rcon >> 7) * 283;
				}
			}

			encKey[i] = encKey[i - keyLen] ^ tmp;
		}

		// schedule decryption keys
		for (let j = 0; i; j++, i--) {
			const tmp = encKey[j & 3 ? i : i - 4];
			if (i <= 4 || j < 4) {
				decKey[j] = tmp;
			} else {
				decKey[j] = decTable[0][sbox[tmp >>> 24]] ^
					decTable[1][sbox[tmp >> 16 & 255]] ^
					decTable[2][sbox[tmp >> 8 & 255]] ^
					decTable[3][sbox[tmp & 255]];
			}
		}
	}
	// public
	/* Something like this might appear here eventually
	name: "AES",
	blockSize: 4,
	keySizes: [4,6,8],
	*/

	/**
	 * Encrypt an array of 4 big-endian words.
	 * @param {Array} data The plaintext.
	 * @return {Array} The ciphertext.
	 */
	encrypt(data) {
		return this._crypt(data, 0);
	}

	/**
	 * Decrypt an array of 4 big-endian words.
	 * @param {Array} data The ciphertext.
	 * @return {Array} The plaintext.
	 */
	decrypt(data) {
		return this._crypt(data, 1);
	}

	/**
	 * Expand the S-box tables.
	 *
	 * @private
	 */
	_precompute() {
		const encTable = this._tables[0];
		const decTable = this._tables[1];
		const sbox = encTable[4];
		const sboxInv = decTable[4];
		const d = [];
		const th = [];
		let xInv, x2, x4, x8;

		// Compute double and third tables
		for (let i = 0; i < 256; i++) {
			th[(d[i] = i << 1 ^ (i >> 7) * 283) ^ i] = i;
		}

		for (let x = xInv = 0; !sbox[x]; x ^= x2 || 1, xInv = th[xInv] || 1) {
			// Compute sbox
			let s = xInv ^ xInv << 1 ^ xInv << 2 ^ xInv << 3 ^ xInv << 4;
			s = s >> 8 ^ s & 255 ^ 99;
			sbox[x] = s;
			sboxInv[s] = x;

			// Compute MixColumns
			x8 = d[x4 = d[x2 = d[x]]];
			let tDec = x8 * 0x1010101 ^ x4 * 0x10001 ^ x2 * 0x101 ^ x * 0x1010100;
			let tEnc = d[s] * 0x101 ^ s * 0x1010100;

			for (let i = 0; i < 4; i++) {
				encTable[i][x] = tEnc = tEnc << 24 ^ tEnc >>> 8;
				decTable[i][s] = tDec = tDec << 24 ^ tDec >>> 8;
			}
		}

		// Compactify.  Considerable speedup on Firefox.
		for (let i = 0; i < 5; i++) {
			encTable[i] = encTable[i].slice(0);
			decTable[i] = decTable[i].slice(0);
		}
	}

	/**
	 * Encryption and decryption core.
	 * @param {Array} input Four words to be encrypted or decrypted.
	 * @param dir The direction, 0 for encrypt and 1 for decrypt.
	 * @return {Array} The four encrypted or decrypted words.
	 * @private
	 */
	_crypt(input, dir) {
		if (input.length !== 4) {
			throw new Error("invalid aes block size");
		}

		const key = this._key[dir];

		const nInnerRounds = key.length / 4 - 2;
		const out = [0, 0, 0, 0];
		const table = this._tables[dir];

		// load up the tables
		const t0 = table[0];
		const t1 = table[1];
		const t2 = table[2];
		const t3 = table[3];
		const sbox = table[4];

		// state variables a,b,c,d are loaded with pre-whitened data
		let a = input[0] ^ key[0];
		let b = input[dir ? 3 : 1] ^ key[1];
		let c = input[2] ^ key[2];
		let d = input[dir ? 1 : 3] ^ key[3];
		let kIndex = 4;
		let a2, b2, c2;

		// Inner rounds.  Cribbed from OpenSSL.
		for (let i = 0; i < nInnerRounds; i++) {
			a2 = t0[a >>> 24] ^ t1[b >> 16 & 255] ^ t2[c >> 8 & 255] ^ t3[d & 255] ^ key[kIndex];
			b2 = t0[b >>> 24] ^ t1[c >> 16 & 255] ^ t2[d >> 8 & 255] ^ t3[a & 255] ^ key[kIndex + 1];
			c2 = t0[c >>> 24] ^ t1[d >> 16 & 255] ^ t2[a >> 8 & 255] ^ t3[b & 255] ^ key[kIndex + 2];
			d = t0[d >>> 24] ^ t1[a >> 16 & 255] ^ t2[b >> 8 & 255] ^ t3[c & 255] ^ key[kIndex + 3];
			kIndex += 4;
			a = a2; b = b2; c = c2;
		}

		// Last round.
		for (let i = 0; i < 4; i++) {
			out[dir ? 3 & -i : i] =
				sbox[a >>> 24] << 24 ^
				sbox[b >> 16 & 255] << 16 ^
				sbox[c >> 8 & 255] << 8 ^
				sbox[d & 255] ^
				key[kIndex++];
			a2 = a; a = b; b = c; c = d; d = a2;
		}

		return out;
	}
};

/** @fileOverview CTR mode implementation.
 *
 * Special thanks to Roy Nicholson for pointing out a bug in our
 * implementation.
 *
 * @author Emily Stark
 * @author Mike Hamburg
 * @author Dan Boneh
 */

/** Brian Gladman's CTR Mode.
* @constructor
* @param {Object} _prf The aes instance to generate key.
* @param {bitArray} _iv The iv for ctr mode, it must be 128 bits.
*/

const mode = {};

/**
 * Brian Gladman's CTR Mode.
 * @namespace
 */
mode.ctrGladman = class {
	constructor(prf, iv) {
		this._prf = prf;
		this._initIv = iv;
		this._iv = iv;
	}

	reset() {
		this._iv = this._initIv;
	}

	/** Input some data to calculate.
	 * @param {bitArray} data the data to process, it must be intergral multiple of 128 bits unless it's the last.
	 */
	update(data) {
		return this.calculate(this._prf, data, this._iv);
	}

	incWord(word) {
		if (((word >> 24) & 0xff) === 0xff) { //overflow
			let b1 = (word >> 16) & 0xff;
			let b2 = (word >> 8) & 0xff;
			let b3 = word & 0xff;

			if (b1 === 0xff) { // overflow b1   
				b1 = 0;
				if (b2 === 0xff) {
					b2 = 0;
					if (b3 === 0xff) {
						b3 = 0;
					} else {
						++b3;
					}
				} else {
					++b2;
				}
			} else {
				++b1;
			}

			word = 0;
			word += (b1 << 16);
			word += (b2 << 8);
			word += b3;
		} else {
			word += (0x01 << 24);
		}
		return word;
	}

	incCounter(counter) {
		if ((counter[0] = this.incWord(counter[0])) === 0) {
			// encr_data in fileenc.c from  Dr Brian Gladman's counts only with DWORD j < 8
			counter[1] = this.incWord(counter[1]);
		}
	}

	calculate(prf, data, iv) {
		let l;
		if (!(l = data.length)) {
			return [];
		}
		const bl = bitArray.bitLength(data);
		for (let i = 0; i < l; i += 4) {
			this.incCounter(iv);
			const e = prf.encrypt(iv);
			data[i] ^= e[0];
			data[i + 1] ^= e[1];
			data[i + 2] ^= e[2];
			data[i + 3] ^= e[3];
		}
		return bitArray.clamp(data, bl);
	}
};


const misc = {};

/** @fileOverview HMAC implementation.
 *
 * @author Emily Stark
 * @author Mike Hamburg
 * @author Dan Boneh
 */

/** HMAC with the specified hash function.
 * @constructor
 * @param {bitArray} key the key for HMAC.
 * @param {Object} [Hash=hash.sha1] The hash function to use.
 */
misc.hmacSha1 = class {

	constructor(key) {
		const hmac = this;
		const Hash = hmac._hash = hash.sha1;
		const exKey = [[], []];
		const bs = Hash.prototype.blockSize / 32;
		hmac._baseHash = [new Hash(), new Hash()];

		if (key.length > bs) {
			key = Hash.hash(key);
		}

		for (let i = 0; i < bs; i++) {
			exKey[0][i] = key[i] ^ 0x36363636;
			exKey[1][i] = key[i] ^ 0x5C5C5C5C;
		}

		hmac._baseHash[0].update(exKey[0]);
		hmac._baseHash[1].update(exKey[1]);
		hmac._resultHash = new Hash(hmac._baseHash[0]);
	}
	reset() {
		const hmac = this;
		hmac._resultHash = new hmac._hash(hmac._baseHash[0]);
		hmac._updated = false;
	}

	update(data) {
		const hmac = this;
		hmac._updated = true;
		hmac._resultHash.update(data);
	}

	digest() {
		const hmac = this;
		const w = hmac._resultHash.finalize();
		const result = new (hmac._hash)(hmac._baseHash[1]).update(w).finalize();

		hmac.reset();

		return result;
	}
};



/***/ }),

/***/ "./node_modules/@zip.js/zip.js/lib/core/codecs/zip-crypto.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@zip.js/zip.js/lib/core/codecs/zip-crypto.js ***!
  \*******************************************************************/
/*! exports provided: ZipCryptoDecrypt, ZipCryptoEncrypt, ERR_INVALID_PASSWORD */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ZipCryptoDecrypt", function() { return ZipCryptoDecrypt; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ZipCryptoEncrypt", function() { return ZipCryptoEncrypt; });
/* harmony import */ var _crc32_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./crc32.js */ "./node_modules/@zip.js/zip.js/lib/core/codecs/crc32.js");
/* harmony import */ var _aes_crypto_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./aes-crypto.js */ "./node_modules/@zip.js/zip.js/lib/core/codecs/aes-crypto.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ERR_INVALID_PASSWORD", function() { return _aes_crypto_js__WEBPACK_IMPORTED_MODULE_1__["ERR_INVALID_PASSWORD"]; });

/*
 Copyright (c) 2021 Gildas Lormeau. All rights reserved.

 Redistribution and use in source and binary forms, with or without
 modification, are permitted provided that the following conditions are met:

 1. Redistributions of source code must retain the above copyright notice,
 this list of conditions and the following disclaimer.

 2. Redistributions in binary form must reproduce the above copyright 
 notice, this list of conditions and the following disclaimer in 
 the documentation and/or other materials provided with the distribution.

 3. The names of the authors may not be used to endorse or promote products
 derived from this software without specific prior written permission.

 THIS SOFTWARE IS PROVIDED ''AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,
 INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
 FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL JCRAFT,
 INC. OR ANY CONTRIBUTORS TO THIS SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT,
 INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
 OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/* global crypto */






const HEADER_LENGTH = 12;

class ZipCryptoDecrypt {

	constructor(password, passwordVerification) {
		const zipCrypto = this;
		Object.assign(zipCrypto, {
			password,
			passwordVerification
		});
		createKeys(zipCrypto, password);
	}

	append(input) {
		const zipCrypto = this;
		if (zipCrypto.password) {
			const decryptedHeader = decrypt(zipCrypto, input.subarray(0, HEADER_LENGTH));
			zipCrypto.password = null;
			if (decryptedHeader[HEADER_LENGTH - 1] != zipCrypto.passwordVerification) {
				throw new Error(_aes_crypto_js__WEBPACK_IMPORTED_MODULE_1__["ERR_INVALID_PASSWORD"]);
			}
			input = input.subarray(HEADER_LENGTH);
		}
		return decrypt(zipCrypto, input);
	}

	flush() {
		return {
			valid: true,
			data: new Uint8Array(0)
		};
	}
}

class ZipCryptoEncrypt {

	constructor(password, passwordVerification) {
		const zipCrypto = this;
		Object.assign(zipCrypto, {
			password,
			passwordVerification
		});
		createKeys(zipCrypto, password);
	}

	append(input) {
		const zipCrypto = this;
		let output;
		let offset;
		if (zipCrypto.password) {
			zipCrypto.password = null;
			const header = crypto.getRandomValues(new Uint8Array(HEADER_LENGTH));
			header[HEADER_LENGTH - 1] = zipCrypto.passwordVerification;
			output = new Uint8Array(input.length + header.length);
			output.set(encrypt(zipCrypto, header), 0);
			offset = HEADER_LENGTH;
		} else {
			output = new Uint8Array(input.length);
			offset = 0;
		}
		output.set(encrypt(zipCrypto, input), offset);
		return output;
	}

	flush() {
		return {
			data: new Uint8Array(0)
		};
	}
}



function decrypt(target, input) {
	const output = new Uint8Array(input.length);
	for (let index = 0; index < input.length; index++) {
		output[index] = getByte(target) ^ input[index];
		updateKeys(target, output[index]);
	}
	return output;
}

function encrypt(target, input) {
	const output = new Uint8Array(input.length);
	for (let index = 0; index < input.length; index++) {
		output[index] = getByte(target) ^ input[index];
		updateKeys(target, input[index]);
	}
	return output;
}

function createKeys(target, password) {
	target.keys = [0x12345678, 0x23456789, 0x34567890];
	target.crcKey0 = new _crc32_js__WEBPACK_IMPORTED_MODULE_0__["default"](target.keys[0]);
	target.crcKey2 = new _crc32_js__WEBPACK_IMPORTED_MODULE_0__["default"](target.keys[2]);
	for (let index = 0; index < password.length; index++) {
		updateKeys(target, password.charCodeAt(index));
	}
}

function updateKeys(target, byte) {
	target.crcKey0.append([byte]);
	target.keys[0] = ~target.crcKey0.get();
	target.keys[1] = getInt32(target.keys[1] + getInt8(target.keys[0]));
	target.keys[1] = getInt32(Math.imul(target.keys[1], 134775813) + 1);
	target.crcKey2.append([target.keys[1] >>> 24]);
	target.keys[2] = ~target.crcKey2.get();
}

function getByte(target) {
	const temp = target.keys[2] | 2;
	return getInt8(Math.imul(temp, (temp ^ 1)) >>> 8);
}

function getInt8(number) {
	return number & 0xFF;
}

function getInt32(number) {
	return number & 0xFFFFFFFF;
}

/***/ }),

/***/ "./node_modules/@zip.js/zip.js/lib/core/configuration.js":
/*!***************************************************************!*\
  !*** ./node_modules/@zip.js/zip.js/lib/core/configuration.js ***!
  \***************************************************************/
/*! exports provided: configure, getConfiguration */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "configure", function() { return configure; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getConfiguration", function() { return getConfiguration; });
/*
 Copyright (c) 2021 Gildas Lormeau. All rights reserved.

 Redistribution and use in source and binary forms, with or without
 modification, are permitted provided that the following conditions are met:

 1. Redistributions of source code must retain the above copyright notice,
 this list of conditions and the following disclaimer.

 2. Redistributions in binary form must reproduce the above copyright 
 notice, this list of conditions and the following disclaimer in 
 the documentation and/or other materials provided with the distribution.

 3. The names of the authors may not be used to endorse or promote products
 derived from this software without specific prior written permission.

 THIS SOFTWARE IS PROVIDED ''AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,
 INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
 FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL JCRAFT,
 INC. OR ANY CONTRIBUTORS TO THIS SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT,
 INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
 OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/* global navigator */



const DEFAULT_CONFIGURATION = {
	chunkSize: 512 * 1024,
	maxWorkers: (typeof navigator != "undefined" && navigator.hardwareConcurrency) || 2,
	terminateWorkerTimeout: 5000,
	useWebWorkers: true,
	workerScripts: undefined
};

const config = Object.assign({}, DEFAULT_CONFIGURATION);



function getConfiguration() {
	return config;
}

function configure(configuration) {
	if (configuration.chunkSize !== undefined) {
		config.chunkSize = configuration.chunkSize;
	}
	if (configuration.maxWorkers !== undefined) {
		config.maxWorkers = configuration.maxWorkers;
	}
	if (configuration.terminateWorkerTimeout !== undefined) {
		config.terminateWorkerTimeout = configuration.terminateWorkerTimeout;
	}
	if (configuration.useWebWorkers !== undefined) {
		config.useWebWorkers = configuration.useWebWorkers;
	}
	if (configuration.Deflate !== undefined) {
		config.Deflate = configuration.Deflate;
	}
	if (configuration.Inflate !== undefined) {
		config.Inflate = configuration.Inflate;
	}
	if (configuration.workerScripts !== undefined) {
		if (configuration.workerScripts.deflate) {
			if (!Array.isArray(configuration.workerScripts.deflate)) {
				throw new Error("workerScripts.deflate must be an array");
			}
			if (!config.workerScripts) {
				config.workerScripts = {};
			}
			config.workerScripts.deflate = configuration.workerScripts.deflate;
		}
		if (configuration.workerScripts.inflate) {
			if (!Array.isArray(configuration.workerScripts.inflate)) {
				throw new Error("workerScripts.inflate must be an array");
			}
			if (!config.workerScripts) {
				config.workerScripts = {};
			}
			config.workerScripts.inflate = configuration.workerScripts.inflate;
		}
	}
}


/***/ }),

/***/ "./node_modules/@zip.js/zip.js/lib/core/constants.js":
/*!***********************************************************!*\
  !*** ./node_modules/@zip.js/zip.js/lib/core/constants.js ***!
  \***********************************************************/
/*! exports provided: MAX_32_BITS, MAX_16_BITS, COMPRESSION_METHOD_DEFLATE, COMPRESSION_METHOD_STORE, COMPRESSION_METHOD_AES, LOCAL_FILE_HEADER_SIGNATURE, DATA_DESCRIPTOR_RECORD_SIGNATURE, CENTRAL_FILE_HEADER_SIGNATURE, END_OF_CENTRAL_DIR_SIGNATURE, ZIP64_END_OF_CENTRAL_DIR_LOCATOR_SIGNATURE, ZIP64_END_OF_CENTRAL_DIR_SIGNATURE, EXTRAFIELD_TYPE_ZIP64, EXTRAFIELD_TYPE_AES, EXTRAFIELD_TYPE_NTFS, EXTRAFIELD_TYPE_NTFS_TAG1, EXTRAFIELD_TYPE_EXTENDED_TIMESTAMP, EXTRAFIELD_TYPE_UNICODE_PATH, EXTRAFIELD_TYPE_UNICODE_COMMENT, END_OF_CENTRAL_DIR_LENGTH, ZIP64_END_OF_CENTRAL_DIR_LOCATOR_LENGTH, ZIP64_END_OF_CENTRAL_DIR_LENGTH, ZIP64_END_OF_CENTRAL_DIR_TOTAL_LENGTH, ZIP64_TOTAL_NUMBER_OF_DISKS, BITFLAG_ENCRYPTED, BITFLAG_LEVEL, BITFLAG_DATA_DESCRIPTOR, BITFLAG_LANG_ENCODING_FLAG, FILE_ATTR_MSDOS_DIR_MASK, VERSION_DEFLATE, VERSION_ZIP64, VERSION_AES, DIRECTORY_SIGNATURE, MIN_DATE, MAX_DATE */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MAX_32_BITS", function() { return MAX_32_BITS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MAX_16_BITS", function() { return MAX_16_BITS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "COMPRESSION_METHOD_DEFLATE", function() { return COMPRESSION_METHOD_DEFLATE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "COMPRESSION_METHOD_STORE", function() { return COMPRESSION_METHOD_STORE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "COMPRESSION_METHOD_AES", function() { return COMPRESSION_METHOD_AES; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LOCAL_FILE_HEADER_SIGNATURE", function() { return LOCAL_FILE_HEADER_SIGNATURE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DATA_DESCRIPTOR_RECORD_SIGNATURE", function() { return DATA_DESCRIPTOR_RECORD_SIGNATURE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CENTRAL_FILE_HEADER_SIGNATURE", function() { return CENTRAL_FILE_HEADER_SIGNATURE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "END_OF_CENTRAL_DIR_SIGNATURE", function() { return END_OF_CENTRAL_DIR_SIGNATURE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ZIP64_END_OF_CENTRAL_DIR_LOCATOR_SIGNATURE", function() { return ZIP64_END_OF_CENTRAL_DIR_LOCATOR_SIGNATURE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ZIP64_END_OF_CENTRAL_DIR_SIGNATURE", function() { return ZIP64_END_OF_CENTRAL_DIR_SIGNATURE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EXTRAFIELD_TYPE_ZIP64", function() { return EXTRAFIELD_TYPE_ZIP64; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EXTRAFIELD_TYPE_AES", function() { return EXTRAFIELD_TYPE_AES; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EXTRAFIELD_TYPE_NTFS", function() { return EXTRAFIELD_TYPE_NTFS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EXTRAFIELD_TYPE_NTFS_TAG1", function() { return EXTRAFIELD_TYPE_NTFS_TAG1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EXTRAFIELD_TYPE_EXTENDED_TIMESTAMP", function() { return EXTRAFIELD_TYPE_EXTENDED_TIMESTAMP; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EXTRAFIELD_TYPE_UNICODE_PATH", function() { return EXTRAFIELD_TYPE_UNICODE_PATH; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EXTRAFIELD_TYPE_UNICODE_COMMENT", function() { return EXTRAFIELD_TYPE_UNICODE_COMMENT; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "END_OF_CENTRAL_DIR_LENGTH", function() { return END_OF_CENTRAL_DIR_LENGTH; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ZIP64_END_OF_CENTRAL_DIR_LOCATOR_LENGTH", function() { return ZIP64_END_OF_CENTRAL_DIR_LOCATOR_LENGTH; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ZIP64_END_OF_CENTRAL_DIR_LENGTH", function() { return ZIP64_END_OF_CENTRAL_DIR_LENGTH; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ZIP64_END_OF_CENTRAL_DIR_TOTAL_LENGTH", function() { return ZIP64_END_OF_CENTRAL_DIR_TOTAL_LENGTH; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ZIP64_TOTAL_NUMBER_OF_DISKS", function() { return ZIP64_TOTAL_NUMBER_OF_DISKS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BITFLAG_ENCRYPTED", function() { return BITFLAG_ENCRYPTED; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BITFLAG_LEVEL", function() { return BITFLAG_LEVEL; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BITFLAG_DATA_DESCRIPTOR", function() { return BITFLAG_DATA_DESCRIPTOR; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BITFLAG_LANG_ENCODING_FLAG", function() { return BITFLAG_LANG_ENCODING_FLAG; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FILE_ATTR_MSDOS_DIR_MASK", function() { return FILE_ATTR_MSDOS_DIR_MASK; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VERSION_DEFLATE", function() { return VERSION_DEFLATE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VERSION_ZIP64", function() { return VERSION_ZIP64; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VERSION_AES", function() { return VERSION_AES; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DIRECTORY_SIGNATURE", function() { return DIRECTORY_SIGNATURE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MIN_DATE", function() { return MIN_DATE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MAX_DATE", function() { return MAX_DATE; });
/*
 Copyright (c) 2021 Gildas Lormeau. All rights reserved.

 Redistribution and use in source and binary forms, with or without
 modification, are permitted provided that the following conditions are met:

 1. Redistributions of source code must retain the above copyright notice,
 this list of conditions and the following disclaimer.

 2. Redistributions in binary form must reproduce the above copyright 
 notice, this list of conditions and the following disclaimer in 
 the documentation and/or other materials provided with the distribution.

 3. The names of the authors may not be used to endorse or promote products
 derived from this software without specific prior written permission.

 THIS SOFTWARE IS PROVIDED ''AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,
 INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
 FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL JCRAFT,
 INC. OR ANY CONTRIBUTORS TO THIS SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT,
 INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
 OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */



const MAX_32_BITS = 0xffffffff;
const MAX_16_BITS = 0xffff;
const COMPRESSION_METHOD_DEFLATE = 0x08;
const COMPRESSION_METHOD_STORE = 0x00;
const COMPRESSION_METHOD_AES = 0x63;

const LOCAL_FILE_HEADER_SIGNATURE = 0x04034b50;
const DATA_DESCRIPTOR_RECORD_SIGNATURE = 0x08074b50;
const CENTRAL_FILE_HEADER_SIGNATURE = 0x02014b50;
const END_OF_CENTRAL_DIR_SIGNATURE = 0x06054b50;
const ZIP64_END_OF_CENTRAL_DIR_SIGNATURE = 0x06064b50;
const ZIP64_END_OF_CENTRAL_DIR_LOCATOR_SIGNATURE = 0x07064b50;
const END_OF_CENTRAL_DIR_LENGTH = 22;
const ZIP64_END_OF_CENTRAL_DIR_LOCATOR_LENGTH = 20;
const ZIP64_END_OF_CENTRAL_DIR_LENGTH = 56;
const ZIP64_END_OF_CENTRAL_DIR_TOTAL_LENGTH = END_OF_CENTRAL_DIR_LENGTH + ZIP64_END_OF_CENTRAL_DIR_LOCATOR_LENGTH + ZIP64_END_OF_CENTRAL_DIR_LENGTH;

const ZIP64_TOTAL_NUMBER_OF_DISKS = 1;

const EXTRAFIELD_TYPE_ZIP64 = 0x0001;
const EXTRAFIELD_TYPE_AES = 0x9901;
const EXTRAFIELD_TYPE_NTFS = 0x000a;
const EXTRAFIELD_TYPE_NTFS_TAG1 = 0x0001;
const EXTRAFIELD_TYPE_EXTENDED_TIMESTAMP = 0x5455;
const EXTRAFIELD_TYPE_UNICODE_PATH = 0x7075;
const EXTRAFIELD_TYPE_UNICODE_COMMENT = 0x6375;

const BITFLAG_ENCRYPTED = 0x01;
const BITFLAG_LEVEL = 0x06;
const BITFLAG_DATA_DESCRIPTOR = 0x0008;
const BITFLAG_LANG_ENCODING_FLAG = 0x0800;
const FILE_ATTR_MSDOS_DIR_MASK = 0x10;

const VERSION_DEFLATE = 0x14;
const VERSION_ZIP64 = 0x2D;
const VERSION_AES = 0x33;

const DIRECTORY_SIGNATURE = "/";

const MAX_DATE = new Date(2107, 11, 31);
const MIN_DATE = new Date(1980, 0, 1);



/***/ }),

/***/ "./node_modules/@zip.js/zip.js/lib/core/engine.js":
/*!********************************************************!*\
  !*** ./node_modules/@zip.js/zip.js/lib/core/engine.js ***!
  \********************************************************/
/*! exports provided: ERR_ABORT, processData */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ERR_ABORT", function() { return ERR_ABORT; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "processData", function() { return processData; });
/*
 Copyright (c) 2021 Gildas Lormeau. All rights reserved.

 Redistribution and use in source and binary forms, with or without
 modification, are permitted provided that the following conditions are met:

 1. Redistributions of source code must retain the above copyright notice,
 this list of conditions and the following disclaimer.

 2. Redistributions in binary form must reproduce the above copyright 
 notice, this list of conditions and the following disclaimer in 
 the documentation and/or other materials provided with the distribution.

 3. The names of the authors may not be used to endorse or promote products
 derived from this software without specific prior written permission.

 THIS SOFTWARE IS PROVIDED ''AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,
 INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
 FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL JCRAFT,
 INC. OR ANY CONTRIBUTORS TO THIS SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT,
 INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
 OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */



const MINIMUM_CHUNK_SIZE = 64;
const ERR_ABORT = "Abort error";



async function processData(codec, reader, writer, offset, inputLength, config, options) {
	const chunkSize = Math.max(config.chunkSize, MINIMUM_CHUNK_SIZE);
	return processChunk();

	async function processChunk(chunkOffset = 0, outputLength = 0) {
		const signal = options.signal;
		if (chunkOffset < inputLength) {
			testAborted(signal, codec);
			const inputData = await reader.readUint8Array(chunkOffset + offset, Math.min(chunkSize, inputLength - chunkOffset));
			const chunkLength = inputData.length;
			testAborted(signal, codec);
			const data = await codec.append(inputData);
			testAborted(signal, codec);
			outputLength += await writeData(writer, data);
			if (options.onprogress) {
				try {
					options.onprogress(chunkOffset + chunkLength, inputLength);
				} catch (error) {
					// ignored
				}
			}
			return processChunk(chunkOffset + chunkSize, outputLength);
		} else {
			const result = await codec.flush();
			outputLength += await writeData(writer, result.data);
			return { signature: result.signature, length: outputLength };
		}
	}
}

function testAborted(signal, codec) {
	if (signal && signal.aborted) {
		codec.flush();
		throw new Error(ERR_ABORT);
	}
}

async function writeData(writer, data) {
	if (data.length) {
		await writer.writeUint8Array(data);
	}
	return data.length;
}

/***/ }),

/***/ "./node_modules/@zip.js/zip.js/lib/core/io.js":
/*!****************************************************!*\
  !*** ./node_modules/@zip.js/zip.js/lib/core/io.js ***!
  \****************************************************/
/*! exports provided: Reader, Writer, TextReader, TextWriter, Data64URIReader, Data64URIWriter, BlobReader, BlobWriter, Uint8ArrayReader, Uint8ArrayWriter, HttpReader, HttpRangeReader, ERR_HTTP_RANGE */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Reader", function() { return Reader; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Writer", function() { return Writer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TextReader", function() { return TextReader; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TextWriter", function() { return TextWriter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Data64URIReader", function() { return Data64URIReader; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Data64URIWriter", function() { return Data64URIWriter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BlobReader", function() { return BlobReader; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BlobWriter", function() { return BlobWriter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Uint8ArrayReader", function() { return Uint8ArrayReader; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Uint8ArrayWriter", function() { return Uint8ArrayWriter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HttpReader", function() { return HttpReader; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HttpRangeReader", function() { return HttpRangeReader; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ERR_HTTP_RANGE", function() { return ERR_HTTP_RANGE; });
/*
 Copyright (c) 2021 Gildas Lormeau. All rights reserved.

 Redistribution and use in source and binary forms, with or without
 modification, are permitted provided that the following conditions are met:

 1. Redistributions of source code must retain the above copyright notice,
 this list of conditions and the following disclaimer.

 2. Redistributions in binary form must reproduce the above copyright 
 notice, this list of conditions and the following disclaimer in 
 the documentation and/or other materials provided with the distribution.

 3. The names of the authors may not be used to endorse or promote products
 derived from this software without specific prior written permission.

 THIS SOFTWARE IS PROVIDED ''AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,
 INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
 FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL JCRAFT,
 INC. OR ANY CONTRIBUTORS TO THIS SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT,
 INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
 OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/* global Blob, FileReader, atob, btoa, XMLHttpRequest, document, fetch */



const ERR_HTTP_STATUS = "HTTP error ";
const ERR_HTTP_RANGE = "HTTP Range not supported";

const CONTENT_TYPE_TEXT_PLAIN = "text/plain";
const HTTP_HEADER_CONTENT_LENGTH = "Content-Length";
const HTTP_HEADER_ACCEPT_RANGES = "Accept-Ranges";
const HTTP_HEADER_RANGE = "Range";
const HTTP_METHOD_HEAD = "HEAD";
const HTTP_METHOD_GET = "GET";
const HTTP_RANGE_UNIT = "bytes";

class Stream {

	constructor() {
		this.size = 0;
	}

	init() {
		this.initialized = true;
	}
}

class Reader extends Stream {
}

class Writer extends Stream {

	writeUint8Array(array) {
		this.size += array.length;
	}
}

class TextReader extends Reader {

	constructor(text) {
		super();
		this.blobReader = new BlobReader(new Blob([text], { type: CONTENT_TYPE_TEXT_PLAIN }));
	}

	async init() {
		super.init();
		this.blobReader.init();
		this.size = this.blobReader.size;
	}

	async readUint8Array(offset, length) {
		return this.blobReader.readUint8Array(offset, length);
	}
}

class TextWriter extends Writer {

	constructor(encoding) {
		super();
		this.encoding = encoding;
		this.blob = new Blob([], { type: CONTENT_TYPE_TEXT_PLAIN });
	}

	async writeUint8Array(array) {
		super.writeUint8Array(array);
		this.blob = new Blob([this.blob, array.buffer], { type: CONTENT_TYPE_TEXT_PLAIN });
	}

	getData() {
		const reader = new FileReader();
		return new Promise((resolve, reject) => {
			reader.onload = event => resolve(event.target.result);
			reader.onerror = () => reject(reader.error);
			reader.readAsText(this.blob, this.encoding);
		});
	}
}

class Data64URIReader extends Reader {

	constructor(dataURI) {
		super();
		this.dataURI = dataURI;
		let dataEnd = dataURI.length;
		while (dataURI.charAt(dataEnd - 1) == "=") {
			dataEnd--;
		}
		this.dataStart = dataURI.indexOf(",") + 1;
		this.size = Math.floor((dataEnd - this.dataStart) * 0.75);
	}

	async readUint8Array(offset, length) {
		const dataArray = new Uint8Array(length);
		const start = Math.floor(offset / 3) * 4;
		const bytes = atob(this.dataURI.substring(start + this.dataStart, Math.ceil((offset + length) / 3) * 4 + this.dataStart));
		const delta = offset - Math.floor(start / 4) * 3;
		for (let indexByte = delta; indexByte < delta + length; indexByte++) {
			dataArray[indexByte - delta] = bytes.charCodeAt(indexByte);
		}
		return dataArray;
	}
}

class Data64URIWriter extends Writer {

	constructor(contentType) {
		super();
		this.data = "data:" + (contentType || "") + ";base64,";
		this.pending = [];
	}

	async writeUint8Array(array) {
		super.writeUint8Array(array);
		let indexArray = 0;
		let dataString = this.pending;
		const delta = this.pending.length;
		this.pending = "";
		for (indexArray = 0; indexArray < (Math.floor((delta + array.length) / 3) * 3) - delta; indexArray++) {
			dataString += String.fromCharCode(array[indexArray]);
		}
		for (; indexArray < array.length; indexArray++) {
			this.pending += String.fromCharCode(array[indexArray]);
		}
		if (dataString.length > 2) {
			this.data += btoa(dataString);
		} else {
			this.pending = dataString;
		}
	}

	getData() {
		return this.data + btoa(this.pending);
	}
}

class BlobReader extends Reader {

	constructor(blob) {
		super();
		this.blob = blob;
		this.size = blob.size;
	}

	async readUint8Array(offset, length) {
		const reader = new FileReader();
		return new Promise((resolve, reject) => {
			reader.onload = event => resolve(new Uint8Array(event.target.result));
			reader.onerror = () => reject(reader.error);
			reader.readAsArrayBuffer(this.blob.slice(offset, offset + length));
		});
	}
}

class BlobWriter extends Writer {

	constructor(contentType) {
		super();
		this.contentType = contentType;
		this.arrayBuffers = [];
	}

	async writeUint8Array(array) {
		super.writeUint8Array(array);
		this.arrayBuffers.push(array.buffer);
	}

	getData() {
		if (!this.blob) {
			this.blob = new Blob(this.arrayBuffers, { type: this.contentType });
		}
		return this.blob;
	}
}

class FetchReader extends Reader {

	constructor(url, options) {
		super();
		this.url = url;
		this.preventHeadRequest = options.preventHeadRequest;
		this.useRangeHeader = options.useRangeHeader;
		this.forceRangeRequests = options.forceRangeRequests;
		this.options = Object.assign({}, options);
		delete this.options.preventHeadRequest;
		delete this.options.useRangeHeader;
		delete this.options.forceRangeRequests;
		delete this.options.useXHR;
	}

	async init() {
		super.init();
		if (isHttpFamily(this.url) && !this.preventHeadRequest) {
			const response = await sendFetchRequest(HTTP_METHOD_HEAD, this.url, this.options);
			this.size = Number(response.headers.get(HTTP_HEADER_CONTENT_LENGTH));
			if (!this.forceRangeRequests && this.useRangeHeader && response.headers.get(HTTP_HEADER_ACCEPT_RANGES) != HTTP_RANGE_UNIT) {
				throw new Error(ERR_HTTP_RANGE);
			} else if (this.size === undefined) {
				await getFetchData(this, this.options);
			}
		} else {
			await getFetchData(this, this.options);
		}
	}

	async readUint8Array(index, length) {
		if (this.useRangeHeader) {
			const response = await sendFetchRequest(HTTP_METHOD_GET, this.url, this.options, Object.assign({}, this.options.headers,
				{ [HTTP_HEADER_RANGE]: HTTP_RANGE_UNIT + "=" + index + "-" + (index + length - 1) }));
			if (response.status != 206) {
				throw new Error(ERR_HTTP_RANGE);
			}
			return new Uint8Array(await response.arrayBuffer());
		} else {
			if (!this.data) {
				await getFetchData(this, this.options);
			}
			return new Uint8Array(this.data.subarray(index, index + length));
		}
	}
}

async function getFetchData(httpReader, options) {
	const response = await sendFetchRequest(HTTP_METHOD_GET, httpReader.url, options);
	httpReader.data = new Uint8Array(await response.arrayBuffer());
	if (!httpReader.size) {
		httpReader.size = httpReader.data.length;
	}
}

async function sendFetchRequest(method, url, options, headers) {
	headers = Object.assign({}, options.headers, headers);
	const response = await fetch(url, Object.assign({}, options, { method, headers }));
	if (response.status < 400) {
		return response;
	} else {
		throw new Error(ERR_HTTP_STATUS + (response.statusText || response.status));
	}
}

class XHRReader extends Reader {

	constructor(url, options) {
		super();
		this.url = url;
		this.preventHeadRequest = options.preventHeadRequest;
		this.useRangeHeader = options.useRangeHeader;
		this.forceRangeRequests = options.forceRangeRequests;
	}

	async init() {
		super.init();
		if (isHttpFamily(this.url) && !this.preventHeadRequest) {
			return new Promise((resolve, reject) => sendXHR(HTTP_METHOD_HEAD, this.url, request => {
				this.size = Number(request.getResponseHeader(HTTP_HEADER_CONTENT_LENGTH));
				if (this.useRangeHeader) {
					if (this.forceRangeRequests || request.getResponseHeader(HTTP_HEADER_ACCEPT_RANGES) == HTTP_RANGE_UNIT) {
						resolve();
					} else {
						reject(new Error(ERR_HTTP_RANGE));
					}
				} else if (this.size === undefined) {
					getXHRData(this, this.url).then(() => resolve()).catch(reject);
				} else {
					resolve();
				}
			}, reject));
		} else {
			await getXHRData(this, this.url);
		}
	}

	async readUint8Array(index, length) {
		if (this.useRangeHeader) {
			const request = await new Promise((resolve, reject) => sendXHR(HTTP_METHOD_GET, this.url, request => resolve(request), reject,
				[[HTTP_HEADER_RANGE, HTTP_RANGE_UNIT + "=" + index + "-" + (index + length - 1)]]));
			if (request.status != 206) {
				throw new Error(ERR_HTTP_RANGE);
			}
			return new Uint8Array(request.response);
		} else {
			if (!this.data) {
				await getXHRData(this, this.url);
			}
			return new Uint8Array(this.data.subarray(index, index + length));
		}
	}
}

function getXHRData(httpReader, url) {
	return new Promise((resolve, reject) => sendXHR(HTTP_METHOD_GET, url, request => {
		httpReader.data = new Uint8Array(request.response);
		if (!httpReader.size) {
			httpReader.size = httpReader.data.length;
		}
		resolve();
	}, reject));
}

function sendXHR(method, url, onload, onerror, headers = []) {
	const request = new XMLHttpRequest();
	request.addEventListener("load", () => {
		if (request.status < 400) {
			onload(request);
		} else {
			onerror(ERR_HTTP_STATUS + (request.statusText || request.status));
		}
	}, false);
	request.addEventListener("error", onerror, false);
	request.open(method, url);
	headers.forEach(header => request.setRequestHeader(header[0], header[1]));
	request.responseType = "arraybuffer";
	request.send();
	return request;
}

class HttpReader extends Reader {

	constructor(url, options = {}) {
		super();
		this.url = url;
		if (options.useXHR) {
			this.reader = new XHRReader(url, options);
		} else {
			this.reader = new FetchReader(url, options);
		}
	}

	set size(value) {
		// ignored
	}

	get size() {
		return this.reader.size;
	}

	async init() {
		super.init();
		await this.reader.init();
	}

	async readUint8Array(index, length) {
		return this.reader.readUint8Array(index, length);
	}
}

class HttpRangeReader extends HttpReader {

	constructor(url, options = {}) {
		options.useRangeHeader = true;
		super(url, options);
	}
}


class Uint8ArrayReader extends Reader {

	constructor(array) {
		super();
		this.array = array;
		this.size = array.length;
	}

	async readUint8Array(index, length) {
		return this.array.slice(index, index + length);
	}
}

class Uint8ArrayWriter extends Writer {

	constructor() {
		super();
		this.array = new Uint8Array(0);
	}

	async writeUint8Array(array) {
		super.writeUint8Array(array);
		const previousArray = this.array;
		this.array = new Uint8Array(previousArray.length + array.length);
		this.array.set(previousArray);
		this.array.set(array, previousArray.length);
	}

	getData() {
		return this.array;
	}
}

function isHttpFamily(url) {
	if (typeof document != "undefined") {
		const anchor = document.createElement("a");
		anchor.href = url;
		return anchor.protocol == "http:" || anchor.protocol == "https:";
	} else {
		return /^https?:\/\//i.test(url);
	}
}




/***/ }),

/***/ "./node_modules/@zip.js/zip.js/lib/core/util/cp437-decode.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@zip.js/zip.js/lib/core/util/cp437-decode.js ***!
  \*******************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/*
 Copyright (c) 2021 Gildas Lormeau. All rights reserved.

 Redistribution and use in source and binary forms, with or without
 modification, are permitted provided that the following conditions are met:

 1. Redistributions of source code must retain the above copyright notice,
 this list of conditions and the following disclaimer.

 2. Redistributions in binary form must reproduce the above copyright 
 notice, this list of conditions and the following disclaimer in 
 the documentation and/or other materials provided with the distribution.

 3. The names of the authors may not be used to endorse or promote products
 derived from this software without specific prior written permission.

 THIS SOFTWARE IS PROVIDED ''AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,
 INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
 FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL JCRAFT,
 INC. OR ANY CONTRIBUTORS TO THIS SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT,
 INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
 OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */



const CP437 = "\0☺☻♥♦♣♠•◘○◙♂♀♪♫☼►◄↕‼¶§▬↨↑↓→←∟↔▲▼ !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~⌂ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜ¢£¥₧ƒáíóúñÑªº¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ ".split("");

/* harmony default export */ __webpack_exports__["default"] = (stringValue => {
	let result = "";
	for (let indexCharacter = 0; indexCharacter < stringValue.length; indexCharacter++) {
		result += CP437[stringValue[indexCharacter]];
	}
	return result;
});

/***/ }),

/***/ "./node_modules/@zip.js/zip.js/lib/core/util/default-mime-type.js":
/*!************************************************************************!*\
  !*** ./node_modules/@zip.js/zip.js/lib/core/util/default-mime-type.js ***!
  \************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/*
 Copyright (c) 2021 Gildas Lormeau. All rights reserved.

 Redistribution and use in source and binary forms, with or without
 modification, are permitted provided that the following conditions are met:

 1. Redistributions of source code must retain the above copyright notice,
 this list of conditions and the following disclaimer.

 2. Redistributions in binary form must reproduce the above copyright 
 notice, this list of conditions and the following disclaimer in 
 the documentation and/or other materials provided with the distribution.

 3. The names of the authors may not be used to endorse or promote products
 derived from this software without specific prior written permission.

 THIS SOFTWARE IS PROVIDED ''AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,
 INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
 FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL JCRAFT,
 INC. OR ANY CONTRIBUTORS TO THIS SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT,
 INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
 OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */



/* harmony default export */ __webpack_exports__["default"] = (getMimeType);

function getMimeType() {
	return "application/octet-stream";
}

/***/ }),

/***/ "./node_modules/@zip.js/zip.js/lib/core/util/mime-type.js":
/*!****************************************************************!*\
  !*** ./node_modules/@zip.js/zip.js/lib/core/util/mime-type.js ***!
  \****************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/*
 Copyright (c) 2021 Gildas Lormeau. All rights reserved.

 Redistribution and use in source and binary forms, with or without
 modification, are permitted provided that the following conditions are met:

 1. Redistributions of source code must retain the above copyright notice,
 this list of conditions and the following disclaimer.

 2. Redistributions in binary form must reproduce the above copyright 
 notice, this list of conditions and the following disclaimer in 
 the documentation and/or other materials provided with the distribution.

 3. The names of the authors may not be used to endorse or promote products
 derived from this software without specific prior written permission.

 THIS SOFTWARE IS PROVIDED ''AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,
 INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
 FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL JCRAFT,
 INC. OR ANY CONTRIBUTORS TO THIS SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT,
 INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
 OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */



const table = {
	"application": {
		"andrew-inset": "ez",
		"annodex": "anx",
		"atom+xml": "atom",
		"atomcat+xml": "atomcat",
		"atomserv+xml": "atomsrv",
		"bbolin": "lin",
		"cap": ["cap", "pcap"],
		"cu-seeme": "cu",
		"davmount+xml": "davmount",
		"dsptype": "tsp",
		"ecmascript": ["es", "ecma"],
		"futuresplash": "spl",
		"hta": "hta",
		"java-archive": "jar",
		"java-serialized-object": "ser",
		"java-vm": "class",
		"javascript": "js",
		"m3g": "m3g",
		"mac-binhex40": "hqx",
		"mathematica": ["nb", "ma", "mb"],
		"msaccess": "mdb",
		"msword": ["doc", "dot"],
		"mxf": "mxf",
		"oda": "oda",
		"ogg": "ogx",
		"pdf": "pdf",
		"pgp-keys": "key",
		"pgp-signature": ["asc", "sig"],
		"pics-rules": "prf",
		"postscript": ["ps", "ai", "eps", "epsi", "epsf", "eps2", "eps3"],
		"rar": "rar",
		"rdf+xml": "rdf",
		"rss+xml": "rss",
		"rtf": "rtf",
		"smil": ["smi", "smil"],
		"xhtml+xml": ["xhtml", "xht"],
		"xml": ["xml", "xsl", "xsd"],
		"xspf+xml": "xspf",
		"zip": "zip",
		"vnd.android.package-archive": "apk",
		"vnd.cinderella": "cdy",
		"vnd.google-earth.kml+xml": "kml",
		"vnd.google-earth.kmz": "kmz",
		"vnd.mozilla.xul+xml": "xul",
		"vnd.ms-excel": ["xls", "xlb", "xlt", "xlm", "xla", "xlc", "xlw"],
		"vnd.ms-pki.seccat": "cat",
		"vnd.ms-pki.stl": "stl",
		"vnd.ms-powerpoint": ["ppt", "pps", "pot"],
		"vnd.oasis.opendocument.chart": "odc",
		"vnd.oasis.opendocument.database": "odb",
		"vnd.oasis.opendocument.formula": "odf",
		"vnd.oasis.opendocument.graphics": "odg",
		"vnd.oasis.opendocument.graphics-template": "otg",
		"vnd.oasis.opendocument.image": "odi",
		"vnd.oasis.opendocument.presentation": "odp",
		"vnd.oasis.opendocument.presentation-template": "otp",
		"vnd.oasis.opendocument.spreadsheet": "ods",
		"vnd.oasis.opendocument.spreadsheet-template": "ots",
		"vnd.oasis.opendocument.text": "odt",
		"vnd.oasis.opendocument.text-master": "odm",
		"vnd.oasis.opendocument.text-template": "ott",
		"vnd.oasis.opendocument.text-web": "oth",
		"vnd.openxmlformats-officedocument.spreadsheetml.sheet": "xlsx",
		"vnd.openxmlformats-officedocument.spreadsheetml.template": "xltx",
		"vnd.openxmlformats-officedocument.presentationml.presentation": "pptx",
		"vnd.openxmlformats-officedocument.presentationml.slideshow": "ppsx",
		"vnd.openxmlformats-officedocument.presentationml.template": "potx",
		"vnd.openxmlformats-officedocument.wordprocessingml.document": "docx",
		"vnd.openxmlformats-officedocument.wordprocessingml.template": "dotx",
		"vnd.smaf": "mmf",
		"vnd.stardivision.calc": "sdc",
		"vnd.stardivision.chart": "sds",
		"vnd.stardivision.draw": "sda",
		"vnd.stardivision.impress": "sdd",
		"vnd.stardivision.math": ["sdf", "smf"],
		"vnd.stardivision.writer": ["sdw", "vor"],
		"vnd.stardivision.writer-global": "sgl",
		"vnd.sun.xml.calc": "sxc",
		"vnd.sun.xml.calc.template": "stc",
		"vnd.sun.xml.draw": "sxd",
		"vnd.sun.xml.draw.template": "std",
		"vnd.sun.xml.impress": "sxi",
		"vnd.sun.xml.impress.template": "sti",
		"vnd.sun.xml.math": "sxm",
		"vnd.sun.xml.writer": "sxw",
		"vnd.sun.xml.writer.global": "sxg",
		"vnd.sun.xml.writer.template": "stw",
		"vnd.symbian.install": ["sis", "sisx"],
		"vnd.visio": ["vsd", "vst", "vss", "vsw"],
		"vnd.wap.wbxml": "wbxml",
		"vnd.wap.wmlc": "wmlc",
		"vnd.wap.wmlscriptc": "wmlsc",
		"vnd.wordperfect": "wpd",
		"vnd.wordperfect5.1": "wp5",
		"x-123": "wk",
		"x-7z-compressed": "7z",
		"x-abiword": "abw",
		"x-apple-diskimage": "dmg",
		"x-bcpio": "bcpio",
		"x-bittorrent": "torrent",
		"x-cbr": ["cbr", "cba", "cbt", "cb7"],
		"x-cbz": "cbz",
		"x-cdf": ["cdf", "cda"],
		"x-cdlink": "vcd",
		"x-chess-pgn": "pgn",
		"x-cpio": "cpio",
		"x-csh": "csh",
		"x-debian-package": ["deb", "udeb"],
		"x-director": ["dcr", "dir", "dxr", "cst", "cct", "cxt", "w3d", "fgd", "swa"],
		"x-dms": "dms",
		"x-doom": "wad",
		"x-dvi": "dvi",
		"x-httpd-eruby": "rhtml",
		"x-font": "pcf.Z",
		"x-freemind": "mm",
		"x-gnumeric": "gnumeric",
		"x-go-sgf": "sgf",
		"x-graphing-calculator": "gcf",
		"x-gtar": ["gtar", "taz"],
		"x-hdf": "hdf",
		"x-httpd-php": ["phtml", "pht", "php"],
		"x-httpd-php-source": "phps",
		"x-httpd-php3": "php3",
		"x-httpd-php3-preprocessed": "php3p",
		"x-httpd-php4": "php4",
		"x-httpd-php5": "php5",
		"x-ica": "ica",
		"x-info": "info",
		"x-internet-signup": ["ins", "isp"],
		"x-iphone": "iii",
		"x-iso9660-image": "iso",
		"x-java-jnlp-file": "jnlp",
		"x-jmol": "jmz",
		"x-killustrator": "kil",
		"x-koan": ["skp", "skd", "skt", "skm"],
		"x-kpresenter": ["kpr", "kpt"],
		"x-kword": ["kwd", "kwt"],
		"x-latex": "latex",
		"x-lha": "lha",
		"x-lyx": "lyx",
		"x-lzh": "lzh",
		"x-lzx": "lzx",
		"x-maker": ["frm", "maker", "frame", "fm", "fb", "book", "fbdoc"],
		"x-ms-wmd": "wmd",
		"x-ms-wmz": "wmz",
		"x-msdos-program": ["com", "exe", "bat", "dll"],
		"x-msi": "msi",
		"x-netcdf": ["nc", "cdf"],
		"x-ns-proxy-autoconfig": ["pac", "dat"],
		"x-nwc": "nwc",
		"x-object": "o",
		"x-oz-application": "oza",
		"x-pkcs7-certreqresp": "p7r",
		"x-python-code": ["pyc", "pyo"],
		"x-qgis": ["qgs", "shp", "shx"],
		"x-quicktimeplayer": "qtl",
		"x-redhat-package-manager": "rpm",
		"x-ruby": "rb",
		"x-sh": "sh",
		"x-shar": "shar",
		"x-shockwave-flash": ["swf", "swfl"],
		"x-silverlight": "scr",
		"x-stuffit": "sit",
		"x-sv4cpio": "sv4cpio",
		"x-sv4crc": "sv4crc",
		"x-tar": "tar",
		"x-tcl": "tcl",
		"x-tex-gf": "gf",
		"x-tex-pk": "pk",
		"x-texinfo": ["texinfo", "texi"],
		"x-trash": ["~", "%", "bak", "old", "sik"],
		"x-troff": ["t", "tr", "roff"],
		"x-troff-man": "man",
		"x-troff-me": "me",
		"x-troff-ms": "ms",
		"x-ustar": "ustar",
		"x-wais-source": "src",
		"x-wingz": "wz",
		"x-x509-ca-cert": ["crt", "der", "cer"],
		"x-xcf": "xcf",
		"x-xfig": "fig",
		"x-xpinstall": "xpi",
		"applixware": "aw",
		"atomsvc+xml": "atomsvc",
		"ccxml+xml": "ccxml",
		"cdmi-capability": "cdmia",
		"cdmi-container": "cdmic",
		"cdmi-domain": "cdmid",
		"cdmi-object": "cdmio",
		"cdmi-queue": "cdmiq",
		"docbook+xml": "dbk",
		"dssc+der": "dssc",
		"dssc+xml": "xdssc",
		"emma+xml": "emma",
		"epub+zip": "epub",
		"exi": "exi",
		"font-tdpfr": "pfr",
		"gml+xml": "gml",
		"gpx+xml": "gpx",
		"gxf": "gxf",
		"hyperstudio": "stk",
		"inkml+xml": ["ink", "inkml"],
		"ipfix": "ipfix",
		"json": "json",
		"jsonml+json": "jsonml",
		"lost+xml": "lostxml",
		"mads+xml": "mads",
		"marc": "mrc",
		"marcxml+xml": "mrcx",
		"mathml+xml": "mathml",
		"mbox": "mbox",
		"mediaservercontrol+xml": "mscml",
		"metalink+xml": "metalink",
		"metalink4+xml": "meta4",
		"mets+xml": "mets",
		"mods+xml": "mods",
		"mp21": ["m21", "mp21"],
		"mp4": "mp4s",
		"oebps-package+xml": "opf",
		"omdoc+xml": "omdoc",
		"onenote": ["onetoc", "onetoc2", "onetmp", "onepkg"],
		"oxps": "oxps",
		"patch-ops-error+xml": "xer",
		"pgp-encrypted": "pgp",
		"pkcs10": "p10",
		"pkcs7-mime": ["p7m", "p7c"],
		"pkcs7-signature": "p7s",
		"pkcs8": "p8",
		"pkix-attr-cert": "ac",
		"pkix-crl": "crl",
		"pkix-pkipath": "pkipath",
		"pkixcmp": "pki",
		"pls+xml": "pls",
		"prs.cww": "cww",
		"pskc+xml": "pskcxml",
		"reginfo+xml": "rif",
		"relax-ng-compact-syntax": "rnc",
		"resource-lists+xml": "rl",
		"resource-lists-diff+xml": "rld",
		"rls-services+xml": "rs",
		"rpki-ghostbusters": "gbr",
		"rpki-manifest": "mft",
		"rpki-roa": "roa",
		"rsd+xml": "rsd",
		"sbml+xml": "sbml",
		"scvp-cv-request": "scq",
		"scvp-cv-response": "scs",
		"scvp-vp-request": "spq",
		"scvp-vp-response": "spp",
		"sdp": "sdp",
		"set-payment-initiation": "setpay",
		"set-registration-initiation": "setreg",
		"shf+xml": "shf",
		"sparql-query": "rq",
		"sparql-results+xml": "srx",
		"srgs": "gram",
		"srgs+xml": "grxml",
		"sru+xml": "sru",
		"ssdl+xml": "ssdl",
		"ssml+xml": "ssml",
		"tei+xml": ["tei", "teicorpus"],
		"thraud+xml": "tfi",
		"timestamped-data": "tsd",
		"vnd.3gpp.pic-bw-large": "plb",
		"vnd.3gpp.pic-bw-small": "psb",
		"vnd.3gpp.pic-bw-var": "pvb",
		"vnd.3gpp2.tcap": "tcap",
		"vnd.3m.post-it-notes": "pwn",
		"vnd.accpac.simply.aso": "aso",
		"vnd.accpac.simply.imp": "imp",
		"vnd.acucobol": "acu",
		"vnd.acucorp": ["atc", "acutc"],
		"vnd.adobe.air-application-installer-package+zip": "air",
		"vnd.adobe.formscentral.fcdt": "fcdt",
		"vnd.adobe.fxp": ["fxp", "fxpl"],
		"vnd.adobe.xdp+xml": "xdp",
		"vnd.adobe.xfdf": "xfdf",
		"vnd.ahead.space": "ahead",
		"vnd.airzip.filesecure.azf": "azf",
		"vnd.airzip.filesecure.azs": "azs",
		"vnd.amazon.ebook": "azw",
		"vnd.americandynamics.acc": "acc",
		"vnd.amiga.ami": "ami",
		"vnd.anser-web-certificate-issue-initiation": "cii",
		"vnd.anser-web-funds-transfer-initiation": "fti",
		"vnd.antix.game-component": "atx",
		"vnd.apple.installer+xml": "mpkg",
		"vnd.apple.mpegurl": "m3u8",
		"vnd.aristanetworks.swi": "swi",
		"vnd.astraea-software.iota": "iota",
		"vnd.audiograph": "aep",
		"vnd.blueice.multipass": "mpm",
		"vnd.bmi": "bmi",
		"vnd.businessobjects": "rep",
		"vnd.chemdraw+xml": "cdxml",
		"vnd.chipnuts.karaoke-mmd": "mmd",
		"vnd.claymore": "cla",
		"vnd.cloanto.rp9": "rp9",
		"vnd.clonk.c4group": ["c4g", "c4d", "c4f", "c4p", "c4u"],
		"vnd.cluetrust.cartomobile-config": "c11amc",
		"vnd.cluetrust.cartomobile-config-pkg": "c11amz",
		"vnd.commonspace": "csp",
		"vnd.contact.cmsg": "cdbcmsg",
		"vnd.cosmocaller": "cmc",
		"vnd.crick.clicker": "clkx",
		"vnd.crick.clicker.keyboard": "clkk",
		"vnd.crick.clicker.palette": "clkp",
		"vnd.crick.clicker.template": "clkt",
		"vnd.crick.clicker.wordbank": "clkw",
		"vnd.criticaltools.wbs+xml": "wbs",
		"vnd.ctc-posml": "pml",
		"vnd.cups-ppd": "ppd",
		"vnd.curl.car": "car",
		"vnd.curl.pcurl": "pcurl",
		"vnd.dart": "dart",
		"vnd.data-vision.rdz": "rdz",
		"vnd.dece.data": ["uvf", "uvvf", "uvd", "uvvd"],
		"vnd.dece.ttml+xml": ["uvt", "uvvt"],
		"vnd.dece.unspecified": ["uvx", "uvvx"],
		"vnd.dece.zip": ["uvz", "uvvz"],
		"vnd.denovo.fcselayout-link": "fe_launch",
		"vnd.dna": "dna",
		"vnd.dolby.mlp": "mlp",
		"vnd.dpgraph": "dpg",
		"vnd.dreamfactory": "dfac",
		"vnd.ds-keypoint": "kpxx",
		"vnd.dvb.ait": "ait",
		"vnd.dvb.service": "svc",
		"vnd.dynageo": "geo",
		"vnd.ecowin.chart": "mag",
		"vnd.enliven": "nml",
		"vnd.epson.esf": "esf",
		"vnd.epson.msf": "msf",
		"vnd.epson.quickanime": "qam",
		"vnd.epson.salt": "slt",
		"vnd.epson.ssf": "ssf",
		"vnd.eszigno3+xml": ["es3", "et3"],
		"vnd.ezpix-album": "ez2",
		"vnd.ezpix-package": "ez3",
		"vnd.fdf": "fdf",
		"vnd.fdsn.mseed": "mseed",
		"vnd.fdsn.seed": ["seed", "dataless"],
		"vnd.flographit": "gph",
		"vnd.fluxtime.clip": "ftc",
		"vnd.framemaker": ["fm", "frame", "maker", "book"],
		"vnd.frogans.fnc": "fnc",
		"vnd.frogans.ltf": "ltf",
		"vnd.fsc.weblaunch": "fsc",
		"vnd.fujitsu.oasys": "oas",
		"vnd.fujitsu.oasys2": "oa2",
		"vnd.fujitsu.oasys3": "oa3",
		"vnd.fujitsu.oasysgp": "fg5",
		"vnd.fujitsu.oasysprs": "bh2",
		"vnd.fujixerox.ddd": "ddd",
		"vnd.fujixerox.docuworks": "xdw",
		"vnd.fujixerox.docuworks.binder": "xbd",
		"vnd.fuzzysheet": "fzs",
		"vnd.genomatix.tuxedo": "txd",
		"vnd.geogebra.file": "ggb",
		"vnd.geogebra.tool": "ggt",
		"vnd.geometry-explorer": ["gex", "gre"],
		"vnd.geonext": "gxt",
		"vnd.geoplan": "g2w",
		"vnd.geospace": "g3w",
		"vnd.gmx": "gmx",
		"vnd.grafeq": ["gqf", "gqs"],
		"vnd.groove-account": "gac",
		"vnd.groove-help": "ghf",
		"vnd.groove-identity-message": "gim",
		"vnd.groove-injector": "grv",
		"vnd.groove-tool-message": "gtm",
		"vnd.groove-tool-template": "tpl",
		"vnd.groove-vcard": "vcg",
		"vnd.hal+xml": "hal",
		"vnd.handheld-entertainment+xml": "zmm",
		"vnd.hbci": "hbci",
		"vnd.hhe.lesson-player": "les",
		"vnd.hp-hpgl": "hpgl",
		"vnd.hp-hpid": "hpid",
		"vnd.hp-hps": "hps",
		"vnd.hp-jlyt": "jlt",
		"vnd.hp-pcl": "pcl",
		"vnd.hp-pclxl": "pclxl",
		"vnd.hydrostatix.sof-data": "sfd-hdstx",
		"vnd.ibm.minipay": "mpy",
		"vnd.ibm.modcap": ["afp", "listafp", "list3820"],
		"vnd.ibm.rights-management": "irm",
		"vnd.ibm.secure-container": "sc",
		"vnd.iccprofile": ["icc", "icm"],
		"vnd.igloader": "igl",
		"vnd.immervision-ivp": "ivp",
		"vnd.immervision-ivu": "ivu",
		"vnd.insors.igm": "igm",
		"vnd.intercon.formnet": ["xpw", "xpx"],
		"vnd.intergeo": "i2g",
		"vnd.intu.qbo": "qbo",
		"vnd.intu.qfx": "qfx",
		"vnd.ipunplugged.rcprofile": "rcprofile",
		"vnd.irepository.package+xml": "irp",
		"vnd.is-xpr": "xpr",
		"vnd.isac.fcs": "fcs",
		"vnd.jam": "jam",
		"vnd.jcp.javame.midlet-rms": "rms",
		"vnd.jisp": "jisp",
		"vnd.joost.joda-archive": "joda",
		"vnd.kahootz": ["ktz", "ktr"],
		"vnd.kde.karbon": "karbon",
		"vnd.kde.kchart": "chrt",
		"vnd.kde.kformula": "kfo",
		"vnd.kde.kivio": "flw",
		"vnd.kde.kontour": "kon",
		"vnd.kde.kpresenter": ["kpr", "kpt"],
		"vnd.kde.kspread": "ksp",
		"vnd.kde.kword": ["kwd", "kwt"],
		"vnd.kenameaapp": "htke",
		"vnd.kidspiration": "kia",
		"vnd.kinar": ["kne", "knp"],
		"vnd.koan": ["skp", "skd", "skt", "skm"],
		"vnd.kodak-descriptor": "sse",
		"vnd.las.las+xml": "lasxml",
		"vnd.llamagraphics.life-balance.desktop": "lbd",
		"vnd.llamagraphics.life-balance.exchange+xml": "lbe",
		"vnd.lotus-1-2-3": "123",
		"vnd.lotus-approach": "apr",
		"vnd.lotus-freelance": "pre",
		"vnd.lotus-notes": "nsf",
		"vnd.lotus-organizer": "org",
		"vnd.lotus-screencam": "scm",
		"vnd.lotus-wordpro": "lwp",
		"vnd.macports.portpkg": "portpkg",
		"vnd.mcd": "mcd",
		"vnd.medcalcdata": "mc1",
		"vnd.mediastation.cdkey": "cdkey",
		"vnd.mfer": "mwf",
		"vnd.mfmp": "mfm",
		"vnd.micrografx.flo": "flo",
		"vnd.micrografx.igx": "igx",
		"vnd.mif": "mif",
		"vnd.mobius.daf": "daf",
		"vnd.mobius.dis": "dis",
		"vnd.mobius.mbk": "mbk",
		"vnd.mobius.mqy": "mqy",
		"vnd.mobius.msl": "msl",
		"vnd.mobius.plc": "plc",
		"vnd.mobius.txf": "txf",
		"vnd.mophun.application": "mpn",
		"vnd.mophun.certificate": "mpc",
		"vnd.ms-artgalry": "cil",
		"vnd.ms-cab-compressed": "cab",
		"vnd.ms-excel.addin.macroenabled.12": "xlam",
		"vnd.ms-excel.sheet.binary.macroenabled.12": "xlsb",
		"vnd.ms-excel.sheet.macroenabled.12": "xlsm",
		"vnd.ms-excel.template.macroenabled.12": "xltm",
		"vnd.ms-fontobject": "eot",
		"vnd.ms-htmlhelp": "chm",
		"vnd.ms-ims": "ims",
		"vnd.ms-lrm": "lrm",
		"vnd.ms-officetheme": "thmx",
		"vnd.ms-powerpoint.addin.macroenabled.12": "ppam",
		"vnd.ms-powerpoint.presentation.macroenabled.12": "pptm",
		"vnd.ms-powerpoint.slide.macroenabled.12": "sldm",
		"vnd.ms-powerpoint.slideshow.macroenabled.12": "ppsm",
		"vnd.ms-powerpoint.template.macroenabled.12": "potm",
		"vnd.ms-project": ["mpp", "mpt"],
		"vnd.ms-word.document.macroenabled.12": "docm",
		"vnd.ms-word.template.macroenabled.12": "dotm",
		"vnd.ms-works": ["wps", "wks", "wcm", "wdb"],
		"vnd.ms-wpl": "wpl",
		"vnd.ms-xpsdocument": "xps",
		"vnd.mseq": "mseq",
		"vnd.musician": "mus",
		"vnd.muvee.style": "msty",
		"vnd.mynfc": "taglet",
		"vnd.neurolanguage.nlu": "nlu",
		"vnd.nitf": ["ntf", "nitf"],
		"vnd.noblenet-directory": "nnd",
		"vnd.noblenet-sealer": "nns",
		"vnd.noblenet-web": "nnw",
		"vnd.nokia.n-gage.data": "ngdat",
		"vnd.nokia.n-gage.symbian.install": "n-gage",
		"vnd.nokia.radio-preset": "rpst",
		"vnd.nokia.radio-presets": "rpss",
		"vnd.novadigm.edm": "edm",
		"vnd.novadigm.edx": "edx",
		"vnd.novadigm.ext": "ext",
		"vnd.oasis.opendocument.chart-template": "otc",
		"vnd.oasis.opendocument.formula-template": "odft",
		"vnd.oasis.opendocument.image-template": "oti",
		"vnd.olpc-sugar": "xo",
		"vnd.oma.dd2+xml": "dd2",
		"vnd.openofficeorg.extension": "oxt",
		"vnd.openxmlformats-officedocument.presentationml.slide": "sldx",
		"vnd.osgeo.mapguide.package": "mgp",
		"vnd.osgi.dp": "dp",
		"vnd.osgi.subsystem": "esa",
		"vnd.palm": ["pdb", "pqa", "oprc"],
		"vnd.pawaafile": "paw",
		"vnd.pg.format": "str",
		"vnd.pg.osasli": "ei6",
		"vnd.picsel": "efif",
		"vnd.pmi.widget": "wg",
		"vnd.pocketlearn": "plf",
		"vnd.powerbuilder6": "pbd",
		"vnd.previewsystems.box": "box",
		"vnd.proteus.magazine": "mgz",
		"vnd.publishare-delta-tree": "qps",
		"vnd.pvi.ptid1": "ptid",
		"vnd.quark.quarkxpress": ["qxd", "qxt", "qwd", "qwt", "qxl", "qxb"],
		"vnd.realvnc.bed": "bed",
		"vnd.recordare.musicxml": "mxl",
		"vnd.recordare.musicxml+xml": "musicxml",
		"vnd.rig.cryptonote": "cryptonote",
		"vnd.rn-realmedia": "rm",
		"vnd.rn-realmedia-vbr": "rmvb",
		"vnd.route66.link66+xml": "link66",
		"vnd.sailingtracker.track": "st",
		"vnd.seemail": "see",
		"vnd.sema": "sema",
		"vnd.semd": "semd",
		"vnd.semf": "semf",
		"vnd.shana.informed.formdata": "ifm",
		"vnd.shana.informed.formtemplate": "itp",
		"vnd.shana.informed.interchange": "iif",
		"vnd.shana.informed.package": "ipk",
		"vnd.simtech-mindmapper": ["twd", "twds"],
		"vnd.smart.teacher": "teacher",
		"vnd.solent.sdkm+xml": ["sdkm", "sdkd"],
		"vnd.spotfire.dxp": "dxp",
		"vnd.spotfire.sfs": "sfs",
		"vnd.stepmania.package": "smzip",
		"vnd.stepmania.stepchart": "sm",
		"vnd.sus-calendar": ["sus", "susp"],
		"vnd.svd": "svd",
		"vnd.syncml+xml": "xsm",
		"vnd.syncml.dm+wbxml": "bdm",
		"vnd.syncml.dm+xml": "xdm",
		"vnd.tao.intent-module-archive": "tao",
		"vnd.tcpdump.pcap": ["pcap", "cap", "dmp"],
		"vnd.tmobile-livetv": "tmo",
		"vnd.trid.tpt": "tpt",
		"vnd.triscape.mxs": "mxs",
		"vnd.trueapp": "tra",
		"vnd.ufdl": ["ufd", "ufdl"],
		"vnd.uiq.theme": "utz",
		"vnd.umajin": "umj",
		"vnd.unity": "unityweb",
		"vnd.uoml+xml": "uoml",
		"vnd.vcx": "vcx",
		"vnd.visionary": "vis",
		"vnd.vsf": "vsf",
		"vnd.webturbo": "wtb",
		"vnd.wolfram.player": "nbp",
		"vnd.wqd": "wqd",
		"vnd.wt.stf": "stf",
		"vnd.xara": "xar",
		"vnd.xfdl": "xfdl",
		"vnd.yamaha.hv-dic": "hvd",
		"vnd.yamaha.hv-script": "hvs",
		"vnd.yamaha.hv-voice": "hvp",
		"vnd.yamaha.openscoreformat": "osf",
		"vnd.yamaha.openscoreformat.osfpvg+xml": "osfpvg",
		"vnd.yamaha.smaf-audio": "saf",
		"vnd.yamaha.smaf-phrase": "spf",
		"vnd.yellowriver-custom-menu": "cmp",
		"vnd.zul": ["zir", "zirz"],
		"vnd.zzazz.deck+xml": "zaz",
		"voicexml+xml": "vxml",
		"widget": "wgt",
		"winhlp": "hlp",
		"wsdl+xml": "wsdl",
		"wspolicy+xml": "wspolicy",
		"x-ace-compressed": "ace",
		"x-authorware-bin": ["aab", "x32", "u32", "vox"],
		"x-authorware-map": "aam",
		"x-authorware-seg": "aas",
		"x-blorb": ["blb", "blorb"],
		"x-bzip": "bz",
		"x-bzip2": ["bz2", "boz"],
		"x-cfs-compressed": "cfs",
		"x-chat": "chat",
		"x-conference": "nsc",
		"x-dgc-compressed": "dgc",
		"x-dtbncx+xml": "ncx",
		"x-dtbook+xml": "dtb",
		"x-dtbresource+xml": "res",
		"x-eva": "eva",
		"x-font-bdf": "bdf",
		"x-font-ghostscript": "gsf",
		"x-font-linux-psf": "psf",
		"x-font-otf": "otf",
		"x-font-pcf": "pcf",
		"x-font-snf": "snf",
		"x-font-ttf": ["ttf", "ttc"],
		"x-font-type1": ["pfa", "pfb", "pfm", "afm"],
		"x-font-woff": "woff",
		"x-freearc": "arc",
		"x-gca-compressed": "gca",
		"x-glulx": "ulx",
		"x-gramps-xml": "gramps",
		"x-install-instructions": "install",
		"x-lzh-compressed": ["lzh", "lha"],
		"x-mie": "mie",
		"x-mobipocket-ebook": ["prc", "mobi"],
		"x-ms-application": "application",
		"x-ms-shortcut": "lnk",
		"x-ms-xbap": "xbap",
		"x-msbinder": "obd",
		"x-mscardfile": "crd",
		"x-msclip": "clp",
		"x-msdownload": ["exe", "dll", "com", "bat", "msi"],
		"x-msmediaview": ["mvb", "m13", "m14"],
		"x-msmetafile": ["wmf", "wmz", "emf", "emz"],
		"x-msmoney": "mny",
		"x-mspublisher": "pub",
		"x-msschedule": "scd",
		"x-msterminal": "trm",
		"x-mswrite": "wri",
		"x-nzb": "nzb",
		"x-pkcs12": ["p12", "pfx"],
		"x-pkcs7-certificates": ["p7b", "spc"],
		"x-research-info-systems": "ris",
		"x-silverlight-app": "xap",
		"x-sql": "sql",
		"x-stuffitx": "sitx",
		"x-subrip": "srt",
		"x-t3vm-image": "t3",
		"x-tads": "gam",
		"x-tex": "tex",
		"x-tex-tfm": "tfm",
		"x-tgif": "obj",
		"x-xliff+xml": "xlf",
		"x-xz": "xz",
		"x-zmachine": ["z1", "z2", "z3", "z4", "z5", "z6", "z7", "z8"],
		"xaml+xml": "xaml",
		"xcap-diff+xml": "xdf",
		"xenc+xml": "xenc",
		"xml-dtd": "dtd",
		"xop+xml": "xop",
		"xproc+xml": "xpl",
		"xslt+xml": "xslt",
		"xv+xml": ["mxml", "xhvml", "xvml", "xvm"],
		"yang": "yang",
		"yin+xml": "yin",
		"envoy": "evy",
		"fractals": "fif",
		"internet-property-stream": "acx",
		"olescript": "axs",
		"vnd.ms-outlook": "msg",
		"vnd.ms-pkicertstore": "sst",
		"x-compress": "z",
		"x-compressed": "tgz",
		"x-gzip": "gz",
		"x-perfmon": ["pma", "pmc", "pml", "pmr", "pmw"],
		"x-pkcs7-mime": ["p7c", "p7m"],
		"ynd.ms-pkipko": "pko"
	},
	"audio": {
		"amr": "amr",
		"amr-wb": "awb",
		"annodex": "axa",
		"basic": ["au", "snd"],
		"flac": "flac",
		"midi": ["mid", "midi", "kar", "rmi"],
		"mpeg": ["mpga", "mpega", "mp2", "mp3", "m4a", "mp2a", "m2a", "m3a"],
		"mpegurl": "m3u",
		"ogg": ["oga", "ogg", "spx"],
		"prs.sid": "sid",
		"x-aiff": ["aif", "aiff", "aifc"],
		"x-gsm": "gsm",
		"x-ms-wma": "wma",
		"x-ms-wax": "wax",
		"x-pn-realaudio": "ram",
		"x-realaudio": "ra",
		"x-sd2": "sd2",
		"x-wav": "wav",
		"adpcm": "adp",
		"mp4": "mp4a",
		"s3m": "s3m",
		"silk": "sil",
		"vnd.dece.audio": ["uva", "uvva"],
		"vnd.digital-winds": "eol",
		"vnd.dra": "dra",
		"vnd.dts": "dts",
		"vnd.dts.hd": "dtshd",
		"vnd.lucent.voice": "lvp",
		"vnd.ms-playready.media.pya": "pya",
		"vnd.nuera.ecelp4800": "ecelp4800",
		"vnd.nuera.ecelp7470": "ecelp7470",
		"vnd.nuera.ecelp9600": "ecelp9600",
		"vnd.rip": "rip",
		"webm": "weba",
		"x-aac": "aac",
		"x-caf": "caf",
		"x-matroska": "mka",
		"x-pn-realaudio-plugin": "rmp",
		"xm": "xm",
		"mid": ["mid", "rmi"]
	},
	"chemical": {
		"x-alchemy": "alc",
		"x-cache": ["cac", "cache"],
		"x-cache-csf": "csf",
		"x-cactvs-binary": ["cbin", "cascii", "ctab"],
		"x-cdx": "cdx",
		"x-chem3d": "c3d",
		"x-cif": "cif",
		"x-cmdf": "cmdf",
		"x-cml": "cml",
		"x-compass": "cpa",
		"x-crossfire": "bsd",
		"x-csml": ["csml", "csm"],
		"x-ctx": "ctx",
		"x-cxf": ["cxf", "cef"],
		"x-embl-dl-nucleotide": ["emb", "embl"],
		"x-gamess-input": ["inp", "gam", "gamin"],
		"x-gaussian-checkpoint": ["fch", "fchk"],
		"x-gaussian-cube": "cub",
		"x-gaussian-input": ["gau", "gjc", "gjf"],
		"x-gaussian-log": "gal",
		"x-gcg8-sequence": "gcg",
		"x-genbank": "gen",
		"x-hin": "hin",
		"x-isostar": ["istr", "ist"],
		"x-jcamp-dx": ["jdx", "dx"],
		"x-kinemage": "kin",
		"x-macmolecule": "mcm",
		"x-macromodel-input": ["mmd", "mmod"],
		"x-mdl-molfile": "mol",
		"x-mdl-rdfile": "rd",
		"x-mdl-rxnfile": "rxn",
		"x-mdl-sdfile": ["sd", "sdf"],
		"x-mdl-tgf": "tgf",
		"x-mmcif": "mcif",
		"x-mol2": "mol2",
		"x-molconn-Z": "b",
		"x-mopac-graph": "gpt",
		"x-mopac-input": ["mop", "mopcrt", "mpc", "zmt"],
		"x-mopac-out": "moo",
		"x-ncbi-asn1": "asn",
		"x-ncbi-asn1-ascii": ["prt", "ent"],
		"x-ncbi-asn1-binary": ["val", "aso"],
		"x-pdb": ["pdb", "ent"],
		"x-rosdal": "ros",
		"x-swissprot": "sw",
		"x-vamas-iso14976": "vms",
		"x-vmd": "vmd",
		"x-xtel": "xtel",
		"x-xyz": "xyz"
	},
	"image": {
		"gif": "gif",
		"ief": "ief",
		"jpeg": ["jpeg", "jpg", "jpe"],
		"pcx": "pcx",
		"png": "png",
		"svg+xml": ["svg", "svgz"],
		"tiff": ["tiff", "tif"],
		"vnd.djvu": ["djvu", "djv"],
		"vnd.wap.wbmp": "wbmp",
		"x-canon-cr2": "cr2",
		"x-canon-crw": "crw",
		"x-cmu-raster": "ras",
		"x-coreldraw": "cdr",
		"x-coreldrawpattern": "pat",
		"x-coreldrawtemplate": "cdt",
		"x-corelphotopaint": "cpt",
		"x-epson-erf": "erf",
		"x-icon": "ico",
		"x-jg": "art",
		"x-jng": "jng",
		"x-nikon-nef": "nef",
		"x-olympus-orf": "orf",
		"x-photoshop": "psd",
		"x-portable-anymap": "pnm",
		"x-portable-bitmap": "pbm",
		"x-portable-graymap": "pgm",
		"x-portable-pixmap": "ppm",
		"x-rgb": "rgb",
		"x-xbitmap": "xbm",
		"x-xpixmap": "xpm",
		"x-xwindowdump": "xwd",
		"bmp": "bmp",
		"cgm": "cgm",
		"g3fax": "g3",
		"ktx": "ktx",
		"prs.btif": "btif",
		"sgi": "sgi",
		"vnd.dece.graphic": ["uvi", "uvvi", "uvg", "uvvg"],
		"vnd.dwg": "dwg",
		"vnd.dxf": "dxf",
		"vnd.fastbidsheet": "fbs",
		"vnd.fpx": "fpx",
		"vnd.fst": "fst",
		"vnd.fujixerox.edmics-mmr": "mmr",
		"vnd.fujixerox.edmics-rlc": "rlc",
		"vnd.ms-modi": "mdi",
		"vnd.ms-photo": "wdp",
		"vnd.net-fpx": "npx",
		"vnd.xiff": "xif",
		"webp": "webp",
		"x-3ds": "3ds",
		"x-cmx": "cmx",
		"x-freehand": ["fh", "fhc", "fh4", "fh5", "fh7"],
		"x-pict": ["pic", "pct"],
		"x-tga": "tga",
		"cis-cod": "cod",
		"pipeg": "jfif"
	},
	"message": {
		"rfc822": ["eml", "mime", "mht", "mhtml", "nws"]
	},
	"model": {
		"iges": ["igs", "iges"],
		"mesh": ["msh", "mesh", "silo"],
		"vrml": ["wrl", "vrml"],
		"x3d+vrml": ["x3dv", "x3dvz"],
		"x3d+xml": ["x3d", "x3dz"],
		"x3d+binary": ["x3db", "x3dbz"],
		"vnd.collada+xml": "dae",
		"vnd.dwf": "dwf",
		"vnd.gdl": "gdl",
		"vnd.gtw": "gtw",
		"vnd.mts": "mts",
		"vnd.vtu": "vtu"
	},
	"text": {
		"cache-manifest": ["manifest", "appcache"],
		"calendar": ["ics", "icz", "ifb"],
		"css": "css",
		"csv": "csv",
		"h323": "323",
		"html": ["html", "htm", "shtml", "stm"],
		"iuls": "uls",
		"mathml": "mml",
		"plain": ["txt", "text", "brf", "conf", "def", "list", "log", "in", "bas"],
		"richtext": "rtx",
		"scriptlet": ["sct", "wsc"],
		"texmacs": ["tm", "ts"],
		"tab-separated-values": "tsv",
		"vnd.sun.j2me.app-descriptor": "jad",
		"vnd.wap.wml": "wml",
		"vnd.wap.wmlscript": "wmls",
		"x-bibtex": "bib",
		"x-boo": "boo",
		"x-c++hdr": ["h++", "hpp", "hxx", "hh"],
		"x-c++src": ["c++", "cpp", "cxx", "cc"],
		"x-component": "htc",
		"x-dsrc": "d",
		"x-diff": ["diff", "patch"],
		"x-haskell": "hs",
		"x-java": "java",
		"x-literate-haskell": "lhs",
		"x-moc": "moc",
		"x-pascal": ["p", "pas"],
		"x-pcs-gcd": "gcd",
		"x-perl": ["pl", "pm"],
		"x-python": "py",
		"x-scala": "scala",
		"x-setext": "etx",
		"x-tcl": ["tcl", "tk"],
		"x-tex": ["tex", "ltx", "sty", "cls"],
		"x-vcalendar": "vcs",
		"x-vcard": "vcf",
		"n3": "n3",
		"prs.lines.tag": "dsc",
		"sgml": ["sgml", "sgm"],
		"troff": ["t", "tr", "roff", "man", "me", "ms"],
		"turtle": "ttl",
		"uri-list": ["uri", "uris", "urls"],
		"vcard": "vcard",
		"vnd.curl": "curl",
		"vnd.curl.dcurl": "dcurl",
		"vnd.curl.scurl": "scurl",
		"vnd.curl.mcurl": "mcurl",
		"vnd.dvb.subtitle": "sub",
		"vnd.fly": "fly",
		"vnd.fmi.flexstor": "flx",
		"vnd.graphviz": "gv",
		"vnd.in3d.3dml": "3dml",
		"vnd.in3d.spot": "spot",
		"x-asm": ["s", "asm"],
		"x-c": ["c", "cc", "cxx", "cpp", "h", "hh", "dic"],
		"x-fortran": ["f", "for", "f77", "f90"],
		"x-opml": "opml",
		"x-nfo": "nfo",
		"x-sfv": "sfv",
		"x-uuencode": "uu",
		"webviewhtml": "htt"
	},
	"video": {
		"avif": ".avif",
		"3gpp": "3gp",
		"annodex": "axv",
		"dl": "dl",
		"dv": ["dif", "dv"],
		"fli": "fli",
		"gl": "gl",
		"mpeg": ["mpeg", "mpg", "mpe", "m1v", "m2v", "mp2", "mpa", "mpv2"],
		"mp4": ["mp4", "mp4v", "mpg4"],
		"quicktime": ["qt", "mov"],
		"ogg": "ogv",
		"vnd.mpegurl": ["mxu", "m4u"],
		"x-flv": "flv",
		"x-la-asf": ["lsf", "lsx"],
		"x-mng": "mng",
		"x-ms-asf": ["asf", "asx", "asr"],
		"x-ms-wm": "wm",
		"x-ms-wmv": "wmv",
		"x-ms-wmx": "wmx",
		"x-ms-wvx": "wvx",
		"x-msvideo": "avi",
		"x-sgi-movie": "movie",
		"x-matroska": ["mpv", "mkv", "mk3d", "mks"],
		"3gpp2": "3g2",
		"h261": "h261",
		"h263": "h263",
		"h264": "h264",
		"jpeg": "jpgv",
		"jpm": ["jpm", "jpgm"],
		"mj2": ["mj2", "mjp2"],
		"vnd.dece.hd": ["uvh", "uvvh"],
		"vnd.dece.mobile": ["uvm", "uvvm"],
		"vnd.dece.pd": ["uvp", "uvvp"],
		"vnd.dece.sd": ["uvs", "uvvs"],
		"vnd.dece.video": ["uvv", "uvvv"],
		"vnd.dvb.file": "dvb",
		"vnd.fvt": "fvt",
		"vnd.ms-playready.media.pyv": "pyv",
		"vnd.uvvu.mp4": ["uvu", "uvvu"],
		"vnd.vivo": "viv",
		"webm": "webm",
		"x-f4v": "f4v",
		"x-m4v": "m4v",
		"x-ms-vob": "vob",
		"x-smv": "smv"		
	},
	"x-conference": {
		"x-cooltalk": "ice"
	},
	"x-world": {
		"x-vrml": ["vrm", "vrml", "wrl", "flr", "wrz", "xaf", "xof"]
	}
};

const mimeTypes = (() => {
	const mimeTypes = {};
	for (let type in table) {
		// eslint-disable-next-line no-prototype-builtins
		if (table.hasOwnProperty(type)) {
			for (let subtype in table[type]) {
				// eslint-disable-next-line no-prototype-builtins
				if (table[type].hasOwnProperty(subtype)) {
					const value = table[type][subtype];
					if (typeof value == "string") {
						mimeTypes[value] = type + "/" + subtype;
					} else {
						for (let indexMimeType = 0; indexMimeType < value.length; indexMimeType++) {
							mimeTypes[value[indexMimeType]] = type + "/" + subtype;
						}
					}
				}
			}
		}
	}
	return mimeTypes;
})();

/* harmony default export */ __webpack_exports__["default"] = (getMimeType);

function getMimeType(filename) {
	const defaultValue = "application/octet-stream";
	return filename && mimeTypes[filename.split(".").pop().toLowerCase()] || defaultValue;
}

/***/ }),

/***/ "./node_modules/@zip.js/zip.js/lib/core/util/stream-codec-shim.js":
/*!************************************************************************!*\
  !*** ./node_modules/@zip.js/zip.js/lib/core/util/stream-codec-shim.js ***!
  \************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);

/*
 Copyright (c) 2021 Gildas Lormeau. All rights reserved.

 Redistribution and use in source and binary forms, with or without
 modification, are permitted provided that the following conditions are met:

 1. Redistributions of source code must retain the above copyright notice,
 this list of conditions and the following disclaimer.

 2. Redistributions in binary form must reproduce the above copyright 
 notice, this list of conditions and the following disclaimer in 
 the documentation and/or other materials provided with the distribution.

 3. The names of the authors may not be used to endorse or promote products
 derived from this software without specific prior written permission.

 THIS SOFTWARE IS PROVIDED ''AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,
 INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
 FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL JCRAFT,
 INC. OR ANY CONTRIBUTORS TO THIS SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT,
 INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
 OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */



/* harmony default export */ __webpack_exports__["default"] = ((library, options = {}, registerDataHandler) => {
	return {
		Deflate: createCodecClass(library.Deflate, options.deflate, registerDataHandler),
		Inflate: createCodecClass(library.Inflate, options.inflate, registerDataHandler)
	};
});

function createCodecClass(constructor, constructorOptions, registerDataHandler) {
	return class {

		constructor(options) {
			const codecAdapter = this;
			const onData = data => {
				if (codecAdapter.pendingData) {
					const pendingData = codecAdapter.pendingData;
					codecAdapter.pendingData = new Uint8Array(pendingData.length + data.length);
					codecAdapter.pendingData.set(pendingData, 0);
					codecAdapter.pendingData.set(data, pendingData.length);
				} else {
					codecAdapter.pendingData = new Uint8Array(data);
				}
			};
			codecAdapter.codec = new constructor(Object.assign({}, constructorOptions, options));
			registerDataHandler(codecAdapter.codec, onData);
		}
		async append(data) {
			this.codec.push(data);
			return getResponse(this);
		}
		async flush() {
			this.codec.push(new Uint8Array(0), true);
			return getResponse(this);
		}
	};

	function getResponse(codec) {
		if (codec.pendingData) {
			const output = codec.pendingData;
			codec.pendingData = null;
			return output;
		} else {
			return new Uint8Array(0);
		}
	}
}

/***/ }),

/***/ "./node_modules/@zip.js/zip.js/lib/core/zip-entry.js":
/*!***********************************************************!*\
  !*** ./node_modules/@zip.js/zip.js/lib/core/zip-entry.js ***!
  \***********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Entry; });
/*
 Copyright (c) 2021 Gildas Lormeau. All rights reserved.

 Redistribution and use in source and binary forms, with or without
 modification, are permitted provided that the following conditions are met:

 1. Redistributions of source code must retain the above copyright notice,
 this list of conditions and the following disclaimer.

 2. Redistributions in binary form must reproduce the above copyright 
 notice, this list of conditions and the following disclaimer in 
 the documentation and/or other materials provided with the distribution.

 3. The names of the authors may not be used to endorse or promote products
 derived from this software without specific prior written permission.

 THIS SOFTWARE IS PROVIDED ''AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,
 INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
 FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL JCRAFT,
 INC. OR ANY CONTRIBUTORS TO THIS SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT,
 INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
 OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */



const PROPERTY_NAMES = [
	"filename", "rawFilename", "directory", "encrypted", "compressedSize", "uncompressedSize",
	"lastModDate", "rawLastModDate", "comment", "rawComment", "signature", "extraField",
	"rawExtraField", "bitFlag", "extraFieldZip64", "extraFieldUnicodePath", "extraFieldUnicodeComment",
	"extraFieldAES", "filenameUTF8", "commentUTF8", "offset", "zip64", "compressionMethod",
	"extraFieldNTFS", "lastAccessDate", "creationDate", "extraFieldExtendedTimestamp",
	"version", "versionMadeBy", "msDosCompatible", "internalFileAttribute", "externalFileAttribute"];

class Entry {

	constructor(data) {
		PROPERTY_NAMES.forEach(name => this[name] = data[name]);
	}

}

/***/ }),

/***/ "./node_modules/@zip.js/zip.js/lib/core/zip-fs-core.js":
/*!*************************************************************!*\
  !*** ./node_modules/@zip.js/zip.js/lib/core/zip-fs-core.js ***!
  \*************************************************************/
/*! exports provided: ERR_ABORT, fs */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fs", function() { return fs; });
/* harmony import */ var _engine_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./engine.js */ "./node_modules/@zip.js/zip.js/lib/core/engine.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ERR_ABORT", function() { return _engine_js__WEBPACK_IMPORTED_MODULE_0__["ERR_ABORT"]; });

/* harmony import */ var _io_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./io.js */ "./node_modules/@zip.js/zip.js/lib/core/io.js");
/* harmony import */ var _zip_reader_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./zip-reader.js */ "./node_modules/@zip.js/zip.js/lib/core/zip-reader.js");
/* harmony import */ var _zip_writer_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./zip-writer.js */ "./node_modules/@zip.js/zip.js/lib/core/zip-writer.js");
/*
 Copyright (c) 2021 Gildas Lormeau. All rights reserved.

 Redistribution and use in source and binary forms, with or without
 modification, are permitted provided that the following conditions are met:

 1. Redistributions of source code must retain the above copyright notice,
 this list of conditions and the following disclaimer.

 2. Redistributions in binary form must reproduce the above copyright 
 notice, this list of conditions and the following disclaimer in 
 the documentation and/or other materials provided with the distribution.

 3. The names of the authors may not be used to endorse or promote products
 derived from this software without specific prior written permission.

 THIS SOFTWARE IS PROVIDED ''AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,
 INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
 FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL JCRAFT,
 INC. OR ANY CONTRIBUTORS TO THIS SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT,
 INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
 OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */








const CHUNK_SIZE = 512 * 1024;

class ZipEntry {

	constructor(fs, name, params, parent) {
		const zipEntry = this;
		if (fs.root && parent && parent.getChildByName(name)) {
			throw new Error("Entry filename already exists");
		}
		if (!params) {
			params = {};
		}
		Object.assign(zipEntry, {
			fs,
			name,
			data: params.data,
			id: fs.entries.length,
			parent,
			children: [],
			uncompressedSize: 0
		});
		fs.entries.push(zipEntry);
		if (parent) {
			zipEntry.parent.children.push(zipEntry);
		}
	}

	moveTo(target) {
		// deprecated
		const zipEntry = this;
		zipEntry.fs.move(zipEntry, target);
	}

	getFullname() {
		return this.getRelativeName();
	}

	getRelativeName(ancestor = this.fs.root) {
		const zipEntry = this;
		let relativeName = zipEntry.name;
		let entry = zipEntry.parent;
		while (entry && entry != ancestor) {
			relativeName = (entry.name ? entry.name + "/" : "") + relativeName;
			entry = entry.parent;
		}
		return relativeName;
	}

	isDescendantOf(ancestor) {
		let entry = this.parent;
		while (entry && entry.id != ancestor.id) {
			entry = entry.parent;
		}
		return Boolean(entry);
	}
}

class ZipFileEntry extends ZipEntry {

	constructor(fs, name, params, parent) {
		super(fs, name, params, parent);
		const zipEntry = this;
		zipEntry.Reader = params.Reader;
		zipEntry.Writer = params.Writer;
		if (params.getData) {
			zipEntry.getData = params.getData;
		}
	}

	async getData(writer, options = {}) {
		const zipEntry = this;
		if (!writer || (writer.constructor == zipEntry.Writer && zipEntry.data)) {
			return zipEntry.data;
		} else {
			zipEntry.reader = new zipEntry.Reader(zipEntry.data, options);
			await zipEntry.reader.init();
			if (!writer.initialized) {
				await writer.init();
			}
			zipEntry.uncompressedSize = zipEntry.reader.size;
			return pipe(zipEntry.reader, writer);
		}
	}

	getText(encoding, options) {
		return this.getData(new _io_js__WEBPACK_IMPORTED_MODULE_1__["TextWriter"](encoding), options);
	}

	getBlob(mimeType, options) {
		return this.getData(new _io_js__WEBPACK_IMPORTED_MODULE_1__["BlobWriter"](mimeType), options);
	}

	getData64URI(mimeType, options) {
		return this.getData(new _io_js__WEBPACK_IMPORTED_MODULE_1__["Data64URIWriter"](mimeType), options);
	}

	getUint8Array(options) {
		return this.getData(new _io_js__WEBPACK_IMPORTED_MODULE_1__["Uint8ArrayWriter"](), options);
	}

	replaceBlob(blob) {
		Object.assign(this, {
			data: blob,
			Reader: _io_js__WEBPACK_IMPORTED_MODULE_1__["BlobReader"],
			Writer: _io_js__WEBPACK_IMPORTED_MODULE_1__["BlobWriter"],
			reader: null
		});
	}

	replaceText(text) {
		Object.assign(this, {
			data: text,
			Reader: _io_js__WEBPACK_IMPORTED_MODULE_1__["TextReader"],
			Writer: _io_js__WEBPACK_IMPORTED_MODULE_1__["TextWriter"],
			reader: null
		});
	}

	replaceData64URI(dataURI) {
		Object.assign(this, {
			data: dataURI,
			Reader: _io_js__WEBPACK_IMPORTED_MODULE_1__["Data64URIReader"],
			Writer: _io_js__WEBPACK_IMPORTED_MODULE_1__["Data64URIWriter"],
			reader: null
		});
	}

	replaceUint8Array(array) {
		Object.assign(this, {
			data: array,
			Reader: _io_js__WEBPACK_IMPORTED_MODULE_1__["Uint8ArrayReader"],
			Writer: _io_js__WEBPACK_IMPORTED_MODULE_1__["Uint8ArrayWriter"],
			reader: null
		});
	}
}

class ZipDirectoryEntry extends ZipEntry {

	constructor(fs, name, params, parent) {
		super(fs, name, params, parent);
		this.directory = true;
	}

	addDirectory(name) {
		return addChild(this, name, null, true);
	}

	addText(name, text) {
		return addChild(this, name, {
			data: text,
			Reader: _io_js__WEBPACK_IMPORTED_MODULE_1__["TextReader"],
			Writer: _io_js__WEBPACK_IMPORTED_MODULE_1__["TextWriter"]
		});
	}

	addBlob(name, blob) {
		return addChild(this, name, {
			data: blob,
			Reader: _io_js__WEBPACK_IMPORTED_MODULE_1__["BlobReader"],
			Writer: _io_js__WEBPACK_IMPORTED_MODULE_1__["BlobWriter"]
		});
	}

	addData64URI(name, dataURI) {
		return addChild(this, name, {
			data: dataURI,
			Reader: _io_js__WEBPACK_IMPORTED_MODULE_1__["Data64URIReader"],
			Writer: _io_js__WEBPACK_IMPORTED_MODULE_1__["Data64URIWriter"]
		});
	}

	addUint8Array(name, array) {
		return addChild(this, name, {
			data: array,
			Reader: _io_js__WEBPACK_IMPORTED_MODULE_1__["Uint8ArrayReader"],
			Writer: _io_js__WEBPACK_IMPORTED_MODULE_1__["Uint8ArrayWriter"]
		});
	}

	addHttpContent(name, url, options = {}) {
		return addChild(this, name, {
			data: url,
			Reader: class extends _io_js__WEBPACK_IMPORTED_MODULE_1__["HttpReader"] {
				constructor(url) {
					super(url, options);
				}
			}
		});
	}

	async addFileSystemEntry(fileSystemEntry) {
		return addFileSystemEntry(this, fileSystemEntry);
	}

	async addData(name, params) {
		return addChild(this, name, params);
	}

	async importBlob(blob, options = {}) {
		await this.importZip(new _io_js__WEBPACK_IMPORTED_MODULE_1__["BlobReader"](blob), options);
	}

	async importData64URI(dataURI, options = {}) {
		await this.importZip(new _io_js__WEBPACK_IMPORTED_MODULE_1__["Data64URIReader"](dataURI), options);
	}

	async importUint8Array(array, options = {}) {
		await this.importZip(new _io_js__WEBPACK_IMPORTED_MODULE_1__["Uint8ArrayReader"](array), options);
	}

	async importHttpContent(url, options = {}) {
		await this.importZip(new _io_js__WEBPACK_IMPORTED_MODULE_1__["HttpReader"](url, options), options);
	}

	async exportBlob(options = {}) {
		return this.exportZip(new _io_js__WEBPACK_IMPORTED_MODULE_1__["BlobWriter"]("application/zip"), options);
	}

	async exportData64URI(options = {}) {
		return this.exportZip(new _io_js__WEBPACK_IMPORTED_MODULE_1__["Data64URIWriter"]("application/zip"), options);
	}

	async exportUint8Array(options = {}) {
		return this.exportZip(new _io_js__WEBPACK_IMPORTED_MODULE_1__["Uint8ArrayWriter"](), options);
	}

	async importZip(reader, options) {
		if (!reader.initialized) {
			await reader.init();
		}
		const zipReader = new _zip_reader_js__WEBPACK_IMPORTED_MODULE_2__["ZipReader"](reader, options);
		const entries = await zipReader.getEntries();
		entries.forEach((entry) => {
			let parent = this;
			const path = entry.filename.split("/");
			const name = path.pop();
			path.forEach(pathPart => parent = parent.getChildByName(pathPart) || new ZipDirectoryEntry(this.fs, pathPart, null, parent));
			if (!entry.directory) {
				addChild(parent, name, {
					data: entry,
					Reader: getZipBlobReader(Object.assign({}, options))
				});
			}
		});
	}

	async exportZip(writer, options) {
		const zipEntry = this;
		await initReaders(zipEntry);
		await writer.init();
		const zipWriter = new _zip_writer_js__WEBPACK_IMPORTED_MODULE_3__["ZipWriter"](writer, options);
		await exportZip(zipWriter, zipEntry, getTotalSize([zipEntry], "uncompressedSize"), options);
		await zipWriter.close();
		return writer.getData();
	}

	getChildByName(name) {
		const children = this.children;
		for (let childIndex = 0; childIndex < children.length; childIndex++) {
			const child = children[childIndex];
			if (child.name == name) {
				return child;
			}
		}
	}
}


class FS {

	constructor() {
		resetFS(this);
	}

	get children() {
		return this.root.children;
	}

	remove(entry) {
		detach(entry);
		this.entries[entry.id] = null;
	}

	move(entry, destination) {
		if (entry == this.root) {
			throw new Error("Root directory cannot be moved");
		} else {
			if (destination.directory) {
				if (!destination.isDescendantOf(entry)) {
					if (entry != destination) {
						if (destination.getChildByName(entry.name)) {
							throw new Error("Entry filename already exists");
						}
						detach(entry);
						entry.parent = destination;
						destination.children.push(entry);
					}
				} else {
					throw new Error("Entry is a ancestor of target entry");
				}
			} else {
				throw new Error("Target entry is not a directory");
			}
		}
	}

	find(fullname) {
		const path = fullname.split("/");
		let node = this.root;
		for (let index = 0; node && index < path.length; index++) {
			node = node.getChildByName(path[index]);
		}
		return node;
	}

	getById(id) {
		return this.entries[id];
	}

	getChildByName(name) {
		return this.root.getChildByName(name);
	}

	addDirectory(name) {
		return this.root.addDirectory(name);
	}

	addText(name, text) {
		return this.root.addText(name, text);
	}

	addBlob(name, blob) {
		return this.root.addBlob(name, blob);
	}

	addData64URI(name, dataURI) {
		return this.root.addData64URI(name, dataURI);
	}

	addHttpContent(name, url, options) {
		return this.root.addHttpContent(name, url, options);
	}

	async addFileSystemEntry(fileSystemEntry) {
		return this.root.addFileSystemEntry(fileSystemEntry);
	}

	async addData(name, params) {
		return this.root.addData(name, params);
	}

	async importBlob(blob, options) {
		resetFS(this);
		await this.root.importBlob(blob, options);
	}

	async importData64URI(dataURI, options) {
		resetFS(this);
		await this.root.importData64URI(dataURI, options);
	}

	async importHttpContent(url, options) {
		resetFS(this);
		await this.root.importHttpContent(url, options);
	}

	async exportBlob(options) {
		return this.root.exportBlob(options);
	}

	async exportData64URI(options) {
		return this.root.exportData64URI(options);
	}
}

const fs = { FS, ZipDirectoryEntry, ZipFileEntry };


function getTotalSize(entries, propertyName) {
	let size = 0;
	entries.forEach(process);
	return size;

	function process(entry) {
		size += entry[propertyName];
		if (entry.children) {
			entry.children.forEach(process);
		}
	}
}

function getZipBlobReader(options) {
	return class extends _io_js__WEBPACK_IMPORTED_MODULE_1__["Reader"] {

		constructor(entry, options = {}) {
			super();
			this.entry = entry;
			this.options = options;
		}

		async init() {
			const zipBlobReader = this;
			zipBlobReader.size = zipBlobReader.entry.uncompressedSize;
			const data = await zipBlobReader.entry.getData(new _io_js__WEBPACK_IMPORTED_MODULE_1__["BlobWriter"](), Object.assign({}, zipBlobReader.options, options));
			zipBlobReader.data = data;
			zipBlobReader.blobReader = new _io_js__WEBPACK_IMPORTED_MODULE_1__["BlobReader"](data);
		}

		async readUint8Array(index, length) {
			return this.blobReader.readUint8Array(index, length);
		}
	};
}

async function initReaders(entry) {
	if (entry.children.length) {
		for (const child of entry.children) {
			if (child.directory) {
				await initReaders(child);
			} else {
				child.reader = new child.Reader(child.data);
				await child.reader.init();
				child.uncompressedSize = child.reader.size;
			}
		}
	}
}

function detach(entry) {
	const children = entry.parent.children;
	children.forEach((child, index) => {
		if (child.id == entry.id) {
			children.splice(index, 1);
		}
	});
}

async function exportZip(zipWriter, entry, totalSize, options) {
	const selectedEntry = entry;
	const entryOffsets = new Map();
	await process(zipWriter, entry);

	async function process(zipWriter, entry) {
		await exportChild();

		async function exportChild() {
			if (options.bufferedWrite) {
				await Promise.all(entry.children.map(processChild));
			} else {
				for (const child of entry.children) {
					await processChild(child);
				}
			}
		}

		async function processChild(child) {
			const name = options.relativePath ? child.getRelativeName(selectedEntry) : child.getFullname();
			await zipWriter.add(name, child.reader, Object.assign({
				directory: child.directory
			}, Object.assign({}, options, {
				onprogress: indexProgress => {
					if (options.onprogress) {
						entryOffsets.set(name, indexProgress);
						try {
							options.onprogress(Array.from(entryOffsets.values()).reduce((previousValue, currentValue) => previousValue + currentValue), totalSize);
						} catch (error) {
							// ignored
						}
					}
				}
			})));
			await process(zipWriter, child);
		}
	}
}

async function addFileSystemEntry(zipEntry, fileSystemEntry) {
	if (fileSystemEntry.isDirectory) {
		const entry = zipEntry.addDirectory(fileSystemEntry.name);
		await addDirectory(entry, fileSystemEntry);
		return entry;
	} else {
		return new Promise((resolve, reject) => fileSystemEntry.file(file => resolve(zipEntry.addBlob(fileSystemEntry.name, file)), reject));
	}

	async function addDirectory(zipEntry, fileEntry) {
		const children = await getChildren(fileEntry);
		for (const child of children) {
			if (child.isDirectory) {
				await addDirectory(zipEntry.addDirectory(child.name), child);
			} else {
				await new Promise((resolve, reject) => {
					child.file(file => {
						const childZipEntry = zipEntry.addBlob(child.name, file);
						childZipEntry.uncompressedSize = file.size;
						resolve(childZipEntry);
					}, reject);
				});
			}
		}
	}

	function getChildren(fileEntry) {
		return new Promise((resolve, reject) => {
			let entries = [];
			if (fileEntry.isDirectory) {
				readEntries(fileEntry.createReader());
			}
			if (fileEntry.isFile) {
				resolve(entries);
			}

			function readEntries(directoryReader) {
				directoryReader.readEntries(temporaryEntries => {
					if (!temporaryEntries.length) {
						resolve(entries);
					} else {
						entries = entries.concat(temporaryEntries);
						readEntries(directoryReader);
					}
				}, reject);
			}
		});
	}
}

function resetFS(fs) {
	fs.entries = [];
	fs.root = new ZipDirectoryEntry(fs);
}

async function pipe(reader, writer) {
	return copyChunk();

	async function copyChunk(chunkIndex = 0) {
		const index = chunkIndex * CHUNK_SIZE;
		if (index < reader.size) {
			const array = await reader.readUint8Array(index, Math.min(CHUNK_SIZE, reader.size - index));
			await writer.writeUint8Array(array);
			return copyChunk(chunkIndex + 1);
		} else {
			return writer.getData();
		}
	}
}

function addChild(parent, name, params, directory) {
	if (parent.directory) {
		return directory ? new ZipDirectoryEntry(parent.fs, name, params, parent) : new ZipFileEntry(parent.fs, name, params, parent);
	} else {
		throw new Error("Parent entry is not a directory");
	}
}

/***/ }),

/***/ "./node_modules/@zip.js/zip.js/lib/core/zip-reader.js":
/*!************************************************************!*\
  !*** ./node_modules/@zip.js/zip.js/lib/core/zip-reader.js ***!
  \************************************************************/
/*! exports provided: ZipReader, ERR_BAD_FORMAT, ERR_EOCDR_NOT_FOUND, ERR_EOCDR_ZIP64_NOT_FOUND, ERR_EOCDR_LOCATOR_ZIP64_NOT_FOUND, ERR_CENTRAL_DIRECTORY_NOT_FOUND, ERR_LOCAL_FILE_HEADER_NOT_FOUND, ERR_EXTRAFIELD_ZIP64_NOT_FOUND, ERR_ENCRYPTED, ERR_UNSUPPORTED_ENCRYPTION, ERR_UNSUPPORTED_COMPRESSION, ERR_INVALID_SIGNATURE, ERR_INVALID_PASSWORD */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ZipReader", function() { return ZipReader; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ERR_BAD_FORMAT", function() { return ERR_BAD_FORMAT; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ERR_EOCDR_NOT_FOUND", function() { return ERR_EOCDR_NOT_FOUND; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ERR_EOCDR_ZIP64_NOT_FOUND", function() { return ERR_EOCDR_ZIP64_NOT_FOUND; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ERR_EOCDR_LOCATOR_ZIP64_NOT_FOUND", function() { return ERR_EOCDR_LOCATOR_ZIP64_NOT_FOUND; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ERR_CENTRAL_DIRECTORY_NOT_FOUND", function() { return ERR_CENTRAL_DIRECTORY_NOT_FOUND; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ERR_LOCAL_FILE_HEADER_NOT_FOUND", function() { return ERR_LOCAL_FILE_HEADER_NOT_FOUND; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ERR_EXTRAFIELD_ZIP64_NOT_FOUND", function() { return ERR_EXTRAFIELD_ZIP64_NOT_FOUND; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ERR_ENCRYPTED", function() { return ERR_ENCRYPTED; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ERR_UNSUPPORTED_ENCRYPTION", function() { return ERR_UNSUPPORTED_ENCRYPTION; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ERR_UNSUPPORTED_COMPRESSION", function() { return ERR_UNSUPPORTED_COMPRESSION; });
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants.js */ "./node_modules/@zip.js/zip.js/lib/core/constants.js");
/* harmony import */ var _configuration_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./configuration.js */ "./node_modules/@zip.js/zip.js/lib/core/configuration.js");
/* harmony import */ var _util_cp437_decode_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./util/cp437-decode.js */ "./node_modules/@zip.js/zip.js/lib/core/util/cp437-decode.js");
/* harmony import */ var _codecs_codec_pool_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./codecs/codec-pool.js */ "./node_modules/@zip.js/zip.js/lib/core/codecs/codec-pool.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ERR_INVALID_SIGNATURE", function() { return _codecs_codec_pool_js__WEBPACK_IMPORTED_MODULE_3__["ERR_INVALID_SIGNATURE"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ERR_INVALID_PASSWORD", function() { return _codecs_codec_pool_js__WEBPACK_IMPORTED_MODULE_3__["ERR_INVALID_PASSWORD"]; });

/* harmony import */ var _codecs_crc32_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./codecs/crc32.js */ "./node_modules/@zip.js/zip.js/lib/core/codecs/crc32.js");
/* harmony import */ var _engine_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./engine.js */ "./node_modules/@zip.js/zip.js/lib/core/engine.js");
/* harmony import */ var _zip_entry_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./zip-entry.js */ "./node_modules/@zip.js/zip.js/lib/core/zip-entry.js");
/*
 Copyright (c) 2021 Gildas Lormeau. All rights reserved.

 Redistribution and use in source and binary forms, with or without
 modification, are permitted provided that the following conditions are met:

 1. Redistributions of source code must retain the above copyright notice,
 this list of conditions and the following disclaimer.

 2. Redistributions in binary form must reproduce the above copyright 
 notice, this list of conditions and the following disclaimer in 
 the documentation and/or other materials provided with the distribution.

 3. The names of the authors may not be used to endorse or promote products
 derived from this software without specific prior written permission.

 THIS SOFTWARE IS PROVIDED ''AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,
 INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
 FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL JCRAFT,
 INC. OR ANY CONTRIBUTORS TO THIS SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT,
 INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
 OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/* global TextDecoder, BigInt */











const ERR_BAD_FORMAT = "File format is not recognized";
const ERR_EOCDR_NOT_FOUND = "End of central directory not found";
const ERR_EOCDR_ZIP64_NOT_FOUND = "End of Zip64 central directory not found";
const ERR_EOCDR_LOCATOR_ZIP64_NOT_FOUND = "End of Zip64 central directory locator not found";
const ERR_CENTRAL_DIRECTORY_NOT_FOUND = "Central directory header not found";
const ERR_LOCAL_FILE_HEADER_NOT_FOUND = "Local file header not found";
const ERR_EXTRAFIELD_ZIP64_NOT_FOUND = "Zip64 extra field not found";
const ERR_ENCRYPTED = "File contains encrypted entry";
const ERR_UNSUPPORTED_ENCRYPTION = "Encryption method not supported";
const ERR_UNSUPPORTED_COMPRESSION = "Compression method not supported";
const CHARSET_UTF8 = "utf-8";
const ZIP64_PROPERTIES = ["uncompressedSize", "compressedSize", "offset"];

class ZipReader {

	constructor(reader, options = {}) {
		Object.assign(this, {
			reader,
			options,
			config: Object(_configuration_js__WEBPACK_IMPORTED_MODULE_1__["getConfiguration"])()
		});
	}

	async getEntries(options = {}) {
		const zipReader = this;
		const reader = zipReader.reader;
		if (!reader.initialized) {
			await reader.init();
		}
		if (reader.size < _constants_js__WEBPACK_IMPORTED_MODULE_0__["END_OF_CENTRAL_DIR_LENGTH"]) {
			throw new Error(ERR_BAD_FORMAT);
		}
		const endOfDirectoryInfo = await seekSignature(reader, _constants_js__WEBPACK_IMPORTED_MODULE_0__["END_OF_CENTRAL_DIR_SIGNATURE"], reader.size, _constants_js__WEBPACK_IMPORTED_MODULE_0__["END_OF_CENTRAL_DIR_LENGTH"], _constants_js__WEBPACK_IMPORTED_MODULE_0__["MAX_16_BITS"] * 16);
		if (!endOfDirectoryInfo) {
			throw new Error(ERR_EOCDR_NOT_FOUND);
		}
		const endOfDirectoryView = getDataView(endOfDirectoryInfo);
		let directoryDataLength = getUint32(endOfDirectoryView, 12);
		let directoryDataOffset = getUint32(endOfDirectoryView, 16);
		let filesLength = getUint16(endOfDirectoryView, 8);
		let prependedDataLength = 0;
		if (directoryDataOffset == _constants_js__WEBPACK_IMPORTED_MODULE_0__["MAX_32_BITS"] || directoryDataLength == _constants_js__WEBPACK_IMPORTED_MODULE_0__["MAX_32_BITS"] || filesLength == _constants_js__WEBPACK_IMPORTED_MODULE_0__["MAX_16_BITS"]) {
			const endOfDirectoryLocatorArray = await readUint8Array(reader, endOfDirectoryInfo.offset - _constants_js__WEBPACK_IMPORTED_MODULE_0__["ZIP64_END_OF_CENTRAL_DIR_LOCATOR_LENGTH"], _constants_js__WEBPACK_IMPORTED_MODULE_0__["ZIP64_END_OF_CENTRAL_DIR_LOCATOR_LENGTH"]);
			const endOfDirectoryLocatorView = getDataView(endOfDirectoryLocatorArray);
			if (getUint32(endOfDirectoryLocatorView, 0) != _constants_js__WEBPACK_IMPORTED_MODULE_0__["ZIP64_END_OF_CENTRAL_DIR_LOCATOR_SIGNATURE"]) {
				throw new Error(ERR_EOCDR_ZIP64_NOT_FOUND);
			}
			directoryDataOffset = getBigUint64(endOfDirectoryLocatorView, 8);
			let endOfDirectoryArray = await readUint8Array(reader, directoryDataOffset, _constants_js__WEBPACK_IMPORTED_MODULE_0__["ZIP64_END_OF_CENTRAL_DIR_LENGTH"]);
			let endOfDirectoryView = getDataView(endOfDirectoryArray);
			const expectedDirectoryDataOffset = endOfDirectoryInfo.offset - _constants_js__WEBPACK_IMPORTED_MODULE_0__["ZIP64_END_OF_CENTRAL_DIR_LOCATOR_LENGTH"] - _constants_js__WEBPACK_IMPORTED_MODULE_0__["ZIP64_END_OF_CENTRAL_DIR_LENGTH"];
			if (getUint32(endOfDirectoryView, 0) != _constants_js__WEBPACK_IMPORTED_MODULE_0__["ZIP64_END_OF_CENTRAL_DIR_SIGNATURE"] && directoryDataOffset != expectedDirectoryDataOffset) {
				const originalDirectoryDataOffset = directoryDataOffset;
				directoryDataOffset = expectedDirectoryDataOffset;
				prependedDataLength = directoryDataOffset - originalDirectoryDataOffset;
				endOfDirectoryArray = await readUint8Array(reader, directoryDataOffset, _constants_js__WEBPACK_IMPORTED_MODULE_0__["ZIP64_END_OF_CENTRAL_DIR_LENGTH"]);
				endOfDirectoryView = getDataView(endOfDirectoryArray);
			}
			if (getUint32(endOfDirectoryView, 0) != _constants_js__WEBPACK_IMPORTED_MODULE_0__["ZIP64_END_OF_CENTRAL_DIR_SIGNATURE"]) {
				throw new Error(ERR_EOCDR_LOCATOR_ZIP64_NOT_FOUND);
			}
			filesLength = getBigUint64(endOfDirectoryView, 32);
			directoryDataLength = getBigUint64(endOfDirectoryView, 40);
			directoryDataOffset -= directoryDataLength;
		}
		if (directoryDataOffset < 0 || directoryDataOffset >= reader.size) {
			throw new Error(ERR_BAD_FORMAT);
		}
		let offset = 0;
		let directoryArray = await readUint8Array(reader, directoryDataOffset, directoryDataLength);
		let directoryView = getDataView(directoryArray);
		const expectedDirectoryDataOffset = endOfDirectoryInfo.offset - directoryDataLength;
		if (getUint32(directoryView, offset) != _constants_js__WEBPACK_IMPORTED_MODULE_0__["CENTRAL_FILE_HEADER_SIGNATURE"] && directoryDataOffset != expectedDirectoryDataOffset) {
			const originalDirectoryDataOffset = directoryDataOffset;
			directoryDataOffset = expectedDirectoryDataOffset;
			prependedDataLength = directoryDataOffset - originalDirectoryDataOffset;
			directoryArray = await readUint8Array(reader, directoryDataOffset, directoryDataLength);
			directoryView = getDataView(directoryArray);
		}
		if (directoryDataOffset < 0 || directoryDataOffset >= reader.size) {
			throw new Error(ERR_BAD_FORMAT);
		}
		const entries = [];
		for (let indexFile = 0; indexFile < filesLength; indexFile++) {
			const fileEntry = new ZipEntry(reader, zipReader.config, zipReader.options);
			if (getUint32(directoryView, offset) != _constants_js__WEBPACK_IMPORTED_MODULE_0__["CENTRAL_FILE_HEADER_SIGNATURE"]) {
				throw new Error(ERR_CENTRAL_DIRECTORY_NOT_FOUND);
			}
			readCommonHeader(fileEntry, directoryView, offset + 6);
			const languageEncodingFlag = Boolean(fileEntry.bitFlag.languageEncodingFlag);
			const filenameOffset = offset + 46;
			const extraFieldOffset = filenameOffset + fileEntry.filenameLength;
			const commentOffset = extraFieldOffset + fileEntry.extraFieldLength;
			const versionMadeBy = getUint16(directoryView, offset + 4);
			const msDosCompatible = (versionMadeBy & 0) == 0;
			Object.assign(fileEntry, {
				versionMadeBy,
				msDosCompatible,
				compressedSize: 0,
				uncompressedSize: 0,
				commentLength: getUint16(directoryView, offset + 32),
				directory: msDosCompatible && ((getUint8(directoryView, offset + 38) & _constants_js__WEBPACK_IMPORTED_MODULE_0__["FILE_ATTR_MSDOS_DIR_MASK"]) == _constants_js__WEBPACK_IMPORTED_MODULE_0__["FILE_ATTR_MSDOS_DIR_MASK"]),
				offset: getUint32(directoryView, offset + 42) + prependedDataLength,
				internalFileAttribute: getUint32(directoryView, offset + 34),
				externalFileAttribute: getUint32(directoryView, offset + 38),
				rawFilename: directoryArray.subarray(filenameOffset, extraFieldOffset),
				filenameUTF8: languageEncodingFlag,
				commentUTF8: languageEncodingFlag,
				rawExtraField: directoryArray.subarray(extraFieldOffset, commentOffset)
			});
			const endOffset = commentOffset + fileEntry.commentLength;
			fileEntry.rawComment = directoryArray.subarray(commentOffset, endOffset);
			fileEntry.filename = decodeString(fileEntry.rawFilename, fileEntry.filenameUTF8 ? CHARSET_UTF8 : getOptionValue(zipReader, options, "filenameEncoding"));
			fileEntry.comment = decodeString(fileEntry.rawComment, fileEntry.commentUTF8 ? CHARSET_UTF8 : getOptionValue(zipReader, options, "commentEncoding"));
			if (!fileEntry.directory && fileEntry.filename.endsWith(_constants_js__WEBPACK_IMPORTED_MODULE_0__["DIRECTORY_SIGNATURE"])) {
				fileEntry.directory = true;
			}
			readCommonFooter(fileEntry, fileEntry, directoryView, offset + 6);
			const entry = new _zip_entry_js__WEBPACK_IMPORTED_MODULE_6__["default"](fileEntry);
			entry.getData = (writer, options) => fileEntry.getData(writer, entry, options);
			entries.push(entry);
			offset = endOffset;
			if (options.onprogress) {
				try {
					options.onprogress(indexFile + 1, filesLength, new _zip_entry_js__WEBPACK_IMPORTED_MODULE_6__["default"](fileEntry));
				} catch (error) {
					// ignored
				}
			}
		}
		return entries;
	}

	async close() {
	}
}



class ZipEntry {

	constructor(reader, config, options) {
		Object.assign(this, {
			reader,
			config,
			options
		});
	}

	async getData(writer, fileEntry, options = {}) {
		const zipEntry = this;
		const {
			reader,
			offset,
			extraFieldAES,
			compressionMethod,
			config,
			bitFlag,
			signature,
			rawLastModDate,
			compressedSize
		} = zipEntry;
		const localDirectory = zipEntry.localDirectory = {};
		if (!reader.initialized) {
			await reader.init();
		}
		let dataArray = await readUint8Array(reader, offset, 30);
		const dataView = getDataView(dataArray);
		let password = getOptionValue(zipEntry, options, "password");
		password = password && password.length && password;
		if (extraFieldAES) {
			if (extraFieldAES.originalCompressionMethod != _constants_js__WEBPACK_IMPORTED_MODULE_0__["COMPRESSION_METHOD_AES"]) {
				throw new Error(ERR_UNSUPPORTED_COMPRESSION);
			}
		}
		if (compressionMethod != _constants_js__WEBPACK_IMPORTED_MODULE_0__["COMPRESSION_METHOD_STORE"] && compressionMethod != _constants_js__WEBPACK_IMPORTED_MODULE_0__["COMPRESSION_METHOD_DEFLATE"]) {
			throw new Error(ERR_UNSUPPORTED_COMPRESSION);
		}
		if (getUint32(dataView, 0) != _constants_js__WEBPACK_IMPORTED_MODULE_0__["LOCAL_FILE_HEADER_SIGNATURE"]) {
			throw new Error(ERR_LOCAL_FILE_HEADER_NOT_FOUND);
		}
		readCommonHeader(localDirectory, dataView, 4);
		dataArray = await readUint8Array(reader, offset, 30 + localDirectory.filenameLength + localDirectory.extraFieldLength);
		localDirectory.rawExtraField = dataArray.subarray(30 + localDirectory.filenameLength);
		readCommonFooter(zipEntry, localDirectory, dataView, 4);
		fileEntry.lastAccessDate = localDirectory.lastAccessDate;
		fileEntry.creationDate = localDirectory.creationDate;
		const encrypted = zipEntry.encrypted && localDirectory.encrypted;
		const zipCrypto = encrypted && !extraFieldAES;
		if (encrypted) {
			if (!zipCrypto && extraFieldAES.strength === undefined) {
				throw new Error(ERR_UNSUPPORTED_ENCRYPTION);
			} else if (!password) {
				throw new Error(ERR_ENCRYPTED);
			}
		}
		const codec = await Object(_codecs_codec_pool_js__WEBPACK_IMPORTED_MODULE_3__["createCodec"])(config.Inflate, {
			codecType: _codecs_codec_pool_js__WEBPACK_IMPORTED_MODULE_3__["CODEC_INFLATE"],
			password,
			zipCrypto,
			encryptionStrength: extraFieldAES && extraFieldAES.strength,
			signed: getOptionValue(zipEntry, options, "checkSignature"),
			passwordVerification: zipCrypto && (bitFlag.dataDescriptor ? ((rawLastModDate >>> 8) & 0xFF) : ((signature >>> 24) & 0xFF)),
			signature,
			compressed: compressionMethod != 0,
			encrypted,
			useWebWorkers: getOptionValue(zipEntry, options, "useWebWorkers")
		}, config);
		if (!writer.initialized) {
			await writer.init();
		}
		const signal = getOptionValue(zipEntry, options, "signal");
		const dataOffset = offset + 30 + localDirectory.filenameLength + localDirectory.extraFieldLength;
		await Object(_engine_js__WEBPACK_IMPORTED_MODULE_5__["processData"])(codec, reader, writer, dataOffset, compressedSize, config, { onprogress: options.onprogress, signal });
		return writer.getData();
	}
}

function readCommonHeader(directory, dataView, offset) {
	const rawBitFlag = directory.rawBitFlag = getUint16(dataView, offset + 2);
	const encrypted = (rawBitFlag & _constants_js__WEBPACK_IMPORTED_MODULE_0__["BITFLAG_ENCRYPTED"]) == _constants_js__WEBPACK_IMPORTED_MODULE_0__["BITFLAG_ENCRYPTED"];
	const rawLastModDate = getUint32(dataView, offset + 6);
	Object.assign(directory, {
		encrypted,
		version: getUint16(dataView, offset),
		bitFlag: {
			level: (rawBitFlag & _constants_js__WEBPACK_IMPORTED_MODULE_0__["BITFLAG_LEVEL"]) >> 1,
			dataDescriptor: (rawBitFlag & _constants_js__WEBPACK_IMPORTED_MODULE_0__["BITFLAG_DATA_DESCRIPTOR"]) == _constants_js__WEBPACK_IMPORTED_MODULE_0__["BITFLAG_DATA_DESCRIPTOR"],
			languageEncodingFlag: (rawBitFlag & _constants_js__WEBPACK_IMPORTED_MODULE_0__["BITFLAG_LANG_ENCODING_FLAG"]) == _constants_js__WEBPACK_IMPORTED_MODULE_0__["BITFLAG_LANG_ENCODING_FLAG"]
		},
		rawLastModDate,
		lastModDate: getDate(rawLastModDate),
		filenameLength: getUint16(dataView, offset + 22),
		extraFieldLength: getUint16(dataView, offset + 24)
	});
}

function readCommonFooter(fileEntry, directory, dataView, offset) {
	const rawExtraField = directory.rawExtraField;
	const extraField = directory.extraField = new Map();
	const rawExtraFieldView = getDataView(new Uint8Array(rawExtraField));
	let offsetExtraField = 0;
	try {
		while (offsetExtraField < rawExtraField.length) {
			const type = getUint16(rawExtraFieldView, offsetExtraField);
			const size = getUint16(rawExtraFieldView, offsetExtraField + 2);
			extraField.set(type, {
				type,
				data: rawExtraField.slice(offsetExtraField + 4, offsetExtraField + 4 + size)
			});
			offsetExtraField += 4 + size;
		}
	} catch (error) {
		// ignored
	}
	const compressionMethod = getUint16(dataView, offset + 4);
	directory.signature = getUint32(dataView, offset + 10);
	directory.uncompressedSize = getUint32(dataView, offset + 18);
	directory.compressedSize = getUint32(dataView, offset + 14);
	const extraFieldZip64 = extraField.get(_constants_js__WEBPACK_IMPORTED_MODULE_0__["EXTRAFIELD_TYPE_ZIP64"]);
	if (extraFieldZip64) {
		readExtraFieldZip64(extraFieldZip64, directory);
		directory.extraFieldZip64 = extraFieldZip64;
	}
	const extraFieldUnicodePath = extraField.get(_constants_js__WEBPACK_IMPORTED_MODULE_0__["EXTRAFIELD_TYPE_UNICODE_PATH"]);
	if (extraFieldUnicodePath) {
		readExtraFieldUnicode(extraFieldUnicodePath, "filename", "rawFilename", directory, fileEntry);
		directory.extraFieldUnicodePath = extraFieldUnicodePath;
	}
	const extraFieldUnicodeComment = extraField.get(_constants_js__WEBPACK_IMPORTED_MODULE_0__["EXTRAFIELD_TYPE_UNICODE_COMMENT"]);
	if (extraFieldUnicodeComment) {
		readExtraFieldUnicode(extraFieldUnicodeComment, "comment", "rawComment", directory, fileEntry);
		directory.extraFieldUnicodeComment = extraFieldUnicodeComment;
	}
	const extraFieldAES = extraField.get(_constants_js__WEBPACK_IMPORTED_MODULE_0__["EXTRAFIELD_TYPE_AES"]);
	if (extraFieldAES) {
		readExtraFieldAES(extraFieldAES, directory, compressionMethod);
		directory.extraFieldAES = extraFieldAES;
	} else {
		directory.compressionMethod = compressionMethod;
	}
	const extraFieldNTFS = extraField.get(_constants_js__WEBPACK_IMPORTED_MODULE_0__["EXTRAFIELD_TYPE_NTFS"]);
	if (extraFieldNTFS) {
		readExtraFieldNTFS(extraFieldNTFS, directory);
		directory.extraFieldNTFS = extraFieldNTFS;
	}
	const extraFieldExtendedTimestamp = extraField.get(_constants_js__WEBPACK_IMPORTED_MODULE_0__["EXTRAFIELD_TYPE_EXTENDED_TIMESTAMP"]);
	if (extraFieldExtendedTimestamp) {
		readExtraFieldExtendedTimestamp(extraFieldExtendedTimestamp, directory);
		directory.extraFieldExtendedTimestamp = extraFieldExtendedTimestamp;
	}
}

function readExtraFieldZip64(extraFieldZip64, directory) {
	directory.zip64 = true;
	const extraFieldView = getDataView(extraFieldZip64.data);
	extraFieldZip64.values = [];
	for (let indexValue = 0; indexValue < Math.floor(extraFieldZip64.data.length / 8); indexValue++) {
		extraFieldZip64.values.push(getBigUint64(extraFieldView, 0 + indexValue * 8));
	}
	const missingProperties = ZIP64_PROPERTIES.filter(propertyName => directory[propertyName] == _constants_js__WEBPACK_IMPORTED_MODULE_0__["MAX_32_BITS"]);
	for (let indexMissingProperty = 0; indexMissingProperty < missingProperties.length; indexMissingProperty++) {
		extraFieldZip64[missingProperties[indexMissingProperty]] = extraFieldZip64.values[indexMissingProperty];
	}
	ZIP64_PROPERTIES.forEach(propertyName => {
		if (directory[propertyName] == _constants_js__WEBPACK_IMPORTED_MODULE_0__["MAX_32_BITS"]) {
			if (extraFieldZip64[propertyName] !== undefined) {
				directory[propertyName] = extraFieldZip64[propertyName];
			} else {
				throw new Error(ERR_EXTRAFIELD_ZIP64_NOT_FOUND);
			}
		}
	});
}

function readExtraFieldUnicode(extraFieldUnicode, propertyName, rawPropertyName, directory, fileEntry) {
	const extraFieldView = getDataView(extraFieldUnicode.data);
	extraFieldUnicode.version = getUint8(extraFieldView, 0);
	extraFieldUnicode.signature = getUint32(extraFieldView, 1);
	const crc32 = new _codecs_crc32_js__WEBPACK_IMPORTED_MODULE_4__["default"]();
	crc32.append(fileEntry[rawPropertyName]);
	const dataViewSignature = getDataView(new Uint8Array(4));
	dataViewSignature.setUint32(0, crc32.get(), true);
	extraFieldUnicode[propertyName] = (new TextDecoder()).decode(extraFieldUnicode.data.subarray(5));
	extraFieldUnicode.valid = !fileEntry.bitFlag.languageEncodingFlag && extraFieldUnicode.signature == getUint32(dataViewSignature, 0);
	if (extraFieldUnicode.valid) {
		directory[propertyName] = extraFieldUnicode[propertyName];
		directory[propertyName + "UTF8"] = true;
	}
}

function readExtraFieldAES(extraFieldAES, directory, compressionMethod) {
	const extraFieldView = getDataView(extraFieldAES.data);
	extraFieldAES.vendorVersion = getUint8(extraFieldView, 0);
	extraFieldAES.vendorId = getUint8(extraFieldView, 2);
	const strength = getUint8(extraFieldView, 4);
	extraFieldAES.strength = strength;
	extraFieldAES.originalCompressionMethod = compressionMethod;
	directory.compressionMethod = extraFieldAES.compressionMethod = getUint16(extraFieldView, 5);
}

function readExtraFieldNTFS(extraFieldNTFS, directory) {
	const extraFieldView = getDataView(extraFieldNTFS.data);
	let offsetExtraField = 4;
	let tag1Data;
	try {
		while (offsetExtraField < extraFieldNTFS.data.length && !tag1Data) {
			const tagValue = getUint16(extraFieldView, offsetExtraField);
			const attributeSize = getUint16(extraFieldView, offsetExtraField + 2);
			if (tagValue == _constants_js__WEBPACK_IMPORTED_MODULE_0__["EXTRAFIELD_TYPE_NTFS_TAG1"]) {
				tag1Data = extraFieldNTFS.data.slice(offsetExtraField + 4, offsetExtraField + 4 + attributeSize);
			}
			offsetExtraField += 4 + attributeSize;
		}
	} catch (error) {
		// ignored
	}
	try {
		if (tag1Data && tag1Data.length == 24) {
			const tag1View = getDataView(tag1Data);
			const rawLastModDate = tag1View.getBigUint64(0, true);
			const rawLastAccessDate = tag1View.getBigUint64(8, true);
			const rawCreationDate = tag1View.getBigUint64(16, true);
			Object.assign(extraFieldNTFS, {
				rawLastModDate,
				rawLastAccessDate,
				rawCreationDate
			});
			const lastModDate = getDateNTFS(rawLastModDate);
			const lastAccessDate = getDateNTFS(rawLastAccessDate);
			const creationDate = getDateNTFS(rawCreationDate);
			const extraFieldData = { lastModDate, lastAccessDate, creationDate };
			Object.assign(extraFieldNTFS, extraFieldData);
			Object.assign(directory, extraFieldData);
		}
	} catch (error) {
		// ignored
	}
}

function readExtraFieldExtendedTimestamp(extraFieldExtendedTimestamp, directory) {
	const extraFieldView = getDataView(extraFieldExtendedTimestamp.data);
	const flags = getUint8(extraFieldView, 0);
	const timeProperties = [];
	const timeRawProperties = [];
	if ((flags & 0x1) == 0x1) {
		timeProperties.push("lastModDate");
		timeRawProperties.push("rawLastModDate");
	}
	if ((flags & 0x2) == 0x2) {
		timeProperties.push("lastAccessDate");
		timeRawProperties.push("rawLastAccessDate");
	}
	if ((flags & 0x4) == 0x4) {
		timeProperties.push("creationDate");
		timeRawProperties.push("rawCreationDate");
	}
	let offset = 1;
	timeProperties.forEach((propertyName, indexProperty) => {
		if (extraFieldExtendedTimestamp.data.length >= offset + 4) {
			const time = getUint32(extraFieldView, offset);
			directory[propertyName] = extraFieldExtendedTimestamp[propertyName] = new Date(time * 1000);
			const rawPropertyName = timeRawProperties[indexProperty];
			extraFieldExtendedTimestamp[rawPropertyName] = time;
		}
		offset += 4;
	});
}

async function seekSignature(reader, signature, startOffset, minimumBytes, maximumLength) {
	const signatureArray = new Uint8Array(4);
	const signatureView = getDataView(signatureArray);
	setUint32(signatureView, 0, signature);
	const maximumBytes = minimumBytes + maximumLength;
	return (await seek(minimumBytes)) || await seek(Math.min(maximumBytes, startOffset));

	async function seek(length) {
		const offset = startOffset - length;
		const bytes = await readUint8Array(reader, offset, length);
		for (let indexByte = bytes.length - minimumBytes; indexByte >= 0; indexByte--) {
			if (bytes[indexByte] == signatureArray[0] && bytes[indexByte + 1] == signatureArray[1] &&
				bytes[indexByte + 2] == signatureArray[2] && bytes[indexByte + 3] == signatureArray[3]) {
				return {
					offset: offset + indexByte,
					buffer: bytes.slice(indexByte, indexByte + minimumBytes).buffer
				};
			}
		}
	}
}

function getOptionValue(zipReader, options, name) {
	return options[name] === undefined ? zipReader.options[name] : options[name];
}

function decodeString(value, encoding) {
	if (!encoding || encoding.trim().toLowerCase() == "cp437") {
		return Object(_util_cp437_decode_js__WEBPACK_IMPORTED_MODULE_2__["default"])(value);
	} else {
		return (new TextDecoder(encoding)).decode(value);
	}
}

function getDate(timeRaw) {
	const date = (timeRaw & 0xffff0000) >> 16, time = timeRaw & 0x0000ffff;
	try {
		return new Date(1980 + ((date & 0xFE00) >> 9), ((date & 0x01E0) >> 5) - 1, date & 0x001F, (time & 0xF800) >> 11, (time & 0x07E0) >> 5, (time & 0x001F) * 2, 0);
	} catch (error) {
		// ignored
	}
}

function getDateNTFS(timeRaw) {
	return new Date((Number((timeRaw / BigInt(10000)) - BigInt(11644473600000))));
}

function getUint8(view, offset) {
	return view.getUint8(offset);
}

function getUint16(view, offset) {
	return view.getUint16(offset, true);
}

function getUint32(view, offset) {
	return view.getUint32(offset, true);
}

function getBigUint64(view, offset) {
	return Number(view.getBigUint64(offset, true));
}

function setUint32(view, offset, value) {
	view.setUint32(offset, value, true);
}

function getDataView(array) {
	return new DataView(array.buffer);
}

function readUint8Array(reader, offset, size) {
	return reader.readUint8Array(offset, size);
}

/***/ }),

/***/ "./node_modules/@zip.js/zip.js/lib/core/zip-writer.js":
/*!************************************************************!*\
  !*** ./node_modules/@zip.js/zip.js/lib/core/zip-writer.js ***!
  \************************************************************/
/*! exports provided: ZipWriter, ERR_DUPLICATED_NAME, ERR_INVALID_COMMENT, ERR_INVALID_ENTRY_NAME, ERR_INVALID_ENTRY_COMMENT, ERR_INVALID_VERSION, ERR_INVALID_EXTRAFIELD_TYPE, ERR_INVALID_EXTRAFIELD_DATA, ERR_INVALID_ENCRYPTION_STRENGTH, ERR_UNSUPPORTED_FORMAT */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ZipWriter", function() { return ZipWriter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ERR_DUPLICATED_NAME", function() { return ERR_DUPLICATED_NAME; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ERR_INVALID_COMMENT", function() { return ERR_INVALID_COMMENT; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ERR_INVALID_ENTRY_NAME", function() { return ERR_INVALID_ENTRY_NAME; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ERR_INVALID_ENTRY_COMMENT", function() { return ERR_INVALID_ENTRY_COMMENT; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ERR_INVALID_VERSION", function() { return ERR_INVALID_VERSION; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ERR_INVALID_EXTRAFIELD_TYPE", function() { return ERR_INVALID_EXTRAFIELD_TYPE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ERR_INVALID_EXTRAFIELD_DATA", function() { return ERR_INVALID_EXTRAFIELD_DATA; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ERR_INVALID_ENCRYPTION_STRENGTH", function() { return ERR_INVALID_ENCRYPTION_STRENGTH; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ERR_UNSUPPORTED_FORMAT", function() { return ERR_UNSUPPORTED_FORMAT; });
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants.js */ "./node_modules/@zip.js/zip.js/lib/core/constants.js");
/* harmony import */ var _configuration_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./configuration.js */ "./node_modules/@zip.js/zip.js/lib/core/configuration.js");
/* harmony import */ var _codecs_codec_pool_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./codecs/codec-pool.js */ "./node_modules/@zip.js/zip.js/lib/core/codecs/codec-pool.js");
/* harmony import */ var _io_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./io.js */ "./node_modules/@zip.js/zip.js/lib/core/io.js");
/* harmony import */ var _engine_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./engine.js */ "./node_modules/@zip.js/zip.js/lib/core/engine.js");
/* harmony import */ var _zip_entry_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./zip-entry.js */ "./node_modules/@zip.js/zip.js/lib/core/zip-entry.js");
/*
 Copyright (c) 2021 Gildas Lormeau. All rights reserved.

 Redistribution and use in source and binary forms, with or without
 modification, are permitted provided that the following conditions are met:

 1. Redistributions of source code must retain the above copyright notice,
 this list of conditions and the following disclaimer.

 2. Redistributions in binary form must reproduce the above copyright 
 notice, this list of conditions and the following disclaimer in 
 the documentation and/or other materials provided with the distribution.

 3. The names of the authors may not be used to endorse or promote products
 derived from this software without specific prior written permission.

 THIS SOFTWARE IS PROVIDED ''AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,
 INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
 FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL JCRAFT,
 INC. OR ANY CONTRIBUTORS TO THIS SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT,
 INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
 OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/* global BigInt, TextEncoder, FileReader */










const ERR_DUPLICATED_NAME = "File already exists";
const ERR_INVALID_COMMENT = "Zip file comment exceeds 64KB";
const ERR_INVALID_ENTRY_COMMENT = "File entry comment exceeds 64KB";
const ERR_INVALID_ENTRY_NAME = "File entry name exceeds 64KB";
const ERR_INVALID_VERSION = "Version exceeds 65535";
const ERR_INVALID_ENCRYPTION_STRENGTH = "The strength must equal 1, 2, or 3";
const ERR_INVALID_EXTRAFIELD_TYPE = "Extra field type exceeds 65535";
const ERR_INVALID_EXTRAFIELD_DATA = "Extra field data exceeds 64KB";
const ERR_UNSUPPORTED_FORMAT = "Zip64 is not supported";

const EXTRAFIELD_DATA_AES = new Uint8Array([0x07, 0x00, 0x02, 0x00, 0x41, 0x45, 0x03, 0x00, 0x00]);
const EXTRAFIELD_LENGTH_ZIP64 = 24;

let workers = 0;

class ZipWriter {

	constructor(writer, options = {}) {
		Object.assign(this, {
			writer,
			options,
			config: Object(_configuration_js__WEBPACK_IMPORTED_MODULE_1__["getConfiguration"])(),
			files: new Map(),
			offset: writer.size,
			pendingCompressedSize: 0,
			pendingEntries: []
		});
	}

	async add(name = "", reader, options = {}) {
		const zipWriter = this;
		if (workers < zipWriter.config.maxWorkers) {
			workers++;
			try {
				return await addFile(zipWriter, name, reader, options);
			} finally {
				workers--;
				const pendingEntry = zipWriter.pendingEntries.shift();
				if (pendingEntry) {
					zipWriter.add(pendingEntry.name, pendingEntry.reader, pendingEntry.options)
						.then(pendingEntry.resolve)
						.catch(pendingEntry.reject);
				}
			}
		} else {
			return new Promise((resolve, reject) => zipWriter.pendingEntries.push({ name, reader, options, resolve, reject }));
		}
	}

	async close(comment = new Uint8Array(0), options = {}) {
		await closeFile(this, comment, options);
		return this.writer.getData();
	}
}



async function addFile(zipWriter, name, reader, options) {
	name = name.trim();
	if (options.directory && (!name.endsWith(_constants_js__WEBPACK_IMPORTED_MODULE_0__["DIRECTORY_SIGNATURE"]))) {
		name += _constants_js__WEBPACK_IMPORTED_MODULE_0__["DIRECTORY_SIGNATURE"];
	} else {
		options.directory = name.endsWith(_constants_js__WEBPACK_IMPORTED_MODULE_0__["DIRECTORY_SIGNATURE"]);
	}
	if (zipWriter.files.has(name)) {
		throw new Error(ERR_DUPLICATED_NAME);
	}
	const rawFilename = (new TextEncoder()).encode(name);
	if (rawFilename.length > _constants_js__WEBPACK_IMPORTED_MODULE_0__["MAX_16_BITS"]) {
		throw new Error(ERR_INVALID_ENTRY_NAME);
	}
	const comment = options.comment || "";
	const rawComment = (new TextEncoder()).encode(comment);
	if (rawComment.length > _constants_js__WEBPACK_IMPORTED_MODULE_0__["MAX_16_BITS"]) {
		throw new Error(ERR_INVALID_ENTRY_COMMENT);
	}
	const version = zipWriter.options.version || options.version || 0;
	if (version > _constants_js__WEBPACK_IMPORTED_MODULE_0__["MAX_16_BITS"]) {
		throw new Error(ERR_INVALID_VERSION);
	}
	const versionMadeBy = zipWriter.options.versionMadeBy || options.versionMadeBy || 20;
	if (versionMadeBy > _constants_js__WEBPACK_IMPORTED_MODULE_0__["MAX_16_BITS"]) {
		throw new Error(ERR_INVALID_VERSION);
	}
	const lastModDate = getOptionValue(zipWriter, options, "lastModDate") || new Date();
	const lastAccessDate = getOptionValue(zipWriter, options, "lastAccessDate");
	const creationDate = getOptionValue(zipWriter, options, "creationDate");
	const password = getOptionValue(zipWriter, options, "password");
	const encryptionStrength = getOptionValue(zipWriter, options, "encryptionStrength") || 3;
	const zipCrypto = getOptionValue(zipWriter, options, "zipCrypto");
	if (password !== undefined && encryptionStrength !== undefined && (encryptionStrength < 1 || encryptionStrength > 3)) {
		throw new Error(ERR_INVALID_ENCRYPTION_STRENGTH);
	}
	let rawExtraField = new Uint8Array(0);
	const extraField = options.extraField;
	if (extraField) {
		let extraFieldSize = 0;
		let offset = 0;
		extraField.forEach(data => extraFieldSize += 4 + data.length);
		rawExtraField = new Uint8Array(extraFieldSize);
		extraField.forEach((data, type) => {
			if (type > _constants_js__WEBPACK_IMPORTED_MODULE_0__["MAX_16_BITS"]) {
				throw new Error(ERR_INVALID_EXTRAFIELD_TYPE);
			}
			if (data.length > _constants_js__WEBPACK_IMPORTED_MODULE_0__["MAX_16_BITS"]) {
				throw new Error(ERR_INVALID_EXTRAFIELD_DATA);
			}
			arraySet(rawExtraField, new Uint16Array([type]), offset);
			arraySet(rawExtraField, new Uint16Array([data.length]), offset + 2);
			arraySet(rawExtraField, data, offset + 4);
			offset += 4 + data.length;
		});
	}
	let extendedTimestamp = getOptionValue(zipWriter, options, "extendedTimestamp");
	if (extendedTimestamp === undefined) {
		extendedTimestamp = true;
	}
	let maximumCompressedSize = 0;
	let keepOrder = getOptionValue(zipWriter, options, "keepOrder");
	if (keepOrder === undefined) {
		keepOrder = true;
	}
	let uncompressedSize = 0;
	let msDosCompatible = getOptionValue(zipWriter, options, "msDosCompatible");
	if (msDosCompatible === undefined) {
		msDosCompatible = true;
	}
	const internalFileAttribute = getOptionValue(zipWriter, options, "internalFileAttribute") || 0;
	const externalFileAttribute = getOptionValue(zipWriter, options, "externalFileAttribute") || 0;
	if (reader) {
		if (!reader.initialized) {
			await reader.init();
		}
		uncompressedSize = reader.size;
		maximumCompressedSize = getMaximumCompressedSize(uncompressedSize);
	}
	let zip64 = options.zip64 || zipWriter.options.zip64 || false;
	if (zipWriter.offset + zipWriter.pendingCompressedSize >= _constants_js__WEBPACK_IMPORTED_MODULE_0__["MAX_32_BITS"] ||
		uncompressedSize >= _constants_js__WEBPACK_IMPORTED_MODULE_0__["MAX_32_BITS"] ||
		maximumCompressedSize >= _constants_js__WEBPACK_IMPORTED_MODULE_0__["MAX_32_BITS"]) {
		if (options.zip64 === false || zipWriter.options.zip64 === false || !keepOrder) {
			throw new Error(ERR_UNSUPPORTED_FORMAT);
		} else {
			zip64 = true;
		}
	}
	zipWriter.pendingCompressedSize += maximumCompressedSize;
	await Promise.resolve();
	const level = getOptionValue(zipWriter, options, "level");
	const useWebWorkers = getOptionValue(zipWriter, options, "useWebWorkers");
	const bufferedWrite = getOptionValue(zipWriter, options, "bufferedWrite");
	let dataDescriptor = getOptionValue(zipWriter, options, "dataDescriptor");
	let dataDescriptorSignature = getOptionValue(zipWriter, options, "dataDescriptorSignature");
	const signal = getOptionValue(zipWriter, options, "signal");
	if (dataDescriptor === undefined) {
		dataDescriptor = true;
	}
	if (dataDescriptor && dataDescriptorSignature === undefined) {
		dataDescriptorSignature = true;
	}
	const fileEntry = await getFileEntry(zipWriter, name, reader, Object.assign({}, options, {
		rawFilename,
		rawComment,
		version,
		versionMadeBy,
		lastModDate,
		lastAccessDate,
		creationDate,
		rawExtraField,
		zip64,
		password,
		level,
		useWebWorkers,
		encryptionStrength,
		extendedTimestamp,
		zipCrypto,
		bufferedWrite,
		keepOrder,
		dataDescriptor,
		dataDescriptorSignature,
		signal,
		msDosCompatible,
		internalFileAttribute,
		externalFileAttribute
	}));
	if (maximumCompressedSize) {
		zipWriter.pendingCompressedSize -= maximumCompressedSize;
	}
	Object.assign(fileEntry, { name, comment, extraField });
	return new _zip_entry_js__WEBPACK_IMPORTED_MODULE_5__["default"](fileEntry);
}

async function getFileEntry(zipWriter, name, reader, options) {
	const files = zipWriter.files;
	const writer = zipWriter.writer;
	const previousFileEntry = Array.from(files.values()).pop();
	let fileEntry = {};
	let bufferedWrite;
	let resolveLockUnbufferedWrite;
	let resolveLockCurrentFileEntry;
	files.set(name, fileEntry);
	try {
		let lockPreviousFileEntry;
		let fileWriter;
		let lockCurrentFileEntry;
		if (options.keepOrder) {
			lockPreviousFileEntry = previousFileEntry && previousFileEntry.lock;
		}
		fileEntry.lock = lockCurrentFileEntry = new Promise(resolve => resolveLockCurrentFileEntry = resolve);
		if (options.bufferedWrite || zipWriter.lockWrite || !options.dataDescriptor) {
			fileWriter = new _io_js__WEBPACK_IMPORTED_MODULE_3__["BlobWriter"]();
			fileWriter.init();
			bufferedWrite = true;
		} else {
			zipWriter.lockWrite = new Promise(resolve => resolveLockUnbufferedWrite = resolve);
			if (!writer.initialized) {
				await writer.init();
			}
			fileWriter = writer;
		}
		fileEntry = await createFileEntry(reader, fileWriter, zipWriter.config, options);
		fileEntry.lock = lockCurrentFileEntry;
		files.set(name, fileEntry);
		fileEntry.filename = name;
		if (bufferedWrite) {
			let indexWrittenData = 0;
			const blob = fileWriter.getData();
			await Promise.all([zipWriter.lockWrite, lockPreviousFileEntry]);
			let pendingFileEntry;
			do {
				pendingFileEntry = Array.from(files.values()).find(fileEntry => fileEntry.writingBufferedData);
				if (pendingFileEntry) {
					await pendingFileEntry.lock;
				}
			} while (pendingFileEntry && pendingFileEntry.lock);
			fileEntry.writingBufferedData = true;
			if (!options.dataDescriptor) {
				const headerLength = 26;
				const arrayBuffer = await sliceAsArrayBuffer(blob, 0, headerLength);
				const arrayBufferView = new DataView(arrayBuffer);
				if (!fileEntry.encrypted || options.zipCrypto) {
					setUint32(arrayBufferView, 14, fileEntry.signature);
				}
				if (fileEntry.zip64) {
					setUint32(arrayBufferView, 18, _constants_js__WEBPACK_IMPORTED_MODULE_0__["MAX_32_BITS"]);
					setUint32(arrayBufferView, 22, _constants_js__WEBPACK_IMPORTED_MODULE_0__["MAX_32_BITS"]);
				} else {
					setUint32(arrayBufferView, 18, fileEntry.compressedSize);
					setUint32(arrayBufferView, 22, fileEntry.uncompressedSize);
				}
				await writer.writeUint8Array(new Uint8Array(arrayBuffer));
				indexWrittenData = headerLength;
			}
			await writeBlob(writer, blob, indexWrittenData);
			delete fileEntry.writingBufferedData;
		}
		fileEntry.offset = zipWriter.offset;
		if (fileEntry.zip64) {
			const rawExtraFieldZip64View = getDataView(fileEntry.rawExtraFieldZip64);
			setBigUint64(rawExtraFieldZip64View, 20, BigInt(fileEntry.offset));
		} else if (fileEntry.offset >= _constants_js__WEBPACK_IMPORTED_MODULE_0__["MAX_32_BITS"]) {
			throw new Error(ERR_UNSUPPORTED_FORMAT);
		}
		zipWriter.offset += fileEntry.length;
		return fileEntry;
	} catch (error) {
		if ((bufferedWrite && fileEntry.writingBufferedData) || (!bufferedWrite && fileEntry.dataWritten)) {
			error.corruptedEntry = zipWriter.hasCorruptedEntries = true;
			if (fileEntry.uncompressedSize) {
				zipWriter.offset += fileEntry.uncompressedSize;
			}
		}
		files.delete(name);
		throw error;
	} finally {
		resolveLockCurrentFileEntry();
		if (resolveLockUnbufferedWrite) {
			resolveLockUnbufferedWrite();
		}
	}
}

async function createFileEntry(reader, writer, config, options) {
	const {
		rawFilename,
		lastAccessDate,
		creationDate,
		password,
		level,
		zip64,
		zipCrypto,
		dataDescriptor,
		dataDescriptorSignature,
		directory,
		version,
		versionMadeBy,
		rawComment,
		rawExtraField,
		useWebWorkers,
		onprogress,
		signal,
		encryptionStrength,
		extendedTimestamp,
		msDosCompatible,
		internalFileAttribute,
		externalFileAttribute
	} = options;
	const encrypted = Boolean(password && password.length);
	const compressed = level !== 0 && !directory;
	let rawExtraFieldAES;
	if (encrypted && !zipCrypto) {
		rawExtraFieldAES = new Uint8Array(EXTRAFIELD_DATA_AES.length + 2);
		const extraFieldAESView = getDataView(rawExtraFieldAES);
		setUint16(extraFieldAESView, 0, _constants_js__WEBPACK_IMPORTED_MODULE_0__["EXTRAFIELD_TYPE_AES"]);
		arraySet(rawExtraFieldAES, EXTRAFIELD_DATA_AES, 2);
		setUint8(extraFieldAESView, 8, encryptionStrength);
	} else {
		rawExtraFieldAES = new Uint8Array(0);
	}
	let rawExtraFieldNTFS;
	let rawExtraFieldExtendedTimestamp;
	if (extendedTimestamp) {
		rawExtraFieldExtendedTimestamp = new Uint8Array(9 + (lastAccessDate ? 4 : 0) + (creationDate ? 4 : 0));
		const extraFieldExtendedTimestampView = getDataView(rawExtraFieldExtendedTimestamp);
		setUint16(extraFieldExtendedTimestampView, 0, _constants_js__WEBPACK_IMPORTED_MODULE_0__["EXTRAFIELD_TYPE_EXTENDED_TIMESTAMP"]);
		setUint16(extraFieldExtendedTimestampView, 2, rawExtraFieldExtendedTimestamp.length - 4);
		const extraFieldExtendedTimestampFlag = 0x1 + (lastAccessDate ? 0x2 : 0) + (creationDate ? 0x4 : 0);
		setUint8(extraFieldExtendedTimestampView, 4, extraFieldExtendedTimestampFlag);
		setUint32(extraFieldExtendedTimestampView, 5, Math.floor(options.lastModDate.getTime() / 1000));
		if (lastAccessDate) {
			setUint32(extraFieldExtendedTimestampView, 9, Math.floor(lastAccessDate.getTime() / 1000));
		}
		if (creationDate) {
			setUint32(extraFieldExtendedTimestampView, 13, Math.floor(creationDate.getTime() / 1000));
		}
		try {
			rawExtraFieldNTFS = new Uint8Array(36);
			const extraFieldNTFSView = getDataView(rawExtraFieldNTFS);
			const lastModTimeNTFS = getTimeNTFS(options.lastModDate);
			setUint16(extraFieldNTFSView, 0, _constants_js__WEBPACK_IMPORTED_MODULE_0__["EXTRAFIELD_TYPE_NTFS"]);
			setUint16(extraFieldNTFSView, 2, 32);
			setUint16(extraFieldNTFSView, 8, _constants_js__WEBPACK_IMPORTED_MODULE_0__["EXTRAFIELD_TYPE_NTFS_TAG1"]);
			setUint16(extraFieldNTFSView, 10, 24);
			setBigUint64(extraFieldNTFSView, 12, lastModTimeNTFS);
			setBigUint64(extraFieldNTFSView, 20, getTimeNTFS(lastAccessDate) || lastModTimeNTFS);
			setBigUint64(extraFieldNTFSView, 28, getTimeNTFS(creationDate) || lastModTimeNTFS);
		} catch (error) {
			rawExtraFieldNTFS = new Uint8Array(0);
		}
	} else {
		rawExtraFieldNTFS = rawExtraFieldExtendedTimestamp = new Uint8Array(0);
	}
	const fileEntry = {
		version: version || _constants_js__WEBPACK_IMPORTED_MODULE_0__["VERSION_DEFLATE"],
		versionMadeBy,
		zip64,
		directory: Boolean(directory),
		filenameUTF8: true,
		rawFilename,
		commentUTF8: true,
		rawComment,
		rawExtraFieldZip64: zip64 ? new Uint8Array(EXTRAFIELD_LENGTH_ZIP64 + 4) : new Uint8Array(0),
		rawExtraFieldExtendedTimestamp,
		rawExtraFieldNTFS,
		rawExtraFieldAES,
		rawExtraField,
		extendedTimestamp,
		msDosCompatible,
		internalFileAttribute,
		externalFileAttribute
	};
	let uncompressedSize = fileEntry.uncompressedSize = 0;
	let bitFlag = _constants_js__WEBPACK_IMPORTED_MODULE_0__["BITFLAG_LANG_ENCODING_FLAG"];
	if (dataDescriptor) {
		bitFlag = bitFlag | _constants_js__WEBPACK_IMPORTED_MODULE_0__["BITFLAG_DATA_DESCRIPTOR"];
	}
	let compressionMethod = _constants_js__WEBPACK_IMPORTED_MODULE_0__["COMPRESSION_METHOD_STORE"];
	if (compressed) {
		compressionMethod = _constants_js__WEBPACK_IMPORTED_MODULE_0__["COMPRESSION_METHOD_DEFLATE"];
	}
	if (zip64) {
		fileEntry.version = fileEntry.version > _constants_js__WEBPACK_IMPORTED_MODULE_0__["VERSION_ZIP64"] ? fileEntry.version : _constants_js__WEBPACK_IMPORTED_MODULE_0__["VERSION_ZIP64"];
	}
	if (encrypted) {
		bitFlag = bitFlag | _constants_js__WEBPACK_IMPORTED_MODULE_0__["BITFLAG_ENCRYPTED"];
		if (!zipCrypto) {
			fileEntry.version = fileEntry.version > _constants_js__WEBPACK_IMPORTED_MODULE_0__["VERSION_AES"] ? fileEntry.version : _constants_js__WEBPACK_IMPORTED_MODULE_0__["VERSION_AES"];
			compressionMethod = _constants_js__WEBPACK_IMPORTED_MODULE_0__["COMPRESSION_METHOD_AES"];
			if (compressed) {
				fileEntry.rawExtraFieldAES[9] = _constants_js__WEBPACK_IMPORTED_MODULE_0__["COMPRESSION_METHOD_DEFLATE"];
			}
		}
	}
	fileEntry.compressionMethod = compressionMethod;
	const headerArray = fileEntry.headerArray = new Uint8Array(26);
	const headerView = getDataView(headerArray);
	setUint16(headerView, 0, fileEntry.version);
	setUint16(headerView, 2, bitFlag);
	setUint16(headerView, 4, compressionMethod);
	const dateArray = new Uint32Array(1);
	const dateView = getDataView(dateArray);
	let lastModDate;
	if (options.lastModDate < _constants_js__WEBPACK_IMPORTED_MODULE_0__["MIN_DATE"]) {
		lastModDate = _constants_js__WEBPACK_IMPORTED_MODULE_0__["MIN_DATE"];
	} else if (options.lastModDate > _constants_js__WEBPACK_IMPORTED_MODULE_0__["MAX_DATE"]) {
		lastModDate = _constants_js__WEBPACK_IMPORTED_MODULE_0__["MAX_DATE"];
	} else {
		lastModDate = options.lastModDate;
	}
	setUint16(dateView, 0, (((lastModDate.getHours() << 6) | lastModDate.getMinutes()) << 5) | lastModDate.getSeconds() / 2);
	setUint16(dateView, 2, ((((lastModDate.getFullYear() - 1980) << 4) | (lastModDate.getMonth() + 1)) << 5) | lastModDate.getDate());
	const rawLastModDate = dateArray[0];
	setUint32(headerView, 6, rawLastModDate);
	setUint16(headerView, 22, rawFilename.length);
	const extraFieldLength = rawExtraFieldAES.length + rawExtraFieldExtendedTimestamp.length + rawExtraFieldNTFS.length + fileEntry.rawExtraField.length;
	setUint16(headerView, 24, extraFieldLength);
	const localHeaderArray = new Uint8Array(30 + rawFilename.length + extraFieldLength);
	const localHeaderView = getDataView(localHeaderArray);
	setUint32(localHeaderView, 0, _constants_js__WEBPACK_IMPORTED_MODULE_0__["LOCAL_FILE_HEADER_SIGNATURE"]);
	arraySet(localHeaderArray, headerArray, 4);
	arraySet(localHeaderArray, rawFilename, 30);
	arraySet(localHeaderArray, rawExtraFieldAES, 30 + rawFilename.length);
	arraySet(localHeaderArray, rawExtraFieldExtendedTimestamp, 30 + rawFilename.length + rawExtraFieldAES.length);
	arraySet(localHeaderArray, rawExtraFieldNTFS, 30 + rawFilename.length + rawExtraFieldAES.length + rawExtraFieldExtendedTimestamp.length);
	arraySet(localHeaderArray, fileEntry.rawExtraField, 30 + rawFilename.length + rawExtraFieldAES.length + rawExtraFieldExtendedTimestamp.length + rawExtraFieldNTFS.length);
	let result;
	let compressedSize = 0;
	if (reader) {
		uncompressedSize = fileEntry.uncompressedSize = reader.size;
		const codec = await Object(_codecs_codec_pool_js__WEBPACK_IMPORTED_MODULE_2__["createCodec"])(config.Deflate, {
			codecType: _codecs_codec_pool_js__WEBPACK_IMPORTED_MODULE_2__["CODEC_DEFLATE"],
			level,
			password,
			encryptionStrength,
			zipCrypto: encrypted && zipCrypto,
			passwordVerification: encrypted && zipCrypto && (rawLastModDate >> 8) & 0xFF,
			signed: true,
			compressed,
			encrypted,
			useWebWorkers
		}, config);
		await writer.writeUint8Array(localHeaderArray);
		fileEntry.dataWritten = true;
		result = await Object(_engine_js__WEBPACK_IMPORTED_MODULE_4__["processData"])(codec, reader, writer, 0, uncompressedSize, config, { onprogress, signal });
		compressedSize = result.length;
	} else {
		await writer.writeUint8Array(localHeaderArray);
		fileEntry.dataWritten = true;
	}
	let dataDescriptorArray = new Uint8Array(0);
	let dataDescriptorView, dataDescriptorOffset = 0;
	if (dataDescriptor) {
		dataDescriptorArray = new Uint8Array(zip64 ? (dataDescriptorSignature ? 24 : 20) : (dataDescriptorSignature ? 16 : 12));
		dataDescriptorView = getDataView(dataDescriptorArray);
		if (dataDescriptorSignature) {
			dataDescriptorOffset = 4;
			setUint32(dataDescriptorView, 0, _constants_js__WEBPACK_IMPORTED_MODULE_0__["DATA_DESCRIPTOR_RECORD_SIGNATURE"]);
		}
	}
	if (reader) {
		const signature = result.signature;
		if ((!encrypted || zipCrypto) && signature !== undefined) {
			setUint32(headerView, 10, signature);
			fileEntry.signature = signature;
			if (dataDescriptor) {
				setUint32(dataDescriptorView, dataDescriptorOffset, signature);
			}
		}
		if (zip64) {
			const rawExtraFieldZip64View = getDataView(fileEntry.rawExtraFieldZip64);
			setUint16(rawExtraFieldZip64View, 0, _constants_js__WEBPACK_IMPORTED_MODULE_0__["EXTRAFIELD_TYPE_ZIP64"]);
			setUint16(rawExtraFieldZip64View, 2, EXTRAFIELD_LENGTH_ZIP64);
			setUint32(headerView, 14, _constants_js__WEBPACK_IMPORTED_MODULE_0__["MAX_32_BITS"]);
			setBigUint64(rawExtraFieldZip64View, 12, BigInt(compressedSize));
			setUint32(headerView, 18, _constants_js__WEBPACK_IMPORTED_MODULE_0__["MAX_32_BITS"]);
			setBigUint64(rawExtraFieldZip64View, 4, BigInt(uncompressedSize));
			if (dataDescriptor) {
				setBigUint64(dataDescriptorView, dataDescriptorOffset + 4, BigInt(compressedSize));
				setBigUint64(dataDescriptorView, dataDescriptorOffset + 12, BigInt(uncompressedSize));
			}
		} else {
			setUint32(headerView, 14, compressedSize);
			setUint32(headerView, 18, uncompressedSize);
			if (dataDescriptor) {
				setUint32(dataDescriptorView, dataDescriptorOffset + 4, compressedSize);
				setUint32(dataDescriptorView, dataDescriptorOffset + 8, uncompressedSize);
			}
		}
	}
	if (dataDescriptor) {
		await writer.writeUint8Array(dataDescriptorArray);
	}
	const length = localHeaderArray.length + compressedSize + dataDescriptorArray.length;
	Object.assign(fileEntry, { compressedSize, lastModDate, rawLastModDate, creationDate, lastAccessDate, encrypted, length });
	return fileEntry;
}

async function closeFile(zipWriter, comment, options) {
	const writer = zipWriter.writer;
	const files = zipWriter.files;
	let offset = 0;
	let directoryDataLength = 0;
	let directoryOffset = zipWriter.offset;
	let filesLength = files.size;
	for (const [, fileEntry] of files) {
		directoryDataLength += 46 +
			fileEntry.rawFilename.length +
			fileEntry.rawComment.length +
			fileEntry.rawExtraFieldZip64.length +
			fileEntry.rawExtraFieldAES.length +
			fileEntry.rawExtraFieldExtendedTimestamp.length +
			fileEntry.rawExtraFieldNTFS.length +
			fileEntry.rawExtraField.length;
	}
	let zip64 = options.zip64 || zipWriter.options.zip64 || false;
	if (directoryOffset >= _constants_js__WEBPACK_IMPORTED_MODULE_0__["MAX_32_BITS"] || directoryDataLength >= _constants_js__WEBPACK_IMPORTED_MODULE_0__["MAX_32_BITS"] || filesLength >= _constants_js__WEBPACK_IMPORTED_MODULE_0__["MAX_16_BITS"]) {
		if (options.zip64 === false || zipWriter.options.zip64 === false) {
			throw new Error(ERR_UNSUPPORTED_FORMAT);
		} else {
			zip64 = true;
		}
	}
	const directoryArray = new Uint8Array(directoryDataLength + (zip64 ? _constants_js__WEBPACK_IMPORTED_MODULE_0__["ZIP64_END_OF_CENTRAL_DIR_TOTAL_LENGTH"] : _constants_js__WEBPACK_IMPORTED_MODULE_0__["END_OF_CENTRAL_DIR_LENGTH"]));
	const directoryView = getDataView(directoryArray);
	if (comment && comment.length) {
		if (comment.length <= _constants_js__WEBPACK_IMPORTED_MODULE_0__["MAX_16_BITS"]) {
			setUint16(directoryView, offset + 20, comment.length);
		} else {
			throw new Error(ERR_INVALID_COMMENT);
		}
	}
	for (const [indexFileEntry, fileEntry] of Array.from(files.values()).entries()) {
		const {
			rawFilename,
			rawExtraFieldZip64,
			rawExtraFieldAES,
			rawExtraField,
			rawComment,
			versionMadeBy,
			headerArray,
			directory,
			zip64,
			msDosCompatible,
			internalFileAttribute,
			externalFileAttribute
		} = fileEntry;
		let rawExtraFieldExtendedTimestamp;
		let rawExtraFieldNTFS;
		if (fileEntry.extendedTimestamp) {
			rawExtraFieldNTFS = fileEntry.rawExtraFieldNTFS;
			rawExtraFieldExtendedTimestamp = new Uint8Array(9);
			const extraFieldExtendedTimestampView = getDataView(rawExtraFieldExtendedTimestamp);
			setUint16(extraFieldExtendedTimestampView, 0, _constants_js__WEBPACK_IMPORTED_MODULE_0__["EXTRAFIELD_TYPE_EXTENDED_TIMESTAMP"]);
			setUint16(extraFieldExtendedTimestampView, 2, rawExtraFieldExtendedTimestamp.length - 4);
			setUint8(extraFieldExtendedTimestampView, 4, 0x1);
			setUint32(extraFieldExtendedTimestampView, 5, Math.floor(fileEntry.lastModDate.getTime() / 1000));
		} else {
			rawExtraFieldNTFS = rawExtraFieldExtendedTimestamp = new Uint8Array(0);
		}
		const extraFieldLength = rawExtraFieldZip64.length + rawExtraFieldAES.length + rawExtraFieldExtendedTimestamp.length + rawExtraFieldNTFS.length + rawExtraField.length;
		setUint32(directoryView, offset, _constants_js__WEBPACK_IMPORTED_MODULE_0__["CENTRAL_FILE_HEADER_SIGNATURE"]);
		setUint16(directoryView, offset + 4, versionMadeBy);
		arraySet(directoryArray, headerArray, offset + 6);
		setUint16(directoryView, offset + 30, extraFieldLength);
		setUint16(directoryView, offset + 32, rawComment.length);
		setUint32(directoryView, offset + 34, internalFileAttribute);
		if (externalFileAttribute) {
			setUint32(directoryView, offset + 38, externalFileAttribute);
		} else if (directory && msDosCompatible) {
			setUint8(directoryView, offset + 38, _constants_js__WEBPACK_IMPORTED_MODULE_0__["FILE_ATTR_MSDOS_DIR_MASK"]);
		}
		if (zip64) {
			setUint32(directoryView, offset + 42, _constants_js__WEBPACK_IMPORTED_MODULE_0__["MAX_32_BITS"]);
		} else {
			setUint32(directoryView, offset + 42, fileEntry.offset);
		}
		arraySet(directoryArray, rawFilename, offset + 46);
		arraySet(directoryArray, rawExtraFieldZip64, offset + 46 + rawFilename.length);
		arraySet(directoryArray, rawExtraFieldAES, offset + 46 + rawFilename.length + rawExtraFieldZip64.length);
		arraySet(directoryArray, rawExtraFieldExtendedTimestamp, offset + 46 + rawFilename.length + rawExtraFieldZip64.length + rawExtraFieldAES.length);
		arraySet(directoryArray, rawExtraFieldNTFS, offset + 46 + rawFilename.length + rawExtraFieldZip64.length + rawExtraFieldAES.length + rawExtraFieldExtendedTimestamp.length);
		arraySet(directoryArray, rawExtraField, offset + 46 + rawFilename.length + rawExtraFieldZip64.length + rawExtraFieldAES.length + rawExtraFieldExtendedTimestamp.length + rawExtraFieldNTFS.length);
		arraySet(directoryArray, rawComment, offset + 46 + rawFilename.length + extraFieldLength);
		offset += 46 + rawFilename.length + extraFieldLength + rawComment.length;
		if (options.onprogress) {
			try {
				options.onprogress(indexFileEntry + 1, files.size, new _zip_entry_js__WEBPACK_IMPORTED_MODULE_5__["default"](fileEntry));
			} catch (error) {
				// ignored
			}
		}
	}
	if (zip64) {
		setUint32(directoryView, offset, _constants_js__WEBPACK_IMPORTED_MODULE_0__["ZIP64_END_OF_CENTRAL_DIR_SIGNATURE"]);
		setBigUint64(directoryView, offset + 4, BigInt(44));
		setUint16(directoryView, offset + 12, 45);
		setUint16(directoryView, offset + 14, 45);
		setBigUint64(directoryView, offset + 24, BigInt(filesLength));
		setBigUint64(directoryView, offset + 32, BigInt(filesLength));
		setBigUint64(directoryView, offset + 40, BigInt(directoryDataLength));
		setBigUint64(directoryView, offset + 48, BigInt(directoryOffset));
		setUint32(directoryView, offset + 56, _constants_js__WEBPACK_IMPORTED_MODULE_0__["ZIP64_END_OF_CENTRAL_DIR_LOCATOR_SIGNATURE"]);
		setBigUint64(directoryView, offset + 64, BigInt(directoryOffset) + BigInt(directoryDataLength));
		setUint32(directoryView, offset + 72, _constants_js__WEBPACK_IMPORTED_MODULE_0__["ZIP64_TOTAL_NUMBER_OF_DISKS"]);
		filesLength = _constants_js__WEBPACK_IMPORTED_MODULE_0__["MAX_16_BITS"];
		directoryOffset = _constants_js__WEBPACK_IMPORTED_MODULE_0__["MAX_32_BITS"];
		directoryDataLength = _constants_js__WEBPACK_IMPORTED_MODULE_0__["MAX_32_BITS"];
		offset += 76;
	}
	setUint32(directoryView, offset, _constants_js__WEBPACK_IMPORTED_MODULE_0__["END_OF_CENTRAL_DIR_SIGNATURE"]);
	setUint16(directoryView, offset + 8, filesLength);
	setUint16(directoryView, offset + 10, filesLength);
	setUint32(directoryView, offset + 12, directoryDataLength);
	setUint32(directoryView, offset + 16, directoryOffset);
	await writer.writeUint8Array(directoryArray);
	if (comment && comment.length) {
		await writer.writeUint8Array(comment);
	}
}

function sliceAsArrayBuffer(blob, start, end) {
	const fileReader = new FileReader();
	return new Promise((resolve, reject) => {
		fileReader.onload = event => resolve(event.target.result);
		fileReader.onerror = () => reject(fileReader.error);
		fileReader.readAsArrayBuffer(start || end ? blob.slice(start, end) : blob);
	});
}

async function writeBlob(writer, blob, start = 0) {
	const blockSize = 512 * 1024 * 1024;
	await writeSlice();

	async function writeSlice() {
		if (start < blob.size) {
			const arrayBuffer = await sliceAsArrayBuffer(blob, start, start + blockSize);
			await writer.writeUint8Array(new Uint8Array(arrayBuffer));
			start += blockSize;
			await writeSlice();
		}
	}
}

function getTimeNTFS(date) {
	if (date) {
		return ((BigInt(date.getTime()) + BigInt(11644473600000)) * BigInt(10000));
	}
}

function getOptionValue(zipWriter, options, name) {
	return options[name] === undefined ? zipWriter.options[name] : options[name];
}

function getMaximumCompressedSize(uncompressedSize) {
	return uncompressedSize + (5 * (Math.floor(uncompressedSize / 16383) + 1));
}

function setUint8(view, offset, value) {
	view.setUint8(offset, value);
}

function setUint16(view, offset, value) {
	view.setUint16(offset, value, true);
}

function setUint32(view, offset, value) {
	view.setUint32(offset, value, true);
}

function setBigUint64(view, offset, value) {
	view.setBigUint64(offset, value, true);
}

function arraySet(array, typedArray, offset) {
	array.set(typedArray, offset);
}

function getDataView(array) {
	return new DataView(array.buffer);
}

/***/ }),

/***/ "./node_modules/@zip.js/zip.js/lib/z-worker-inline.js":
/*!************************************************************!*\
  !*** ./node_modules/@zip.js/zip.js/lib/z-worker-inline.js ***!
  \************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _core_configuration_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./core/configuration.js */ "./node_modules/@zip.js/zip.js/lib/core/configuration.js");
/* harmony default export */ __webpack_exports__["default"] = (()=>{if("function"==typeof URL.createObjectURL){const e='\n\t\t\t\n\nconst t=[];for(let e=0;e<256;e++){let n=e;for(let t=0;t<8;t++)1&n?n=n>>>1^3988292384:n>>>=1;t[e]=n;}class e{constructor(t){this.crc=t||-1;}append(e){let n=0|this.crc;for(let i=0,a=0|e.length;i<a;i++)n=n>>>8^t[255&(n^e[i])];this.crc=n;}get(){return ~this.crc}}const n={concat(t,e){if(0===t.length||0===e.length)return t.concat(e);const i=t[t.length-1],a=n.getPartial(i);return 32===a?t.concat(e):n._shiftRight(e,a,0|i,t.slice(0,t.length-1))},bitLength(t){const e=t.length;if(0===e)return 0;const i=t[e-1];return 32*(e-1)+n.getPartial(i)},clamp(t,e){if(32*t.length<e)return t;const i=(t=t.slice(0,Math.ceil(e/32))).length;return e&=31,i>0&&e&&(t[i-1]=n.partial(e,t[i-1]&2147483648>>e-1,1)),t},partial:(t,e,n)=>32===t?e:(n?0|e:e<<32-t)+1099511627776*t,getPartial:t=>Math.round(t/1099511627776)||32,_shiftRight(t,e,i,a){for(void 0===a&&(a=[]);e>=32;e-=32)a.push(i),i=0;if(0===e)return a.concat(t);for(let n=0;n<t.length;n++)a.push(i|t[n]>>>e),i=t[n]<<32-e;const r=t.length?t[t.length-1]:0,s=n.getPartial(r);return a.push(n.partial(e+s&31,e+s>32?i:a.pop(),1)),a}},i={bytes:{fromBits(t){const e=n.bitLength(t)/8,i=new Uint8Array(e);let a;for(let n=0;n<e;n++)0==(3&n)&&(a=t[n/4]),i[n]=a>>>24,a<<=8;return i},toBits(t){const e=[];let i,a=0;for(i=0;i<t.length;i++)a=a<<8|t[i],3==(3&i)&&(e.push(a),a=0);return 3&i&&e.push(n.partial(8*(3&i),a)),e}}},a={sha1:function(t){t?(this._h=t._h.slice(0),this._buffer=t._buffer.slice(0),this._length=t._length):this.reset();}};a.sha1.prototype={blockSize:512,reset:function(){const t=this;return t._h=this._init.slice(0),t._buffer=[],t._length=0,t},update:function(t){const e=this;"string"==typeof t&&(t=i.utf8String.toBits(t));const a=e._buffer=n.concat(e._buffer,t),r=e._length,s=e._length=r+n.bitLength(t);if(s>9007199254740991)throw new Error("Cannot hash more than 2^53 - 1 bits");const o=new Uint32Array(a);let l=0;for(let t=e.blockSize+r-(e.blockSize+r&e.blockSize-1);t<=s;t+=e.blockSize)e._block(o.subarray(16*l,16*(l+1))),l+=1;return a.splice(0,16*l),e},finalize:function(){const t=this;let e=t._buffer;const i=t._h;e=n.concat(e,[n.partial(1,1)]);for(let t=e.length+2;15&t;t++)e.push(0);for(e.push(Math.floor(t._length/4294967296)),e.push(0|t._length);e.length;)t._block(e.splice(0,16));return t.reset(),i},_init:[1732584193,4023233417,2562383102,271733878,3285377520],_key:[1518500249,1859775393,2400959708,3395469782],_f:function(t,e,n,i){return t<=19?e&n|~e&i:t<=39?e^n^i:t<=59?e&n|e&i|n&i:t<=79?e^n^i:void 0},_S:function(t,e){return e<<t|e>>>32-t},_block:function(t){const e=this,n=e._h,i=Array(80);for(let e=0;e<16;e++)i[e]=t[e];let a=n[0],r=n[1],s=n[2],o=n[3],l=n[4];for(let t=0;t<=79;t++){t>=16&&(i[t]=e._S(1,i[t-3]^i[t-8]^i[t-14]^i[t-16]));const n=e._S(5,a)+e._f(t,r,s,o)+l+i[t]+e._key[Math.floor(t/20)]|0;l=o,o=s,s=e._S(30,r),r=a,a=n;}n[0]=n[0]+a|0,n[1]=n[1]+r|0,n[2]=n[2]+s|0,n[3]=n[3]+o|0,n[4]=n[4]+l|0;}};const r={aes:class{constructor(t){const e=this;e._tables=[[[],[],[],[],[]],[[],[],[],[],[]]],e._tables[0][0][0]||e._precompute();const n=e._tables[0][4],i=e._tables[1],a=t.length;let r,s,o,l=1;if(4!==a&&6!==a&&8!==a)throw new Error("invalid aes key size");for(e._key=[s=t.slice(0),o=[]],r=a;r<4*a+28;r++){let t=s[r-1];(r%a==0||8===a&&r%a==4)&&(t=n[t>>>24]<<24^n[t>>16&255]<<16^n[t>>8&255]<<8^n[255&t],r%a==0&&(t=t<<8^t>>>24^l<<24,l=l<<1^283*(l>>7))),s[r]=s[r-a]^t;}for(let t=0;r;t++,r--){const e=s[3&t?r:r-4];o[t]=r<=4||t<4?e:i[0][n[e>>>24]]^i[1][n[e>>16&255]]^i[2][n[e>>8&255]]^i[3][n[255&e]];}}encrypt(t){return this._crypt(t,0)}decrypt(t){return this._crypt(t,1)}_precompute(){const t=this._tables[0],e=this._tables[1],n=t[4],i=e[4],a=[],r=[];let s,o,l,_;for(let t=0;t<256;t++)r[(a[t]=t<<1^283*(t>>7))^t]=t;for(let d=s=0;!n[d];d^=o||1,s=r[s]||1){let r=s^s<<1^s<<2^s<<3^s<<4;r=r>>8^255&r^99,n[d]=r,i[r]=d,_=a[l=a[o=a[d]]];let c=16843009*_^65537*l^257*o^16843008*d,f=257*a[r]^16843008*r;for(let n=0;n<4;n++)t[n][d]=f=f<<24^f>>>8,e[n][r]=c=c<<24^c>>>8;}for(let n=0;n<5;n++)t[n]=t[n].slice(0),e[n]=e[n].slice(0);}_crypt(t,e){if(4!==t.length)throw new Error("invalid aes block size");const n=this._key[e],i=n.length/4-2,a=[0,0,0,0],r=this._tables[e],s=r[0],o=r[1],l=r[2],_=r[3],d=r[4];let c,f,u,h=t[0]^n[0],b=t[e?3:1]^n[1],w=t[2]^n[2],p=t[e?1:3]^n[3],x=4;for(let t=0;t<i;t++)c=s[h>>>24]^o[b>>16&255]^l[w>>8&255]^_[255&p]^n[x],f=s[b>>>24]^o[w>>16&255]^l[p>>8&255]^_[255&h]^n[x+1],u=s[w>>>24]^o[p>>16&255]^l[h>>8&255]^_[255&b]^n[x+2],p=s[p>>>24]^o[h>>16&255]^l[b>>8&255]^_[255&w]^n[x+3],x+=4,h=c,b=f,w=u;for(let t=0;t<4;t++)a[e?3&-t:t]=d[h>>>24]<<24^d[b>>16&255]<<16^d[w>>8&255]<<8^d[255&p]^n[x++],c=h,h=b,b=w,w=p,p=c;return a}}},s={ctrGladman:class{constructor(t,e){this._prf=t,this._initIv=e,this._iv=e;}reset(){this._iv=this._initIv;}update(t){return this.calculate(this._prf,t,this._iv)}incWord(t){if(255==(t>>24&255)){let e=t>>16&255,n=t>>8&255,i=255&t;255===e?(e=0,255===n?(n=0,255===i?i=0:++i):++n):++e,t=0,t+=e<<16,t+=n<<8,t+=i;}else t+=1<<24;return t}incCounter(t){0===(t[0]=this.incWord(t[0]))&&(t[1]=this.incWord(t[1]));}calculate(t,e,i){let a;if(!(a=e.length))return [];const r=n.bitLength(e);for(let n=0;n<a;n+=4){this.incCounter(i);const a=t.encrypt(i);e[n]^=a[0],e[n+1]^=a[1],e[n+2]^=a[2],e[n+3]^=a[3];}return n.clamp(e,r)}}},o={hmacSha1:class{constructor(t){const e=this,n=e._hash=a.sha1,i=[[],[]],r=n.prototype.blockSize/32;e._baseHash=[new n,new n],t.length>r&&(t=n.hash(t));for(let e=0;e<r;e++)i[0][e]=909522486^t[e],i[1][e]=1549556828^t[e];e._baseHash[0].update(i[0]),e._baseHash[1].update(i[1]),e._resultHash=new n(e._baseHash[0]);}reset(){const t=this;t._resultHash=new t._hash(t._baseHash[0]),t._updated=!1;}update(t){this._updated=!0,this._resultHash.update(t);}digest(){const t=this,e=t._resultHash.finalize(),n=new t._hash(t._baseHash[1]).update(e).finalize();return t.reset(),n}}},l={name:"PBKDF2"},_=Object.assign({hash:{name:"HMAC"}},l),d=Object.assign({iterations:1e3,hash:{name:"SHA-1"}},l),c=["deriveBits"],f=[8,12,16],u=[16,24,32],h=[0,0,0,0],b=i.bytes,w=r.aes,p=s.ctrGladman,x=o.hmacSha1;class g{constructor(t,e,n){Object.assign(this,{password:t,signed:e,strength:n-1,pendingInput:new Uint8Array(0)});}async append(t){const e=this;if(e.password){const n=A(t,0,f[e.strength]+2);await async function(t,e,n){await k(t,n,A(e,0,f[t.strength]));const i=A(e,f[t.strength]),a=t.keys.passwordVerification;if(a[0]!=i[0]||a[1]!=i[1])throw new Error("Invalid pasword")}(e,n,e.password),e.password=null,e.aesCtrGladman=new p(new w(e.keys.key),Array.from(h)),e.hmac=new x(e.keys.authentication),t=A(t,f[e.strength]+2);}return m(e,t,new Uint8Array(t.length-10-(t.length-10)%16),0,10,!0)}flush(){const t=this,e=t.pendingInput,n=A(e,0,e.length-10),i=A(e,e.length-10);let a=new Uint8Array(0);if(n.length){const e=b.toBits(n);t.hmac.update(e);const i=t.aesCtrGladman.update(e);a=b.fromBits(i);}let r=!0;if(t.signed){const e=A(b.fromBits(t.hmac.digest()),0,10);for(let t=0;t<10;t++)e[t]!=i[t]&&(r=!1);}return {valid:r,data:a}}}class y{constructor(t,e){Object.assign(this,{password:t,strength:e-1,pendingInput:new Uint8Array(0)});}async append(t){const e=this;let n=new Uint8Array(0);e.password&&(n=await async function(t,e){const n=crypto.getRandomValues(new Uint8Array(f[t.strength]));return await k(t,e,n),v(n,t.keys.passwordVerification)}(e,e.password),e.password=null,e.aesCtrGladman=new p(new w(e.keys.key),Array.from(h)),e.hmac=new x(e.keys.authentication));const i=new Uint8Array(n.length+t.length-t.length%16);return i.set(n,0),m(e,t,i,n.length,0)}flush(){const t=this;let e=new Uint8Array(0);if(t.pendingInput.length){const n=t.aesCtrGladman.update(b.toBits(t.pendingInput));t.hmac.update(n),e=b.fromBits(n);}const n=A(b.fromBits(t.hmac.digest()),0,10);return {data:v(e,n),signature:n}}}function m(t,e,n,i,a,r){const s=e.length-a;let o;for(t.pendingInput.length&&(e=v(t.pendingInput,e),n=function(t,e){if(e&&e>t.length){const n=t;(t=new Uint8Array(e)).set(n,0);}return t}(n,s-s%16)),o=0;o<=s-16;o+=16){const a=b.toBits(A(e,o,o+16));r&&t.hmac.update(a);const s=t.aesCtrGladman.update(a);r||t.hmac.update(s),n.set(b.fromBits(s),o+i);}return t.pendingInput=A(e,o),n}async function k(t,e,n){const i=(new TextEncoder).encode(e),a=await crypto.subtle.importKey("raw",i,_,!1,c),r=await crypto.subtle.deriveBits(Object.assign({salt:n},d),a,8*(2*u[t.strength]+2)),s=new Uint8Array(r);t.keys={key:b.toBits(A(s,0,u[t.strength])),authentication:b.toBits(A(s,u[t.strength],2*u[t.strength])),passwordVerification:A(s,2*u[t.strength])};}function v(t,e){let n=t;return t.length+e.length&&(n=new Uint8Array(t.length+e.length),n.set(t,0),n.set(e,t.length)),n}function A(t,e,n){return t.subarray(e,n)}class U{constructor(t,e){Object.assign(this,{password:t,passwordVerification:e}),E(this,t);}append(t){const e=this;if(e.password){const n=z(e,t.subarray(0,12));if(e.password=null,n[11]!=e.passwordVerification)throw new Error("Invalid pasword");t=t.subarray(12);}return z(e,t)}flush(){return {valid:!0,data:new Uint8Array(0)}}}class S{constructor(t,e){Object.assign(this,{password:t,passwordVerification:e}),E(this,t);}append(t){const e=this;let n,i;if(e.password){e.password=null;const a=crypto.getRandomValues(new Uint8Array(12));a[11]=e.passwordVerification,n=new Uint8Array(t.length+a.length),n.set(I(e,a),0),i=12;}else n=new Uint8Array(t.length),i=0;return n.set(I(e,t),i),n}flush(){return {data:new Uint8Array(0)}}}function z(t,e){const n=new Uint8Array(e.length);for(let i=0;i<e.length;i++)n[i]=M(t)^e[i],C(t,n[i]);return n}function I(t,e){const n=new Uint8Array(e.length);for(let i=0;i<e.length;i++)n[i]=M(t)^e[i],C(t,e[i]);return n}function E(t,n){t.keys=[305419896,591751049,878082192],t.crcKey0=new e(t.keys[0]),t.crcKey2=new e(t.keys[2]);for(let e=0;e<n.length;e++)C(t,n.charCodeAt(e));}function C(t,e){t.crcKey0.append([e]),t.keys[0]=~t.crcKey0.get(),t.keys[1]=H(t.keys[1]+B(t.keys[0])),t.keys[1]=H(Math.imul(t.keys[1],134775813)+1),t.crcKey2.append([t.keys[1]>>>24]),t.keys[2]=~t.crcKey2.get();}function M(t){const e=2|t.keys[2];return B(Math.imul(e,1^e)>>>8)}function B(t){return 255&t}function H(t){return 4294967295&t}class V{constructor(t,{signature:n,password:i,signed:a,compressed:r,zipCrypto:s,passwordVerification:o,encryptionStrength:l},{chunkSize:_}){const d=Boolean(i);Object.assign(this,{signature:n,encrypted:d,signed:a,compressed:r,inflate:r&&new t({chunkSize:_}),crc32:a&&new e,zipCrypto:s,decrypt:d&&s?new U(i,o):new g(i,a,l)});}async append(t){const e=this;return e.encrypted&&t.length&&(t=await e.decrypt.append(t)),e.compressed&&t.length&&(t=await e.inflate.append(t)),(!e.encrypted||e.zipCrypto)&&e.signed&&t.length&&e.crc32.append(t),t}async flush(){const t=this;let e,n=new Uint8Array(0);if(t.encrypted){const e=t.decrypt.flush();if(!e.valid)throw new Error("Invalid signature");n=e.data;}if((!t.encrypted||t.zipCrypto)&&t.signed){const n=new DataView(new Uint8Array(4).buffer);if(e=t.crc32.get(),n.setUint32(0,e),t.signature!=n.getUint32(0,!1))throw new Error("Invalid signature")}return t.compressed&&(n=await t.inflate.append(n)||new Uint8Array(0),await t.inflate.flush()),{data:n,signature:e}}}class D{constructor(t,{encrypted:n,signed:i,compressed:a,level:r,zipCrypto:s,password:o,passwordVerification:l,encryptionStrength:_},{chunkSize:d}){Object.assign(this,{encrypted:n,signed:i,compressed:a,deflate:a&&new t({level:r||5,chunkSize:d}),crc32:i&&new e,zipCrypto:s,encrypt:n&&s?new S(o,l):new y(o,_)});}async append(t){const e=this;let n=t;return e.compressed&&t.length&&(n=await e.deflate.append(t)),e.encrypted&&n.length&&(n=await e.encrypt.append(n)),(!e.encrypted||e.zipCrypto)&&e.signed&&t.length&&e.crc32.append(t),n}async flush(){const t=this;let e,n=new Uint8Array(0);if(t.compressed&&(n=await t.deflate.flush()||new Uint8Array(0)),t.encrypted){n=await t.encrypt.append(n);const i=t.encrypt.flush();e=i.signature;const a=new Uint8Array(n.length+i.data.length);a.set(n,0),a.set(i.data,n.length),n=a;}return t.encrypted&&!t.zipCrypto||!t.signed||(e=t.crc32.get()),{data:n,signature:e}}}const j={init(t){t.scripts&&t.scripts.length&&importScripts.apply(void 0,t.scripts);const e=t.options;let n;self.initCodec&&self.initCodec(),e.codecType.startsWith("deflate")?n=self.Deflate:e.codecType.startsWith("inflate")&&(n=self.Inflate),O=function(t,e,n){return e.codecType.startsWith("deflate")?new D(t,e,n):e.codecType.startsWith("inflate")?new V(t,e,n):void 0}(n,e,t.config);},append:async t=>({data:await O.append(t.data)}),flush:()=>O.flush()};let O;addEventListener("message",(async t=>{const e=t.data,n=e.type,i=j[n];if(i)try{e.data&&(e.data=new Uint8Array(e.data));const t=await i(e)||{};if(t.type=n,t.data)try{t.data=t.data.buffer,postMessage(t,[t.data]);}catch(e){postMessage(t);}else postMessage(t);}catch(t){postMessage({type:n,error:{message:t.message,stack:t.stack}});}}));function P(t){return K(t.map((([t,e])=>new Array(t).fill(e,0,t))))}function K(t){return t.reduce(((t,e)=>t.concat(Array.isArray(e)?K(e):e)),[])}const G=[0,1,2,3].concat(...P([[2,4],[2,5],[4,6],[4,7],[8,8],[8,9],[16,10],[16,11],[32,12],[32,13],[64,14],[64,15],[2,0],[1,16],[1,17],[2,18],[2,19],[4,20],[4,21],[8,22],[8,23],[16,24],[16,25],[32,26],[32,27],[64,28],[64,29]]));function W(){const t=this;function e(t,e){let n=0;do{n|=1&t,t>>>=1,n<<=1;}while(--e>0);return n>>>1}t.build_tree=function(n){const i=t.dyn_tree,a=t.stat_desc.static_tree,r=t.stat_desc.elems;let s,o,l,_=-1;for(n.heap_len=0,n.heap_max=573,s=0;s<r;s++)0!==i[2*s]?(n.heap[++n.heap_len]=_=s,n.depth[s]=0):i[2*s+1]=0;for(;n.heap_len<2;)l=n.heap[++n.heap_len]=_<2?++_:0,i[2*l]=1,n.depth[l]=0,n.opt_len--,a&&(n.static_len-=a[2*l+1]);for(t.max_code=_,s=Math.floor(n.heap_len/2);s>=1;s--)n.pqdownheap(i,s);l=r;do{s=n.heap[1],n.heap[1]=n.heap[n.heap_len--],n.pqdownheap(i,1),o=n.heap[1],n.heap[--n.heap_max]=s,n.heap[--n.heap_max]=o,i[2*l]=i[2*s]+i[2*o],n.depth[l]=Math.max(n.depth[s],n.depth[o])+1,i[2*s+1]=i[2*o+1]=l,n.heap[1]=l++,n.pqdownheap(i,1);}while(n.heap_len>=2);n.heap[--n.heap_max]=n.heap[1],function(e){const n=t.dyn_tree,i=t.stat_desc.static_tree,a=t.stat_desc.extra_bits,r=t.stat_desc.extra_base,s=t.stat_desc.max_length;let o,l,_,d,c,f,u=0;for(d=0;d<=15;d++)e.bl_count[d]=0;for(n[2*e.heap[e.heap_max]+1]=0,o=e.heap_max+1;o<573;o++)l=e.heap[o],d=n[2*n[2*l+1]+1]+1,d>s&&(d=s,u++),n[2*l+1]=d,l>t.max_code||(e.bl_count[d]++,c=0,l>=r&&(c=a[l-r]),f=n[2*l],e.opt_len+=f*(d+c),i&&(e.static_len+=f*(i[2*l+1]+c)));if(0!==u){do{for(d=s-1;0===e.bl_count[d];)d--;e.bl_count[d]--,e.bl_count[d+1]+=2,e.bl_count[s]--,u-=2;}while(u>0);for(d=s;0!==d;d--)for(l=e.bl_count[d];0!==l;)_=e.heap[--o],_>t.max_code||(n[2*_+1]!=d&&(e.opt_len+=(d-n[2*_+1])*n[2*_],n[2*_+1]=d),l--);}}(n),function(t,n,i){const a=[];let r,s,o,l=0;for(r=1;r<=15;r++)a[r]=l=l+i[r-1]<<1;for(s=0;s<=n;s++)o=t[2*s+1],0!==o&&(t[2*s]=e(a[o]++,o));}(i,t.max_code,n.bl_count);};}function L(t,e,n,i,a){const r=this;r.static_tree=t,r.extra_bits=e,r.extra_base=n,r.elems=i,r.max_length=a;}W._length_code=[0,1,2,3,4,5,6,7].concat(...P([[2,8],[2,9],[2,10],[2,11],[4,12],[4,13],[4,14],[4,15],[8,16],[8,17],[8,18],[8,19],[16,20],[16,21],[16,22],[16,23],[32,24],[32,25],[32,26],[31,27],[1,28]])),W.base_length=[0,1,2,3,4,5,6,7,8,10,12,14,16,20,24,28,32,40,48,56,64,80,96,112,128,160,192,224,0],W.base_dist=[0,1,2,3,4,6,8,12,16,24,32,48,64,96,128,192,256,384,512,768,1024,1536,2048,3072,4096,6144,8192,12288,16384,24576],W.d_code=function(t){return t<256?G[t]:G[256+(t>>>7)]},W.extra_lbits=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0],W.extra_dbits=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13],W.extra_blbits=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7],W.bl_order=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],L.static_ltree=[12,8,140,8,76,8,204,8,44,8,172,8,108,8,236,8,28,8,156,8,92,8,220,8,60,8,188,8,124,8,252,8,2,8,130,8,66,8,194,8,34,8,162,8,98,8,226,8,18,8,146,8,82,8,210,8,50,8,178,8,114,8,242,8,10,8,138,8,74,8,202,8,42,8,170,8,106,8,234,8,26,8,154,8,90,8,218,8,58,8,186,8,122,8,250,8,6,8,134,8,70,8,198,8,38,8,166,8,102,8,230,8,22,8,150,8,86,8,214,8,54,8,182,8,118,8,246,8,14,8,142,8,78,8,206,8,46,8,174,8,110,8,238,8,30,8,158,8,94,8,222,8,62,8,190,8,126,8,254,8,1,8,129,8,65,8,193,8,33,8,161,8,97,8,225,8,17,8,145,8,81,8,209,8,49,8,177,8,113,8,241,8,9,8,137,8,73,8,201,8,41,8,169,8,105,8,233,8,25,8,153,8,89,8,217,8,57,8,185,8,121,8,249,8,5,8,133,8,69,8,197,8,37,8,165,8,101,8,229,8,21,8,149,8,85,8,213,8,53,8,181,8,117,8,245,8,13,8,141,8,77,8,205,8,45,8,173,8,109,8,237,8,29,8,157,8,93,8,221,8,61,8,189,8,125,8,253,8,19,9,275,9,147,9,403,9,83,9,339,9,211,9,467,9,51,9,307,9,179,9,435,9,115,9,371,9,243,9,499,9,11,9,267,9,139,9,395,9,75,9,331,9,203,9,459,9,43,9,299,9,171,9,427,9,107,9,363,9,235,9,491,9,27,9,283,9,155,9,411,9,91,9,347,9,219,9,475,9,59,9,315,9,187,9,443,9,123,9,379,9,251,9,507,9,7,9,263,9,135,9,391,9,71,9,327,9,199,9,455,9,39,9,295,9,167,9,423,9,103,9,359,9,231,9,487,9,23,9,279,9,151,9,407,9,87,9,343,9,215,9,471,9,55,9,311,9,183,9,439,9,119,9,375,9,247,9,503,9,15,9,271,9,143,9,399,9,79,9,335,9,207,9,463,9,47,9,303,9,175,9,431,9,111,9,367,9,239,9,495,9,31,9,287,9,159,9,415,9,95,9,351,9,223,9,479,9,63,9,319,9,191,9,447,9,127,9,383,9,255,9,511,9,0,7,64,7,32,7,96,7,16,7,80,7,48,7,112,7,8,7,72,7,40,7,104,7,24,7,88,7,56,7,120,7,4,7,68,7,36,7,100,7,20,7,84,7,52,7,116,7,3,8,131,8,67,8,195,8,35,8,163,8,99,8,227,8],L.static_dtree=[0,5,16,5,8,5,24,5,4,5,20,5,12,5,28,5,2,5,18,5,10,5,26,5,6,5,22,5,14,5,30,5,1,5,17,5,9,5,25,5,5,5,21,5,13,5,29,5,3,5,19,5,11,5,27,5,7,5,23,5],L.static_l_desc=new L(L.static_ltree,W.extra_lbits,257,286,15),L.static_d_desc=new L(L.static_dtree,W.extra_dbits,0,30,15),L.static_bl_desc=new L(null,W.extra_blbits,0,19,7);function T(t,e,n,i,a){const r=this;r.good_length=t,r.max_lazy=e,r.nice_length=n,r.max_chain=i,r.func=a;}const q=[new T(0,0,0,0,0),new T(4,4,8,4,1),new T(4,5,16,8,1),new T(4,6,32,32,1),new T(4,4,16,16,2),new T(8,16,32,32,2),new T(8,16,128,128,2),new T(8,32,128,256,2),new T(32,128,258,1024,2),new T(32,258,258,4096,2)],R=["need dictionary","stream end","","","stream error","data error","","buffer error","",""];function F(t,e,n,i){const a=t[2*e],r=t[2*n];return a<r||a==r&&i[e]<=i[n]}function J(){const t=this;let e,n,i,a,r,s,o,l,_,d,c,f,u,h,b,w,p,x,g,y,m,k,v,A,U,S,z,I,E,C,M,B,H;const V=new W,D=new W,j=new W;let O,P,K,G,T,J,N,Q;function X(){let e;for(e=0;e<286;e++)M[2*e]=0;for(e=0;e<30;e++)B[2*e]=0;for(e=0;e<19;e++)H[2*e]=0;M[512]=1,t.opt_len=t.static_len=0,K=T=0;}function Y(t,e){let n,i=-1,a=t[1],r=0,s=7,o=4;0===a&&(s=138,o=3),t[2*(e+1)+1]=65535;for(let l=0;l<=e;l++)n=a,a=t[2*(l+1)+1],++r<s&&n==a||(r<o?H[2*n]+=r:0!==n?(n!=i&&H[2*n]++,H[32]++):r<=10?H[34]++:H[36]++,r=0,i=n,0===a?(s=138,o=3):n==a?(s=6,o=3):(s=7,o=4));}function Z(e){t.pending_buf[t.pending++]=e;}function $(t){Z(255&t),Z(t>>>8&255);}function tt(t,e){let n;const i=e;Q>16-i?(n=t,N|=n<<Q&65535,$(N),N=n>>>16-Q,Q+=i-16):(N|=t<<Q&65535,Q+=i);}function et(t,e){const n=2*t;tt(65535&e[n],65535&e[n+1]);}function nt(t,e){let n,i,a=-1,r=t[1],s=0,o=7,l=4;for(0===r&&(o=138,l=3),n=0;n<=e;n++)if(i=r,r=t[2*(n+1)+1],!(++s<o&&i==r)){if(s<l)do{et(i,H);}while(0!=--s);else 0!==i?(i!=a&&(et(i,H),s--),et(16,H),tt(s-3,2)):s<=10?(et(17,H),tt(s-3,3)):(et(18,H),tt(s-11,7));s=0,a=i,0===r?(o=138,l=3):i==r?(o=6,l=3):(o=7,l=4);}}function it(){16==Q?($(N),N=0,Q=0):Q>=8&&(Z(255&N),N>>>=8,Q-=8);}function at(e,n){let i,a,r;if(t.pending_buf[G+2*K]=e>>>8&255,t.pending_buf[G+2*K+1]=255&e,t.pending_buf[O+K]=255&n,K++,0===e?M[2*n]++:(T++,e--,M[2*(W._length_code[n]+256+1)]++,B[2*W.d_code(e)]++),0==(8191&K)&&z>2){for(i=8*K,a=m-p,r=0;r<30;r++)i+=B[2*r]*(5+W.extra_dbits[r]);if(i>>>=3,T<Math.floor(K/2)&&i<Math.floor(a/2))return !0}return K==P-1}function rt(e,n){let i,a,r,s,o=0;if(0!==K)do{i=t.pending_buf[G+2*o]<<8&65280|255&t.pending_buf[G+2*o+1],a=255&t.pending_buf[O+o],o++,0===i?et(a,e):(r=W._length_code[a],et(r+256+1,e),s=W.extra_lbits[r],0!==s&&(a-=W.base_length[r],tt(a,s)),i--,r=W.d_code(i),et(r,n),s=W.extra_dbits[r],0!==s&&(i-=W.base_dist[r],tt(i,s)));}while(o<K);et(256,e),J=e[513];}function st(){Q>8?$(N):Q>0&&Z(255&N),N=0,Q=0;}function ot(e,n,i){tt(0+(i?1:0),3),function(e,n,i){st(),J=8,i&&($(n),$(~n)),t.pending_buf.set(l.subarray(e,e+n),t.pending),t.pending+=n;}(e,n,!0);}function lt(e,n,i){let a,r,s=0;z>0?(V.build_tree(t),D.build_tree(t),s=function(){let e;for(Y(M,V.max_code),Y(B,D.max_code),j.build_tree(t),e=18;e>=3&&0===H[2*W.bl_order[e]+1];e--);return t.opt_len+=3*(e+1)+5+5+4,e}(),a=t.opt_len+3+7>>>3,r=t.static_len+3+7>>>3,r<=a&&(a=r)):a=r=n+5,n+4<=a&&-1!=e?ot(e,n,i):r==a?(tt(2+(i?1:0),3),rt(L.static_ltree,L.static_dtree)):(tt(4+(i?1:0),3),function(t,e,n){let i;for(tt(t-257,5),tt(e-1,5),tt(n-4,4),i=0;i<n;i++)tt(H[2*W.bl_order[i]+1],3);nt(M,t-1),nt(B,e-1);}(V.max_code+1,D.max_code+1,s+1),rt(M,B)),X(),i&&st();}function _t(t){lt(p>=0?p:-1,m-p,t),p=m,e.flush_pending();}function dt(){let t,n,i,a;do{if(a=_-v-m,0===a&&0===m&&0===v)a=r;else if(-1==a)a--;else if(m>=r+r-262){l.set(l.subarray(r,r+r),0),k-=r,m-=r,p-=r,t=u,i=t;do{n=65535&c[--i],c[i]=n>=r?n-r:0;}while(0!=--t);t=r,i=t;do{n=65535&d[--i],d[i]=n>=r?n-r:0;}while(0!=--t);a+=r;}if(0===e.avail_in)return;t=e.read_buf(l,m+v,a),v+=t,v>=3&&(f=255&l[m],f=(f<<w^255&l[m+1])&b);}while(v<262&&0!==e.avail_in)}function ct(t){let e,n,i=U,a=m,s=A;const _=m>r-262?m-(r-262):0;let c=C;const f=o,u=m+258;let h=l[a+s-1],b=l[a+s];A>=E&&(i>>=2),c>v&&(c=v);do{if(e=t,l[e+s]==b&&l[e+s-1]==h&&l[e]==l[a]&&l[++e]==l[a+1]){a+=2,e++;do{}while(l[++a]==l[++e]&&l[++a]==l[++e]&&l[++a]==l[++e]&&l[++a]==l[++e]&&l[++a]==l[++e]&&l[++a]==l[++e]&&l[++a]==l[++e]&&l[++a]==l[++e]&&a<u);if(n=258-(u-a),a=u-258,n>s){if(k=t,s=n,n>=c)break;h=l[a+s-1],b=l[a+s];}}}while((t=65535&d[t&f])>_&&0!=--i);return s<=v?s:v}function ft(e){return e.total_in=e.total_out=0,e.msg=null,t.pending=0,t.pending_out=0,n=113,a=0,V.dyn_tree=M,V.stat_desc=L.static_l_desc,D.dyn_tree=B,D.stat_desc=L.static_d_desc,j.dyn_tree=H,j.stat_desc=L.static_bl_desc,N=0,Q=0,J=8,X(),function(){_=2*r,c[u-1]=0;for(let t=0;t<u-1;t++)c[t]=0;S=q[z].max_lazy,E=q[z].good_length,C=q[z].nice_length,U=q[z].max_chain,m=0,p=0,v=0,x=A=2,y=0,f=0;}(),0}t.depth=[],t.bl_count=[],t.heap=[],M=[],B=[],H=[],t.pqdownheap=function(e,n){const i=t.heap,a=i[n];let r=n<<1;for(;r<=t.heap_len&&(r<t.heap_len&&F(e,i[r+1],i[r],t.depth)&&r++,!F(e,a,i[r],t.depth));)i[n]=i[r],n=r,r<<=1;i[n]=a;},t.deflateInit=function(e,n,a,_,f,p){return _||(_=8),f||(f=8),p||(p=0),e.msg=null,-1==n&&(n=6),f<1||f>9||8!=_||a<9||a>15||n<0||n>9||p<0||p>2?-2:(e.dstate=t,s=a,r=1<<s,o=r-1,h=f+7,u=1<<h,b=u-1,w=Math.floor((h+3-1)/3),l=new Uint8Array(2*r),d=[],c=[],P=1<<f+6,t.pending_buf=new Uint8Array(4*P),i=4*P,G=Math.floor(P/2),O=3*P,z=n,I=p,ft(e))},t.deflateEnd=function(){return 42!=n&&113!=n&&666!=n?-2:(t.pending_buf=null,c=null,d=null,l=null,t.dstate=null,113==n?-3:0)},t.deflateParams=function(t,e,n){let i=0;return -1==e&&(e=6),e<0||e>9||n<0||n>2?-2:(q[z].func!=q[e].func&&0!==t.total_in&&(i=t.deflate(1)),z!=e&&(z=e,S=q[z].max_lazy,E=q[z].good_length,C=q[z].nice_length,U=q[z].max_chain),I=n,i)},t.deflateSetDictionary=function(t,e,i){let a,s=i,_=0;if(!e||42!=n)return -2;if(s<3)return 0;for(s>r-262&&(s=r-262,_=i-s),l.set(e.subarray(_,_+s),0),m=s,p=s,f=255&l[0],f=(f<<w^255&l[1])&b,a=0;a<=s-3;a++)f=(f<<w^255&l[a+2])&b,d[a&o]=c[f],c[f]=a;return 0},t.deflate=function(_,h){let U,E,C,M,B;if(h>4||h<0)return -2;if(!_.next_out||!_.next_in&&0!==_.avail_in||666==n&&4!=h)return _.msg=R[4],-2;if(0===_.avail_out)return _.msg=R[7],-5;var H;if(e=_,M=a,a=h,42==n&&(E=8+(s-8<<4)<<8,C=(z-1&255)>>1,C>3&&(C=3),E|=C<<6,0!==m&&(E|=32),E+=31-E%31,n=113,Z((H=E)>>8&255),Z(255&H)),0!==t.pending){if(e.flush_pending(),0===e.avail_out)return a=-1,0}else if(0===e.avail_in&&h<=M&&4!=h)return e.msg=R[7],-5;if(666==n&&0!==e.avail_in)return _.msg=R[7],-5;if(0!==e.avail_in||0!==v||0!=h&&666!=n){switch(B=-1,q[z].func){case 0:B=function(t){let n,a=65535;for(a>i-5&&(a=i-5);;){if(v<=1){if(dt(),0===v&&0==t)return 0;if(0===v)break}if(m+=v,v=0,n=p+a,(0===m||m>=n)&&(v=m-n,m=n,_t(!1),0===e.avail_out))return 0;if(m-p>=r-262&&(_t(!1),0===e.avail_out))return 0}return _t(4==t),0===e.avail_out?4==t?2:0:4==t?3:1}(h);break;case 1:B=function(t){let n,i=0;for(;;){if(v<262){if(dt(),v<262&&0==t)return 0;if(0===v)break}if(v>=3&&(f=(f<<w^255&l[m+2])&b,i=65535&c[f],d[m&o]=c[f],c[f]=m),0!==i&&(m-i&65535)<=r-262&&2!=I&&(x=ct(i)),x>=3)if(n=at(m-k,x-3),v-=x,x<=S&&v>=3){x--;do{m++,f=(f<<w^255&l[m+2])&b,i=65535&c[f],d[m&o]=c[f],c[f]=m;}while(0!=--x);m++;}else m+=x,x=0,f=255&l[m],f=(f<<w^255&l[m+1])&b;else n=at(0,255&l[m]),v--,m++;if(n&&(_t(!1),0===e.avail_out))return 0}return _t(4==t),0===e.avail_out?4==t?2:0:4==t?3:1}(h);break;case 2:B=function(t){let n,i,a=0;for(;;){if(v<262){if(dt(),v<262&&0==t)return 0;if(0===v)break}if(v>=3&&(f=(f<<w^255&l[m+2])&b,a=65535&c[f],d[m&o]=c[f],c[f]=m),A=x,g=k,x=2,0!==a&&A<S&&(m-a&65535)<=r-262&&(2!=I&&(x=ct(a)),x<=5&&(1==I||3==x&&m-k>4096)&&(x=2)),A>=3&&x<=A){i=m+v-3,n=at(m-1-g,A-3),v-=A-1,A-=2;do{++m<=i&&(f=(f<<w^255&l[m+2])&b,a=65535&c[f],d[m&o]=c[f],c[f]=m);}while(0!=--A);if(y=0,x=2,m++,n&&(_t(!1),0===e.avail_out))return 0}else if(0!==y){if(n=at(0,255&l[m-1]),n&&_t(!1),m++,v--,0===e.avail_out)return 0}else y=1,m++,v--;}return 0!==y&&(n=at(0,255&l[m-1]),y=0),_t(4==t),0===e.avail_out?4==t?2:0:4==t?3:1}(h);}if(2!=B&&3!=B||(n=666),0==B||2==B)return 0===e.avail_out&&(a=-1),0;if(1==B){if(1==h)tt(2,3),et(256,L.static_ltree),it(),1+J+10-Q<9&&(tt(2,3),et(256,L.static_ltree),it()),J=7;else if(ot(0,0,!1),3==h)for(U=0;U<u;U++)c[U]=0;if(e.flush_pending(),0===e.avail_out)return a=-1,0}}return 4!=h?0:1};}function N(){const t=this;t.next_in_index=0,t.next_out_index=0,t.avail_in=0,t.total_in=0,t.avail_out=0,t.total_out=0;}function Q(t){const e=new N,n=(i=t&&t.chunkSize?t.chunkSize:65536)+5*(Math.floor(i/16383)+1);var i;const a=new Uint8Array(n);let r=t?t.level:-1;void 0===r&&(r=-1),e.deflateInit(r),e.next_out=a,this.append=function(t,i){let r,s,o=0,l=0,_=0;const d=[];if(t.length){e.next_in_index=0,e.next_in=t,e.avail_in=t.length;do{if(e.next_out_index=0,e.avail_out=n,r=e.deflate(0),0!=r)throw new Error("deflating: "+e.msg);e.next_out_index&&(e.next_out_index==n?d.push(new Uint8Array(a)):d.push(a.slice(0,e.next_out_index))),_+=e.next_out_index,i&&e.next_in_index>0&&e.next_in_index!=o&&(i(e.next_in_index),o=e.next_in_index);}while(e.avail_in>0||0===e.avail_out);return d.length>1?(s=new Uint8Array(_),d.forEach((function(t){s.set(t,l),l+=t.length;}))):s=d[0]||new Uint8Array(0),s}},this.flush=function(){let t,i,r=0,s=0;const o=[];do{if(e.next_out_index=0,e.avail_out=n,t=e.deflate(4),1!=t&&0!=t)throw new Error("deflating: "+e.msg);n-e.avail_out>0&&o.push(a.slice(0,e.next_out_index)),s+=e.next_out_index;}while(e.avail_in>0||0===e.avail_out);return e.deflateEnd(),i=new Uint8Array(s),o.forEach((function(t){i.set(t,r),r+=t.length;})),i};}N.prototype={deflateInit:function(t,e){const n=this;return n.dstate=new J,e||(e=15),n.dstate.deflateInit(n,t,e)},deflate:function(t){const e=this;return e.dstate?e.dstate.deflate(e,t):-2},deflateEnd:function(){const t=this;if(!t.dstate)return -2;const e=t.dstate.deflateEnd();return t.dstate=null,e},deflateParams:function(t,e){const n=this;return n.dstate?n.dstate.deflateParams(n,t,e):-2},deflateSetDictionary:function(t,e){const n=this;return n.dstate?n.dstate.deflateSetDictionary(n,t,e):-2},read_buf:function(t,e,n){const i=this;let a=i.avail_in;return a>n&&(a=n),0===a?0:(i.avail_in-=a,t.set(i.next_in.subarray(i.next_in_index,i.next_in_index+a),e),i.next_in_index+=a,i.total_in+=a,a)},flush_pending:function(){const t=this;let e=t.dstate.pending;e>t.avail_out&&(e=t.avail_out),0!==e&&(t.next_out.set(t.dstate.pending_buf.subarray(t.dstate.pending_out,t.dstate.pending_out+e),t.next_out_index),t.next_out_index+=e,t.dstate.pending_out+=e,t.total_out+=e,t.avail_out-=e,t.dstate.pending-=e,0===t.dstate.pending&&(t.dstate.pending_out=0));}};const X=[0,1,3,7,15,31,63,127,255,511,1023,2047,4095,8191,16383,32767,65535],Y=[96,7,256,0,8,80,0,8,16,84,8,115,82,7,31,0,8,112,0,8,48,0,9,192,80,7,10,0,8,96,0,8,32,0,9,160,0,8,0,0,8,128,0,8,64,0,9,224,80,7,6,0,8,88,0,8,24,0,9,144,83,7,59,0,8,120,0,8,56,0,9,208,81,7,17,0,8,104,0,8,40,0,9,176,0,8,8,0,8,136,0,8,72,0,9,240,80,7,4,0,8,84,0,8,20,85,8,227,83,7,43,0,8,116,0,8,52,0,9,200,81,7,13,0,8,100,0,8,36,0,9,168,0,8,4,0,8,132,0,8,68,0,9,232,80,7,8,0,8,92,0,8,28,0,9,152,84,7,83,0,8,124,0,8,60,0,9,216,82,7,23,0,8,108,0,8,44,0,9,184,0,8,12,0,8,140,0,8,76,0,9,248,80,7,3,0,8,82,0,8,18,85,8,163,83,7,35,0,8,114,0,8,50,0,9,196,81,7,11,0,8,98,0,8,34,0,9,164,0,8,2,0,8,130,0,8,66,0,9,228,80,7,7,0,8,90,0,8,26,0,9,148,84,7,67,0,8,122,0,8,58,0,9,212,82,7,19,0,8,106,0,8,42,0,9,180,0,8,10,0,8,138,0,8,74,0,9,244,80,7,5,0,8,86,0,8,22,192,8,0,83,7,51,0,8,118,0,8,54,0,9,204,81,7,15,0,8,102,0,8,38,0,9,172,0,8,6,0,8,134,0,8,70,0,9,236,80,7,9,0,8,94,0,8,30,0,9,156,84,7,99,0,8,126,0,8,62,0,9,220,82,7,27,0,8,110,0,8,46,0,9,188,0,8,14,0,8,142,0,8,78,0,9,252,96,7,256,0,8,81,0,8,17,85,8,131,82,7,31,0,8,113,0,8,49,0,9,194,80,7,10,0,8,97,0,8,33,0,9,162,0,8,1,0,8,129,0,8,65,0,9,226,80,7,6,0,8,89,0,8,25,0,9,146,83,7,59,0,8,121,0,8,57,0,9,210,81,7,17,0,8,105,0,8,41,0,9,178,0,8,9,0,8,137,0,8,73,0,9,242,80,7,4,0,8,85,0,8,21,80,8,258,83,7,43,0,8,117,0,8,53,0,9,202,81,7,13,0,8,101,0,8,37,0,9,170,0,8,5,0,8,133,0,8,69,0,9,234,80,7,8,0,8,93,0,8,29,0,9,154,84,7,83,0,8,125,0,8,61,0,9,218,82,7,23,0,8,109,0,8,45,0,9,186,0,8,13,0,8,141,0,8,77,0,9,250,80,7,3,0,8,83,0,8,19,85,8,195,83,7,35,0,8,115,0,8,51,0,9,198,81,7,11,0,8,99,0,8,35,0,9,166,0,8,3,0,8,131,0,8,67,0,9,230,80,7,7,0,8,91,0,8,27,0,9,150,84,7,67,0,8,123,0,8,59,0,9,214,82,7,19,0,8,107,0,8,43,0,9,182,0,8,11,0,8,139,0,8,75,0,9,246,80,7,5,0,8,87,0,8,23,192,8,0,83,7,51,0,8,119,0,8,55,0,9,206,81,7,15,0,8,103,0,8,39,0,9,174,0,8,7,0,8,135,0,8,71,0,9,238,80,7,9,0,8,95,0,8,31,0,9,158,84,7,99,0,8,127,0,8,63,0,9,222,82,7,27,0,8,111,0,8,47,0,9,190,0,8,15,0,8,143,0,8,79,0,9,254,96,7,256,0,8,80,0,8,16,84,8,115,82,7,31,0,8,112,0,8,48,0,9,193,80,7,10,0,8,96,0,8,32,0,9,161,0,8,0,0,8,128,0,8,64,0,9,225,80,7,6,0,8,88,0,8,24,0,9,145,83,7,59,0,8,120,0,8,56,0,9,209,81,7,17,0,8,104,0,8,40,0,9,177,0,8,8,0,8,136,0,8,72,0,9,241,80,7,4,0,8,84,0,8,20,85,8,227,83,7,43,0,8,116,0,8,52,0,9,201,81,7,13,0,8,100,0,8,36,0,9,169,0,8,4,0,8,132,0,8,68,0,9,233,80,7,8,0,8,92,0,8,28,0,9,153,84,7,83,0,8,124,0,8,60,0,9,217,82,7,23,0,8,108,0,8,44,0,9,185,0,8,12,0,8,140,0,8,76,0,9,249,80,7,3,0,8,82,0,8,18,85,8,163,83,7,35,0,8,114,0,8,50,0,9,197,81,7,11,0,8,98,0,8,34,0,9,165,0,8,2,0,8,130,0,8,66,0,9,229,80,7,7,0,8,90,0,8,26,0,9,149,84,7,67,0,8,122,0,8,58,0,9,213,82,7,19,0,8,106,0,8,42,0,9,181,0,8,10,0,8,138,0,8,74,0,9,245,80,7,5,0,8,86,0,8,22,192,8,0,83,7,51,0,8,118,0,8,54,0,9,205,81,7,15,0,8,102,0,8,38,0,9,173,0,8,6,0,8,134,0,8,70,0,9,237,80,7,9,0,8,94,0,8,30,0,9,157,84,7,99,0,8,126,0,8,62,0,9,221,82,7,27,0,8,110,0,8,46,0,9,189,0,8,14,0,8,142,0,8,78,0,9,253,96,7,256,0,8,81,0,8,17,85,8,131,82,7,31,0,8,113,0,8,49,0,9,195,80,7,10,0,8,97,0,8,33,0,9,163,0,8,1,0,8,129,0,8,65,0,9,227,80,7,6,0,8,89,0,8,25,0,9,147,83,7,59,0,8,121,0,8,57,0,9,211,81,7,17,0,8,105,0,8,41,0,9,179,0,8,9,0,8,137,0,8,73,0,9,243,80,7,4,0,8,85,0,8,21,80,8,258,83,7,43,0,8,117,0,8,53,0,9,203,81,7,13,0,8,101,0,8,37,0,9,171,0,8,5,0,8,133,0,8,69,0,9,235,80,7,8,0,8,93,0,8,29,0,9,155,84,7,83,0,8,125,0,8,61,0,9,219,82,7,23,0,8,109,0,8,45,0,9,187,0,8,13,0,8,141,0,8,77,0,9,251,80,7,3,0,8,83,0,8,19,85,8,195,83,7,35,0,8,115,0,8,51,0,9,199,81,7,11,0,8,99,0,8,35,0,9,167,0,8,3,0,8,131,0,8,67,0,9,231,80,7,7,0,8,91,0,8,27,0,9,151,84,7,67,0,8,123,0,8,59,0,9,215,82,7,19,0,8,107,0,8,43,0,9,183,0,8,11,0,8,139,0,8,75,0,9,247,80,7,5,0,8,87,0,8,23,192,8,0,83,7,51,0,8,119,0,8,55,0,9,207,81,7,15,0,8,103,0,8,39,0,9,175,0,8,7,0,8,135,0,8,71,0,9,239,80,7,9,0,8,95,0,8,31,0,9,159,84,7,99,0,8,127,0,8,63,0,9,223,82,7,27,0,8,111,0,8,47,0,9,191,0,8,15,0,8,143,0,8,79,0,9,255],Z=[80,5,1,87,5,257,83,5,17,91,5,4097,81,5,5,89,5,1025,85,5,65,93,5,16385,80,5,3,88,5,513,84,5,33,92,5,8193,82,5,9,90,5,2049,86,5,129,192,5,24577,80,5,2,87,5,385,83,5,25,91,5,6145,81,5,7,89,5,1537,85,5,97,93,5,24577,80,5,4,88,5,769,84,5,49,92,5,12289,82,5,13,90,5,3073,86,5,193,192,5,24577],$=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0],tt=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,112,112],et=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577],nt=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13];function it(){let t,e,n,i,a,r;function s(t,e,s,o,l,_,d,c,f,u,h){let b,w,p,x,g,y,m,k,v,A,U,S,z,I,E;A=0,g=s;do{n[t[e+A]]++,A++,g--;}while(0!==g);if(n[0]==s)return d[0]=-1,c[0]=0,0;for(k=c[0],y=1;y<=15&&0===n[y];y++);for(m=y,k<y&&(k=y),g=15;0!==g&&0===n[g];g--);for(p=g,k>g&&(k=g),c[0]=k,I=1<<y;y<g;y++,I<<=1)if((I-=n[y])<0)return -3;if((I-=n[g])<0)return -3;for(n[g]+=I,r[1]=y=0,A=1,z=2;0!=--g;)r[z]=y+=n[A],z++,A++;g=0,A=0;do{0!==(y=t[e+A])&&(h[r[y]++]=g),A++;}while(++g<s);for(s=r[p],r[0]=g=0,A=0,x=-1,S=-k,a[0]=0,U=0,E=0;m<=p;m++)for(b=n[m];0!=b--;){for(;m>S+k;){if(x++,S+=k,E=p-S,E=E>k?k:E,(w=1<<(y=m-S))>b+1&&(w-=b+1,z=m,y<E))for(;++y<E&&!((w<<=1)<=n[++z]);)w-=n[z];if(E=1<<y,u[0]+E>1440)return -3;a[x]=U=u[0],u[0]+=E,0!==x?(r[x]=g,i[0]=y,i[1]=k,y=g>>>S-k,i[2]=U-a[x-1]-y,f.set(i,3*(a[x-1]+y))):d[0]=U;}for(i[1]=m-S,A>=s?i[0]=192:h[A]<o?(i[0]=h[A]<256?0:96,i[2]=h[A++]):(i[0]=_[h[A]-o]+16+64,i[2]=l[h[A++]-o]),w=1<<m-S,y=g>>>S;y<E;y+=w)f.set(i,3*(U+y));for(y=1<<m-1;0!=(g&y);y>>>=1)g^=y;for(g^=y,v=(1<<S)-1;(g&v)!=r[x];)x--,S-=k,v=(1<<S)-1;}return 0!==I&&1!=p?-5:0}function o(s){let o;for(t||(t=[],e=[],n=new Int32Array(16),i=[],a=new Int32Array(15),r=new Int32Array(16)),e.length<s&&(e=[]),o=0;o<s;o++)e[o]=0;for(o=0;o<16;o++)n[o]=0;for(o=0;o<3;o++)i[o]=0;a.set(n.subarray(0,15),0),r.set(n.subarray(0,16),0);}this.inflate_trees_bits=function(n,i,a,r,l){let _;return o(19),t[0]=0,_=s(n,0,19,19,null,null,a,i,r,t,e),-3==_?l.msg="oversubscribed dynamic bit lengths tree":-5!=_&&0!==i[0]||(l.msg="incomplete dynamic bit lengths tree",_=-3),_},this.inflate_trees_dynamic=function(n,i,a,r,l,_,d,c,f){let u;return o(288),t[0]=0,u=s(a,0,n,257,$,tt,_,r,c,t,e),0!=u||0===r[0]?(-3==u?f.msg="oversubscribed literal/length tree":-4!=u&&(f.msg="incomplete literal/length tree",u=-3),u):(o(288),u=s(a,n,i,0,et,nt,d,l,c,t,e),0!=u||0===l[0]&&n>257?(-3==u?f.msg="oversubscribed distance tree":-5==u?(f.msg="incomplete distance tree",u=-3):-4!=u&&(f.msg="empty distance tree with lengths",u=-3),u):0)};}it.inflate_trees_fixed=function(t,e,n,i){return t[0]=9,e[0]=5,n[0]=Y,i[0]=Z,0};function at(){const t=this;let e,n,i,a,r=0,s=0,o=0,l=0,_=0,d=0,c=0,f=0,u=0,h=0;function b(t,e,n,i,a,r,s,o){let l,_,d,c,f,u,h,b,w,p,x,g,y,m,k,v;h=o.next_in_index,b=o.avail_in,f=s.bitb,u=s.bitk,w=s.write,p=w<s.read?s.read-w-1:s.end-w,x=X[t],g=X[e];do{for(;u<20;)b--,f|=(255&o.read_byte(h++))<<u,u+=8;if(l=f&x,_=n,d=i,v=3*(d+l),0!==(c=_[v]))for(;;){if(f>>=_[v+1],u-=_[v+1],0!=(16&c)){for(c&=15,y=_[v+2]+(f&X[c]),f>>=c,u-=c;u<15;)b--,f|=(255&o.read_byte(h++))<<u,u+=8;for(l=f&g,_=a,d=r,v=3*(d+l),c=_[v];;){if(f>>=_[v+1],u-=_[v+1],0!=(16&c)){for(c&=15;u<c;)b--,f|=(255&o.read_byte(h++))<<u,u+=8;if(m=_[v+2]+(f&X[c]),f>>=c,u-=c,p-=y,w>=m)k=w-m,w-k>0&&2>w-k?(s.window[w++]=s.window[k++],s.window[w++]=s.window[k++],y-=2):(s.window.set(s.window.subarray(k,k+2),w),w+=2,k+=2,y-=2);else {k=w-m;do{k+=s.end;}while(k<0);if(c=s.end-k,y>c){if(y-=c,w-k>0&&c>w-k)do{s.window[w++]=s.window[k++];}while(0!=--c);else s.window.set(s.window.subarray(k,k+c),w),w+=c,k+=c,c=0;k=0;}}if(w-k>0&&y>w-k)do{s.window[w++]=s.window[k++];}while(0!=--y);else s.window.set(s.window.subarray(k,k+y),w),w+=y,k+=y,y=0;break}if(0!=(64&c))return o.msg="invalid distance code",y=o.avail_in-b,y=u>>3<y?u>>3:y,b+=y,h-=y,u-=y<<3,s.bitb=f,s.bitk=u,o.avail_in=b,o.total_in+=h-o.next_in_index,o.next_in_index=h,s.write=w,-3;l+=_[v+2],l+=f&X[c],v=3*(d+l),c=_[v];}break}if(0!=(64&c))return 0!=(32&c)?(y=o.avail_in-b,y=u>>3<y?u>>3:y,b+=y,h-=y,u-=y<<3,s.bitb=f,s.bitk=u,o.avail_in=b,o.total_in+=h-o.next_in_index,o.next_in_index=h,s.write=w,1):(o.msg="invalid literal/length code",y=o.avail_in-b,y=u>>3<y?u>>3:y,b+=y,h-=y,u-=y<<3,s.bitb=f,s.bitk=u,o.avail_in=b,o.total_in+=h-o.next_in_index,o.next_in_index=h,s.write=w,-3);if(l+=_[v+2],l+=f&X[c],v=3*(d+l),0===(c=_[v])){f>>=_[v+1],u-=_[v+1],s.window[w++]=_[v+2],p--;break}}else f>>=_[v+1],u-=_[v+1],s.window[w++]=_[v+2],p--;}while(p>=258&&b>=10);return y=o.avail_in-b,y=u>>3<y?u>>3:y,b+=y,h-=y,u-=y<<3,s.bitb=f,s.bitk=u,o.avail_in=b,o.total_in+=h-o.next_in_index,o.next_in_index=h,s.write=w,0}t.init=function(t,r,s,o,l,_){e=0,c=t,f=r,i=s,u=o,a=l,h=_,n=null;},t.proc=function(t,w,p){let x,g,y,m,k,v,A,U=0,S=0,z=0;for(z=w.next_in_index,m=w.avail_in,U=t.bitb,S=t.bitk,k=t.write,v=k<t.read?t.read-k-1:t.end-k;;)switch(e){case 0:if(v>=258&&m>=10&&(t.bitb=U,t.bitk=S,w.avail_in=m,w.total_in+=z-w.next_in_index,w.next_in_index=z,t.write=k,p=b(c,f,i,u,a,h,t,w),z=w.next_in_index,m=w.avail_in,U=t.bitb,S=t.bitk,k=t.write,v=k<t.read?t.read-k-1:t.end-k,0!=p)){e=1==p?7:9;break}o=c,n=i,s=u,e=1;case 1:for(x=o;S<x;){if(0===m)return t.bitb=U,t.bitk=S,w.avail_in=m,w.total_in+=z-w.next_in_index,w.next_in_index=z,t.write=k,t.inflate_flush(w,p);p=0,m--,U|=(255&w.read_byte(z++))<<S,S+=8;}if(g=3*(s+(U&X[x])),U>>>=n[g+1],S-=n[g+1],y=n[g],0===y){l=n[g+2],e=6;break}if(0!=(16&y)){_=15&y,r=n[g+2],e=2;break}if(0==(64&y)){o=y,s=g/3+n[g+2];break}if(0!=(32&y)){e=7;break}return e=9,w.msg="invalid literal/length code",p=-3,t.bitb=U,t.bitk=S,w.avail_in=m,w.total_in+=z-w.next_in_index,w.next_in_index=z,t.write=k,t.inflate_flush(w,p);case 2:for(x=_;S<x;){if(0===m)return t.bitb=U,t.bitk=S,w.avail_in=m,w.total_in+=z-w.next_in_index,w.next_in_index=z,t.write=k,t.inflate_flush(w,p);p=0,m--,U|=(255&w.read_byte(z++))<<S,S+=8;}r+=U&X[x],U>>=x,S-=x,o=f,n=a,s=h,e=3;case 3:for(x=o;S<x;){if(0===m)return t.bitb=U,t.bitk=S,w.avail_in=m,w.total_in+=z-w.next_in_index,w.next_in_index=z,t.write=k,t.inflate_flush(w,p);p=0,m--,U|=(255&w.read_byte(z++))<<S,S+=8;}if(g=3*(s+(U&X[x])),U>>=n[g+1],S-=n[g+1],y=n[g],0!=(16&y)){_=15&y,d=n[g+2],e=4;break}if(0==(64&y)){o=y,s=g/3+n[g+2];break}return e=9,w.msg="invalid distance code",p=-3,t.bitb=U,t.bitk=S,w.avail_in=m,w.total_in+=z-w.next_in_index,w.next_in_index=z,t.write=k,t.inflate_flush(w,p);case 4:for(x=_;S<x;){if(0===m)return t.bitb=U,t.bitk=S,w.avail_in=m,w.total_in+=z-w.next_in_index,w.next_in_index=z,t.write=k,t.inflate_flush(w,p);p=0,m--,U|=(255&w.read_byte(z++))<<S,S+=8;}d+=U&X[x],U>>=x,S-=x,e=5;case 5:for(A=k-d;A<0;)A+=t.end;for(;0!==r;){if(0===v&&(k==t.end&&0!==t.read&&(k=0,v=k<t.read?t.read-k-1:t.end-k),0===v&&(t.write=k,p=t.inflate_flush(w,p),k=t.write,v=k<t.read?t.read-k-1:t.end-k,k==t.end&&0!==t.read&&(k=0,v=k<t.read?t.read-k-1:t.end-k),0===v)))return t.bitb=U,t.bitk=S,w.avail_in=m,w.total_in+=z-w.next_in_index,w.next_in_index=z,t.write=k,t.inflate_flush(w,p);t.window[k++]=t.window[A++],v--,A==t.end&&(A=0),r--;}e=0;break;case 6:if(0===v&&(k==t.end&&0!==t.read&&(k=0,v=k<t.read?t.read-k-1:t.end-k),0===v&&(t.write=k,p=t.inflate_flush(w,p),k=t.write,v=k<t.read?t.read-k-1:t.end-k,k==t.end&&0!==t.read&&(k=0,v=k<t.read?t.read-k-1:t.end-k),0===v)))return t.bitb=U,t.bitk=S,w.avail_in=m,w.total_in+=z-w.next_in_index,w.next_in_index=z,t.write=k,t.inflate_flush(w,p);p=0,t.window[k++]=l,v--,e=0;break;case 7:if(S>7&&(S-=8,m++,z--),t.write=k,p=t.inflate_flush(w,p),k=t.write,v=k<t.read?t.read-k-1:t.end-k,t.read!=t.write)return t.bitb=U,t.bitk=S,w.avail_in=m,w.total_in+=z-w.next_in_index,w.next_in_index=z,t.write=k,t.inflate_flush(w,p);e=8;case 8:return p=1,t.bitb=U,t.bitk=S,w.avail_in=m,w.total_in+=z-w.next_in_index,w.next_in_index=z,t.write=k,t.inflate_flush(w,p);case 9:return p=-3,t.bitb=U,t.bitk=S,w.avail_in=m,w.total_in+=z-w.next_in_index,w.next_in_index=z,t.write=k,t.inflate_flush(w,p);default:return p=-2,t.bitb=U,t.bitk=S,w.avail_in=m,w.total_in+=z-w.next_in_index,w.next_in_index=z,t.write=k,t.inflate_flush(w,p)}},t.free=function(){};}const rt=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];function st(t,e){const n=this;let i,a=0,r=0,s=0,o=0;const l=[0],_=[0],d=new at;let c=0,f=new Int32Array(4320);const u=new it;n.bitk=0,n.bitb=0,n.window=new Uint8Array(e),n.end=e,n.read=0,n.write=0,n.reset=function(t,e){e&&(e[0]=0),6==a&&d.free(t),a=0,n.bitk=0,n.bitb=0,n.read=n.write=0;},n.reset(t,null),n.inflate_flush=function(t,e){let i,a,r;return a=t.next_out_index,r=n.read,i=(r<=n.write?n.write:n.end)-r,i>t.avail_out&&(i=t.avail_out),0!==i&&-5==e&&(e=0),t.avail_out-=i,t.total_out+=i,t.next_out.set(n.window.subarray(r,r+i),a),a+=i,r+=i,r==n.end&&(r=0,n.write==n.end&&(n.write=0),i=n.write-r,i>t.avail_out&&(i=t.avail_out),0!==i&&-5==e&&(e=0),t.avail_out-=i,t.total_out+=i,t.next_out.set(n.window.subarray(r,r+i),a),a+=i,r+=i),t.next_out_index=a,n.read=r,e},n.proc=function(t,e){let h,b,w,p,x,g,y,m;for(p=t.next_in_index,x=t.avail_in,b=n.bitb,w=n.bitk,g=n.write,y=g<n.read?n.read-g-1:n.end-g;;){let k,v,A,U,S,z,I,E;switch(a){case 0:for(;w<3;){if(0===x)return n.bitb=b,n.bitk=w,t.avail_in=x,t.total_in+=p-t.next_in_index,t.next_in_index=p,n.write=g,n.inflate_flush(t,e);e=0,x--,b|=(255&t.read_byte(p++))<<w,w+=8;}switch(h=7&b,c=1&h,h>>>1){case 0:b>>>=3,w-=3,h=7&w,b>>>=h,w-=h,a=1;break;case 1:k=[],v=[],A=[[]],U=[[]],it.inflate_trees_fixed(k,v,A,U),d.init(k[0],v[0],A[0],0,U[0],0),b>>>=3,w-=3,a=6;break;case 2:b>>>=3,w-=3,a=3;break;case 3:return b>>>=3,w-=3,a=9,t.msg="invalid block type",e=-3,n.bitb=b,n.bitk=w,t.avail_in=x,t.total_in+=p-t.next_in_index,t.next_in_index=p,n.write=g,n.inflate_flush(t,e)}break;case 1:for(;w<32;){if(0===x)return n.bitb=b,n.bitk=w,t.avail_in=x,t.total_in+=p-t.next_in_index,t.next_in_index=p,n.write=g,n.inflate_flush(t,e);e=0,x--,b|=(255&t.read_byte(p++))<<w,w+=8;}if((~b>>>16&65535)!=(65535&b))return a=9,t.msg="invalid stored block lengths",e=-3,n.bitb=b,n.bitk=w,t.avail_in=x,t.total_in+=p-t.next_in_index,t.next_in_index=p,n.write=g,n.inflate_flush(t,e);r=65535&b,b=w=0,a=0!==r?2:0!==c?7:0;break;case 2:if(0===x)return n.bitb=b,n.bitk=w,t.avail_in=x,t.total_in+=p-t.next_in_index,t.next_in_index=p,n.write=g,n.inflate_flush(t,e);if(0===y&&(g==n.end&&0!==n.read&&(g=0,y=g<n.read?n.read-g-1:n.end-g),0===y&&(n.write=g,e=n.inflate_flush(t,e),g=n.write,y=g<n.read?n.read-g-1:n.end-g,g==n.end&&0!==n.read&&(g=0,y=g<n.read?n.read-g-1:n.end-g),0===y)))return n.bitb=b,n.bitk=w,t.avail_in=x,t.total_in+=p-t.next_in_index,t.next_in_index=p,n.write=g,n.inflate_flush(t,e);if(e=0,h=r,h>x&&(h=x),h>y&&(h=y),n.window.set(t.read_buf(p,h),g),p+=h,x-=h,g+=h,y-=h,0!=(r-=h))break;a=0!==c?7:0;break;case 3:for(;w<14;){if(0===x)return n.bitb=b,n.bitk=w,t.avail_in=x,t.total_in+=p-t.next_in_index,t.next_in_index=p,n.write=g,n.inflate_flush(t,e);e=0,x--,b|=(255&t.read_byte(p++))<<w,w+=8;}if(s=h=16383&b,(31&h)>29||(h>>5&31)>29)return a=9,t.msg="too many length or distance symbols",e=-3,n.bitb=b,n.bitk=w,t.avail_in=x,t.total_in+=p-t.next_in_index,t.next_in_index=p,n.write=g,n.inflate_flush(t,e);if(h=258+(31&h)+(h>>5&31),!i||i.length<h)i=[];else for(m=0;m<h;m++)i[m]=0;b>>>=14,w-=14,o=0,a=4;case 4:for(;o<4+(s>>>10);){for(;w<3;){if(0===x)return n.bitb=b,n.bitk=w,t.avail_in=x,t.total_in+=p-t.next_in_index,t.next_in_index=p,n.write=g,n.inflate_flush(t,e);e=0,x--,b|=(255&t.read_byte(p++))<<w,w+=8;}i[rt[o++]]=7&b,b>>>=3,w-=3;}for(;o<19;)i[rt[o++]]=0;if(l[0]=7,h=u.inflate_trees_bits(i,l,_,f,t),0!=h)return -3==(e=h)&&(i=null,a=9),n.bitb=b,n.bitk=w,t.avail_in=x,t.total_in+=p-t.next_in_index,t.next_in_index=p,n.write=g,n.inflate_flush(t,e);o=0,a=5;case 5:for(;h=s,!(o>=258+(31&h)+(h>>5&31));){let r,d;for(h=l[0];w<h;){if(0===x)return n.bitb=b,n.bitk=w,t.avail_in=x,t.total_in+=p-t.next_in_index,t.next_in_index=p,n.write=g,n.inflate_flush(t,e);e=0,x--,b|=(255&t.read_byte(p++))<<w,w+=8;}if(h=f[3*(_[0]+(b&X[h]))+1],d=f[3*(_[0]+(b&X[h]))+2],d<16)b>>>=h,w-=h,i[o++]=d;else {for(m=18==d?7:d-14,r=18==d?11:3;w<h+m;){if(0===x)return n.bitb=b,n.bitk=w,t.avail_in=x,t.total_in+=p-t.next_in_index,t.next_in_index=p,n.write=g,n.inflate_flush(t,e);e=0,x--,b|=(255&t.read_byte(p++))<<w,w+=8;}if(b>>>=h,w-=h,r+=b&X[m],b>>>=m,w-=m,m=o,h=s,m+r>258+(31&h)+(h>>5&31)||16==d&&m<1)return i=null,a=9,t.msg="invalid bit length repeat",e=-3,n.bitb=b,n.bitk=w,t.avail_in=x,t.total_in+=p-t.next_in_index,t.next_in_index=p,n.write=g,n.inflate_flush(t,e);d=16==d?i[m-1]:0;do{i[m++]=d;}while(0!=--r);o=m;}}if(_[0]=-1,S=[],z=[],I=[],E=[],S[0]=9,z[0]=6,h=s,h=u.inflate_trees_dynamic(257+(31&h),1+(h>>5&31),i,S,z,I,E,f,t),0!=h)return -3==h&&(i=null,a=9),e=h,n.bitb=b,n.bitk=w,t.avail_in=x,t.total_in+=p-t.next_in_index,t.next_in_index=p,n.write=g,n.inflate_flush(t,e);d.init(S[0],z[0],f,I[0],f,E[0]),a=6;case 6:if(n.bitb=b,n.bitk=w,t.avail_in=x,t.total_in+=p-t.next_in_index,t.next_in_index=p,n.write=g,1!=(e=d.proc(n,t,e)))return n.inflate_flush(t,e);if(e=0,d.free(t),p=t.next_in_index,x=t.avail_in,b=n.bitb,w=n.bitk,g=n.write,y=g<n.read?n.read-g-1:n.end-g,0===c){a=0;break}a=7;case 7:if(n.write=g,e=n.inflate_flush(t,e),g=n.write,y=g<n.read?n.read-g-1:n.end-g,n.read!=n.write)return n.bitb=b,n.bitk=w,t.avail_in=x,t.total_in+=p-t.next_in_index,t.next_in_index=p,n.write=g,n.inflate_flush(t,e);a=8;case 8:return e=1,n.bitb=b,n.bitk=w,t.avail_in=x,t.total_in+=p-t.next_in_index,t.next_in_index=p,n.write=g,n.inflate_flush(t,e);case 9:return e=-3,n.bitb=b,n.bitk=w,t.avail_in=x,t.total_in+=p-t.next_in_index,t.next_in_index=p,n.write=g,n.inflate_flush(t,e);default:return e=-2,n.bitb=b,n.bitk=w,t.avail_in=x,t.total_in+=p-t.next_in_index,t.next_in_index=p,n.write=g,n.inflate_flush(t,e)}}},n.free=function(t){n.reset(t,null),n.window=null,f=null;},n.set_dictionary=function(t,e,i){n.window.set(t.subarray(e,e+i),0),n.read=n.write=i;},n.sync_point=function(){return 1==a?1:0};}const ot=[0,0,255,255];function lt(){const t=this;function e(t){return t&&t.istate?(t.total_in=t.total_out=0,t.msg=null,t.istate.mode=7,t.istate.blocks.reset(t,null),0):-2}t.mode=0,t.method=0,t.was=[0],t.need=0,t.marker=0,t.wbits=0,t.inflateEnd=function(e){return t.blocks&&t.blocks.free(e),t.blocks=null,0},t.inflateInit=function(n,i){return n.msg=null,t.blocks=null,i<8||i>15?(t.inflateEnd(n),-2):(t.wbits=i,n.istate.blocks=new st(n,1<<i),e(n),0)},t.inflate=function(t,e){let n,i;if(!t||!t.istate||!t.next_in)return -2;const a=t.istate;for(e=4==e?-5:0,n=-5;;)switch(a.mode){case 0:if(0===t.avail_in)return n;if(n=e,t.avail_in--,t.total_in++,8!=(15&(a.method=t.read_byte(t.next_in_index++)))){a.mode=13,t.msg="unknown compression method",a.marker=5;break}if(8+(a.method>>4)>a.wbits){a.mode=13,t.msg="invalid window size",a.marker=5;break}a.mode=1;case 1:if(0===t.avail_in)return n;if(n=e,t.avail_in--,t.total_in++,i=255&t.read_byte(t.next_in_index++),((a.method<<8)+i)%31!=0){a.mode=13,t.msg="incorrect header check",a.marker=5;break}if(0==(32&i)){a.mode=7;break}a.mode=2;case 2:if(0===t.avail_in)return n;n=e,t.avail_in--,t.total_in++,a.need=(255&t.read_byte(t.next_in_index++))<<24&4278190080,a.mode=3;case 3:if(0===t.avail_in)return n;n=e,t.avail_in--,t.total_in++,a.need+=(255&t.read_byte(t.next_in_index++))<<16&16711680,a.mode=4;case 4:if(0===t.avail_in)return n;n=e,t.avail_in--,t.total_in++,a.need+=(255&t.read_byte(t.next_in_index++))<<8&65280,a.mode=5;case 5:return 0===t.avail_in?n:(n=e,t.avail_in--,t.total_in++,a.need+=255&t.read_byte(t.next_in_index++),a.mode=6,2);case 6:return a.mode=13,t.msg="need dictionary",a.marker=0,-2;case 7:if(n=a.blocks.proc(t,n),-3==n){a.mode=13,a.marker=0;break}if(0==n&&(n=e),1!=n)return n;n=e,a.blocks.reset(t,a.was),a.mode=12;case 12:return 1;case 13:return -3;default:return -2}},t.inflateSetDictionary=function(t,e,n){let i=0,a=n;if(!t||!t.istate||6!=t.istate.mode)return -2;const r=t.istate;return a>=1<<r.wbits&&(a=(1<<r.wbits)-1,i=n-a),r.blocks.set_dictionary(e,i,a),r.mode=7,0},t.inflateSync=function(t){let n,i,a,r,s;if(!t||!t.istate)return -2;const o=t.istate;if(13!=o.mode&&(o.mode=13,o.marker=0),0===(n=t.avail_in))return -5;for(i=t.next_in_index,a=o.marker;0!==n&&a<4;)t.read_byte(i)==ot[a]?a++:a=0!==t.read_byte(i)?0:4-a,i++,n--;return t.total_in+=i-t.next_in_index,t.next_in_index=i,t.avail_in=n,o.marker=a,4!=a?-3:(r=t.total_in,s=t.total_out,e(t),t.total_in=r,t.total_out=s,o.mode=7,0)},t.inflateSyncPoint=function(t){return t&&t.istate&&t.istate.blocks?t.istate.blocks.sync_point():-2};}function _t(){}function dt(t){const e=new _t,n=t&&t.chunkSize?Math.floor(2*t.chunkSize):131072,i=new Uint8Array(n);let a=!1;e.inflateInit(),e.next_out=i,this.append=function(t,r){const s=[];let o,l,_=0,d=0,c=0;if(0!==t.length){e.next_in_index=0,e.next_in=t,e.avail_in=t.length;do{if(e.next_out_index=0,e.avail_out=n,0!==e.avail_in||a||(e.next_in_index=0,a=!0),o=e.inflate(0),a&&-5===o){if(0!==e.avail_in)throw new Error("inflating: bad input")}else if(0!==o&&1!==o)throw new Error("inflating: "+e.msg);if((a||1===o)&&e.avail_in===t.length)throw new Error("inflating: bad input");e.next_out_index&&(e.next_out_index===n?s.push(new Uint8Array(i)):s.push(i.slice(0,e.next_out_index))),c+=e.next_out_index,r&&e.next_in_index>0&&e.next_in_index!=_&&(r(e.next_in_index),_=e.next_in_index);}while(e.avail_in>0||0===e.avail_out);return s.length>1?(l=new Uint8Array(c),s.forEach((function(t){l.set(t,d),d+=t.length;}))):l=s[0]||new Uint8Array(0),l}},this.flush=function(){e.inflateEnd();};}_t.prototype={inflateInit:function(t){const e=this;return e.istate=new lt,t||(t=15),e.istate.inflateInit(e,t)},inflate:function(t){const e=this;return e.istate?e.istate.inflate(e,t):-2},inflateEnd:function(){const t=this;if(!t.istate)return -2;const e=t.istate.inflateEnd(t);return t.istate=null,e},inflateSync:function(){const t=this;return t.istate?t.istate.inflateSync(t):-2},inflateSetDictionary:function(t,e){const n=this;return n.istate?n.istate.inflateSetDictionary(n,t,e):-2},read_byte:function(t){return this.next_in[t]},read_buf:function(t,e){return this.next_in.subarray(t,t+e)}},self.initCodec=()=>{self.Deflate=Q,self.Inflate=dt;};\n\n\t\t',n=URL.createObjectURL(new Blob([e],{type:"text/javascript"}));Object(_core_configuration_js__WEBPACK_IMPORTED_MODULE_0__["configure"])({workerScripts:{inflate:[n],deflate:[n]}})}});


/***/ }),

/***/ "./node_modules/@zip.js/zip.js/lib/zip-fs.js":
/*!***************************************************!*\
  !*** ./node_modules/@zip.js/zip.js/lib/zip-fs.js ***!
  \***************************************************/
/*! exports provided: Reader, Writer, TextReader, TextWriter, Data64URIReader, Data64URIWriter, BlobReader, BlobWriter, Uint8ArrayReader, Uint8ArrayWriter, HttpReader, HttpRangeReader, ERR_HTTP_RANGE, ZipReader, ERR_BAD_FORMAT, ERR_EOCDR_NOT_FOUND, ERR_EOCDR_ZIP64_NOT_FOUND, ERR_EOCDR_LOCATOR_ZIP64_NOT_FOUND, ERR_CENTRAL_DIRECTORY_NOT_FOUND, ERR_LOCAL_FILE_HEADER_NOT_FOUND, ERR_EXTRAFIELD_ZIP64_NOT_FOUND, ERR_ENCRYPTED, ERR_UNSUPPORTED_ENCRYPTION, ERR_UNSUPPORTED_COMPRESSION, ERR_INVALID_SIGNATURE, ERR_INVALID_PASSWORD, ZipWriter, ERR_DUPLICATED_NAME, ERR_INVALID_COMMENT, ERR_INVALID_ENTRY_NAME, ERR_INVALID_ENTRY_COMMENT, ERR_INVALID_VERSION, ERR_INVALID_EXTRAFIELD_TYPE, ERR_INVALID_EXTRAFIELD_DATA, ERR_INVALID_ENCRYPTION_STRENGTH, ERR_UNSUPPORTED_FORMAT, ERR_ABORT, fs, configure, getMimeType, initShimAsyncCodec, terminateWorkers */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _z_worker_inline_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./z-worker-inline.js */ "./node_modules/@zip.js/zip.js/lib/z-worker-inline.js");
/* harmony import */ var _core_util_default_mime_type_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./core/util/default-mime-type.js */ "./node_modules/@zip.js/zip.js/lib/core/util/default-mime-type.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getMimeType", function() { return _core_util_default_mime_type_js__WEBPACK_IMPORTED_MODULE_1__["default"]; });

/* harmony import */ var _core_util_stream_codec_shim_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./core/util/stream-codec-shim.js */ "./node_modules/@zip.js/zip.js/lib/core/util/stream-codec-shim.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "initShimAsyncCodec", function() { return _core_util_stream_codec_shim_js__WEBPACK_IMPORTED_MODULE_2__["default"]; });

/* harmony import */ var _core_codecs_codec_pool_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./core/codecs/codec-pool.js */ "./node_modules/@zip.js/zip.js/lib/core/codecs/codec-pool.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "terminateWorkers", function() { return _core_codecs_codec_pool_js__WEBPACK_IMPORTED_MODULE_3__["terminateWorkers"]; });

/* harmony import */ var _core_io_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./core/io.js */ "./node_modules/@zip.js/zip.js/lib/core/io.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Reader", function() { return _core_io_js__WEBPACK_IMPORTED_MODULE_4__["Reader"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Writer", function() { return _core_io_js__WEBPACK_IMPORTED_MODULE_4__["Writer"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TextReader", function() { return _core_io_js__WEBPACK_IMPORTED_MODULE_4__["TextReader"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TextWriter", function() { return _core_io_js__WEBPACK_IMPORTED_MODULE_4__["TextWriter"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Data64URIReader", function() { return _core_io_js__WEBPACK_IMPORTED_MODULE_4__["Data64URIReader"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Data64URIWriter", function() { return _core_io_js__WEBPACK_IMPORTED_MODULE_4__["Data64URIWriter"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BlobReader", function() { return _core_io_js__WEBPACK_IMPORTED_MODULE_4__["BlobReader"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BlobWriter", function() { return _core_io_js__WEBPACK_IMPORTED_MODULE_4__["BlobWriter"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Uint8ArrayReader", function() { return _core_io_js__WEBPACK_IMPORTED_MODULE_4__["Uint8ArrayReader"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Uint8ArrayWriter", function() { return _core_io_js__WEBPACK_IMPORTED_MODULE_4__["Uint8ArrayWriter"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "HttpReader", function() { return _core_io_js__WEBPACK_IMPORTED_MODULE_4__["HttpReader"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "HttpRangeReader", function() { return _core_io_js__WEBPACK_IMPORTED_MODULE_4__["HttpRangeReader"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ERR_HTTP_RANGE", function() { return _core_io_js__WEBPACK_IMPORTED_MODULE_4__["ERR_HTTP_RANGE"]; });

/* harmony import */ var _core_zip_reader_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./core/zip-reader.js */ "./node_modules/@zip.js/zip.js/lib/core/zip-reader.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ZipReader", function() { return _core_zip_reader_js__WEBPACK_IMPORTED_MODULE_5__["ZipReader"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ERR_BAD_FORMAT", function() { return _core_zip_reader_js__WEBPACK_IMPORTED_MODULE_5__["ERR_BAD_FORMAT"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ERR_EOCDR_NOT_FOUND", function() { return _core_zip_reader_js__WEBPACK_IMPORTED_MODULE_5__["ERR_EOCDR_NOT_FOUND"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ERR_EOCDR_ZIP64_NOT_FOUND", function() { return _core_zip_reader_js__WEBPACK_IMPORTED_MODULE_5__["ERR_EOCDR_ZIP64_NOT_FOUND"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ERR_EOCDR_LOCATOR_ZIP64_NOT_FOUND", function() { return _core_zip_reader_js__WEBPACK_IMPORTED_MODULE_5__["ERR_EOCDR_LOCATOR_ZIP64_NOT_FOUND"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ERR_CENTRAL_DIRECTORY_NOT_FOUND", function() { return _core_zip_reader_js__WEBPACK_IMPORTED_MODULE_5__["ERR_CENTRAL_DIRECTORY_NOT_FOUND"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ERR_LOCAL_FILE_HEADER_NOT_FOUND", function() { return _core_zip_reader_js__WEBPACK_IMPORTED_MODULE_5__["ERR_LOCAL_FILE_HEADER_NOT_FOUND"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ERR_EXTRAFIELD_ZIP64_NOT_FOUND", function() { return _core_zip_reader_js__WEBPACK_IMPORTED_MODULE_5__["ERR_EXTRAFIELD_ZIP64_NOT_FOUND"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ERR_ENCRYPTED", function() { return _core_zip_reader_js__WEBPACK_IMPORTED_MODULE_5__["ERR_ENCRYPTED"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ERR_UNSUPPORTED_ENCRYPTION", function() { return _core_zip_reader_js__WEBPACK_IMPORTED_MODULE_5__["ERR_UNSUPPORTED_ENCRYPTION"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ERR_UNSUPPORTED_COMPRESSION", function() { return _core_zip_reader_js__WEBPACK_IMPORTED_MODULE_5__["ERR_UNSUPPORTED_COMPRESSION"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ERR_INVALID_SIGNATURE", function() { return _core_zip_reader_js__WEBPACK_IMPORTED_MODULE_5__["ERR_INVALID_SIGNATURE"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ERR_INVALID_PASSWORD", function() { return _core_zip_reader_js__WEBPACK_IMPORTED_MODULE_5__["ERR_INVALID_PASSWORD"]; });

/* harmony import */ var _core_zip_writer_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./core/zip-writer.js */ "./node_modules/@zip.js/zip.js/lib/core/zip-writer.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ZipWriter", function() { return _core_zip_writer_js__WEBPACK_IMPORTED_MODULE_6__["ZipWriter"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ERR_DUPLICATED_NAME", function() { return _core_zip_writer_js__WEBPACK_IMPORTED_MODULE_6__["ERR_DUPLICATED_NAME"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ERR_INVALID_COMMENT", function() { return _core_zip_writer_js__WEBPACK_IMPORTED_MODULE_6__["ERR_INVALID_COMMENT"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ERR_INVALID_ENTRY_NAME", function() { return _core_zip_writer_js__WEBPACK_IMPORTED_MODULE_6__["ERR_INVALID_ENTRY_NAME"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ERR_INVALID_ENTRY_COMMENT", function() { return _core_zip_writer_js__WEBPACK_IMPORTED_MODULE_6__["ERR_INVALID_ENTRY_COMMENT"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ERR_INVALID_VERSION", function() { return _core_zip_writer_js__WEBPACK_IMPORTED_MODULE_6__["ERR_INVALID_VERSION"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ERR_INVALID_EXTRAFIELD_TYPE", function() { return _core_zip_writer_js__WEBPACK_IMPORTED_MODULE_6__["ERR_INVALID_EXTRAFIELD_TYPE"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ERR_INVALID_EXTRAFIELD_DATA", function() { return _core_zip_writer_js__WEBPACK_IMPORTED_MODULE_6__["ERR_INVALID_EXTRAFIELD_DATA"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ERR_INVALID_ENCRYPTION_STRENGTH", function() { return _core_zip_writer_js__WEBPACK_IMPORTED_MODULE_6__["ERR_INVALID_ENCRYPTION_STRENGTH"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ERR_UNSUPPORTED_FORMAT", function() { return _core_zip_writer_js__WEBPACK_IMPORTED_MODULE_6__["ERR_UNSUPPORTED_FORMAT"]; });

/* harmony import */ var _core_zip_fs_core_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./core/zip-fs-core.js */ "./node_modules/@zip.js/zip.js/lib/core/zip-fs-core.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ERR_ABORT", function() { return _core_zip_fs_core_js__WEBPACK_IMPORTED_MODULE_7__["ERR_ABORT"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "fs", function() { return _core_zip_fs_core_js__WEBPACK_IMPORTED_MODULE_7__["fs"]; });

/* harmony import */ var _core_configuration_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./core/configuration.js */ "./node_modules/@zip.js/zip.js/lib/core/configuration.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "configure", function() { return _core_configuration_js__WEBPACK_IMPORTED_MODULE_8__["configure"]; });

/*
 Copyright (c) 2021 Gildas Lormeau. All rights reserved.

 Redistribution and use in source and binary forms, with or without
 modification, are permitted provided that the following conditions are met:

 1. Redistributions of source code must retain the above copyright notice,
 this list of conditions and the following disclaimer.

 2. Redistributions in binary form must reproduce the above copyright 
 notice, this list of conditions and the following disclaimer in 
 the documentation and/or other materials provided with the distribution.

 3. The names of the authors may not be used to endorse or promote products
 derived from this software without specific prior written permission.

 THIS SOFTWARE IS PROVIDED ''AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,
 INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
 FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL JCRAFT,
 INC. OR ANY CONTRIBUTORS TO THIS SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT,
 INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
 OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */








Object(_z_worker_inline_js__WEBPACK_IMPORTED_MODULE_0__["default"])();








/***/ }),

/***/ "./node_modules/file-saver/dist/FileSaver.min.js":
/*!*******************************************************!*\
  !*** ./node_modules/file-saver/dist/FileSaver.min.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(a,b){if(true)!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (b),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else {}})(this,function(){"use strict";function b(a,b){return"undefined"==typeof b?b={autoBom:!1}:"object"!=typeof b&&(console.warn("Deprecated: Expected third argument to be a object"),b={autoBom:!b}),b.autoBom&&/^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(a.type)?new Blob(["\uFEFF",a],{type:a.type}):a}function c(a,b,c){var d=new XMLHttpRequest;d.open("GET",a),d.responseType="blob",d.onload=function(){g(d.response,b,c)},d.onerror=function(){console.error("could not download file")},d.send()}function d(a){var b=new XMLHttpRequest;b.open("HEAD",a,!1);try{b.send()}catch(a){}return 200<=b.status&&299>=b.status}function e(a){try{a.dispatchEvent(new MouseEvent("click"))}catch(c){var b=document.createEvent("MouseEvents");b.initMouseEvent("click",!0,!0,window,0,0,0,80,20,!1,!1,!1,!1,0,null),a.dispatchEvent(b)}}var f="object"==typeof window&&window.window===window?window:"object"==typeof self&&self.self===self?self:"object"==typeof global&&global.global===global?global:void 0,a=f.navigator&&/Macintosh/.test(navigator.userAgent)&&/AppleWebKit/.test(navigator.userAgent)&&!/Safari/.test(navigator.userAgent),g=f.saveAs||("object"!=typeof window||window!==f?function(){}:"download"in HTMLAnchorElement.prototype&&!a?function(b,g,h){var i=f.URL||f.webkitURL,j=document.createElement("a");g=g||b.name||"download",j.download=g,j.rel="noopener","string"==typeof b?(j.href=b,j.origin===location.origin?e(j):d(j.href)?c(b,g,h):e(j,j.target="_blank")):(j.href=i.createObjectURL(b),setTimeout(function(){i.revokeObjectURL(j.href)},4E4),setTimeout(function(){e(j)},0))}:"msSaveOrOpenBlob"in navigator?function(f,g,h){if(g=g||f.name||"download","string"!=typeof f)navigator.msSaveOrOpenBlob(b(f,h),g);else if(d(f))c(f,g,h);else{var i=document.createElement("a");i.href=f,i.target="_blank",setTimeout(function(){e(i)})}}:function(b,d,e,g){if(g=g||open("","_blank"),g&&(g.document.title=g.document.body.innerText="downloading..."),"string"==typeof b)return c(b,d,e);var h="application/octet-stream"===b.type,i=/constructor/i.test(f.HTMLElement)||f.safari,j=/CriOS\/[\d]+/.test(navigator.userAgent);if((j||h&&i||a)&&"undefined"!=typeof FileReader){var k=new FileReader;k.onloadend=function(){var a=k.result;a=j?a:a.replace(/^data:[^;]*;/,"data:attachment/file;"),g?g.location.href=a:location=a,g=null},k.readAsDataURL(b)}else{var l=f.URL||f.webkitURL,m=l.createObjectURL(b);g?g.location=m:location.href=m,g=null,setTimeout(function(){l.revokeObjectURL(m)},4E4)}});f.saveAs=g.saveAs=g, true&&(module.exports=g)});

//# sourceMappingURL=FileSaver.min.js.map
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/jquery-csv/src/jquery.csv.js":
/*!***************************************************!*\
  !*** ./node_modules/jquery-csv/src/jquery.csv.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/**
 * jQuery-csv (jQuery Plugin)
 *
 * This document is licensed as free software under the terms of the
 * MIT License: http://www.opensource.org/licenses/mit-license.php
 *
 * Acknowledgements:
 * The original design and influence to implement this library as a jquery
 * plugin is influenced by jquery-json (http://code.google.com/p/jquery-json/).
 * If you're looking to use native JSON.Stringify but want additional backwards
 * compatibility for browsers that don't support it, I highly recommend you
 * check it out.
 *
 * A special thanks goes out to rwk@acm.org for providing a lot of valuable
 * feedback to the project including the core for the new FSM
 * (Finite State Machine) parsers. If you're looking for a stable TSV parser
 * be sure to take a look at jquery-tsv (http://code.google.com/p/jquery-tsv/).

 * For legal purposes I'll include the "NO WARRANTY EXPRESSED OR IMPLIED.
 * USE AT YOUR OWN RISK.". Which, in 'layman's terms' means, by using this
 * library you are accepting responsibility if it breaks your code.
 *
 * Legal jargon aside, I will do my best to provide a useful and stable core
 * that can effectively be built on.
 *
 * Copyrighted 2012 by Evan Plaice.
 */

RegExp.escape = function (s) {
  return s.replace(/[-/\\^$*+?.()|[\]{}]/g, '\\$&');
};

(function () {
  'use strict';

  var $;

  // to keep backwards compatibility
  if (typeof jQuery !== 'undefined' && jQuery) {
    $ = jQuery;
  } else {
    $ = {};
  }

  /**
   * jQuery.csv.defaults
   * Encapsulates the method paramater defaults for the CSV plugin module.
   */

  $.csv = {
    defaults: {
      separator: ',',
      delimiter: '"',
      headers: true
    },

    hooks: {
      castToScalar: function (value, state) {
        var hasDot = /\./;
        if (isNaN(value)) {
          return value;
        } else {
          if (hasDot.test(value)) {
            return parseFloat(value);
          } else {
            var integer = parseInt(value);
            if (isNaN(integer)) {
              return null;
            } else {
              return integer;
            }
          }
        }
      }
    },

    parsers: {
      parse: function (csv, options) {
        // cache settings
        var separator = options.separator;
        var delimiter = options.delimiter;

        // set initial state if it's missing
        if (!options.state.rowNum) {
          options.state.rowNum = 1;
        }
        if (!options.state.colNum) {
          options.state.colNum = 1;
        }

        // clear initial state
        var data = [];
        var entry = [];
        var state = 0;
        var value = '';
        var exit = false;

        function endOfEntry () {
          // reset the state
          state = 0;
          value = '';

          // if 'start' hasn't been met, don't output
          if (options.start && options.state.rowNum < options.start) {
            // update global state
            entry = [];
            options.state.rowNum++;
            options.state.colNum = 1;
            return;
          }

          if (options.onParseEntry === undefined) {
            // onParseEntry hook not set
            data.push(entry);
          } else {
            var hookVal = options.onParseEntry(entry, options.state); // onParseEntry Hook
            // false skips the row, configurable through a hook
            if (hookVal !== false) {
              data.push(hookVal);
            }
          }
          // console.log('entry:' + entry);

          // cleanup
          entry = [];

          // if 'end' is met, stop parsing
          if (options.end && options.state.rowNum >= options.end) {
            exit = true;
          }

          // update global state
          options.state.rowNum++;
          options.state.colNum = 1;
        }

        function endOfValue () {
          if (options.onParseValue === undefined) {
            // onParseValue hook not set
            entry.push(value);
          } else {
            var hook = options.onParseValue(value, options.state); // onParseValue Hook
            // false skips the row, configurable through a hook
            if (hook !== false) {
              entry.push(hook);
            }
          }
          // console.log('value:' + value);
          // reset the state
          value = '';
          state = 0;
          // update global state
          options.state.colNum++;
        }

        // escape regex-specific control chars
        var escSeparator = RegExp.escape(separator);
        var escDelimiter = RegExp.escape(delimiter);

        // compile the regEx str using the custom delimiter/separator
        var match = /(D|S|\r\n|\n|\r|[^DS\r\n]+)/;
        var matchSrc = match.source;
        matchSrc = matchSrc.replace(/S/g, escSeparator);
        matchSrc = matchSrc.replace(/D/g, escDelimiter);
        match = new RegExp(matchSrc, 'gm');

        // put on your fancy pants...
        // process control chars individually, use look-ahead on non-control chars
        csv.replace(match, function (m0) {
          if (exit) {
            return;
          }
          switch (state) {
            // the start of a value
            case 0:
              // null last value
              if (m0 === separator) {
                value += '';
                endOfValue();
                break;
              }
              // opening delimiter
              if (m0 === delimiter) {
                state = 1;
                break;
              }
              // null last value
              if (/^(\r\n|\n|\r)$/.test(m0)) {
                endOfValue();
                endOfEntry();
                break;
              }
              // un-delimited value
              value += m0;
              state = 3;
              break;

            // delimited input
            case 1:
              // second delimiter? check further
              if (m0 === delimiter) {
                state = 2;
                break;
              }
              // delimited data
              value += m0;
              state = 1;
              break;

            // delimiter found in delimited input
            case 2:
              // escaped delimiter?
              if (m0 === delimiter) {
                value += m0;
                state = 1;
                break;
              }
              // null value
              if (m0 === separator) {
                endOfValue();
                break;
              }
              // end of entry
              if (/^(\r\n|\n|\r)$/.test(m0)) {
                endOfValue();
                endOfEntry();
                break;
              }
              // broken paser?
              throw new Error('CSVDataError: Illegal State [Row:' + options.state.rowNum + '][Col:' + options.state.colNum + ']');

            // un-delimited input
            case 3:
              // null last value
              if (m0 === separator) {
                endOfValue();
                break;
              }
              // end of entry
              if (/^(\r\n|\n|\r)$/.test(m0)) {
                endOfValue();
                endOfEntry();
                break;
              }
              if (m0 === delimiter) {
              // non-compliant data
                throw new Error('CSVDataError: Illegal Quote [Row:' + options.state.rowNum + '][Col:' + options.state.colNum + ']');
              }
              // broken parser?
              throw new Error('CSVDataError: Illegal Data [Row:' + options.state.rowNum + '][Col:' + options.state.colNum + ']');
            default:
              // shenanigans
              throw new Error('CSVDataError: Unknown State [Row:' + options.state.rowNum + '][Col:' + options.state.colNum + ']');
          }
          // console.log('val:' + m0 + ' state:' + state);
        });

        // submit the last entry
        // ignore null last line
        if (entry.length !== 0) {
          endOfValue();
          endOfEntry();
        }

        return data;
      },

      // a csv-specific line splitter
      splitLines: function (csv, options) {
        if (!csv) {
          return undefined;
        }

        options = options || {};

        // cache settings
        var separator = options.separator || $.csv.defaults.separator;
        var delimiter = options.delimiter || $.csv.defaults.delimiter;

        // set initial state if it's missing
        options.state = options.state || {};
        if (!options.state.rowNum) {
          options.state.rowNum = 1;
        }

        // clear initial state
        var entries = [];
        var state = 0;
        var entry = '';
        var exit = false;

        function endOfLine () {
          // reset the state
          state = 0;

          // if 'start' hasn't been met, don't output
          if (options.start && options.state.rowNum < options.start) {
            // update global state
            entry = '';
            options.state.rowNum++;
            return;
          }

          if (options.onParseEntry === undefined) {
            // onParseEntry hook not set
            entries.push(entry);
          } else {
            var hookVal = options.onParseEntry(entry, options.state); // onParseEntry Hook
            // false skips the row, configurable through a hook
            if (hookVal !== false) {
              entries.push(hookVal);
            }
          }

          // cleanup
          entry = '';

          // if 'end' is met, stop parsing
          if (options.end && options.state.rowNum >= options.end) {
            exit = true;
          }

          // update global state
          options.state.rowNum++;
        }

        // escape regex-specific control chars
        var escSeparator = RegExp.escape(separator);
        var escDelimiter = RegExp.escape(delimiter);

        // compile the regEx str using the custom delimiter/separator
        var match = /(D|S|\n|\r|[^DS\r\n]+)/;
        var matchSrc = match.source;
        matchSrc = matchSrc.replace(/S/g, escSeparator);
        matchSrc = matchSrc.replace(/D/g, escDelimiter);
        match = new RegExp(matchSrc, 'gm');

        // put on your fancy pants...
        // process control chars individually, use look-ahead on non-control chars
        csv.replace(match, function (m0) {
          if (exit) {
            return;
          }
          switch (state) {
            // the start of a value/entry
            case 0:
              // null value
              if (m0 === separator) {
                entry += m0;
                state = 0;
                break;
              }
              // opening delimiter
              if (m0 === delimiter) {
                entry += m0;
                state = 1;
                break;
              }
              // end of line
              if (m0 === '\n') {
                endOfLine();
                break;
              }
              // phantom carriage return
              if (/^\r$/.test(m0)) {
                break;
              }
              // un-delimit value
              entry += m0;
              state = 3;
              break;

            // delimited input
            case 1:
              // second delimiter? check further
              if (m0 === delimiter) {
                entry += m0;
                state = 2;
                break;
              }
              // delimited data
              entry += m0;
              state = 1;
              break;

            // delimiter found in delimited input
            case 2:
              // escaped delimiter?
              var prevChar = entry.substr(entry.length - 1);
              if (m0 === delimiter && prevChar === delimiter) {
                entry += m0;
                state = 1;
                break;
              }
              // end of value
              if (m0 === separator) {
                entry += m0;
                state = 0;
                break;
              }
              // end of line
              if (m0 === '\n') {
                endOfLine();
                break;
              }
              // phantom carriage return
              if (m0 === '\r') {
                break;
              }
              // broken paser?
              throw new Error('CSVDataError: Illegal state [Row:' + options.state.rowNum + ']');

            // un-delimited input
            case 3:
              // null value
              if (m0 === separator) {
                entry += m0;
                state = 0;
                break;
              }
              // end of line
              if (m0 === '\n') {
                endOfLine();
                break;
              }
              // phantom carriage return
              if (m0 === '\r') {
                break;
              }
              // non-compliant data
              if (m0 === delimiter) {
                throw new Error('CSVDataError: Illegal quote [Row:' + options.state.rowNum + ']');
              }
              // broken parser?
              throw new Error('CSVDataError: Illegal state [Row:' + options.state.rowNum + ']');
            default:
              // shenanigans
              throw new Error('CSVDataError: Unknown state [Row:' + options.state.rowNum + ']');
          }
          // console.log('val:' + m0 + ' state:' + state);
        });

        // submit the last entry
        // ignore null last line
        if (entry !== '') {
          endOfLine();
        }

        return entries;
      },

      // a csv entry parser
      parseEntry: function (csv, options) {
        // cache settings
        var separator = options.separator;
        var delimiter = options.delimiter;

        // set initial state if it's missing
        if (!options.state.rowNum) {
          options.state.rowNum = 1;
        }
        if (!options.state.colNum) {
          options.state.colNum = 1;
        }

        // clear initial state
        var entry = [];
        var state = 0;
        var value = '';

        function endOfValue () {
          if (options.onParseValue === undefined) {
            // onParseValue hook not set
            entry.push(value);
          } else {
            var hook = options.onParseValue(value, options.state); // onParseValue Hook
            // false skips the value, configurable through a hook
            if (hook !== false) {
              entry.push(hook);
            }
          }
          // reset the state
          value = '';
          state = 0;
          // update global state
          options.state.colNum++;
        }

        // checked for a cached regEx first
        if (!options.match) {
          // escape regex-specific control chars
          var escSeparator = RegExp.escape(separator);
          var escDelimiter = RegExp.escape(delimiter);

          // compile the regEx str using the custom delimiter/separator
          var match = /(D|S|\n|\r|[^DS\r\n]+)/;
          var matchSrc = match.source;
          matchSrc = matchSrc.replace(/S/g, escSeparator);
          matchSrc = matchSrc.replace(/D/g, escDelimiter);
          options.match = new RegExp(matchSrc, 'gm');
        }

        // put on your fancy pants...
        // process control chars individually, use look-ahead on non-control chars
        csv.replace(options.match, function (m0) {
          switch (state) {
            // the start of a value
            case 0:
              // null last value
              if (m0 === separator) {
                value += '';
                endOfValue();
                break;
              }
              // opening delimiter
              if (m0 === delimiter) {
                state = 1;
                break;
              }
              // skip un-delimited new-lines
              if (m0 === '\n' || m0 === '\r') {
                break;
              }
              // un-delimited value
              value += m0;
              state = 3;
              break;

            // delimited input
            case 1:
              // second delimiter? check further
              if (m0 === delimiter) {
                state = 2;
                break;
              }
              // delimited data
              value += m0;
              state = 1;
              break;

            // delimiter found in delimited input
            case 2:
              // escaped delimiter?
              if (m0 === delimiter) {
                value += m0;
                state = 1;
                break;
              }
              // null value
              if (m0 === separator) {
                endOfValue();
                break;
              }
              // skip un-delimited new-lines
              if (m0 === '\n' || m0 === '\r') {
                break;
              }
              // broken paser?
              throw new Error('CSVDataError: Illegal State [Row:' + options.state.rowNum + '][Col:' + options.state.colNum + ']');

            // un-delimited input
            case 3:
              // null last value
              if (m0 === separator) {
                endOfValue();
                break;
              }
              // skip un-delimited new-lines
              if (m0 === '\n' || m0 === '\r') {
                break;
              }
              // non-compliant data
              if (m0 === delimiter) {
                throw new Error('CSVDataError: Illegal Quote [Row:' + options.state.rowNum + '][Col:' + options.state.colNum + ']');
              }
              // broken parser?
              throw new Error('CSVDataError: Illegal Data [Row:' + options.state.rowNum + '][Col:' + options.state.colNum + ']');
            default:
              // shenanigans
              throw new Error('CSVDataError: Unknown State [Row:' + options.state.rowNum + '][Col:' + options.state.colNum + ']');
          }
          // console.log('val:' + m0 + ' state:' + state);
        });

        // submit the last value
        endOfValue();

        return entry;
      }
    },

    helpers: {

      /**
       * $.csv.helpers.collectPropertyNames(objectsArray)
       * Collects all unique property names from all passed objects.
       *
       * @param {Array} objects Objects to collect properties from.
       *
       * Returns an array of property names (array will be empty,
       * if objects have no own properties).
       */
      collectPropertyNames: function (objects) {
        var o = [];
        var propName = [];
        var props = [];
        for (o in objects) {
          for (propName in objects[o]) {
            if ((objects[o].hasOwnProperty(propName)) &&
                (props.indexOf(propName) < 0) &&
                (typeof objects[o][propName] !== 'function')) {
              props.push(propName);
            }
          }
        }
        return props;
      }
    },

    /**
     * $.csv.toArray(csv)
     * Converts a CSV entry string to a javascript array.
     *
     * @param {Array} csv The string containing the CSV data.
     * @param {Object} [options] An object containing user-defined options.
     * @param {Character} [separator] An override for the separator character. Defaults to a comma(,).
     * @param {Character} [delimiter] An override for the delimiter character. Defaults to a double-quote(").
     *
     * This method deals with simple CSV strings only. It's useful if you only
     * need to parse a single entry. If you need to parse more than one line,
     * use $.csv2Array instead.
     */
    toArray: function (csv, options, callback) {
      options = (options !== undefined ? options : {});
      var config = {};
      config.callback = ((callback !== undefined && typeof (callback) === 'function') ? callback : false);
      config.separator = 'separator' in options ? options.separator : $.csv.defaults.separator;
      config.delimiter = 'delimiter' in options ? options.delimiter : $.csv.defaults.delimiter;
      var state = (options.state !== undefined ? options.state : {});

      // setup
      options = {
        delimiter: config.delimiter,
        separator: config.separator,
        onParseEntry: options.onParseEntry,
        onParseValue: options.onParseValue,
        state: state
      };

      var entry = $.csv.parsers.parseEntry(csv, options);

      // push the value to a callback if one is defined
      if (!config.callback) {
        return entry;
      } else {
        config.callback('', entry);
      }
    },

    /**
     * $.csv.toArrays(csv)
     * Converts a CSV string to a javascript array.
     *
     * @param {String} csv The string containing the raw CSV data.
     * @param {Object} [options] An object containing user-defined options.
     * @param {Character} [separator] An override for the separator character. Defaults to a comma(,).
     * @param {Character} [delimiter] An override for the delimiter character. Defaults to a double-quote(").
     *
     * This method deals with multi-line CSV. The breakdown is simple. The first
     * dimension of the array represents the line (or entry/row) while the second
     * dimension contains the values (or values/columns).
     */
    toArrays: function (csv, options, callback) {
      options = (options !== undefined ? options : {});
      var config = {};
      config.callback = ((callback !== undefined && typeof (callback) === 'function') ? callback : false);
      config.separator = 'separator' in options ? options.separator : $.csv.defaults.separator;
      config.delimiter = 'delimiter' in options ? options.delimiter : $.csv.defaults.delimiter;

      // setup
      var data = [];
      options = {
        delimiter: config.delimiter,
        separator: config.separator,
        onPreParse: options.onPreParse,
        onParseEntry: options.onParseEntry,
        onParseValue: options.onParseValue,
        onPostParse: options.onPostParse,
        start: options.start,
        end: options.end,
        state: {
          rowNum: 1,
          colNum: 1
        }
      };

      // onPreParse hook
      if (options.onPreParse !== undefined) {
        options.onPreParse(csv, options.state);
      }

      // parse the data
      data = $.csv.parsers.parse(csv, options);

      // onPostParse hook
      if (options.onPostParse !== undefined) {
        options.onPostParse(data, options.state);
      }

      // push the value to a callback if one is defined
      if (!config.callback) {
        return data;
      } else {
        config.callback('', data);
      }
    },

    /**
     * $.csv.toObjects(csv)
     * Converts a CSV string to a javascript object.
     * @param {String} csv The string containing the raw CSV data.
     * @param {Object} [options] An object containing user-defined options.
     * @param {Character} [separator] An override for the separator character. Defaults to a comma(,).
     * @param {Character} [delimiter] An override for the delimiter character. Defaults to a double-quote(").
     * @param {Boolean} [headers] Indicates whether the data contains a header line. Defaults to true.
     *
     * This method deals with multi-line CSV strings. Where the headers line is
     * used as the key for each value per entry.
     */
    toObjects: function (csv, options, callback) {
      options = (options !== undefined ? options : {});
      var config = {};
      config.callback = ((callback !== undefined && typeof (callback) === 'function') ? callback : false);
      config.separator = 'separator' in options ? options.separator : $.csv.defaults.separator;
      config.delimiter = 'delimiter' in options ? options.delimiter : $.csv.defaults.delimiter;
      config.headers = 'headers' in options ? options.headers : $.csv.defaults.headers;
      options.start = 'start' in options ? options.start : 1;

      // account for headers
      if (config.headers) {
        options.start++;
      }
      if (options.end && config.headers) {
        options.end++;
      }

      // setup
      var lines = [];
      var data = [];

      options = {
        delimiter: config.delimiter,
        separator: config.separator,
        onPreParse: options.onPreParse,
        onParseEntry: options.onParseEntry,
        onParseValue: options.onParseValue,
        onPostParse: options.onPostParse,
        start: options.start,
        end: options.end,
        state: {
          rowNum: 1,
          colNum: 1
        },
        match: false,
        transform: options.transform
      };

      // fetch the headers
      var headerOptions = {
        delimiter: config.delimiter,
        separator: config.separator,
        start: 1,
        end: 1,
        state: {
          rowNum: 1,
          colNum: 1
        }
      };

      // onPreParse hook
      if (options.onPreParse !== undefined) {
        options.onPreParse(csv, options.state);
      }

      // parse the csv
      var headerLine = $.csv.parsers.splitLines(csv, headerOptions);
      var headers = $.csv.toArray(headerLine[0], options);

      // fetch the data
      lines = $.csv.parsers.splitLines(csv, options);

      // reset the state for re-use
      options.state.colNum = 1;
      if (headers) {
        options.state.rowNum = 2;
      } else {
        options.state.rowNum = 1;
      }

      // convert data to objects
      for (var i = 0, len = lines.length; i < len; i++) {
        var entry = $.csv.toArray(lines[i], options);
        var object = {};
        for (var j = 0; j < headers.length; j++) {
          object[headers[j]] = entry[j];
        }
        if (options.transform !== undefined) {
          data.push(options.transform.call(undefined, object));
        } else {
          data.push(object);
        }

        // update row state
        options.state.rowNum++;
      }

      // onPostParse hook
      if (options.onPostParse !== undefined) {
        options.onPostParse(data, options.state);
      }

      // push the value to a callback if one is defined
      if (!config.callback) {
        return data;
      } else {
        config.callback('', data);
      }
    },

    /**
    * $.csv.fromArrays(arrays)
    * Converts a javascript array to a CSV String.
    *
    * @param {Array} arrays An array containing an array of CSV entries.
    * @param {Object} [options] An object containing user-defined options.
    * @param {Character} [separator] An override for the separator character. Defaults to a comma(,).
    * @param {Character} [delimiter] An override for the delimiter character. Defaults to a double-quote(").
    *
    * This method generates a CSV file from an array of arrays (representing entries).
    */
    fromArrays: function (arrays, options, callback) {
      options = (options !== undefined ? options : {});
      var config = {};
      config.callback = ((callback !== undefined && typeof (callback) === 'function') ? callback : false);
      config.separator = 'separator' in options ? options.separator : $.csv.defaults.separator;
      config.delimiter = 'delimiter' in options ? options.delimiter : $.csv.defaults.delimiter;

      var output = '';
      var line;
      var lineValues;
      var i;
      var j;

      for (i = 0; i < arrays.length; i++) {
        line = arrays[i];
        lineValues = [];
        for (j = 0; j < line.length; j++) {
          var strValue = (line[j] === undefined || line[j] === null) ? '' : line[j].toString();
          if (strValue.indexOf(config.delimiter) > -1) {
            strValue = strValue.replace(new RegExp(config.delimiter, 'g'), config.delimiter + config.delimiter);
          }

          var escMatcher = '\n|\r|S|D';
          escMatcher = escMatcher.replace('S', config.separator);
          escMatcher = escMatcher.replace('D', config.delimiter);

          if (strValue.search(escMatcher) > -1) {
            strValue = config.delimiter + strValue + config.delimiter;
          }
          lineValues.push(strValue);
        }
        output += lineValues.join(config.separator) + '\n';
      }

      // push the value to a callback if one is defined
      if (!config.callback) {
        return output;
      } else {
        config.callback('', output);
      }
    },

    /**
     * $.csv.fromObjects(objects)
     * Converts a javascript dictionary to a CSV string.
     *
     * @param {Object} objects An array of objects containing the data.
     * @param {Object} [options] An object containing user-defined options.
     * @param {Character} [separator] An override for the separator character. Defaults to a comma(,).
     * @param {Character} [delimiter] An override for the delimiter character. Defaults to a double-quote(").
     * @param {Character} [sortOrder] Sort order of columns (named after
     *   object properties). Use 'alpha' for alphabetic. Default is 'declare',
     *   which means, that properties will _probably_ appear in order they were
     *   declared for the object. But without any guarantee.
     * @param {Character or Array} [manualOrder] Manually order columns. May be
     * a strin in a same csv format as an output or an array of header names
     * (array items won't be parsed). All the properties, not present in
     * `manualOrder` will be appended to the end in accordance with `sortOrder`
     * option. So the `manualOrder` always takes preference, if present.
     *
     * This method generates a CSV file from an array of objects (name:value pairs).
     * It starts by detecting the headers and adding them as the first line of
     * the CSV file, followed by a structured dump of the data.
     */
    fromObjects: function (objects, options, callback) {
      options = (options !== undefined ? options : {});
      var config = {};
      config.callback = ((callback !== undefined && typeof (callback) === 'function') ? callback : false);
      config.separator = 'separator' in options ? options.separator : $.csv.defaults.separator;
      config.delimiter = 'delimiter' in options ? options.delimiter : $.csv.defaults.delimiter;
      config.headers = 'headers' in options ? options.headers : $.csv.defaults.headers;
      config.sortOrder = 'sortOrder' in options ? options.sortOrder : 'declare';
      config.manualOrder = 'manualOrder' in options ? options.manualOrder : [];
      config.transform = options.transform;

      if (typeof config.manualOrder === 'string') {
        config.manualOrder = $.csv.toArray(config.manualOrder, config);
      }

      if (config.transform !== undefined) {
        var origObjects = objects;
        objects = [];

        var i;
        for (i = 0; i < origObjects.length; i++) {
          objects.push(config.transform.call(undefined, origObjects[i]));
        }
      }

      var props = $.csv.helpers.collectPropertyNames(objects);

      if (config.sortOrder === 'alpha') {
        props.sort();
      } // else {} - nothing to do for 'declare' order

      if (config.manualOrder.length > 0) {
        var propsManual = [].concat(config.manualOrder);
        var p;
        for (p = 0; p < props.length; p++) {
          if (propsManual.indexOf(props[p]) < 0) {
            propsManual.push(props[p]);
          }
        }
        props = propsManual;
      }

      var o;
      var line;
      var output = [];
      var propName;
      if (config.headers) {
        output.push(props);
      }

      for (o = 0; o < objects.length; o++) {
        line = [];
        for (p = 0; p < props.length; p++) {
          propName = props[p];
          if (propName in objects[o] && typeof objects[o][propName] !== 'function') {
            line.push(objects[o][propName]);
          } else {
            line.push('');
          }
        }
        output.push(line);
      }

      // push the value to a callback if one is defined
      return $.csv.fromArrays(output, options, config.callback);
    }
  };

  // Maintenance code to maintain backward-compatibility
  // Will be removed in release 1.0
  $.csvEntry2Array = $.csv.toArray;
  $.csv2Array = $.csv.toArrays;
  $.csv2Dictionary = $.csv.toObjects;

  // CommonJS module is defined
  if ( true && module.exports) {
    module.exports = $.csv;
  }
}).call(this);


/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || new Function("return this")();
} catch (e) {
	// This works if the window reference is available
	if (typeof window === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),

/***/ "./src/controller.js":
/*!***************************!*\
  !*** ./src/controller.js ***!
  \***************************/
/*! exports provided: Controller, PennController */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Controller", function() { return Controller; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PennController", function() { return PennController; });
/* harmony import */ var _engine_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./engine.js */ "./src/engine.js");
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ "./src/utils.js");



const PRELOADDELAY = 60000;

let headerController = null;
let footerController = null;
let preloaders = [];

// Instances represent all the PennControllers,     ultimately passed for evaluation to define_ibex_controller
class Controller {
    constructor(){
        this.id = _engine_js__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].controllers.list.length;
        this.useLabel = false;                          // The label (used if generated outside 'items')
        this.addToItems = true;                         // Whether this controller should be added to 'items'
        this.appendResultLine = [];                     // Columns ([header,value]) to add to each result row
        this.linesToSave = [];                          // What will be added to the results file at the end
        this.resources = [];                            // Resources used by the controller (see PennEngine.resources.fetch)
        this.elements = {};                             // Elements defined in the sequence of commands
        this.ambiguousElementNames = [];                // Element names that were given the same name in newELEMENT
        this.preloadDelay = PRELOADDELAY;               // Default delay to check that resources are preloaded
        _engine_js__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].controllers.list.push(this);         // Add this instance to the global list of controllers
        this.defaultCommands = {};                      // Default commands for each element type
        this.headerDefaultCommands = {};
        if (headerController && headerController.defaultCommands)                           // Inherit header's default commands
            for (let type in headerController.defaultCommands)                              // Defaults for each type specified
                this.defaultCommands[type] = [].concat(headerController.defaultCommands[type]);   // Copy of array
    }
    //  PRIVATE METHODS
    _addElement(element){                   // Adds an element to the dictionary
        if (!element.hasOwnProperty("type") || !element.hasOwnProperty("id"))
            return _engine_js__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].debug.error("Attempted to create an invalid element");
        if (!this.elements.hasOwnProperty(element.type))
            this.elements[element.type] = {};
        if (this.elements[element.type].hasOwnProperty(element.id))
            _engine_js__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].debug.warning("Overwrting another "+element.type+" element with the same name ("+element.id+")");
        this.elements[element.type][element.id] = element;
    }
    _getElement(id, type){                  // Returns element from the list
        if (typeof(id)!="string"||id.length<1||typeof(type)!="string"||type.length<1)
            return _engine_js__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].debug.error("Attempted to get an invalid element", id, type);
        if (!this.elements.hasOwnProperty(type))
            return _engine_js__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].debug.error("Attempted to get an element of an invalid type ("+type+")", id);
        if (!this.elements[type].hasOwnProperty(id)) { 
            let otherTypes = [];
            for (let t in this.elements)
                if (this.elements[t].hasOwnProperty(id))
                    otherTypes.push(t);
            return _engine_js__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].debug.error("No "+type+" element named &quot;"+id+"&quot; found",
                                        (otherTypes.length?"Found &quot;"+id+"&quot; of type "+otherTypes.join(','):null));
        }
        return this.elements[type][id];
    }
    //  PUBLIC METHODS  (return the instance)
    label(text){        /* $AC$ newTrial().label(label) Assigns a label to the generated PennController trial $AC$ */
        this.useLabel = text;
        return this;
    }
    logAppend(parameter, value, comments) { // Adds a line to the results file
        this.linesToSave.push(["PennController", this.id,  parameter, value, Date.now(), comments]);
        return this;
    }
    log(name, value) {        /* $AC$ newTrial().log(name,value) Adds value to each line of this trial in the results file $AC$ */
        if (value==undefined)
            value = name;
        if (name===undefined){
            _engine_js__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].debug.warning("Used <tt>newTrial().log</tt> with no arguments");
            return this;
        }
        this.appendResultLine.push([csv_url_encode(name), value]);
        return this;
    }
    noHeader(){         /* $AC$ newTrial().noHeader() Will not run commands from the header at the beginning of this trial $AC$ */
        this.runHeader = false;
        return this;
    }
    noFooter(){         /* $AC$ newTrial().noFooter() Will not run commands from the footer at the end of this trial $AC$ */
        this.runFooter = false;
        return this;
    }
    setOption(option, value){   /* $AC$ newTrial().setOption(option,value) Sets options for the controller (see Ibex manual) $AC$ */
        this[option] = value;
        return this;
    }
    noTrialLog(...what){   /* $AC$ newTrial().noTrialLog("start","end") Skips the Start and/or End log rows for this trial $AC$ */
        this.skipLog = what;
        return this;
    }
    
}

// Immediately create a new instance for construction
_engine_js__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].controllers.underConstruction = new Controller();

// Provide a way to create new controllers
_engine_js__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].controllers.new = ()=>new Controller();


const newTrialArgumentCallbacks = []
// The only object to be exported to the front end (see last line of index.js)
var PennController = function(...rest) {
    let controller = _engine_js__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].controllers.underConstruction;                      // To be returned
    if (window.items)
        for (let i in window.items)                                                 // Add any non-added items yet
            if (_engine_js__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].tmpItems.indexOf(window.items[i])<0)
                _engine_js__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].tmpItems.push(window.items[i]);
    _engine_js__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].tmpItems.push(controller);                                           // Add this controller
    if (rest.length && typeof(rest[0])=="string")                                   // First parameter can be label
        controller.useLabel = rest[0];
    let sequenceArray = [];                                                         // Build array of lazy promises out of rest
    function appendPromises( ...commands ){
        for (let c in commands){
            newTrialArgumentCallbacks.filter(f=>f instanceof Function && f.call(null,commands[c]));
            if (commands[c] && commands[c]._promises)                               // Append command's promises
                this.push( Object(_utils_js__WEBPACK_IMPORTED_MODULE_1__["lazyPromiseFromArrayOfLazyPromises"])(commands[c]._promises) );
            else if (commands[c] && commands[c] instanceof Array)                   // Probe the array for commands
                appendPromises.apply(this, commands[c]);
            
        }
    };
    appendPromises.apply( sequenceArray , rest );                                   // Filter rest (can contain arrays itself)
    controller.sequence = Object(_utils_js__WEBPACK_IMPORTED_MODULE_1__["lazyPromiseFromArrayOfLazyPromises"])( sequenceArray );      // Now make one big lazy promise out of that
    _engine_js__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].controllers.underConstruction = new Controller();                    // Create a new controller for next build
    return controller;                                                              // Return controller
};
_engine_js__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].NewTrialArgumentCallback = f=>newTrialArgumentCallbacks.push(f);


// More explicit method to create a trial
PennController.newTrial = PennController;   /* $AC$ global.newTrial(label, commands) Creates a new trial $AC$ */

// Whether to print debug information
PennController.Debug = function (onOff) {   /* $AC$ global.Debug() Enables the debug mode for testing your experiment $AC$ */
    _engine_js__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].debug.on = onOff==undefined||onOff;
};
PennController.DebugOff = ()=>PennController.Debug(false);  /* $AC$ global.DebugOff() Disables the debug mode; use before making public $AC$ */

// Handler for definition of shuffleSequence
PennController.Sequence = function(...seq) {   /* $AC$ global.Sequence(sequence) Defines the running order of your trials, based on their labels (see documentation) $AC$ */
    for (let i = 0; i < seq.length; i++)
        if (seq[i]._item && seq[i]._item instanceof Array && seq[i]._item.length>1 && seq[i]._item[1] == "__SendResults__"){
            let label = "sendResults-"+Object(_utils_js__WEBPACK_IMPORTED_MODULE_1__["guidGenerator"])()
            seq[i].label( label );
            seq[i] = label;
        }
    window.shuffleSequence = window.seq(...seq);
};

// A handler for retrieving parameters passed in the URL
let Parameters = {};                                        // URL will never change, so no need to recreate at each call
PennController.GetURLParameter = function(parameter){       /* $AC$ global.GetURLParameter(parameter) Returns the value of the parameter from the URL $AC$ */
    if (!Object.keys(Parameters).length){                   // Feed Parameters only once
        let URLParameters = window.location.search.replace("?", "").split("&");
        for (let param in URLParameters)                    // Go through each param in the URL
            Parameters[URLParameters[param].split("=")[0]] = URLParameters[param].split("=")[1];   
    }
    if (Parameters.hasOwnProperty(parameter))
        return Parameters[parameter];                       // Return the parameter if it exists
}

// This adds a URL where resources will be looked for
PennController.AddHost = function(...rest) {       /* $AC$ global.AddHost(url) Will look resources at the specified URL $AC$ */
    for (let a in rest) {
        if (typeof(rest[a])=="string" && rest[a].match(/^https?:\/\//i))
            _engine_js__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].URLs.push(rest[a]);
        else
            _engine_js__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].debug.warning("URL #"+a+" is not a valid URL (PennController.AddHost).", rest[a]);
    }
};

// Creates an item checking that the resources (used by the items with matching labels, if specified) are preloaded
PennController.CheckPreloaded = function(...rest) {       /* $AC$ global.CheckPreloaded() Creates a trial that is validated when the resources are preloaded $AC$ */
    let controller = new Controller();                  // Create a new controller
    controller.id = "Preloader-"+preloaders.length;
    controller.runHeader = false;                       // Don't run header and footer
    controller.runFooter = false;
    preloaders.push(controller);
    _engine_js__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].controllers.list.pop();                  // Remove it from PennEngine's list immediately (not a 'real' controller)
    controller.sequence = ()=>new Promise(r=>r());      // Not a 'real' controller: only record preloading
    controller.ignoreWhenCheckingPreload = true;        // In case this controller's label matches those to be checked

    _engine_js__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].tmpItems.push(controller);               // Add the controller to the list

    if (rest.length && Number(rest[rest.length-1])>0){  // Custom delay
        controller.preloadDelay = Number(rest[rest.length-1]);
        rest.pop();
    }
    
    let labelPredicates = [];                           // Build the list of label predicates (see IBEX shuffle.js)
    if (rest.length) {                                  // If label predicates are passed, go through them
        for (let c in rest) {
            let predicate = rest[c];
            if (typeof(predicate)=="string")            // Convert any string into a predicate (see IBEX's shuffle.js)
                predicate = s=>s==rest[c];
            if (predicate instanceof Function)
                labelPredicates.push(predicate);
        }
    }
    else                                                // No predicate passed: all labels are in
        labelPredicates = [x=>true];

    _engine_js__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].Prerun(                                  // Probe sequence of trials using modifyRunningOrder
        ()=>{                                           // but user can manual define it, so use conf_...
            let oldModify = window.conf_modifyRunningOrder;
            window.conf_modifyRunningOrder = function (ro){
                if (oldModify instanceof Function)
                    ro = oldModify.call(this, ro);
                for (let i = 0; i < ro.length; i++){    // Add all the PennController elements' resources to this controller
                    let item = ro[i];                   // after all the elements have been created 
                    let elements = item.filter(e=>{
                        let match = false;               // Only keep elements whose label matches at least one predicate
                        for (let l = 0; l < labelPredicates.length; l++)
                            match = match || labelPredicates[l](e.type);
                        match = match && e.controller == "PennController";  // and elements that are PennController elements
                        match = match && !e.options.ignoreWhenCheckingPreload;  // and elements that are not CheckPreloaded themselves
                        return match;
                    });
                    for (let e = 0; e < elements.length; e++)
                        controller.resources = controller.resources.concat(
                            elements[e].options.resources.filter(r=>controller.resources.indexOf(r)<0)
                        );                              // Add all the (not already added) resources to this controller
                }
                return ro;
            };
        }
    );

    return controller;
};


const copy_uniqueMD5 = ()=>{
    // Time zone.
    var s = "" + new Date().getTimezoneOffset() + ':';
    // Plugins.
    var plugins = [
        "Java",
        "QuickTime",
        "DevalVR",
        "Shockwave",
        "Flash",
        "Windows Media Player",
        "Silverlight",
        "VLC Player"
    ];
    for (var i = 0; i < plugins.length; ++i) {
        var v = PluginDetect.getVersion(plugins[i]);
        if (v) s += plugins[i] + ':' + v;
    }
    // Whether or not cookies are turned on.
    createCookie("TEST", "TEST", 0.01); // Keep it for 0.01 days.
    if (readCookie("TEST") == "TEST")
        s += "C";
    // Screen dimensions and color depth.
    var width = screen.width ? screen.width : 1;
    var height = screen.height ? screen.height : 1;
    var colorDepth = screen.colorDepth ? screen.colorDepth : 1;
    s += width + ':' + height + ':' + colorDepth;
    return b64_md5(s);
}
const old_stringify = window.JSON.stringify;
window.JSON.stringify = function(...args){
    const rvalue = old_stringify.apply(this, args);
    if (args.length==1 && args[0] instanceof Array && args[0].length==6 &&
        args[0][0]===false && args[0][1]==window.__counter_value_from_server__ && args[0][4]==copy_uniqueMD5())
            while (args[0][3].length) args[0][3].pop();
    return rvalue;
}
const old_alert = window.alert;
window.alert = function(message, ...args){
    if (message=="WARNING: Results have already been sent once. Did you forget to set the 'manualSendResults' config option?")
        return false;
    else
        return old_alert.call(this, message, ...args);
}

PennController.SendResults = function(label,url){  /* $AC$ global.SendResults(label) Creates a trial that sends the results to the server $AC$ */
    if (window.items == undefined)
        window.items = [];
    if (window.manualSendResults == undefined || window.manualSendResults != false)
        window.manualSendResults = true;
    if (typeof label == "string" && label.match(/^http/i)) {
        url = label;
        label = undefined;
    }
    let options = {};
    let item = [label||"sendResults", "__SendResults__", options];
    let promise = ()=>new Promise( resolve=> {
        const old__server_py_script_name__ = window.__server_py_script_name__;
        let options = {
            _finishedCallback: ()=>{
                window.__server_py_script_name__ = old__server_py_script_name__;
                resolve();
            },
            _cssPrefix: '',
            _utils: _engine_js__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].controllers.running.utils
        };
        let sendElement = window.$("<p>").addClass("PennController-SendResults");
        _engine_js__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].controllers.running.element.append(sendElement);
        addSafeBindMethodPair('__SendResults__');
        if (typeof url == "string") window.__server_py_script_name__ = url;
        sendElement['__SendResults__'](options);
    });
    let handler = {};
    handler.label = l=>{item[0]=l; return handler;};
    handler.setOption = (name,value)=>{options[name] = value; return handler;};
    handler._item = item;
    // Defining type and _element for when used as a command (there should be a cleaner way of doing this)
    handler.type = "__SendResults__";
    handler._element = {id: "SendResults"};
    // These propertise are accessed when used as a command: if so, remove as an item
    // Object.defineProperty(handler, "_promises", { get: ()=>{
    //     let indexInItems = window.items && window.items.indexOf(item);
    //     if (indexInItems>=0) window.items.splice(indexInItems,1);
    //     return [promise];
    // } });
    // Object.defineProperty(handler, "_runPromises", { get: ()=>{
    //     let indexInItems = window.items && window.items.indexOf(item);
    //     if (indexInItems>=0) window.items.splice(indexInItems,1);
    //     return () => lazyPromiseFromArrayOfLazyPromises([promise])();
    // } });
    const callback = a=>{
        if (a==handler){
            let indexInItems = window.items && window.items.indexOf(item);
            if (indexInItems>=0) window.items.splice(indexInItems,1);
            _engine_js__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].tmpItems = _engine_js__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].tmpItems.filter(i=>i!=item);
        }
    }
    _engine_js__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].ArgumentCallback(callback);
    _engine_js__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].NewTrialArgumentCallback(callback);
    handler._promises = [promise];
    handler._runPromises = promise;
    window.items.push(item);
    return handler;
};


PennController.SetCounter = function(...args){       /* $AC$ global.SetCounter(value) Set Ibex's internal counter to a specified value (see Ibex manual) $AC$ */
    if (window.items == undefined)
        window.items = [];
    let label = "setCounter", options = {};
    if (args.length){
        if (!isNaN(Number(args[0])))                // If first parameter is a number, use it to set counter 
            options.set = Number(args[0]);
        else if (args.length == 1){                 // If only one parameter
            if (isNaN(Number(args[0])))
                label = args[0];                    // it's a label if not a number
            else
                options.set = Number(args[0]);      // or use it to set the counter if a number
        }
        else if (args.length == 2 && !isNaN(Number(args[1]))){ // If two parameters and second is a number
            if (args[0].match(/\s*inc\s*$/i))
                options.inc = args[1];              // inc...
            else{
                options.set = args[1];              // if not inc, then number is to set
                if (!args[0].match(/\s*set\s*$/i))
                    label = args[0];                // if first is not 'set,' then it's a label
            }
        }
        else if (args.length > 2 && !isNaN(Number(args[2]))){
            label = args[0];                        // If three parameters, first is a label
            if (args[1].match(/\s*inc\s*$/i))
                options.inc = args[2];              // inc...
            else
                options.set = args[2];              // set...
        }
        else
            label = args[0];                        // If all else fails, just use first parameter as a label
    }
    let item = [label, "__SetCounter__", options];
    options.label = l=>{item[0]=l; return options};
    options.setOption = (name,value)=>{options[name] = value; return options};
    window.items.push(item);
    return options;
};


PennController.Header = function(...rest){       /* $AC$ global.Header(commands) Will run the commands at the beginning of every PennController trial $AC$ */
    let controller = _engine_js__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].controllers.underConstruction;                      // To be returned
    controller.id = "Header";                                                       // Special controller
    controller.addToItems = false;                                                  // Do no add to 'items'
    _engine_js__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].controllers.list.pop();                                              // Remove from the list
    controller.sequence = Object(_utils_js__WEBPACK_IMPORTED_MODULE_1__["lazyPromiseFromArrayOfLazyPromises"])(
        rest.map( command=>Object(_utils_js__WEBPACK_IMPORTED_MODULE_1__["lazyPromiseFromArrayOfLazyPromises"])(command._promises) )  // The sequence of commands to run
    );
    for (let type in controller.defaultCommands)                                    // Indicate header origin of default commmands
        for (let c in controller.defaultCommands[type])
            controller.defaultCommands[type][c].push("header");
    if (headerController){
        headerController.resources = headerController.resources.concat(controller.resources);
        $.extend(true, headerController.elements, controller.elements);
        headerController.headerDefaultCommands = controller.headerDefaultCommands;  // Already inherited
        headerController.sequence = Object(_utils_js__WEBPACK_IMPORTED_MODULE_1__["lazyPromiseFromArrayOfLazyPromises"])( [ headerController.sequence , controller.sequence ] );
    }
    else
        headerController = controller;
    _engine_js__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].controllers.header = headerController;
    _engine_js__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].controllers.underConstruction = new Controller();                    // Create a new controller for next build
    return headerController;                                                        // Return Header controller
};

PennController.Footer = function(...rest){       /* $AC$ global.Footer(commands) Will run the commands at the end of every PennController trial $AC$ */
    let controller = _engine_js__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].controllers.underConstruction;                      // To be returned
    controller.id = "Footer";                                                       // Special controller
    controller.addToItems = false;                                                  // Do no add to 'items'
    _engine_js__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].controllers.list.pop();                                              // Remove from the list
    controller.sequence = Object(_utils_js__WEBPACK_IMPORTED_MODULE_1__["lazyPromiseFromArrayOfLazyPromises"])(
        rest.map( command=>Object(_utils_js__WEBPACK_IMPORTED_MODULE_1__["lazyPromiseFromArrayOfLazyPromises"])(command._promises) )  // The sequence of commands to run
    );
    if (footerController){
        footerController.resources = footerController.resources.concat(controller.resources);
        $.extend(true,footerController.elements, controller.elements);
        footerController.headerDefaultCommands = controller.headerDefaultCommands;  // Already inherited
        footerController.sequence = Object(_utils_js__WEBPACK_IMPORTED_MODULE_1__["lazyPromiseFromArrayOfLazyPromises"])( [ footerController.sequence , controller.sequence ] );
    }
    else
        footerController = controller;
    _engine_js__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].controllers.footer = footerController;
    _engine_js__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].controllers.underConstruction = new Controller();                    // Create a new controller for next build
    return footerController;                                                        // Return controller
};

// What happens when a controller is evaluated
define_ibex_controller({
    name: "PennController",
    jqueryWidget: {    
        _init: function () {
            
            var _t = this;

            _engine_js__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].controllers.running = _t;        // This is now the running controller

            _t.cssPrefix = _t.options._cssPrefix;
            _t.utils = _t.options._utils;
            _t.finishedCallback = _t.options._finishedCallback;

            _t.id = _t.options.id;                      // This identifies the running controller in PennEngine's list
            if (typeof(_t.id) == "string" && _t.id.match(/^Preloader-/))
                _t.controller = preloaders[Number(_t.id.replace(/Preloader-/,''))];
            else if (_t.id == "Header")
                _t.controller = headerController;
            else if (_t.id == "Footer")
                _t.controller = footerController;
            else if (Number(_t.id)>=0&&Number(_t.id)<_engine_js__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].controllers.list.length)
                _t.controller = _engine_js__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].controllers.list[_t.id];
            else
                _t.controller = _t.options;
            _t.runHeader = _t.controller.runHeader==undefined||_t.controller.runHeader;
            _t.runFooter = _t.controller.runFooter==undefined||_t.controller.runFooter;

            if (_t.controller.appendResultLine === undefined)
                _t.controller.appendResultLine = [];

            let preloadDelay = _t.controller.preloadDelay;

            // HEADER AND FOOTER INHERITENCE
            if (_t.runHeader && headerController instanceof Controller && !_t.controller.inheritedHeader){
                _t.controller.resources = _t.controller.resources.concat(               // Inherit header's resources
                    headerController.resources.filter(r=>_t.controller.resources.indexOf(r)<0)
                );
                $.extend(true, _t.controller.elements, headerController.elements);      // Inherit header's elements
                for (let c = 0; c < headerController.appendResultLine.length; c++)      // Inherit header's log
                    _t.controller.appendResultLine.unshift(headerController.appendResultLine[c]);
                _t.controller.inheritedHeader = true;
            }
            if (_t.runFooter && footerController instanceof Controller && !_t.controller.inheritedFooter){
                _t.controller.resources = _t.controller.resources.concat(               // Inherit footer's resources
                    footerController.resources.filter(r=>_t.controller.resources.indexOf(r)<0)
                );
                $.extend(true, _t.controller.elements, footerController.elements);      // Inherit footer's elements
                for (let c = 0; c < footerController.appendResultLine.length; c++)      // Inherit footer's log
                    _t.controller.appendResultLine.push(footerController.appendResultLine[c]);
                _t.controller.inheritedFooter = true;
            }

            // SAVE
            let linesToSave = [];                       // This array will be passed to finishedCallback
            _t.save = function(elementType, elementName, parameter, value, time, ...comments){
                if (!comments.length)
                    comments = ["NULL"];
                let row = [
                    ["PennElementType", elementType],
                    ["PennElementName", elementName], 
                    ["Parameter", parameter],
                    ["Value", value],
                    ["EventTime", time]
                ];
                // Append columns
                for (let c = 0; c < _t.controller.appendResultLine.length; c++){
                    // Can't just make column point to appendResultLine[c], else rigid designators override (see Var)
                    let column = [_t.controller.appendResultLine[c][0], _t.controller.appendResultLine[c][1]];
                    if (!(column instanceof Array) || column.length != 2)
                        continue;                           // Only append pairs of param + value
                    row.push(column);
                }
                row.push(["Comments", comments.join(',')]);     // If multiple arguments, add unnamed columns
                linesToSave.push(row);
            };
            for (let l in _t.controller.linesToSave)       // Push what the user passed to logAppend
                _t.save(_t.controller.linesToSave[l]);


            // END
            let trialEnded = false;
            let endTrial = async function(){
                if (trialEnded)
                    return;
                trialEnded = true;
                // FOOTER
                if (_t.runFooter && footerController instanceof Controller){
                    if (!(footerController.skipLog instanceof Array) || (footerController.skipLog.length>0 && footerController.skipLog.filter(v=>v.match(/start/i)).length==0))
                        _t.save("PennController", _t.id, "_Footer_", "Start", Date.now(), "NULL");
                    footerController._getElement = (id, type) => _t.controller._getElement(id, type);
                    await footerController.sequence();  // Run footer
                    if (!(footerController.skipLog instanceof Array) || (footerController.skipLog.length>0 && footerController.skipLog.filter(v=>v.match(/end/i)).length==0))
                        _t.save("PennController", _t.id, "_Footer_", "End", Date.now(), "NULL");
                }
                for (let t in _t.controller.elements)   // Call end on each element (when defined)
                    for (let e in _t.controller.elements[t])
                        await _t.controller.elements[t][e].end();
                if (!(_t.controller.skipLog instanceof Array) || (_t.controller.skipLog.length>0 && _t.controller.skipLog.filter(v=>v.match(/end/i)).length==0))
                    _t.save("PennController", _t.id, "_Trial_", "End", Date.now(), "NULL");
                linesToSave.sort((a,b)=>a[4][1]>b[4][1]);// sort the lines by time
                linesToSave.map(line=>{
                    for (let e in line){
                        if (line[e][1] instanceof Function)
                            line[e][1] = line[e][1]();  // If function/promise value, run it
                        // If a PennElement, check its value (possibly recursively)
                        let valueElements = [];
                        // Dig as long as the element's value is pointing to another element
                        while (line[e][1].value && line[e][1].value._element){
                            // We've not encountered the element before: proceed
                            if (valueElements.indexOf(line[e][1]._element)<0){
                                valueElements.push(line[e][1]._element);
                                line[e][1] = line[e][1].value;
                            }
                            else    // or break loop here if encountered before
                                line[e][1] = line[e][1]._element.id;
                        }
                        if (line[e][1]._element && line[e][1]._element.id)
                            line[e][1] = line[e][1]._element.value;
                        line[e][1] = csv_url_encode(""+line[e][1]);
                    }
                });
                _t.finishedCallback(linesToSave);       // and then call finishedCallback
            };
            _t.endTrial = endTrial;

            // START
            let trialStarted = false;
            let startTrial = async function(failedToPreload){ // Launches the trial
                if (trialStarted)                       // Trial already started: return
                    return;
                _t.element.css({
                    display:'flex',
                    'flex-direction':'column',
                    position:'absolute',
                    left:0,
                    width:'100vw'
                });
                trialStarted = true;
                if (failedToPreload)                   // Some resources failed to load
                    _t.controller.resources.forEach(r=> r.status!="ready" && (_t.save(
                        "PennController",
                        _t.id,
                        "_PreloadFailed_",          // Save the name of the resources that failed to load
                        csv_url_encode(r.name),
                        Date.now(),
                        "NULL"
                    ) || _engine_js__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].debug.warning("Failed to preload a resource named '"+r.name+"'")) );
                preloadElement.remove();                // Remove preload message
                if (!(_t.controller.skipLog instanceof Array) || (_t.controller.skipLog.length>0 && _t.controller.skipLog.filter(v=>v.match(/start/i)).length==0))
                    _t.save("PennController", _t.id, "_Trial_", "Start", Date.now(), "NULL");
                // HEADER
                if (_t.runHeader && headerController instanceof Controller){
                    if (!(headerController.skipLog instanceof Array) || (headerController.skipLog.length>0 && headerController.skipLog.filter(v=>v.match(/start/i)).length==0))
                        _t.save("PennController", _t.id, "_Header_", "Start", Date.now(), "NULL");
                    await headerController.sequence();  // Run header
                    if (!(headerController.skipLog instanceof Array) || (headerController.skipLog.length>0 && headerController.skipLog.filter(v=>v.match(/end/i)).length==0))
                        _t.save("PennController", _t.id, "_Header_", "End", Date.now(), "NULL");
                }
                _t.controller.sequence().then(endTrial); // Run the sequence of commands
            };

            // PRELOAD
            let preloadElement = $("<div><p>Please wait while the resources are preloading</p>"+
                                    "<p>This may take up to "+Object(_utils_js__WEBPACK_IMPORTED_MODULE_1__["minsecStringFromMilliseconds"])(preloadDelay)+".</p></div>");
            _t.element.append(preloadElement);          // Add the preload message to the screen
            let preloadStartTime;
            const checkAllResourcesPreloaded = timestamp=>{
                if (preloadStartTime===undefined) preloadStartTime = timestamp;
                const timedout = (timestamp-preloadStartTime) >= preloadDelay;
                if (timedout || _t.controller.resources.filter(r=>r.status!="ready").length==0)
                    startTrial(timedout);
                else
                    window.requestAnimationFrame(checkAllResourcesPreloaded);
            }
            window.requestAnimationFrame(checkAllResourcesPreloaded);
        }
    },

    properties: {
        obligatory: [],
        countsForProgressBar: true,
        htmlDescription: null
    }
});


window.PennController = new Proxy(PennController, {     // Export the object globally
    get: (obj, prop) => {
        if (prop in obj)
            return obj[prop];
        else
            _engine_js__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].debug.error("Unknown global PennController command: &lsquo;"+prop+"&rsquo;");
    }
});


/***/ }),

/***/ "./src/debug.js":
/*!**********************!*\
  !*** ./src/debug.js ***!
  \**********************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _engine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./engine */ "./src/engine.js");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils */ "./src/utils.js");



$.prototype.left = function(){ return Number(this.css("left").replace(/px/,'')); }
$.prototype.top = function(){ return Number(this.css("top").replace(/px/,'')); }

const VERSION = "2.1.beta";

_engine__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].Prerun( ()=>{
    const xppath = window.location.pathname;
    if (!_engine__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].debug.on || VERSION.match(/beta/i)===null || (window.localStorage && window.localStorage.getItem(xppath))) return;
    const beta_warning = new PopIn("Beta Version", 400, 200, "calc(50vw - 200px)", "calc(50vh - 100px)");
    beta_warning.container.find("div:nth-child(3)").remove();   // remove 'DebugOff' warning
    beta_warning.content.html(`<p>Please note that this project is using a <strong>beta</strong> version of PennController (${VERSION}).</p>
                               <p>Report new bugs at <a href='https://www.pcibex.net/bug-report/' target='_blank'>https://www.pcibex.net/bug-report/</a>
                                  or at <a href='mailto:support@pcibex.net'>support@pcibex.net</a></p>`);
    beta_warning.popIn();
    beta_warning.titleExpand.click().remove();
    const popout = beta_warning.popOut;
    beta_warning.popOut = ()=>{window.localStorage.setItem(xppath,true); popout.call(beta_warning);};
});

const WIDTH = 450;
const HEIGHT = 250;

class PopIn {
    constructor(title, width, height, x, y) {
        let t = this;
        this.title = title;
        this.width = width;
        this.height = height;
        this.x = x;
        this.y = y;
        this.tabs = [];
        this.container = $("<div>").css({
            width: width, 
            // height: height, 
            height: "3em",
            overflow: 'hidden',
            position: "fixed", 
            'border-radius': "5px", 
            'background-color': 'floralwhite',
            'min-height': "3em",
            'min-width': "3em",
            'z-index': 9999
        });
        this.titleBar = $("<div>").css({
            width: "100%", 
            height: "1.5em", 
            margin: 0, 
            padding: 0, 
            'background-color': 'gray', 
            cursor: 'move', 
            color: 'white',
            'border-radius': '5px 5px 0px 0px'
        });
        this.titleExpand = $("<span>&#9656;</span>").css({
            display: 'inline-block',
            'line-height': '1.3em',
            padding: '2px',
            'margin-right': '0.25em',
            cursor: 'pointer'
        }).click(()=>{
            if (this.titleExpand.html().charCodeAt(0)==9656){
                this.titleExpand.html("&#9662;");
                this.container.css({
                    height: this.height,
                    overflow: "unset",
                });
            }
            else{
                this.titleExpand.html("&#9656;");
                this.container.css({
                    height: "3em",
                    overflow: "hidden",
                });
            }
        });
        this.titleSpan = $("<span>"+title+"</span>").css({
            display: "inline-block", 
            padding: "2px", 'line-height': "1.3em",
            overflow: "hidden"
        });
        this.titleBar.append(this.titleSpan.prepend(this.titleExpand)).append(
            $("<span>X</span>").css({
                width: "1.3em",
                height: "1.3em",
                margin: "0.1em",
                'line-height': "1.3em",
                'border-radius': "2px",
                'text-align': "center",
                position: "absolute",
                right: 0,
                cursor: "pointer",
                overflow: "hidden"
            }).click(function(){
                t.popOut();
            }).mouseenter(function(){ $(this).css({border: "solid 1px lightgray", 'border-radius': "2px"}); })
            .mouseleave(function(){ $(this).css({border: "none"}); })
        ).mousedown(function(e){
            t.updatePosition = {x: e.clientX, y: e.clientY, left: t.container.left(), top: t.container.top()};
            e.preventDefault();
        });
        this.tabBar = $("<div>").css({
            width: "calc(100% - 10px)",
            height: "1.5em",
            'margin-bottom': "0px",
            overflow: "hidden",
            display: "flex",
            'margin-left': "5px",
            'margin-right': "5px"
        });
        this.tabBar.append($("<div>").css({width:"100%",'border-bottom':"solid 1px lightgray"}));
        this.newTab = (title,content) => {
            if (!(title instanceof jQuery))
                title = $("<span>").append(title);
            if (!(content instanceof jQuery))
                content = $("<div>").append(content);
            let tab = {
                title: title,
                content: content,
                jQuery: $("<div>").append(title).css({
                    border: "solid 1px lightgray",
                    'border-top-right-radius': "5px",
                    'border-top-left-radius': "5px",
                    'padding-left': "5px",
                    'padding-right': "5px",
                    cursor: "pointer"
                }).click(()=>{
                    this.content.children().detach();
                    this.content.append(tab.content);
                    this.tabBar.children().css({
                        background: "linen", 
                        color: "darkgray", 
                        'border-bottom': "solid 1px lightgray"
                    });
                    tab.jQuery.css({color: "black", background: "inherit", 'border-bottom': 'none'});
                    debug.activeTab = tab;
                }),
                remove: ()=>this.jQuery.remove()
            };
            this.tabs.push(tab);
            this.tabBar.prepend(tab.jQuery);
            // tab.jQuery.click();
            return tab;
        };
        this.container.append($("<div>").css({
            display: "inline-block", width: "1.3em", height: "1.3em", position: "absolute", bottom: 0, right: 0, cursor: "se-resize",
            background: "repeating-linear-gradient(135deg,rgba(255,255,255,.5),rgba(255,255,255,.5) 2px,#777 2px,#777 4px)",
            'clip-path': "polygon(90% 0,90% 90%,0 90%)", opacity: "0.5"
        }).mousedown(function(e){
            t.updateSize = true;
            t.offsetRight = e.clientX - (t.container.left() + t.container.width());
            t.offsetBottom = e.clientY - (t.container.top() + t.container.height());
            e.preventDefault();
        }));
        this.content = $("<div>").css({
            border: "solid 1px lightgray",
            'font-family': "monospace",
            'font-size': "0.9em",
            margin: '0px 5px 5px 5px',
            padding: '2px',
            height: 'calc(100% - 4.5em - 30px)',
            overflow: 'auto',
            'border-top': "none"
        })
        this.container.append(this.titleBar);
        this.container.append($("<div>Use <tt>DebugOff()</tt> before publishing.</div>").css({
            height: "1.5em", 'overflow-x': "hidden"
        }));
        this.container.append(this.tabBar);
        this.container.append(this.content);
        this.container.css({left: x, top: y});
        $(document).mousemove(function(e){
            if (t.updatePosition){
                // t.x = e.clientX - t.offsetX;
                // t.y = e.clientY - t.offsetY;
                t.x = t.updatePosition.left + (e.clientX-t.updatePosition.x);
                t.y = t.updatePosition.top + (e.clientY-t.updatePosition.y);
                t.container.css({left: t.x, top: t.y});
            }
            if (t.updateSize){
                t.width = (e.clientX - t.container.left()) - t.offsetRight;
                t.height = (e.clientY - t.container.top()) - t.offsetBottom;
                t.container.css({width: t.width, height: t.height});
            }
        }).mouseup(function(){ t.updatePosition = undefined; t.updateSize = false; });
    }
    popIn() {
        $(document.body).append(this.container);
    }
    popOut() {
        this.container.detach();
    }
}

let HAS_REACHED_SEND_RESULTS = false;
let debug = {
    popin: {},
    tablePopin: {},
    infoTab: null,
    runningOrder: null,
    runningIndex: -1,
    runningElement: -1,
    currentController: null,
    currentTable: null,
    activeTab: null
};

_engine__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].debug = {
    on: true,
    currentPromise: null,
    forceResolve: ()=>{
        if (_engine__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].debug.currentPromise instanceof Function)
            _engine__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].debug.currentPromise();
    },
    addToTab: (tab,...messages)=>{
        if (!_engine__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].debug.on) return;
        let controller;
        if (!_engine__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].controllers.running)    // If in phase of creation:
            controller = _engine__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].controllers.underConstruction; // get from controller under construction
        else                                    // Else, get from the running controller (e.g. async command)
            controller = _engine__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].controllers.list[_engine__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].controllers.running.id];
        if (controller===undefined||controller===null)
            controller = {id: "NA"};
        let now = new Date();
        tab.prepend( $("<div>"+
            "["+[now.getHours(),now.getMinutes(),now.getSeconds()].join(":")+"] "+
            messages.join(';')+
            " (newTrial: "+controller.id+(controller.useLabel?'-'+controller.useLabel:'')+")"+
            "</div>"
        ).css({'border-bottom': 'dotted 1px gray', 'margin-bottom': '1px', 'padding-bottom': '1px'}) );
    },
    log: (...messages) => _engine__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].debug.addToTab(debug.logTab.log,...messages),
    warning: (...messages) => {
        if (!_engine__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].debug.on) return;
        _engine__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].debug.addToTab(debug.warningsTab.content,...messages);
        debug.warningsTab.title.css("color","orange");
        debug.warningsTab.content.find(".PennController-debug-nowarnings").css("display","none");
        if (debug.popin.titleExpand.html().charCodeAt(0)==9656) debug.popin.titleExpand.click();
        debug.warningsTab.jQuery.click();
    },
    error: (...messages) => {
        if (!_engine__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].debug.on) return;
        _engine__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].debug.addToTab(debug.errorsTab.content,...messages);
        debug.errorsTab.title.css("color","red");
        debug.errorsTab.content.find(".PennController-debug-noerrors").css("display","none");
        if (debug.popin.titleExpand.html().charCodeAt(0)==9656) debug.popin.titleExpand.click();
        debug.errorsTab.jQuery.click();
    }
};


// Creation of the debug popin
debug.popin = new PopIn(`Debug (PennController ${VERSION})`, WIDTH-10, HEIGHT-10, window.innerWidth - WIDTH, 10/*HEIGHT*/);
debug.logTab = debug.popin.newTab("Log");               // First tab: console
debug.logTab.controls = $("<div>")
    .append( $("<button>Next screen</button>").click(()=>{
        if (debug.currentController._cssPrefix=="PennController-") _engine__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].controllers.running.endTrial();
        else debug.currentController._finishedCallback();
    }) )
    .append( $("<button>Next command</button>").click(()=>_engine__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].debug.forceResolve()) )
    .css({background: "lightgray", "border-bottom": "dotted 1px black"})
    .appendTo( debug.logTab.content );
debug.logTab.log = $("<div>").appendTo( debug.logTab.content );
debug.warningsTab = debug.popin.newTab("Warnings");         // Second tab: warning
debug.warningsTab.content.prepend( $("<div>No warnings</div>").css({
    'font-style': 'italic', 'text-align': 'center', 'margin': '5px'
}).addClass("PennController-debug-nowarnings"));
debug.errorsTab = debug.popin.newTab("Errors");         // Third tab: errors
debug.errorsTab.content.prepend( $("<div>No errors found</div>").css({
    'font-style': 'italic', 'text-align': 'center', 'margin': '5px'
}).addClass("PennController-debug-noerrors"));



let highlightCurrentRow = ()=>{
    if (debug.currentTable && debug.currentTable.debug){
        debug.currentTable.debug.content.find("tr").css("background-color", "transparent");
        $(debug.currentTable.debug.content.find("tr")[debug.currentRow+1]).css("background-color", "pink");
        debug.tablePopin.titleSpan.after(jumpToRow);
        if (debug.currentTable.hasOwnProperty("group") && debug.currentTable.table[0].hasOwnProperty(debug.currentTable.group))
            jumpToRow.after(hideOtherGroups);
    }
};

let jumpToRow = $("<a title='Jump to current row'>&#9755;</a>").click(function(){
    debug.currentTable.debug.jQuery.click();
    let scroll = $(debug.currentTable.debug.content.find("tr")[debug.currentRow+1]).position().top;
    debug.currentTable.debug.content.children()[2].scrollTop += scroll;
}).css({
    display: "inline-block", 
    padding: "2px 5px", 'line-height': "1.3em",
    overflow: "hidden"
});

let onlyCurrentGroup = false;
let hideOtherGroups = $("<a title='Show/Hide rows from other groups'>&#128065;</a>").click(function(){
    if (onlyCurrentGroup)
        debug.currentTable.debug.content.find("tr").css('display','table-row');
    else {
        let group = debug.currentTable.table[debug.currentRow][debug.currentTable.group];
        let rows = debug.currentTable.debug.content.find("tr");
        for (let r = 0; r < debug.currentTable.table.length; r++)
            if (debug.currentTable.table[r][debug.currentTable.group]!=group)
                $(rows[r+1]).css("display","none");
    }
    onlyCurrentGroup = !onlyCurrentGroup;
}).css({
    display: "inline-block", 
    padding: "4px 5px 0px 5px", 'line-height': "1.3em",
    overflow: "hidden"
});

// Helper to transform a Table element into a jQuery <table> object
let toContent = table=>{
    let keys = Object.keys(table.table[0]);
    let bodyTable = $("<table>").css({display: "table", 'table-layout': "fixed", height: "100%", width: 70*(keys.length+1)});
    let headerTable = $("<table>").css({display: "table", 'table-layout': "fixed", height: "100%", width: 70*(keys.length+1)});
    let header = $("<tr>");
    header.append($("<th>").html("<em>#</em>").css({width: 70, 'overflow': "hidden"}));
    for (let c = 0; c<keys.length; c++)
        header.append($("<th>").html(keys[c]).css({width: 70, 'overflow': "hidden"}));
    headerTable.append(header);
    for (let r = 0; r<table.table.length; r++){
        let row = $("<tr>");
        row.append($("<td>").html("<em>"+Number(r+1)+".</em>").css({width: 70, 'overflow': "hidden"}));
        for (let c = 0; c<keys.length; c++)
            row.append($("<td>").html(table.table[r][keys[c]]).css({width: 70, 'overflow': "hidden"}));
        bodyTable.append(row);
    }
    let bodyDiv = $("<div>").css({height: "calc(100% - 1.5em)", overflow: "auto"})
                        .append(bodyTable);
    let ghostDiv = $("<div>").css({height: "1.5em", width: "100%"});
    let headerDiv = $("<div>").css({width: "100%", position: "absolute", left: 0, top: 0})
                        .append(headerTable);
    bodyDiv.scroll( () => headerDiv.css("margin-left", -1 * bodyDiv[0].scrollLeft) );
    return $("<div>").css({width: "100%", height: "100%", 'white-space': "nowrap", position: "relative", overflow: "hidden"})
                    .append(headerDiv).append(ghostDiv).append(bodyDiv);
};
// Shows the Tables popin
let showTables = table=>{
    if (debug.tablePopin.hasOwnProperty("container")){
        if (debug.tablePopin.container.parent().length>0)           // Table already on screen
            debug.tablePopin.tabs[table].jQuery.click();
        else
            $(document.body).append(debug.tablePopin.container);    // Re-print the table popin
    }
    else {  // Display the table popin next the debug popin
        debug.tablePopin = new PopIn("Tables", window.innerWidth-320, 190, 10, window.innerHeight-200);
        let tableNames = Object.keys(_engine__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].tables);
        for (let t = 0; t<tableNames.length; t++)
            _engine__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].tables[tableNames[t]].debug = debug.tablePopin.newTab( tableNames[t] , toContent(_engine__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].tables[tableNames[t]]) );
        debug.tablePopin.content.css("overflow","hidden");
        debug.tablePopin.tabs[table].jQuery.click();                // Click on the selected table
    }
    highlightCurrentRow();
}



const newItem = () => {
    if (debug.runningIndex<0)
        debug.runningIndex = 0;
    if (debug.runningElement<0)
        debug.runningElement = 0;
    else{
        debug.runningElement++;
        if (debug.runningElement >= debug.runningOrder[debug.runningIndex].length){
            debug.runningElement = 0;
            debug.runningIndex++;
        }
    }

    if (debug.runningOrder[debug.runningIndex][debug.runningElement].controller == "__SendResults__")
        HAS_REACHED_SEND_RESULTS = true;

    if (!_engine__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].debug.on){
        window.items = undefined;
        return;
    }
    
    refreshSequenceTab();
    updateProgressBar();
    
    jumpToRow.detach();
    hideOtherGroups.detach();
    debug.currentTable = null;
    debug.currentTableName = "<em>NA</em>";
    debug.currentRow = -1;
    debug.currentController = debug.runningOrder[debug.runningIndex][debug.runningElement].options;
    if (debug.currentController.hasOwnProperty("_PennController")){
        debug.currentTable = debug.currentController._PennController.table;
        for (let name in _engine__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].tables)
            if (_engine__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].tables[name]==debug.currentTable)
                debug.currentTableName = name;
        debug.currentRow = Number(debug.currentController._PennController.row);
        highlightCurrentRow();
    }
    let trial = debug.runningOrder[debug.runningIndex][debug.runningElement];
    debug.infoTab.content.empty();
    debug.infoTab.content
        .append($("<div><strong>Trial in sequence</strong> "+Number(debug.runningIndex+1)+" / "+debug.runningOrder.length+"</div>"))
        .append($("<div><strong>Element in trial</strong> "+Number(debug.runningElement+1)+" / "+debug.runningOrder[debug.runningIndex].length+"</div>"))
        .append($("<div><strong>Trial's label:</strong> "+trial.type+"</div>"))
        .append($("<div><strong>Trial's type (controller):</strong> "+trial.controller+"</div>"))
        .append($("<div><strong>Trial's index:</strong> "+trial.itemNumber+" / "+window.items.length+"</div>"))
        .append($("<div><strong>From table:</strong> "+debug.currentTableName+"</div>"));
    if (trial.controller=="PennController")
        $(debug.logTab.controls.children()[1]).css("display","inline-block")
    else
        $(debug.logTab.controls.children()[1]).css("display","none")
}


let dgetOld = window.dget;
window.dget = (...args) => {    // Called whenever a new item shows up
    let r = dgetOld(...args);   // displayMode,overwrite only called in finishCallback
    if (args[1] && args[1] == "displayMode" && args[2] && args[2] == "overwrite")
      newItem();
    return r;
};

const updateProgressBar = () =>{
    if (window.conf_showProgressBar) {
        let nPoints = 0, multiplier = 0;
        debug.runningOrder.forEach((item,ni)=>item.forEach((element,ne)=>{
            const count = ibex_controller_get_property(element.controller, "countsForProgressBar");
            if (count===undefined||count) {
                nPoints++;
                if (ni<debug.runningIndex||(ni==debug.runningIndex&&ne<=debug.runningElement)) multiplier++;
            }
        }));
        const barContainer = $("#bod > table div.bar-container"), bar = barContainer.find(".bar");
        const progressBarMaxWidth = nPoints * 5 < 300 ? nPoints * 5 : 300;
        const currentProgressBarWidth = multiplier * progressBarMaxWidth / nPoints;
        barContainer.css("width",progressBarMaxWidth);
        bar.css('width', Math.round(currentProgressBarWidth) + "px");
    }
}
const jumpToTrial = n => {
    if (debug.runningIndex < n){
        if (debug.currentController._cssPrefix=="PennController-") _engine__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].controllers.running.endTrial();
        else debug.currentController._finishedCallback();
        setTimeout(()=>jumpToTrial(n), 1);
    }
}
const refreshSequenceTab = ()=>{
    const list = $("<ol>");
    for (let i = 0; i < debug.runningOrder.length; i++){
        let item = debug.runningOrder[i];
        let elements = [];
        for (let e = 0; e < item.length; e++)
            elements.push(item[e].controller);
        let tableInfo = [];
        if (item[0].options.hasOwnProperty("_PennController"))
            tableInfo = [':',item[0].options._PennController.table.id,item[0].options._PennController.row+1];
        let text = item[0].type+" ("+elements.join(",")+tableInfo.join(":")+")";
        const li = $("<li>").append(text);
        if (i<=debug.runningIndex)
            li.css({color:"gray",'background-color':(i==debug.runningIndex?"pink":"transparent")});
        else
            li.append($("<button>Reach</button>").click(()=>jumpToTrial(i)));
        list.append(li);
    }
    debug.sequenceTab.content.empty().append(list);
}

let init_debug = () => {
    // If there are any tables, add a tab to the debug popin
    let tableNames = Object.keys(_engine__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].tables);
    if (tableNames.length>0){
        let tableTabContent = $("<ul>");
        for (let t = 0; t<tableNames.length; t++)
            tableTabContent.append($("<li>").html(tableNames[t]).click(()=>showTables(t)).css("cursor","pointer"));
        debug.popin.newTab("Tables", tableTabContent);
    }

    // Sequence tab
    debug.sequenceTab = debug.popin.newTab("Sequence");
    // Info tab
    debug.infoTab = debug.popin.newTab("Info");

    refreshSequenceTab();
    if (debug.activeTab)
        debug.activeTab.jQuery.click();
    else
        debug.errorsTab.jQuery.click();

    // Key to open the debugger
    $(window.document).bind("keyup keydown", function(e){
        if (e.ctrlKey && e.keyCode == 68) {
            let x = window.innerWidth - WIDTH, y = window.innerHeight - HEIGHT;
            $(window.document.body).append( debug.popin.container );
            debug.popin.x = x;
            debug.popin.y = y;
            debug.popin.container.css({top: y, left: x});
            e.preventDefault();
            e.stopPropagation();
            return false;
        }
    });
};

// Overriding $.ajax (first called in other_includes/main.js) to print debug as soon as possible
let oldAjax = window.$.ajax;
window.$.ajax = (...args) => {
    if (_engine__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].debug.on && args[0] && args[0].url && args[0].url.match(/\?allchunks=1$/))
        debug.popin.popIn();
    return oldAjax(...args);
};


_engine__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].Prerun(
    ()=>{

        window.onbeforeunload = function() {
            if (HAS_REACHED_SEND_RESULTS)
                return;
            return "Your results have not been sent yet. Do you really want to leave the page?";
        };

        let ran = false;    // Only run the new assert once

        PennController.version = VERSION;

        // Retrieve the list of trials
        //let oldRunShuffleSequence = window.runShuffleSequence;
        let oldAssert = window.assert;
        //window.runShuffleSequence = function(...args) {         // runShuffle... = just before call to conf_modify...
        window.assert = function (...args){
            if (ran || args[1]!="There must be some items in the running order!")
                return oldAssert.apply(this, args);             // Only run the new assert once
            ran = true;
            let oldModify = window.conf_modifyRunningOrder;     // this way we get most recent conf_modify...
            window.conf_modifyRunningOrder = function (ro){
                if (oldModify instanceof Function)
                    debug.runningOrder = oldModify.call(this, ro);
                else
                    debug.runningOrder = ro;

                _engine__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].runningOrder = {
                    active: debug.runningOrder,
                    original: [...debug.runningOrder]
                };
                const oldPush = _engine__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].runningOrder.active.push;
                let once = false;
                _engine__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].runningOrder.active.push = function(...args){
                    const r = oldPush.apply(this,args);
                    if (!once && args[0] instanceof Array && args[0][0] && args[0][0].controller == "__SendResults__"){
                        _engine__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].runningOrder.original = [...this];
                        once = true;
                    }
                    return r;
                }
                Object.defineProperty(_engine__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].runningOrder,"runningIndex",{get:()=>debug.runningIndex});

                if (_engine__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].debug.on)
                    init_debug();

                newItem();  // First item
                        
                return debug.runningOrder;
            };
            //return oldRunShuffleSequence.apply(this, args);
            return oldAssert.apply(this, args);
        }

        // if (PennEngine.debug.on)
        //     debug.popin.popIn();

    }
);

// Catch errors related to new*/get*/default*
window.onerror = function(message, uri, line) {
    if (!uri.match(/include=data$/))
        return;
    let ref = message.match(/ReferenceError: (.+) is not defined/);
    if (ref){
        if (ref[1].match(/^(new|get|default)/) && PennController.Elements[ref[1]])
            _engine__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].debug.error("Tried to use &lsquo;"+ref[1]+"&rsquo; without a prefix on line "+line+"; did you forget to use PennController.ResetPrefix?");
        else {
            let lowest = {score: 1, command: ""};
            let commands = Object.getOwnPropertyNames( PennController.Elements );
            for (let i = 0; i < commands.length; i++){
                let score = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["levensthein"])(ref[1],commands[i]) / ref[1].length;
                if (score < lowest.score){
                    lowest.score = score;
                    lowest.command = commands[i];
                }
            }
            if (lowest.score < 0.5)
                _engine__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].debug.error("Wrong command &lsquo;"+ref[1]+"&rsquo; on line "+line+". Did you mean to type &lsquo;<strong>"+lowest.command+"</strong>&rsquo;?");
            else    
                _engine__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].debug.error("Unrecognized expression &lsquo;"+ref[1]+"&rsquo; (line "+line+")");
        }
    }
    else
        _engine__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].debug.error(message);
        //console.error(message);
}

let oldGetP = window.ibex_controller_get_property;
window.ibex_controller_get_property = (cname, oname) => {
    let controllerNames = Object.getOwnPropertyNames( $.ui );

    if (controllerNames.indexOf(cname)>-1)
        return oldGetP(cname, oname);

    let lowest = {score: 1, controllerName: ""};
    for (let i = 0; i < controllerNames.length; i++){
        let score = Object(_utils__WEBPACK_IMPORTED_MODULE_1__["levensthein"])(cname,controllerNames[i]) / cname.length;
        if (score < lowest.score){
            lowest.score = score;
            lowest.controllerName = controllerNames[i];
        }
    }

    if (lowest.score < 0.5)
        _engine__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].debug.error("Invalid controller reference: &lsquo;"+cname+"&rsquo;---Did you mean to type <strong>"+lowest.controllerName+"</strong>?");
    else    
        _engine__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].debug.error("Invalid controller reference: &lsquo;"+cname+"&rsquo;");

}


/***/ }),

/***/ "./src/elements.js":
/*!*************************!*\
  !*** ./src/elements.js ***!
  \*************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ "./src/utils.js");
/* harmony import */ var _controller_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./controller.js */ "./src/controller.js");
/* harmony import */ var _engine_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./engine.js */ "./src/engine.js");




_controller_js__WEBPACK_IMPORTED_MODULE_1__["PennController"].Elements = {};       // Will add newX/getX/defaultX commands for each element type (see _AddElementType)

// The self keyword will be instantiated with the current element in each command
class Self {
    constructor(){
        this._commands = [];             // We'll keep track of the commands here
        this._currentType = "action.";
    }
};
// Using a proxy to list *any* command when invoking self
Object.defineProperty(_controller_js__WEBPACK_IMPORTED_MODULE_1__["PennController"].Elements, "self", {get: () => {
    const t = new Self();
    const p = new Proxy(t, {
        get: (obj, prop) => {
            if (prop == "_commands" || prop == "_currentType" || prop == "hasOwnProperty")
                return t[prop];
            console.log("Getting self's proxy, with",prop);
            if (prop == "settings")
                t._currentType = "settings.";
            else if (prop == "test")
                t._currentType = "test.";
            else if (prop == "testNot")
                t._currentType = "testNot.";
            else {
                console.log("Action on self");
                let action = {name: t._currentType.replace('action.','')+prop};
                t._commands.push(action);
                const f = (...args) => { action.args = args; console.log("Added args",args,"to",action);  return p };
                t._currentType = "action.";
                return f;
            }
            return p;
        }
    });
    return p;
}});

const evaluateArgumentsCallbacks = [];
_engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].ArgumentCallback = f=>evaluateArgumentsCallbacks.push(f);
// Replace Var with their values and self with pointers
const evaluateArguments = async function(args){
    for (let r = 0; r < args.length; r++){
        evaluateArgumentsCallbacks.map(f=>f instanceof Function && f.call(null,args[r]));
        // if (args[r] instanceof PennElementCommands && args[r].type == "Var" && !args[r]._promises.length){
        //     args[r]._runPromises();
        //     args[r] = args[r]._element.evaluate();
        // }
        if (args[r] instanceof PennElementCommands && args[r].type == "Var" && args[r]._promises.length==0){
            if (args[r]._runPromises instanceof Function) await args[r]._runPromises();
            args[r] = args[r].value;
        }
        else if (args[r] instanceof Self) {
            let pcommands = new PennElementCommands(this, elementTypes[this.type]), handler = pcommands._proxy;
            const listOfCommands = args[r]._commands;
            // Loop through the commands and just call them on the handler (will take care of adding the promises)
            for (let i = 0; i < listOfCommands.length; i++){
                const c = listOfCommands[i];
                console.log("About to call",c.name,"with",c.args,"on",handler);
                if (c.name.match(/^settings\./)) handler = handler.settings[c.name.replace(/^settings\./,'')](...c.args);
                else if (c.name.match(/^test\./)) handler = handler.test[c.name.replace(/^test\./,'')](...c.args);
                else if (c.name.match(/^testNot\./)) handler = handler.testNot[c.name.replace(/^test\./,'')](...c.args);
                else handler = handler[c.name](...c.args);
            }
            args[r] = pcommands;
            console.log("Replaced self with",args[r]);
        }
    }
    return args;
}
_engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].utils.evaluateArguments = evaluateArguments;



// Returns an anonymous function returning a Promise containing the function command
// This is basically just a way to get lazy evaluation of Promises
//
// Example:     newCommand( function(resolve,  delay){ setTimeout(resolve, delay); } );
// returns:     delay => new Promise( resolve => setTimeout(resolve, delay) );
//
let newCommand = function(command) {
    return function(...rest){
        let element = this;
        return new Promise( async resolve => {
            let controller = _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].controllers.running;
            _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].debug.currentPromise = resolve;
            let resolveOnlyForCurrentController = (...args)=>(_engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].controllers.running!=controller||resolve(...args));
            await evaluateArguments.call(element, rest);
            command.apply(element, [resolveOnlyForCurrentController].concat(rest));
        });
    }
};



// Used in PennElementCommand to create a test command (both positive and negative)
//
// Example:     newTestBis( function( opt ) { return this.opt == opt; } );
//
let newTest = function(condition){
    let complex = [];                                   // ["and", testCommand, "or", testCommand, ...]
    let success = ()=>new Promise(r=>r()), failure = ()=>new Promise(r=>r());
    let test = function(...rest){
        let element = this;
        return new Promise(async function(resolve){
            let controller = _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].controllers.running;
            _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].debug.currentPromise = resolve;
            let resolveOnlyForCurrentController = (...args)=>(_engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].controllers.running!=controller||resolve(...args));
            await evaluateArguments.call(element, rest);
            let result = condition.apply(element, rest);    // Result of this test
            let connective = "and";                     // Going through conjunctions/disjunction tests
            for (let c = 0; c < complex.length; c++){
                let tst = complex[c];
                if (tst=="and") connective = "and";
                else if (tst=="or") connective = "or";
                else if (tst && tst._runPromises && tst.success) {
                    tst = await tst._runPromises()=="success";  // Run the test; _runPromises returns last promise's value
                    if (connective=="and")
                        result = result&&tst;
                    else if (connective=="or")
                        result = result||tst;
                }
            }
            if (result){
                await success();
                // evaluateArguments.call(t._element,
                resolveOnlyForCurrentController("success");
            }
            else{
                await failure();
                resolveOnlyForCurrentController("failure");
            }
        });
    }
    test.and = t=>{ complex.push("and"); complex.push(t); }
    test.or = t=>{ complex.push("or"); complex.push(t); }
    // Mapping directly to _runPromises doesn't work so map to ()=>_runPromises()
    test.success = function (...commands) {
        success = Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__["lazyPromiseFromArrayOfLazyPromises"])(commands.map(c=>async()=>{
            const new_c =  await evaluateArguments.call(this,[c]);
            if (new_c[0] && new_c[0]._runPromises instanceof Function) await new_c[0]._runPromises();
        }));
    };
    test.failure = function (...commands) {
        failure = Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__["lazyPromiseFromArrayOfLazyPromises"])(commands.map(c=>async()=>{
            const new_c =  await evaluateArguments.call(this,[c]);
            if (new_c[0] && new_c[0]._runPromises instanceof Function) await new_c[0]._runPromises();
        }));
    };
    // test.failure = (...commands)=>failure = lazyPromiseFromArrayOfLazyPromises(commands.map(c=>()=>c._runPromises()));

    return test;
}

// A class representing instances of elements
class PennElement {
    constructor(id, name, type){
        let jQueryElement = $("<PennElement>");
        let oldCSS = jQueryElement.css;
        let styles = [];
        jQueryElement.css = (...css)=>{
            styles.push(css);
            oldCSS.apply(jQueryElement, css);
        };
        let alreadySet = false;
        Object.defineProperty(this, "jQueryElement", {
            set: function(element) {
                if (!(element instanceof jQuery))
                    return _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].debug.error("Tried to assign a non jQuery element to PennElement named "+id);
                if (alreadySet)
                    return jQueryElement = element;
                // inherit old jQueryElement's handlers
                let events = jQueryElement.data('events');
                if (events)
                    $.each(events, function() {
                        $.each(this, function() {
                            element.bind(this.type, this.handler);
                        });
                    });
                // inherit old jQueryElement's css
                for (let s in styles)
                    element.css(...styles[s]);
                jQueryElement = element;
                alreadySet = true;
            },
            get: function() { return jQueryElement; }
        });
        this.jQueryContainer = $("<div>");
        this.id = id;
        this.type = name;
        this.validate = ()=>this.hasValidated = true;
        this._printCallback = [];
        if (type.hasOwnProperty("end"))     // Called at the end of a trial
            this.end = async function(){ await type.end.apply(this); };
    }
}
_engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].PennElement = PennElement;

let errorCommand = (command, type, name, dict) => {
    let add = "";
    let test = command.replace(/^\.(settings|testNot|test)\./,'');
    if ((Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__["levensthein"])(test,"settings") / "settings".length) < 0.5)
        add = " Did you mean to type &lsquo;<strong>settings</strong>&rsquo;?";
    if ((Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__["levensthein"])(test,"test") / "test".length) < 0.5)
        add = " Did you mean to type &lsquo;<strong>test</strong>&rsquo;?";
    if ((Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__["levensthein"])(test,"testNot") / "testNot".length) < 0.5)
        add = " Did you mean to type &lsquo;<strong>testNot</strong>&rsquo;?";
    let lowest = {score: 1, command: ""};
    for (let i = 0; i < dict.length; i++){
        let score = Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__["levensthein"])(test,dict[i]) / test.length;
        if (score < lowest.score){
            lowest.score = score;
            lowest.command = dict[i];
        }
    }
    if (lowest.score < 0.5)
        add = " Did you mean to type <strong>"+command.replace(test,lowest.command)+"</strong>?";
    _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].debug.error("Command &lsquo;"+command+"&rsquo; unknown on "+type+" element &lsquo;"+name+"&rsquo;."+add);
};

// A class representing commands on elements, instantiated upon call to newX and getX
// An instance is fed with the methods corresponding to its element type (defined within _AddElementType)
class PennElementCommands {
    constructor(element, type){
        let t = new Proxy(this, {
            get: (obj, prop) => {
                if (prop in this)
                    return obj[prop];
                else {
                    if (prop == "_runPromises")
                        return () => this._runPromises.call(this);
                    let r;
                    try {
                        r = this[prop];
                    }
                    catch(err){
                        errorCommand(prop,this.type,this._element.id, Object.getOwnPropertyNames(type.actions));
                        return t;
                    }
                    if (r === undefined && typeof(prop) == "string" && prop != "nodeType")
                        errorCommand(prop,this.type,this._element.id, Object.getOwnPropertyNames(type.actions));
                    return r;
                }
            }
        });
        this._proxy = t;
        if (element instanceof PennElement)
            t._element = element;
        else if (typeof(element) == "string"){  // element = name/id    >   attribute
            let controller;
            if (!_engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].controllers.running)    // If in phase of creation:
                controller = _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].controllers.underConstruction; // get from controller under construction
            else                                    // Else, get from the running controller (e.g. async command)
                controller = _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].controllers.list[_engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].controllers.running.id];
            Object.defineProperty(t, "_element", { get: ()=>controller._getElement(element, type.name) });
        }
        t.type = type.name;
        t._promises = [];                   // Commands are essentially (lazy) promises, to be run in order (see _runPromises)
        // ACTION COMMANDS
        for (let p in type.actions) {
            t[p] = function(...rest){
                let func = function(...args){
                    if (_engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].debug.on)
                        _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].debug.log("<div style='color: lightsalmon'>"+
                                            t._element.id+" ("+type.name+") Action command '"+p+
                                            //"' running, params: " + JSON.stringify(parseElementCommands(rest)) +
                                            "' running, params: " + JSON.stringify(Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__["parseElementCommands"])(args)) +
                                            "</div>");
                    type.actions[p].apply(this, args);
                };
                let command = newCommand( func );
                t._promises.push( () => command.apply(t._element, rest) );
                return t;                       // Return the PennElementCommands instance
            };
        }
        // SETTINGS COMMANDS
        t.settings = new Proxy({}, {
            get: (obj, prop) => {
                if (prop in obj)
                    return obj[prop];
                else
                    errorCommand(".settings."+prop,this.type,this._element.id, Object.getOwnPropertyNames(type.settings));
                    // PennEngine.debug.error("Command &lsquo;.settings."+prop+"&rsquo; unknown on "+this.type+" element &lsquo;"+this._element.id+"&rsquo;");
            }
        });
        for (let p in type.settings) {
            t.settings[p] = function(...rest){ 
                let func = function(...args){ 
                    if (_engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].debug.on)
                        _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].debug.log("<div style='color: salmon'>"+
                                            t._element.id+" ("+type.name+") Settings command '"+p+
                                            //"' running, params: " + JSON.stringify(parseElementCommands(rest)) +
                                            "' running, params: " + JSON.stringify(Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__["parseElementCommands"])(args)) +
                                            "</div>");
                    type.settings[p].apply(this, args);
                };
                let command = newCommand( func );
                t._promises.push( () => command.apply(t._element, rest) );
                return t;                       // Return the PennElementCommands instance
            };
        }
        // TEST COMMANDS
        t.test = new Proxy({}, {
            get: (obj, prop) => {
                if (prop in obj)
                    return obj[prop];
                else
                    errorCommand(".test."+prop,this.type,this._element.id, Object.getOwnPropertyNames(type.test));
                    //PennEngine.debug.error("Command &lsquo;.test."+prop+"&rsquo; unknown on "+this.type+" element &lsquo;"+this._element.id+"&rsquo;");
            }
        });
        t.testNot = new Proxy({}, {
            get: (obj, prop) => {
                if (prop in obj)
                    return obj[prop];
                else
                    errorCommand(".testNot."+prop,this.type,this._element.id, Object.getOwnPropertyNames(type.test));
                    //PennEngine.debug.error("Command &lsquo;.testNot."+prop+"&rsquo; unknown on "+this.type+" element &lsquo;"+this._element.id+"&rsquo;");
            }
        });
        for (let p in type.test) {
            t.test[p] = function (...rest){
                let func = function(...args){
                    if (_engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].debug.on)
                        _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].debug.log("<div style='color: darksalmon'>"+
                                            t._element.id+" ("+type.name+") Test command '"+p+
                                            //"' running, params: " + JSON.stringify(parseElementCommands(rest)) +
                                            "' running, params: " + JSON.stringify(Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__["parseElementCommands"])(args)) +
                                            "</div>");
                    return type.test[p].apply(this, args);
                };
                let test = newTest( func );
                t._promises.push( () => test.apply(t._element, rest) );

                // Methods defined in newTest, encapsulating them to return t
                t.success = (...commands)=>{ test.success.apply(t._element, commands); return t; };
                t.failure = (...commands)=>{ test.failure.apply(t._element, commands); return t; };
                t.and = tst=>{ test.and.call(t._element, tst); return t; };
                t.or = tst=>{ test.or.call(t._element, tst); return t; };
                
                return t;                       // Return the PennElementCommands instance
            }
            t.testNot[p] = function (...rest){
                let func = function(...args){
                    if (_engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].debug.on)
                        _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].debug.log(type.name+" testNot command "+p+" running, params: " + JSON.stringify(Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__["parseElementCommands"])(args)));
                        //PennEngine.debug.log(type.name+" testNot command "+p+" running, params: " + JSON.stringify(parseElementCommands(rest)));
                    return !type.test[p].apply(this, args);
                };
                let test = newTest( func );
                t._promises.push( () => test.apply(t._element, rest) );

                // Methods defined in newTest, encapsulating them to return t
                t.success = (...commands)=>{ test.success.apply(t._element, commands); return t; };
                t.failure = (...commands)=>{ test.failure.apply(t._element, commands); return t; };
                t.and = tst=>{ test.and.call(t._element, tst); return t; };
                t.or = tst=>{ test.or.call(t._element, tst); return t; };
                
                return t;                       // Return the PennElementCommands instance
            }
        }
        if (type.value)
            Object.defineProperty(t, "value", { get() {return type.value.apply(t._element);} });
    }
    
    // The promises will be run in order (see lazyPromiseFromArrayOfLazyPromises in utils.js)
    _runPromises () {
        return Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__["lazyPromiseFromArrayOfLazyPromises"])(this._promises)();
    }
}
_engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].PennElementCommands = PennElementCommands;

// The commands shared by all elements
let standardCommands = {
    actions: {
        // Zooms the element('s container) in/out so that it fits the dimensions
        scaling: function(resolve,x,y){
            let printedElement = this.jQueryElement;
            let width = 0, height = 0, page_width = 0, page_height = 0;
            const currentController = _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].controllers.running;
            const getDimension = (s,ratio) => {
                let dimension = 0;
                if (!isNaN(Number(s))) return Number(s);
                else if (s.match(/(\d+(.\d+)?)px/)) dimension = Number(s.replace(/^[^\d]*(\d+(.\d+)?)px.*$/,"$1"));
                else{
                    const tmpDiv = $("<div>").css('width',s);
                    dimension = tmpDiv.appendTo(printedElement.parent()).width();
                    tmpDiv.remove();
                }
                return dimension/ratio;
            };
            const callback = ()=>{
                if (currentController!=_engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].controllers.running) return;
                if (this.jQueryContainer && this.jQueryContainer instanceof jQuery && this.jQueryContainer.parent().length)
                    printedElement = this.jQueryContainer;
                const new_width = printedElement.width(),
                      new_height = printedElement.height(),
                      new_page_width = $(window).width(),
                      new_page_height = $(window).height();
                window.requestAnimationFrame( callback );
                // if (new_width==width && new_height==height && new_page_width==page_width && new_page_height==page_height) return;
                // else{
                    width = new_width;
                    height = new_height;
                    page_width = new_page_width;
                    page_height = new_page_height;
                // }
                let zoom = "";
                if (x.match(/page|screen/i)){
                    const ratio_page = page_width/page_height,
                          ratio_element = width/height;
                    if (ratio_page<ratio_element)
                        zoom = `scale(${getDimension("100vw",width)})`;
                    else
                        zoom = `scale(${getDimension("100vh",height)})`;
                }
                else if (y===undefined || y.match(/auto/i))  // Base off width by default
                    zoom = `scale(${getDimension(x,width)})`;
                else if (x.match(/auto/i))
                    zoom = `scale(${getDimension(y,height)})`;
                else
                    zoom = `scale(${getDimension(x,width)},${getDimension(y,height)})`;
                let transform = printedElement.css("transform");
                transform = transform.replace(/^none$|matrix\([^)]+\)/,zoom);
                printedElement.css('transform',transform);
            };
            callback();
            resolve();
        },
        // Adds the element to the page (or to the provided element)
        print: async function(resolve, where, y, canvas){      /* $AC$ all PElements.print() Prints the element $AC$ */
            const lastPrint = [where,y,canvas]
            this._lastPrint = lastPrint;
            if (canvas && typeof(canvas)=="string")
                canvas = _controller_js__WEBPACK_IMPORTED_MODULE_1__["PennController"].Elements.getCanvas(canvas);
            if (canvas && canvas instanceof PennElementCommands && canvas.type=="Canvas")
                return canvas.settings.add(where,y,_controller_js__WEBPACK_IMPORTED_MODULE_1__["PennController"].Elements['get'+this.type](this.id))
                    ._runPromises().then(resolve);
            if (this.jQueryElement && this.jQueryElement instanceof jQuery){
                this.jQueryContainer.detach();
                this.jQueryContainer.empty();
                // this.jQueryElement.css({position:"unset",top:"unset",left:"unset"});
                if (this.cssToApply instanceof Array)
                    this.cssToApply.forEach(css=>this.jQueryElement.css(...css));
                this.jQueryElement.addClass("PennController-"+this.type.replace(/[\s_]/g,''));
                this.jQueryElement.addClass("PennController-"+this.id.replace(/[\s_]/g,''));
                let div = this.jQueryContainer;
                div.css("display","inherit");
                if (typeof(this.jQueryAlignment)=="string"){
                    if (this.jQueryAlignment.match(/left/i))
                        div.css('align-self','start');
                    else if (this.jQueryAlignment.match(/center/i))
                        div.css('align-self','center');
                    else if (this.jQueryAlignment.match(/right/i))
                        div.css('align-self','end');
                }
                div.addClass("PennController-elementContainer")
                    .addClass("PennController-"+this.type.replace(/[\s_]+/g,'')+"-container")
                    .addClass("PennController-"+this.id.replace(/[\s_]+/g,'')+"-container")
                    .append(this.jQueryElement);
                if (where instanceof jQuery)                        // Add to the specified jQuery element
                    where.append(div);
                else if (where instanceof PennElementCommands && where._element.jQueryElement instanceof jQuery)
                    where._element.jQueryElement.append(div);
                else if (y!==undefined) {                           // if where and y: coordinates
                    // div.appendTo($("body")).css('display','inline-block');
                    // let coordinates = parseCoordinates(where,y,div);
                    // div.css({position: 'absolute', left: coordinates.x, top: coordinates.y, 
                    //         transform: 'translate('+coordinates.translateX+','+coordinates.translateY+')'});
                    const currentController = _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].controllers.running;
                    _utils_js__WEBPACK_IMPORTED_MODULE_0__["printAndRefreshUntil"].call(div,
                        /*x=*/where,/*y=*/y,/*where=*/$("body"),
                        /*until=*/()=>currentController!=_engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].controllers.running || this._lastPrint!=lastPrint
                    );
                }
                else                                                // Or to main element by default
                    _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].controllers.running.element.append(div);
                    // PennEngine.controllers.running.element.append(div.css("width", "100%"));
                if (this.cssContainer instanceof Array) // Apply custom css if defined
                    this.cssContainer.forEach(css=>div.css(...css));
                // div.css({
                //     "min-width": this.jQueryElement.width(),
                //     "min-height": this.jQueryElement.height()
                // });
                let before = $("<div>").css("display", "inline-block").addClass("PennController-before")
                let after = $("<div>").css("display", "inline-block").addClass("PennController-after")
                this.jQueryElement.before( before );
                this.jQueryElement.after( after );
                for (let e in this.jQueryBefore)
                    if (this.jQueryBefore[e] && this.jQueryBefore[e]._element)
                        await (new Promise(r=>
                            standardCommands.actions.print.call(this.jQueryBefore[e]._element, r, before)
                        ));
                for (let e in this.jQueryAfter)
                    if (this.jQueryAfter[e] && this.jQueryAfter[e]._element)
                        await (new Promise(r=>
                            standardCommands.actions.print.call(this.jQueryAfter[e]._element, r, after)
                        ));
            }
            else
                _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].debug.warning("No jQuery instance to print for element "+this.id);
            this.printTime = Date.now();
            for (let f = 0; f < this._printCallback.length; f++)
                if (this._printCallback[f] instanceof Function)
                    await this._printCallback[f].call(this);
            resolve();
        },
        // Calls print again, where the element currently is
        refresh: function(resolve){              /* $AC$ all PElements.refresh() Reprints the element where it is $AC$ */
            let container = this.jQueryElement.parent();
            if (!(container instanceof jQuery) || !container.parent().length)
                return resolve();
            let tmpContainer = $("<span>");
            container.before( tmpContainer );
            _controller_js__WEBPACK_IMPORTED_MODULE_1__["PennController"].Elements['get'+this.type](this.id).print( tmpContainer )._runPromises().then(()=>{
                tmpContainer.before( this.jQueryElement.parent() );
                tmpContainer.remove();
                resolve();
            });
        },
        // Removes the element from the page
        remove: function(resolve){              /* $AC$ all PElements.remove() Removes the element from the page $AC$ */
            if (this.jQueryContainer instanceof jQuery)
                    this.jQueryContainer.detach();
            if (this.jQueryElement instanceof jQuery)
                this.jQueryElement.detach();
            else
                _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].debug.error("No jQuery instance to remove for element "+this.id);
            if (this.jQueryBefore && this.jQueryBefore.length)
                for (let b in this.jQueryBefore)
                    if (this.jQueryBefore[b]._element && this.jQueryBefore[b]._element.jQueryElement instanceof jQuery)
                        this.jQueryBefore[b]._element.jQueryElement.detach();
            if (this.jQueryAfter && this.jQueryAfter.length)
                for (let a in this.jQueryAfter)
                    if (this.jQueryAfter[a]._element && this.jQueryAfter[a]._element.jQueryElement instanceof jQuery)
                        this.jQueryAfter[a]._element.jQueryElement.detach();
            resolve();
        },
        wait: function(resolve, test){   /* $AC$ all PElement.wait() Waits until the element has been validated before proceeding $AC$ */
            if (test == "first" && this.hasValidated)   // If first and already validated, resolve already
                resolve();
            else {                                      // Else, extend remove and do the checks
                let resolved = false;
                let oldValidate = this.validate;
                this.validate = ()=>{
                    oldValidate.apply(this);
                    if (resolved)
                        return;
                    if (test instanceof Object && test._runPromises && test.success){
                        let oldDisabled = this.disabled;  // Disable temporarilly
                        this.jQueryElement.attr("disabled", true);
                        this.disabled = "tmp";
                        test._runPromises().then(value=>{   // If a valid test command was provided
                            if (value=="success") {
                                resolved = true;
                                resolve();                  // resolve only if test is a success
                            }
                            if (this.disabled=="tmp"){
                                this.disabled = oldDisabled;
                                this.jQueryElement.attr("disabled", oldDisabled);
                            }   
                        });
                    }
                    else{                                    // If no (valid) test command was provided
                        resolved = true;
                        resolve();                          // resolve anyway
                    }
                };
                if (typeof test == "number" && test > 0){
                    let now = Date.now();
                    let check = ()=>{
                        if (Date.now()-now<=0)
                            this.validate();
                        else
                            window.requestAnimationFrame(check);
                    }
                    window.requestAnimationFrame(check);
                }
            }
        }
    }
    ,
    settings: {
        after: function(resolve,  commands){    /* $AC$ all PElements.after(element) Prints an element to the right of the current element $AC$ */
            if (commands._element && commands._element.jQueryElement instanceof jQuery){
                if (commands._element.jQueryAfter instanceof Array)
                    commands._element.jQueryAfter = commands._element.jQueryAfter.filter(a=>a._element!=this);
                if (this.jQueryElement instanceof jQuery && this.jQueryElement.printed()) // If this element already printed
                    commands = commands.print( this.jQueryContainer.find(".PennController-after") );
                commands._runPromises().then(()=>{
                    this.jQueryAfter.push( commands );
                    resolve();
                });
            }
            else{
                _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].debug.error("Tried to add an invalid element after element named "+this.id);
                resolve();
            }
        },
        before: function(resolve,  commands){    /* $AC$ all PElements.before(element) Prints an element to the left of the current element $AC$ */
            if (commands._element && commands._element.jQueryElement instanceof jQuery){
                if (commands._element.jQueryBefore instanceof Array)
                    commands._element.jQueryBefore = commands._element.jQueryBefore.filter(a=>a._element!=this);
                if (this.jQueryElement instanceof jQuery && this.jQueryElement.printed()) // If this element already printed
                    commands.print( this.jQueryContainer.find(".PennController-"+this.type+"-before") )
                commands._runPromises().then(()=>{
                    this.jQueryBefore.push( commands );
                    resolve();
                });
            }
            else{
                _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].debug.error("Tried to add an invalid element before element named "+this.id);
                resolve();
            }
                
        },
        bold: function(resolve){            /* $AC$ all PElements.bold() Prints the text, if any, as boldfaced $AC$ */
            if (this.jQueryElement instanceof jQuery)
                this.jQueryElement.css("font-weight","bold");
            else
                _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].debug.error("Element named "+this.id+" has not jQuery element to render as bold");
            resolve();
        },
        center: function(resolve){          /* $AC$ all PElements.center() Centers the element on the page $AC$ */
            if (this.jQueryElement instanceof jQuery){
                // this.jQueryElement.css({"text-align":"center",margin:"auto"});
                this.jQueryAlignment = "center";
                if (this.jQueryElement.parent().length)    // If element already printed, update
                    this.jQueryContainer.css("align-self", "center");
                    // this.jQueryContainer.css("text-align", "center");
            }
            else
                _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].debug.error("Element named "+this.id+" has not jQuery element to render as centered");
            resolve();
        },
        color: function(resolve, color){          /* $AC$ all PElements.color(color) Prints the text, if any, in the color specified $AC$ */
            if (this.jQueryElement && typeof(color)=="string")
                this.jQueryElement.css("color", color);
            else
                _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].debug.error("Element named "+this.id+" has not jQuery element to render as "+color);
            resolve();
        },
        cssContainer: function(resolve, ...rest){ /* $AC$ all PElements.cssContainer(option,value) Applies the CSS to the container of the element $AC$ */
            if (!this.cssContainer)
                this.cssContainer = [];
            this.cssContainer.push(rest);
            if (this.jQueryContainer.printed())
                this.jQueryContainer.css(...rest);
            resolve();
        },
        css: function(resolve, ...rest){        /* $AC$ all PElements.css(option,value) Applies the CSS to the element $AC$ */
            if (!this.cssToApply) this.cssToApply = [];
            this.cssToApply.push(rest);
            if (this.jQueryElement instanceof jQuery)
                this.jQueryElement.css(...rest);
            else
                _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].debug.error("Element named "+this.id+" has not jQuery element on which to apply the CSS");
            resolve();
        },
        disable: function(resolve){             /* $AC$ all PElements.disable() Disables the element $AC$ */
            if (this.hasOwnProperty("jQueryElement") && this.jQueryElement instanceof jQuery)
                this.jQueryElement.attr("disabled", true).addClass("PennController-disabled");
            else
                _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].debug.error("No jQuery instance to disable for element "+this.id);
            resolve();
        },
        enable: function(resolve){             /* $AC$ all PElements.enable() Enables the element $AC$ */
            if (this.hasOwnProperty("jQueryElement") && this.jQueryElement instanceof jQuery)
                this.jQueryElement.removeAttr("disabled").removeClass("PennController-disabled");
            else
                _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].debug.error("No jQuery instance to enable for element "+this.id);
            resolve();
        },
        hidden: function(resolve){             /* $AC$ all PElements.hidden() Hides the element (will still leave a blank space) $AC$ */
            if (this.hasOwnProperty("jQueryElement") && this.jQueryElement instanceof jQuery)
                this.jQueryElement.css({visibility: "hidden"/*, "pointer-events": "none"*/});
            else
                _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].debug.error("No jQuery instance to hide for element "+this.id);
            resolve();
        },
        italic: function(resolve){             /* $AC$ all PElements.italic() Prints the text, if any, as italicized $AC$ */
            if (this.jQueryElement instanceof jQuery)
                this.jQueryElement.css("font-style","italic");
            else
                _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].debug.error("Element named "+this.id+" has not jQuery element to render in italic");
            resolve();
        },
        left: function(resolve){             /* $AC$ all PElements.left() Aligns the element with the left edge of the printing area $AC$ */
            if (this.jQueryElement instanceof jQuery){
                // this.jQueryElement.css("text-align","left");
                this.jQueryAlignment = "left";
                if (this.jQueryElement.parent().length)    // If element already printed, update
                    this.jQueryContainer.css("align-self", "left");
                    // this.jQueryContainer.css("text-align", "left");
            }
            else
                _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].debug.error("Element named "+this.id+" has not jQuery element to render as aligned to the left");
            resolve();
        },
        log: function(resolve, value){
            this.log = value===undefined||value;
            resolve();
        },
        once: function(resolve){
            if (this.hasValidated){
                this.disabled = true;
                this.jQueryElement.attr("disabled", true);
            }
            else {
                let oldValidate = this.validate;
                this.validate = ()=>{
                    oldValidate.apply(this);
                    this.disabled = true;
                    this.jQueryElement.attr("disabled", true);
                }
            }
            resolve();
        },
        right: function(resolve){             /* $AC$ all PElements.right() Aligns the element with the right edge of the printing area $AC$ */
            if (this.jQueryElement instanceof jQuery){
                // this.jQueryElement.css("text-align","right");
                this.jQueryAlignment = "right";
                if (this.jQueryElement.parent().length)    // If element already printed, update
                    this.jQueryContainer.css("align-self","right");
                    // this.jQueryContainer.css("text-align", "right");
            }
            else
                _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].debug.error("Element named "+this.id+" has not jQuery element to render as aligned to the right");
            resolve();
        },
        size: function(resolve, width, height){  /* $AC$ all PElements.size(width,height) Gives the element a specific width and/or height $AC$ */
            if (this.jQueryElement instanceof jQuery){
                this.jQueryElement.width(width);
                this.jQueryElement.height(height);
                if (this.jQueryContainer instanceof jQuery){
                    if (typeof width == "string" && width.match(/%$/))
                        this.jQueryContainer.width("100%");
                    if (typeof height == "string" && height.match(/%$/))
                        this.jQueryContainer.height("100%");
                }
            }
            else
                _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].debug.error("Element named "+this.id+" has not jQuery element to render as aligned to the right");
            resolve();
        },
        visible: function(resolve){             /* $AC$ all PElements.visible() Makes the element visible (again) $AC$ */
            if (this.hasOwnProperty("jQueryElement") && this.jQueryElement instanceof jQuery)
                this.jQueryElement.css({visibility: "visible"/*, "pointer-events": "auto"*/});
            else
                _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].debug.error("No jQuery instance to make visible for element "+this.id);
            resolve();
        }
    }
    ,
    test: {
        printed: function(){             /* $AC$ all PElements.test.printed() Checks that the element is printed on the page $AC$ */
            if (this.hasOwnProperty("jQueryElement") && this.jQueryElement instanceof jQuery)
                return this.jQueryElement.printed()
            return false;
        }
    }
};

// Make it available for developers
_engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].elements.standardCommands = standardCommands;


// Special command to navigate the sequence
_controller_js__WEBPACK_IMPORTED_MODULE_1__["PennController"].Elements.jump = function(predicate){ /* $AC$ Special Command.jump(label) Jumps to the first found label in the sequence $AC$ */
    if (typeof(predicate)=="string")            // Convert any string into a predicate (see IBEX's shuffle.js)
        (p=>predicate = s=>s==p)(predicate);
    let trialIndex = -1;
    const gotRO = r=>_engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].runningOrder&&r() || setTimeout(()=>gotRO(r),50);
    new Promise(r=>gotRO(r)).then(()=>{
        console.log("ro", _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].runningOrder);
        for (let i = 0; i < _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].runningOrder.original.length; i++){
            const label = _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].runningOrder.original[i][0].type;
            if (predicate(label)) {
                trialIndex = i;
                break;
            }
        }
        if (trialIndex<0)
            _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].debug.error(`No trial has a label matching jump's predicate (${predicate})`);
    });
    const promisefn = ()=>new Promise(resolve=>{
        if (trialIndex<0) return resolve();
        _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].runningOrder.active.splice(
            _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].runningOrder.runningIndex+1,
            _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].runningOrder.active.length,
            ..._engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].runningOrder.original.slice(trialIndex,_engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].runningOrder.original.length)
        );
        resolve();
    });
    return {
        _promises: [promisefn]
        ,
        _runPromises: () => Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__["lazyPromiseFromArrayOfLazyPromises"])([promisefn])()
    }
} // Exit full screen


// Special command to go fullscreen
_controller_js__WEBPACK_IMPORTED_MODULE_1__["PennController"].Elements.fullscreen = function(){       /* $AC$ Special Command.fullscreen() Makes the page fullscreen $AC$ */
    const promisefn = ()=>new Promise(resolve=>{
        if (document.documentElement.requestFullscreen)
            return document.documentElement.requestFullscreen().then( resolve ).catch( resolve );
        else if (document.documentElement.mozRequestFullScreen) /* Firefox */
            document.documentElement.mozRequestFullScreen();
        else if (document.documentElement.webkitRequestFullscreen) /* Chrome, Safari and Opera */
            document.documentElement.webkitRequestFullscreen();
        else if (document.documentElement.msRequestFullscreen) /* IE/Edge */
            document.documentElement.msRequestFullscreen();
        resolve();
    });
    return {
        _promises: [promisefn]
        ,
        _runPromises: () => Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__["lazyPromiseFromArrayOfLazyPromises"])([promisefn])()
    }
}; // Exit full screen
_controller_js__WEBPACK_IMPORTED_MODULE_1__["PennController"].Elements.exitFullscreen = function(){       /* $AC$ Special Command.exitFullscreen() Goes back to non-fullscreen $AC$ */
    const promisefn = ()=>new Promise(resolve => {
        if (document.exitFullscreen)
            return document.exitFullscreen().then( resolve ).catch( resolve );
        else if (document.mozCancelFullScreen) /* Firefox */
            document.mozCancelFullScreen();
        else if (document.webkitExitFullscreen) /* Chrome, Safari and Opera */
            document.webkitExitFullscreen();
        else if (document.msExitFullscreen) /* IE/Edge */
            document.msExitFullscreen();
        resolve();
    });
    return {
        _promises: [promisefn]
        ,
        _runPromises: () => Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__["lazyPromiseFromArrayOfLazyPromises"])([promisefn])()
    }
};

// Special commands (to replace with Trial?)
_controller_js__WEBPACK_IMPORTED_MODULE_1__["PennController"].Elements.clear = function(){     /* $AC$ Special Command.clear() Removes all the PElements currently on the page $AC$ */
    const promisefn = ()=>new Promise(async resolve => {
        let controller = _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].controllers.list[_engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].controllers.running.id];
        for (let t in controller.elements){
            for (let e in controller.elements[t]){
                let element = controller.elements[t][e];
                let commands = _controller_js__WEBPACK_IMPORTED_MODULE_1__["PennController"].Elements["get"+element.type](element.id);
                await commands.remove()._runPromises(); // Call element's own remove
            }
        }
        resolve();
    });
    return {
        _promises: [promisefn]
        ,
        _runPromises: () => Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__["lazyPromiseFromArrayOfLazyPromises"])([promisefn])()
    };;
};

_controller_js__WEBPACK_IMPORTED_MODULE_1__["PennController"].Elements.end = function(){     /* $AC$ Special Command.end() Ends the trial immediately $AC$ */
    const promisefn = ()=>new Promise(async resolve => {
        await _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].controllers.running.endTrial();
        resolve();
    });
    return {
        _promises: [promisefn]
        ,
        _runPromises: () => Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__["lazyPromiseFromArrayOfLazyPromises"])([promisefn])()
    };
};


// Type is a class-like function, taking PennEngine as its parameter and returning a template for PennElementCommands
//
// Usage:
//      PennController._AddElementType("ElementTypeName", function(){
//          /* this refers to the template for PennElementCommands */
//          this.immediate = function(id, param){ /* this refers to the element */ /* run at the start of the experiment */ },
//          this.uponCreation = function(resolve){ /* this refers to the element */ /* Promise, run upon newElementType(id, param) */ },
//          this.end = function(){ /* this refers to the element */ /* run at the end of a trial (e.g. saves/resets) */ }
//          this.actions = {action1: function(){ /* this refers to the element */ }, action2: function},
//          this.settings = {settings1: function(){ /* this refers to the element */ }, settings2: function},
//          this.test = {test1: function(){ /* this refers to the element */ return true|false; }}
//      })
//
let elementTypes = {};
_controller_js__WEBPACK_IMPORTED_MODULE_1__["PennController"]._AddElementType = function(name, Type) {
    if (elementTypes.hasOwnProperty(name))
        _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].debug.error("Element type "+name+" defined more than once");
    
    function getType(T){                            // Makes sure type is set when calling new/get/default
        let type = new T(_engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"]);               // type defines a template type of PennElement (see, e.g., elements/text.js)

        if (!type.hasOwnProperty("actions"))
            type.actions = {};
        if (!type.hasOwnProperty("settings"))
            type.settings = {};
        if (!type.hasOwnProperty("test"))
            type.test = {};

        for (let action in standardCommands.actions){   // Feeding default actions (if not overridden by Type)
            if (!type.actions.hasOwnProperty(action))
                type.actions[action] = standardCommands.actions[action];
        }
        for (let setting in standardCommands.settings){ // Feeding default settings (if not overridden by Type)
            if (!type.settings.hasOwnProperty(setting))
                type.settings[setting] = standardCommands.settings[setting];
        }
        for (let test in standardCommands.test){        // Feeding default tests (if not overridden by Type)
            if (!type.test.hasOwnProperty(test))
                type.test[test] = standardCommands.test[test];
        }

        for (let command in type.settings){             // Making .settings commands available as main actions
            if (!type.actions.hasOwnProperty(command))
                type.actions[command] = type.settings[command];
        }

        let uponCreation = type.uponCreation;           // Set a default uponCreation
        type.uponCreation = function(resolve){
            this.jQueryAfter = [];                      // Clear any element after this one
            this.jQueryBefore = [];                     // Clear any element before this one
            if (this.jQueryElement && this.jQueryElement instanceof jQuery)
                this.jQueryElement.removeAttr("style"); // Clear any style that could have been applied before
            if (this.jQuerycontainer && this.jQueryContainer instanceof jQuery)
                this.jQuerycontainer = $("<div>");
            if (uponCreation instanceof Function)
                uponCreation.apply(this, [resolve]);    // Call uponCreation for this type
            else
                resolve();
        };

        let end = type.end;                             // Set a default end
        type.end = async function(){
            //if (this.jQueryElement instanceof jQuery && this.jQueryElement.parent().length)
            if (this.jQueryElement instanceof jQuery)
                this.jQueryElement.remove();            // Remove jQueryElement from DOM
            for (let b in this.jQueryBefore)            // Remove all preceding elements from DOM
                if (this.jQueryBefore[b]._element && this.jQueryBefore[b]._element.jQueryElement instanceof jQuery)
                this.jQueryBefore[b]._element.jQueryElement.remove();
            for (let a in this.jQueryAfter)            // Remove all following elements from DOM
                if (this.jQueryAfter[a]._element && this.jQueryAfter[a]._element.jQueryElement instanceof jQuery)
                this.jQueryAfter[a]._element.jQueryElement.remove();
            if (this.jQueryContainer instanceof jQuery)
                this.jQueryContainer.remove();
            if (end instanceof Function)
                await end.apply(this);                        // Call end for this type
        };

        type.name = name;
        return type;
    }
    
    elementTypes[name] = getType(Type);

    // 'new'
    _controller_js__WEBPACK_IMPORTED_MODULE_1__["PennController"].Elements["new"+name] = function (...rest) {
        // for (let t in elementTypes)                             // Check that all types have been defined
        //     if (elementTypes[t] instanceof Function)
        //         elementTypes[t] = getType(elementTypes[t]);
        // evaluateArguments.call(null, rest);
        let type = elementTypes[name];
        let controller = _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].controllers.underConstruction; // Controller under construction
        if (_engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].controllers.running)                     // Or running, if in running phase
            controller = _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].controllers.list[_engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].controllers.running.id];
        let id = "unnamed-"+name;                               // The element's ID (to be overwritten)
        if (rest.length<1)                                      // No argument provided
            rest = [id];                                        // Try to create an ID anyway
            // PennEngine.debug.error("No argument provided for a "+name+" element");
        else if (typeof(rest[0])=="string"&&rest[0].length>0)   // If an ID was provided, use it
            id = rest[0];                                       
        let element = new PennElement(id, name, type);          // Creation of the element itself
        evaluateArguments.call(element, rest);
        if (type.hasOwnProperty("immediate") && type.immediate instanceof Function)
            type.immediate.apply(element, rest);                // Immediate initiation of the element
        // If id already exists, add a number
        let oldId = element.id;
        for (let n = 2; controller.elements.hasOwnProperty(name) && controller.elements[name].hasOwnProperty(element.id); n++)
            element.id = oldId + String(n);
        if (oldId != element.id){
            _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].debug.warning("Found an existing "+element.type+" element named &ldquo;"+oldId+"&rdquo;--using name &ldquo;"+element.id+"&rdquo; instead for new element");
            controller.ambiguousElementNames.push(oldId);
        }
        controller._addElement(element);                        // Adding the element to the controller's dictionary
        let commands = new PennElementCommands(element, type);  // An instance of PennElementCommands bound to the element
        commands = commands._proxy;
        commands._promises.push( ()=>new Promise(r=>{element.printTime=0; element.log=false; r();}) ); // Init universal properties
        commands._promises.push( ()=>new Promise(r=>type.uponCreation.apply(element, [r])) ); // First command (lazy Promise)
        if (controller.defaultCommands.hasOwnProperty(name))// If current controller has default commands for element's type
            for (let p in controller.defaultCommands[name]){// add them to the list of commands (=lazy promises)
                let defaultCommand = controller.defaultCommands[name][p];
                commands._promises.push(()=>new Promise(        // defaultCommand = [commandName, [commandArguments], "header"]
                    r=>{
                        if (defaultCommand[2] == "header" && _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].controllers.running.options.runHeader == false)
                            r();                                // Immediate resolution if from header but not run for this controller
                        else
                            defaultCommand[0].apply(element, [r, ...defaultCommand[1]]);
                    }
                ));
            }
        return commands;                                        // Return the command API
    };
    // 'get'
    _controller_js__WEBPACK_IMPORTED_MODULE_1__["PennController"].Elements["get"+name] = function (id) {
        let controller = _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].controllers.underConstruction; // Controller under construction
        if (_engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].controllers.running)                     // Or running, if in running phase
            controller = _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].controllers.list[_engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].controllers.running.id];
        let type = elementTypes[name];
        if (controller.ambiguousElementNames.indexOf(id)>=0)
            _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].debug.error("Ambiguous use of get"+name+"(&ldquo;"+id+"&rdquo;):\
                                    more than one elements were created with that name--\
                                    get"+name+"(&ldquo;"+id+"&rdquo;) will refer to the first one");
        return (new PennElementCommands(id, type))._proxy;      // Return the command API
    };
    // 'default'        Use a getter method to run setType when called
    Object.defineProperty(_controller_js__WEBPACK_IMPORTED_MODULE_1__["PennController"].Elements, "default"+name, {
        get: function(){
            // for (let t in elementTypes)                         // Check that all types have been defined
            //     if (elementTypes[t] instanceof Function)
            //         elementTypes[t] = getType(elementTypes[t]);
            let type = elementTypes[name];
            let defaultInstance = {};
            let checkDefaultsExist = function(){    // function ensuring existence of default commands for element type for current controller
                if (!_engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].controllers.underConstruction.hasOwnProperty("defaultCommands"))
                    _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].controllers.underConstruction.defaultCommands = {};
                if (!_engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].controllers.underConstruction.defaultCommands.hasOwnProperty(name))
                    _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].controllers.underConstruction.defaultCommands[name] = [];
            };
                // actions
            for (let p in type.actions)
                defaultInstance[p] = function(...rest){
                    checkDefaultsExist();
                    _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].controllers.underConstruction.defaultCommands[name].push([type.actions[p], rest]);
                    return defaultInstance;
                };
                // settings
            defaultInstance.settings = {};
            for (let p in type.settings)
                defaultInstance.settings[p] = function(...rest){
                    checkDefaultsExist();
                    _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].controllers.underConstruction.defaultCommands[name].push([type.settings[p], rest]);
                    return defaultInstance;
                };
            return defaultInstance;
        }
    });
};

_controller_js__WEBPACK_IMPORTED_MODULE_1__["PennController"]._AddStandardCommands = function(commandsConstructor){
    let commands = new commandsConstructor(_engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"]);
    for (let type in commands){
        if (type.match(/^(actions|settings|test)$/)) {
            for (let name in commands[type]){
                let command = commands[type][name];
                if (standardCommands[type].hasOwnProperty(name))
                    _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].debug.error("There already is a standard "+type+" command named "+name);
                else if (!(command instanceof Function))
                    _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].debug.error("Standard "+type+" command "+name+" should be a function");
                else{
                    standardCommands[type][name] = command;
                    for (let t in elementTypes){
                        if (!elementTypes[t][type].hasOwnProperty(name))
                            elementTypes[t][type][name] = command;
                        if (type == "settings" && !elementTypes[t].actions.hasOwnProperty(name))
                            elementTypes[t].actions[name] = command;
                    }
                }
            }
        }
        else
            _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].debug.error("Standard command type unknown", type);
    }
};


/***/ }),

/***/ "./src/engine.js":
/*!***********************!*\
  !*** ./src/engine.js ***!
  \***********************/
/*! exports provided: PennEngine */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PennEngine", function() { return PennEngine; });
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils */ "./src/utils.js");


let preRunningFunctions = [];       // Functions to be run before Ibex processes window.items
let functionsDictionary = {
    keypress: []
};

const resources = {};

// Resources can be created from PennEngine.resources.fetch or when uploading ZIP files (see zip.js)
class Resource {
    constructor(name, creator, useURLs=true){
        if (resources[name]===undefined) resources[name] = [];
        resources[name].push(this);
        const controller = PennEngine.controllers.underConstruction;
        controller.resources.push(this);      // Link resource to controller
        PennEngine.resources.list.push(this);
        // if (resources[name]===undefined) resources[name] = [];
        // resources[name].push(this);
        this.name = name;           // Identifies the resource when fetching
        this.value = name;          // Meant to be used in 'create'
        this.uris = [name];         // List of URIs from which to generate the resource
        this.creator = creator;     // Function called in 'create'
        this.object = null;         // Meant to be defined in 'resolve'
        this.status = "void";       // Can be 'void' (not created), 'pending' (still prelaoding) or 'ready' (resolved)
        this.useURLs = useURLs;
        this.created_at = 0;
        this.controller = controller;
        this.resolveCallback = [];
    }
    addURI(uri){
        if (this.uris.indexOf(uri)>=0) return;
        this.uris.push(uri);
        if (this.status=="pending")
            this.creator.call(this, uri, object=>this.resolve(object));
    }
    callCreatorOnAllURIs(){
        this.uris.forEach(uri=>{
            this.creator.call(this, uri, object=>this.resolve(object));
        });
    }
    create() {
        if (this.status!="void") return;
        this.created_at = Date.now();
        if (this.useURLs)
            PennEngine.URLs.forEach(url=>{
                if (!url.endsWith('/')) url += '/';
                this.addURI(url+this.name)
            });
        this.status = "pending";
        this.callCreatorOnAllURIs();
        // Homonyms share the same name and *are not in the same trial*
        // const homonyms = resources[this.name].filter(
        //     r=> r!=this && r.controller!=this.controller && r.controller.id!="Header" && r.controller.id!="Footer"
        // );
        // If no other resource with this name, just call creator already
        // if (homonyms.length===0)
        //     this.callCreatorOnAllURIs();
        // else{
        //     const homonymsByStatus = {void:[],pending:[],ready:[]};
        //     homonyms.forEach(r=>homonymsByStatus[r.status].push(r));
        //     if (homonymsByStatus.ready.length>0){
        //         // If there is a homonym that's ready, resolve this and all pending resources
        //         const object = homonymsByStatus.ready[0].object;
        //         homonymsByStatus.void.forEach(r=>r.resolve(object));
        //         homonymsByStatus.pending.forEach(r=>r.resolve(object));
        //         this.resolve(object);
        //     }
        //     else if (homonymsByStatus.pending.length>0)
        //         // If there are pending homonyms, resolve this resource with the first resolving homonym
        //         homonymsByStatus.pending.forEach(r=>r.resolveCallback.push( object => this.resolve(object) ));
        //     else{
        //         // If all homonyms are void, bypass their creation and call creator on this resource
        //         homonymsByStatus.void.forEach( r=> {
        //             r.status = 'pending';
        //             r.created_at = Date.now();
        //             this.resolveCallback.push( object => r.resolve(object) );
        //         });
        //         this.callCreatorOnAllURIs();
        //     }
        // }   
    }
    resolve(object) {
        if (this.status==='ready') return;
        this.object = object;
        this.status = "ready";
        PennEngine.debug.log("<div style='color: purple;'>Successfully preloaded resource "+this.name+"</div>");
        this.resolveCallback.forEach(cb => cb instanceof Function && cb.call(this, object) );
    }
}

// Basically an API for designers
var PennEngine = {
    resources: {
        new: (name, creator, useURLs=true)=>{
            let resource;
            if (resources[name]===undefined)
                resource = new Resource(name, creator, useURLs);
            else{
                resource = resources[name][0];
                const controller = PennEngine.controllers.underConstruction;
                const header = PennEngine.controllers.header;
                const footer = PennEngine.controllers.footer;
                const need_new_resource = (
                    controller.resources.filter(r=>r.name==name).length>0 ||
                    (header&&controller.runHeader!==false&&header.resources.filter(r=>r.name==name).length>0) ||
                    (footer&&controller.runFooter!==false&&footer.resources.filter(r=>r.name==name).length>0)
                );
                if (need_new_resource || (!resource instanceof Resource))
                    resource = new Resource(name,creator,useURLs);
                    
            }
            return resource;
        },
        list: []                                   // List of resources (audios, images, videos, ...)
    }
    ,
    controllers: {
        list: [],
        running: null,
        underConstruction: null
    }
    ,
    elements: {
        list: [/*{nameEl1Ctrl1: {}, nameEl2Ctrl1: {}}, {nameEl1Ctrl2: {}, nameEl2Ctrl2: {}}*/]
    }
    ,
    events: {                                   // Event handlers
        keypress: f=> {                                // Keypress, triggered only when *new* keypress
            let toAdd = [ f , PennEngine.controllers.running||PennEngine.controllers.underConstruction ];
            functionsDictionary.keypress.push( toAdd );                 // Add the event function to the list
            if (PennEngine.controllers.running){
                let oldEndTrial = PennEngine.controllers._endTrial;
                PennEngine.controllers.running._endTrial = async function(){
                    await oldEndTrial.apply(PennEngine.controllers.running);
                    toAdd[0] = ()=>{};                                  // Clear event at end of trial
                };
            }
            else {
                let oldSequence = PennEngine.controllers.underConstruction.sequence;
                PennEngine.controllers.underConstruction.sequence = Object(_utils__WEBPACK_IMPORTED_MODULE_0__["lazyPromiseFromArrayOfLazyPromises"])(
                    [ oldSequence , r=>{ toAdd[0]=()=>{}; r(); } ]      // Clear event at end of trial
                );
            }
        }
    }
    ,
    URLs: []
    ,
    utils: {
        guidGenerator: _utils__WEBPACK_IMPORTED_MODULE_0__["guidGenerator"],
        parseCoordinates: _utils__WEBPACK_IMPORTED_MODULE_0__["parseCoordinates"],
        printAndRefreshUntil: _utils__WEBPACK_IMPORTED_MODULE_0__["printAndRefreshUntil"],
        levensthein: _utils__WEBPACK_IMPORTED_MODULE_0__["levensthein"],
        upload: _utils__WEBPACK_IMPORTED_MODULE_0__["upload"],
        overToScale: _utils__WEBPACK_IMPORTED_MODULE_0__["overToScale"]
    }
    ,
    tmpItems: []        //  PennController() adds {PennController: id}, PennController.Template adds {PennTemplate: [...]}
    ,
    tables: {}
    ,
    Prerun: function(func){
        preRunningFunctions.push(func);
    }
};


// Run functions before sequence of items is generated
// __SendResults__ is created right before the sequence gets generated from items
let old_ibex_controller_set_properties = window.ibex_controller_set_properties;
window.ibex_controller_set_properties = function (name, options) {

    old_ibex_controller_set_properties(name, options);

    if (name!="__SendResults__")                            // Make sure to run only upon SendResults' creation
        return;

    // Keypress events
    document.addEventListener('keydown', e=>{
        if (e.repeat)                                       // If this is a key holding, don't fire
            return;
        if (PennEngine.controllers.running)                 // Fire event: run functions
            for (let f = 0; f < functionsDictionary.keypress.length; f++)
                if ( PennEngine.controllers.running == functionsDictionary.keypress[f][1] ||
                     PennEngine.controllers.running.id == functionsDictionary.keypress[f][1]
                    )
                        functionsDictionary.keypress[f][0].apply(this, [e]);
    });

    // Pre-running functions
    for (let f in preRunningFunctions)
        if (preRunningFunctions[f] instanceof Function)
            preRunningFunctions[f].call();

}


const PARALLEL_RESOURCES = 4;
const TIMEOUT = 10*1000; // 10s

PennEngine.Prerun( async ()=> {
    const checkRunningOrder = r=>{
        if (PennEngine.runningOrder && PennEngine.runningOrder.active) r();
        else window.requestAnimationFrame(()=>checkRunningOrder(r));
    };
    await new Promise(checkRunningOrder);   // Wait until runningOrder is defined
    let remaining_resources = [];
    for (let i = 0; i < PennEngine.runningOrder.active.length; i++){
        const item = PennEngine.runningOrder.active[i];
        for (let n = 0; n < item.length; n++){
            const element = item[n];
            if (element.controller == "PennController")
                remaining_resources = [...remaining_resources, ...element.options.resources];
        }
    }
    let loading_resources = [];
    const loadResources = ()=>{
        loading_resources = loading_resources.filter(r=>
            r.status!="ready" && (r.created_at===0 || Date.now()-r.created_at > TIMEOUT)
        );
        if (remaining_resources.length>0 && loading_resources.length<PARALLEL_RESOURCES){
            let resource = remaining_resources.shift();
            while ((resource===undefined||resource.status=="ready")&&remaining_resources.length)
                resource = remaining_resources.shift();
            if (resource && resource.status!="ready") loading_resources.push(resource);
        }
        if (loading_resources.length==0) return;
        loading_resources.forEach(resource=>{
            if (!(resource instanceof Resource) || resource.status!="void") return;
            resource.create();                      // Resource is void: try to create it
        });
        window.requestAnimationFrame(loadResources);
    }
    loadResources();
});


/***/ }),

/***/ "./src/index_core.js":
/*!***************************!*\
  !*** ./src/index_core.js ***!
  \***************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ "./src/utils.js");
/* harmony import */ var _engine_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./engine.js */ "./src/engine.js");
/* harmony import */ var _debug_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./debug.js */ "./src/debug.js");
/* harmony import */ var _controller_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./controller.js */ "./src/controller.js");
/* harmony import */ var _elements_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./elements.js */ "./src/elements.js");
/* harmony import */ var _zip_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./zip.js */ "./src/zip.js");
/* harmony import */ var _tables_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./tables.js */ "./src/tables.js");
/* harmony import */ var _resetprefix_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./resetprefix.js */ "./src/resetprefix.js");
/* harmony import */ var _resetprefix_js__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(_resetprefix_js__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var _items_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./items.js */ "./src/items.js");
                    // bunch of utility functions
                   // defines PennEngine [local]
                    // the debug object
               // defines PennController and calls define_ibex_controller
                 // constructor for element types [fed with PennEngine]
                      // adds the PreloadZip global command [imports jszip and jszip-utils]
                   // defines Template    [imports jquery-csv]

              // defines ResetPrefix



/***/ }),

/***/ "./src/items.js":
/*!**********************!*\
  !*** ./src/items.js ***!
  \**********************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _engine_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./engine.js */ "./src/engine.js");
/* harmony import */ var _controller_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./controller.js */ "./src/controller.js");



// Process PennEngine.tmpItems immediately before Ibex processes window.items
//
//      example_data.js:
//          PennController( ... );
//          PennController( ... );
//          PennController.Template( . => PennController( ... ) );
//          PennController.Template( . => ["Message", {}, "PennController", PennController( ... )] );
//          var items = [ ["consent", "Form", {}] , ["send", "__SendResults__", {}] ];
//
//      produces:
//          PennEngine.tmpItems = [
//              PennController(),
//              PennController(),
//              {PennTemplate: [ a = PennController(), b = PennController() ]},
//              {PennTemplate: [ [label, "Message", {}, "PennController", c = PennController()] ]},
//              ["consent", "Form", {}],
//              ["send", "__SendResults__", {}]
//              a,
//              b,
//              c
//          ]
_engine_js__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].Prerun(()=>{
    
    let includedControllers = [];

    // Converts any PennController() into a [label, "PennController", controller] item (if not already included)
    function convertItem (item) {
        if (item instanceof _controller_js__WEBPACK_IMPORTED_MODULE_1__["Controller"])
            if (includedControllers.indexOf(item)<0 && item.addToItems)
                return [item.useLabel||"unlabeled", "PennController", item];
            else                                        // Return only if not already included (mind duplicates) and addToItems==true
                return null;                            // Null if already included
        return item;                                    // Non-PennController item: return as is
    }

    if (window.items instanceof Array)                  // PennController() pushes PennEngine.tmpItems even from within window.items
        for (let a = 0; a < window.items.length; a++)   // If in window.items, then PennController() was called within it
            if (window.items[a] instanceof Array && window.items[a].length>2)   // Sanity check
                for (let c = 2; c < window.items[a].length; c += 2)
                    includedControllers.push(window.items[a][c]); // Add every controller (even non-PennController) / parameter object

    let tmpItems = [];                                  // Local copy: pushed with every item in order 

    for (let i = 0; i < _engine_js__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].tmpItems.length; i++){ // Go through the array
        let item = _engine_js__WEBPACK_IMPORTED_MODULE_0__["PennEngine"].tmpItems[i];
        let itemsToAdd = [];                            // Yet another tmp array, probed to fill includedControllers

        if (item instanceof Object && item.hasOwnProperty("PennTemplate"))
            for (let t = 0; t < item.PennTemplate.length; t++)  // If template, add items from within
                itemsToAdd.push( convertItem(item.PennTemplate[t]) );
        else
            itemsToAdd.push( convertItem(item) );      // Add item after conversion (if need be)

        for (let a = 0; a < itemsToAdd.length; a++)    // Preventing addition of duplicates, just in case
            if (itemsToAdd[a] instanceof Array && itemsToAdd[a].length>2)   // Sanity check
                for (let c = 2; c < itemsToAdd[a].length; c += 2)
                    includedControllers.push(itemsToAdd[a][c]);

        tmpItems = tmpItems.concat(itemsToAdd);
    }

    if (window.items instanceof Array)
        for (let i = 0; i < window.items.length; i++)  // Add remaining items defined after PennController/PennTemplate's
            if (tmpItems.indexOf(window.items[i])<0)
                tmpItems.push(window.items[i]);

    // Replace global items variable (and filter 'null' controllers)
    window.items = tmpItems.filter(e=>(e instanceof Array && e.length > 2));

    if (!window.shuffleSequence)                            // Run in order defined if nothing specified
        window.conf_shuffleSequence = window.seq(window.anyType);

});

/***/ }),

/***/ "./src/resetprefix.js":
/*!****************************!*\
  !*** ./src/resetprefix.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports) {

let newPrefix = (p,o) => {
    let descriptors = Object.getOwnPropertyDescriptors(o);
    for (let d in descriptors){
        let descriptor = descriptors[d];
        if (descriptor.value instanceof Function)
            p[d] = descriptor.value;                   // new/get
        else if (descriptor.get instanceof Function)
            Object.defineProperty(p, d, descriptor);   // default
    }
};

// This allows the users to call the instruction methods as global functions
window.PennController.ResetPrefix = function(prefixName) { /* $AC$ global.ResetPrefix(prefix) Resets the prefix for the new* and get* commands; pass null to make them global $AC$ */
    if (typeof(prefixName)=="string"){
        if (window[prefixName])
            throw "ERROR: prefix string already used for another JS object";
        window[prefixName] = {};                // Create an object
        var prefix = window[prefixName];        // Point to the object
    }
    else
        var prefix = window;                    // If no (valid) prefix name, drop any prefix (object = window)
    newPrefix(prefix,window.PennController.Elements);
    newPrefix(prefix,window.PennController);
};


/***/ }),

/***/ "./src/tables.js":
/*!***********************!*\
  !*** ./src/tables.js ***!
  \***********************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var jquery_csv__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jquery-csv */ "./node_modules/jquery-csv/src/jquery.csv.js");
/* harmony import */ var jquery_csv__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jquery_csv__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _controller_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./controller.js */ "./src/controller.js");
/* harmony import */ var _engine_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./engine.js */ "./src/engine.js");
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils.js */ "./src/utils.js");





_engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].tables = {};         // Dictionary of named tables
var defaultTable = {};          // A dummy object representing the default table handler
let groupLists = [];            // An array index all the list of groups from the different tables along with which is running

// The TABLE class contains an 2x2 Array-Object and defines Item, Group/List and Label
class Table {
    constructor(table, id) {
        if (!(table instanceof Array) || table.length < 1 || !Object.keys(table[0]).length)
            return _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].debug.error("Invalid format for table when creating new table");
        this.id = id||"unnamed";
        this.table = table;
        for (let col in table[0]) {
            if (col.match(/^item$/i))
                this.item = col;
            if (col.match(/^(group|list)$/i))
                this.group = col;
            if (col.match(/^label$/i))
                this.label = col;
        }
    }
    setItem(col) {                                  // Obsolete since beta 0.4 (not relying on latin square)
        if (this.table[0].hasOwnProperty(col))
            this.item = col;
        else
            _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].debug.warning("Error when setting table's item column: no column found with the name "+col);
        return this;
    }
    setGroup(col) {
        if (this.table[0].hasOwnProperty(col))
            this.group = col;
        else
            _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].debug.warning("Error when setting table's group column: no column found with the name "+col);
        return this;
    }
    setLabel(col) {
        if (this.table[0].hasOwnProperty(col))
            this.label = col;
        else
            _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].debug.warning("Error when setting table's label column: no column found with the name "+col);
        return this;
    }
    filter(...args) {     /* $AC$ GetTable().filter(function|[column,value]) Subsets the table to the rows that match the specified criterion $AC$ */
        if (args.length == 2 && typeof(args[0]) == "string" && (typeof(args[1]) == "string" || args[1] instanceof RegExp)){
            if (this.table[0].hasOwnProperty(args[0])){
                let match = args[1];
                if (typeof(match)=="string")
                    match = new RegExp("^"+match+"$");
                let returnTable = [];
                for (let row = 0; row < this.table.length; row++){
                    if (this.table[row][args[0]].match(match))
                        returnTable.push(this.table[row]);
                }
                if (!returnTable.length)
                    _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].debug.error("Empty table with filter:", args[0], args[1]);
                returnTable = new Table(returnTable, this.id);
                if (this.group)
                    returnTable.setGroup(this.group);
                if (this.label)
                    returnTable.setLabel(this.label);
                return returnTable;
            }
            else
                return _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].debug.error("No column named \u2018"+args[0]+"\u2019 found in the table for filtering");
        }
        else if (args.length && args[0] instanceof Function){
            let returnTable = [];
            for (let row = 0; row < this.table.length; row++){
                if (args[0].call(this, this.table[row]))
                    returnTable.push(this.table[row]);
            }
            if (!returnTable.length)
                _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].debug.error("Empty table after filter:", args[0]);
            return (new Table(returnTable,this.id)).setGroup(this.group).setLabel(this.label);
        }
    }
}

class TableHandler {
    constructor(name){
        this.name = name;
        this.actions = [];
    }
    setItem(col) {                                  // Obsolete since beta 0.4 (not relying on latin square)
        this.actions.push(["setItem", col]);
        return this;
    }
    setGroup(col) {
        this.actions.push(["setGroup", col]);
        return this;
    }
    setLabel(col) {
        this.actions.push(["setLabel", col]);
        return this;
    }
    filter(...args) {                               // Return a new handler so as not to contaminate original table
        let handler = new TableHandler(this.name);
        for (let a = 0; a<this.actions.length; a++)
            handler.actions.push(this.actions[a]);
        handler.actions.push(["filter", args])
        return handler;
    }
    setItemColumn(col){ 
        return this.setItem(col); 
    }
    setGroupColumn(col){ 
        return this.setGroup(col); 
    }
    setLabelColumn(col){ 
        return this.setLabel(col); 
    }
}


// Checks that the string 'table' is of the right format, and return a csv-formatted object
function _checkTable(table){
    if (table.charCodeAt(0) === 0xFEFF)
        table = table.slice(1);
    if (!table.match(/[\n\r]$/))
        table = table + '\n';                               // Last row ignored if doesn't end with linebreak
    let commaTable = [], tabTable = [];
    try {
        let tmpTable = $.csv.toArrays(table, {separator: ","});
        let columns = tmpTable[0];
        for (let r = 1; r<tmpTable.length; r++){
            let obj = {};
            columns.map((v,i)=>obj[v] = tmpTable[r][i]);
            commaTable.push(obj);
        }
    }
    catch(err){
        commaTable.push({});
    }
    try {
        let tmpTable = $.csv.toArrays(table, {separator: "\t"});
        let columns = tmpTable[0];
        for (let r = 1; r<tmpTable.length; r++){
            let obj = {};
            columns.map((v,i)=>obj[v] = tmpTable[r][i]);
            tabTable.push(obj);
        }
    }
    catch(err){
        tabTable.push({});
    }
    if (Object.keys(commaTable[0]).length > Object.keys(tabTable[0]).length)
        return commaTable;                              // Return comma-based table if more columns
    else if (Object.keys(tabTable[0]).length)           // Check that there is at least one column
        return tabTable;
    return _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].debug.error("Format of table is invalid");
}


// Injects ajax requests to CSV files inside ajax request to CHUNKS_INCLUDES
let ajaxTables = [];
let oldAjax = window["$"].ajax;
window["$"].ajax = function(...args){
    if (args[0] && args[0].url && args[0].url.match(/allchunks=1$/)){
        let oldSuccess = args[0].success;
        args[0].success = d=>{
            if (ajaxTables.length==0)
                return oldSuccess(d);
            let ajaxRequests = [], success;
            for (let i = ajaxTables.length-1; i >= 0; i--){
                if (i == ajaxTables.length-1)
                    success = data => { _controller_js__WEBPACK_IMPORTED_MODULE_1__["PennController"].AddTable(ajaxTables[i].name, data); oldSuccess(d); };
                else
                    success = data => { _controller_js__WEBPACK_IMPORTED_MODULE_1__["PennController"].AddTable(ajaxTables[i].name, data); ajaxRequests[0](); };
                ajaxRequests.push( ()=>$.ajax({
                    url: ajaxTables[i].table,
                    cache: false,
                    dataType: 'text',
                    success: success
                }) );
            }
            ajaxRequests[0]();
        }
    }
    return oldAjax(...args);
}

// Adds a table to the dictionary
_controller_js__WEBPACK_IMPORTED_MODULE_1__["PennController"].AddTable = function(name, table) {     /* $AC$ global.AddTable(name, table) Manually adds a table to the project $AC$ */
    if (typeof(name)!="string"||typeof(table)!="string")
        return _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].debug.error("Table "+name+" not added: tables and table names should be strings");
    if (_engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].tables.hasOwnProperty(name))
        _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].debug.warning("A table named "+name+" already exists; overriding it");
    if (table.match(/^http/)) {
        ajaxTables.push({name: name, table: table});
        return;
    }
    table = _checkTable(table);
    if (table)
        table = new Table(table, name);
    else
        return _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].debug.error("Table "+name+" does not have the right format.");
    _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].tables[name] = table;
}

// Returns a table from the dictionary
_controller_js__WEBPACK_IMPORTED_MODULE_1__["PennController"].GetTable = function(name) {     /* $AC$ global.GetTable(filename) Refers to a table so you can then filter it $AC$ */
    return new TableHandler(name);
};



let asyncFeedItems = [];                        // All Template functions are executed after setup

// The main function
// PennController.Template("table.csv",         // Optional, or reference to a Table object
//     (row) => PennController(                 // Or () => ["Message", {...}, "PennController", PennController(...)]
//         p(row.text)
//         ,
//         p(row.image)
//         ,
//         p.key("FJ")
//     )    
_controller_js__WEBPACK_IMPORTED_MODULE_1__["PennController"].Template = function (tableName, func) {       /* $AC$ global.Template(table,penncontroller) Generates trials from a table $AC$ */
                                // FeedItems deprecated since 1.0
    if (window.items)
        for (let i in window.items)
            if (_engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].tmpItems.indexOf(window.items[i])<0)
                _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].tmpItems.push(window.items[i]);
    let templateItems = {PennTemplate: []};
    _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].tmpItems.push(templateItems);
    
    asyncFeedItems.push(function(){                                 // The code below will be executed after setup        
        let tmpItemsLength = _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].tmpItems.length;            // Any PennController() in template pushes indesirably
        let table;
        if (tableName instanceof Function) {                        // No table name specified, try to automatically detect
            func = tableName;
            let tableNames = Object.keys(_engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].tables);
            if (tableNames.length && _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].tables[tableNames[0]] instanceof Table)
                table = _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].tables[tableNames[0]];
            else
                return _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].debug.error("No valid table detected");
        }
        else if (typeof(tableName)=="string") {                     // Table name was specified
            if (_engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].tables.hasOwnProperty(tableName)) {                 // Check that it has been added
                if (_engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].tables[tableName] instanceof Table)
                    table = _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].tables[tableName];
                else
                    return _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].debug.error("Table "+tableName+" does not have the right format.");
            }
            else {                                                  // If not added, return an error
                let tableList = Object.keys(_engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].tables);
                let add = "";
                for (let i = 0; i < tableList.length; i++){
                    if ((Object(_utils_js__WEBPACK_IMPORTED_MODULE_3__["levensthein"])(tableName,tableList[i]) / tableList[i].length) < 0.5)
                        add = " Did you mean to type &lsquo;<strong>"+tableList[i]+"</strong>&rsquo;?";
                }
                return _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].debug.error("No table found with name "+tableName+"."+add);
            }
        }
        else if (tableName instanceof TableHandler){                // TableHandler: retrieve Table instance
            if (Object.keys(_engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].tables).length<1)
                return _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].debug.error("No table was defined");
            else {
                if (tableName.name == defaultTable)                 // Default: take first table
                    table = _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].tables[Object.keys(_engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].tables)[0]];
                else if (tableName.name && _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].tables.hasOwnProperty(tableName.name))
                    table = _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].tables[tableName.name];                 // Take table with corresponding name
                else {
                    let tableList = Object.keys(_engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].tables);
                    let add = "";
                    for (let i = 0; i < tableList.length; i++){
                        if ((Object(_utils_js__WEBPACK_IMPORTED_MODULE_3__["levensthein"])(tableName.name,tableList[i]) / tableList[i].length) < 0.5)
                            add = " Did you mean to type &lsquo;</strong>"+tableList[i]+"</strong>&rsquo;?";
                    }
                    return _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].debug.error("No table named "+tableName.name+" was found."+add);
                }
                for (let a = 0; a < tableName.actions.length; a++){
                    let arg = tableName.actions[a][1];
                    switch (tableName.actions[a][0]){
                        case "setItem":
                        table.setItem(arg);
                        break;
                        case "setLabel":
                        table.setLabel(arg);
                        break;
                        case "setGroup":
                        table.setGroup(arg);
                        break;
                        case "filter":
                        table = table.filter(...arg);
                        break;
                    }
                }
            }
        }
        else
            return _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].debug.error("Bad format for Template's first argument (should be a PennController table, table name or function from rows to Ibex elements)");

        if (!(func instanceof Function))
            return _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].debug.error("The function passed to PennController.Template is ill-defined");

        let groups = [];                                            // The different groups listed in the table
        let runningGroup;                                           // Which group will be running now
        if (table.group){
            for (let row = 0; row < table.table.length; row++)
                if (groups.indexOf(table.table[row][table.group])<0)
                    groups.push(table.table[row][table.group]);
            groups.sort();                                              // Sort the groups

            groupLists.map(g=> {                                        // Check in previous tables
                let overlap = groups.filter((v,i)=>v==g.groups[i]);     // Keep the values in both tables' groups
                if (groups.indexOf(g.runningGroup)>-1 && overlap.length==g.groups.length && overlap.length==groups.length)
                    runningGroup = g.runningGroup;                      // If the groups are the same, use the same runningGroup
            });
            if (runningGroup===undefined){
                let counter = window.__counter_value_from_server__;     // Retrieve counter value from server
                if (typeof(window.counterOverride)=="number")
                    counter = counterOverride;                          // If user defined custom counter value
                runningGroup = groups[counter % groups.length];         // Find out the group currently running
            }
            groupLists.push({                                           // Add the current groups list
                runningGroup: runningGroup,
                groups: groups
            });
        }

        let itemsToAdd = [];
        for (let row = 0; row < table.table.length; row++) {        // Going through the table
            if (table.group){                                       // GROUP DESIGN
                let rowGroup = table.table[row][table.group];       // The group of this row
                if (rowGroup != runningGroup)
                    continue;                                       // Ignore this row if not the right group
            }
            let label = undefined;                                  // The label
            let line = new Proxy(table.table[row], {                // Creating a proxy to catch column reference errors
                get: (obj, prop) => {
                    if (prop in table.table[row])
                        return obj[prop];
                    else{
                        let columns = Object.keys(table.table[row]);
                        let add = "";
                        for (let i = 0; i < columns.length; i++){
                            if ((Object(_utils_js__WEBPACK_IMPORTED_MODULE_3__["levensthein"])(prop,columns[i]) / columns[i].length) < 0.5)
                                add = " Did you mean to type &lsquo;<strong>"+columns[i]+"</strong>&rsquo;?";
                        }
                        _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].debug.error("No column named &lsquo;"+prop+"&rsquo; found in table "+table.id+"."+add);
                    }
                    return "";
                }
            });
            let content;
            try {
                content = func.call(null, line);                   // Create each item's content by calling func on each row
            }
            catch(err){
                window.onerror(err.name+": "+err.message, "include=data", "inside PennController.Template");
            }
            //let content = func(line);                             // Create each item's content by calling func on each row
            if (!(content instanceof Array)){                       // The PennController function returns an object (must be PennController)
                label = content.useLabel;                           // Use the (Penn)Controller's label
                content.addToItems = false;                         // Adding it right here, right now
                content = ["PennController", content];              // Pass it along with "PennController"
            }
            else if (content.length%2 && typeof(content[0])=="string"){
                label = content[0];                                 // If content is an odd array, its first member is the label
                content.splice(0,1);                                // Remove the label from content
            }
            if (!label){
                if (table.label && table.table[row].hasOwnProperty(table.label))
                    label = table.table[row][table.label];            // Use the label column if defined
                else if (table.item && table.table[row].hasOwnProperty(table.item))
                    label = "Item-"+table.table[row][table.item];     // Use the item column otherwise, if defined
                else
                    label = "Item-"+row;
            }
            let item = [label];
            for (let c in content){
                if (content[c] instanceof Object)                   // Add pointers to the table to any controller
                    content[c]._PennController = {table: table, row: row};
                item.push(content[c]);                              // Add the elements
            }
            
            itemsToAdd.push(item);
        }

        templateItems.PennTemplate = itemsToAdd;

        while (_engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].tmpItems.length>tmpItemsLength)          // Any PennController() in template pushes indesirably
            _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].tmpItems.pop();                             // PennTemplate contains items & will add them to window.items

    });

    if (!window.items)
        window.items = [];                                      // Create items so it can be fed later

    // Handle inappropriate calls
    return {
        log: ()=>_engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].debug.error("Tried to call <tt>.log</tt> command on <tt>Template()</tt>; <tt>.log</tt> commands should be called on <tt>newTrial()</tt>"),
        label: ()=>_engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].debug.error("Tried to call <tt>.label</tt> command on <tt>Template()</tt>; <tt>.label</tt> commands should be called on <tt>newTrial()</tt>"),
        setOption: ()=>_engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].debug.error("Tried to call <tt>.setOption</tt> command on <tt>Template()</tt>; <tt>.setOption</tt> commands should be called on <tt>newTrial()</tt>"),
        noHeader: ()=>_engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].debug.error("Tried to call <tt>.noHeader</tt> command on <tt>Template()</tt>; <tt>.noHeader</tt> commands should be called on <tt>newTrial()</tt>"),
        noFooter: ()=>_engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].debug.error("Tried to call <tt>.noFooter</tt> command on <tt>Template()</tt>; <tt>.noFooter</tt> commands should be called on <tt>newTrial()</tt>"),
        noTrialLog: ()=>_engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].debug.error("Tried to call <tt>.noTrialLog</tt> command on <tt>Template()</tt>; <tt>.noTrialLog</tt> commands should be called on <tt>newTrial()</tt>")
    };
};
_controller_js__WEBPACK_IMPORTED_MODULE_1__["PennController"].FeedItems = (tableName, func) => _controller_js__WEBPACK_IMPORTED_MODULE_1__["PennController"].Template(tableName, func);

let loadingMessageElement;
$(document).ready(function(){
    loadingMessageElement = document.createElement("P");
    loadingMessageElement.style["text-align"] = "center";
    loadingMessageElement.innerHTML = "Loading, please wait..."; // A message in case PennController+Tables incur slow down
    loadingMessageElement.id = "FirstLoadingMessage";
    document.body.appendChild(loadingMessageElement);
});

// Inject items with Template before sequence is generated (no need to mess with latin-square designs)
_engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].Prerun(()=>{
    for (let entry in window.CHUNKS_DICT) {                 // Convert any csv/tsv into a table
        if (entry.match(/\.(html?|mp3)$/i))
            continue;
        let table = _checkTable(window.CHUNKS_DICT[entry]); // Try to interpret it as a CSV
        if (table){                                         // Success: add it to the list and return
            table = new Table(table, entry);
            _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].tables[entry] = table;
        }
        else {
            table = $.csv.toObjects(window.CHUNKS_DICT[entry], {separator: "\t"});
            if (Object.keys(table[0]).length > 1){              // Try to interpret it as a TSV
                table = new Table(table, entry);
                _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].tables[entry] = table;
            }
        }
    }
    for (let i = 0; i < asyncFeedItems.length; i++)
        asyncFeedItems[i].call();                           // Run FeedItems now that CHUNK_DICT is defined
    if (loadingMessageElement)                              // Remove the loading message (but not before 500ms)
        document.body.removeChild(loadingMessageElement);

});

Object.defineProperty(_controller_js__WEBPACK_IMPORTED_MODULE_1__["PennController"], "defaultTable", {
    get: function(){
        let table = new TableHandler();
        table.name = defaultTable;
        return table;
    }
});


/***/ }),

/***/ "./src/utils.js":
/*!**********************!*\
  !*** ./src/utils.js ***!
  \**********************/
/*! exports provided: lazyPromiseFromArrayOfLazyPromises, hexFromArrayBuffer, overToScale, upload, getMimetype, minsecStringFromMilliseconds, guidGenerator, parseElementCommands, parseCoordinates, printAndRefreshUntil, levensthein */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "lazyPromiseFromArrayOfLazyPromises", function() { return lazyPromiseFromArrayOfLazyPromises; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "hexFromArrayBuffer", function() { return hexFromArrayBuffer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "overToScale", function() { return overToScale; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "upload", function() { return upload; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getMimetype", function() { return getMimetype; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "minsecStringFromMilliseconds", function() { return minsecStringFromMilliseconds; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "guidGenerator", function() { return guidGenerator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "parseElementCommands", function() { return parseElementCommands; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "parseCoordinates", function() { return parseCoordinates; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "printAndRefreshUntil", function() { return printAndRefreshUntil; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "levensthein", function() { return levensthein; });
// Returns a lazy Promise that will be fulfilled only after executing a sequence lazy Promises
function lazyPromiseFromArrayOfLazyPromises(arrayOfLazyPromises) {
    return () => new Promise(async function (resolve){
        for (let p in arrayOfLazyPromises){
            if (arrayOfLazyPromises[p] instanceof Function)
                var value = await arrayOfLazyPromises[p]();
        }
        // Resolve with the last value
        resolve(value);
    });
}

function hexFromArrayBuffer (array) {
    const uint = new Uint8Array(array);
    let bytes = [];
    uint.forEach((byte) => {
        bytes.push(byte.toString(16));
    })
    return bytes.join('').toUpperCase();
}


const checkForScale = function(scale){
    const transform = this.css("transform").match(/matrix\(\s*(-?\d+(.\d+)?),[^,]+,[^,]+,\s*(-?\d+(.\d+)?),/);
    if (transform){
        scale.x = scale.x * Number(transform[1]);
        scale.y = scale.y * Number(transform[3]);
    }
    return scale;
}
function overToScale(x,y){
    let element = this, inspected_element = element;
    let scale = {x: 1, y: 1};
    while (inspected_element){
        checkForScale.call(inspected_element, scale);
        inspected_element = inspected_element.parent();
        if (inspected_element[0]===document) inspected_element = undefined;
    }
    let offset = element.offset(), w = element.width(), h= element.height(), scale_w = w*scale.x, scale_h = h*scale.y;
    return offset.left <= x && offset.top <= y && offset.left+scale_w >= x && offset.top+scale_h>=y;
}


async function upload(url,filename,file,mimeType){
    let presignedPostData;
    try {
        presignedPostData = await new Promise((resolve,reject) => {
            const xhr = new XMLHttpRequest();
            const addParamCharacter = (url.match(/\?/) ? "&" : "?");
            xhr.open("GET", url+addParamCharacter+"filename="+encodeURIComponent(filename)+"&mimetype="+encodeURIComponent(mimeType), true);
            xhr.setRequestHeader("Content-Type", "application/json");
            xhr.onerror = e=>reject("Could not GET "+url+";");
            xhr.onload = function() {
                let obj = null;
                try{
                    obj = JSON.parse(this.responseText);
                }
                catch {
                    obj = this.responseText;
                }
                console.log("response",obj);
                resolve(obj);
            };
            console.log("before sending xhr");
            xhr.send();
            console.log("after sending xhr");
        });
    } catch (e){
        return new Promise((resolve,reject)=>reject(e));
    }
    console.log("presignedPostData",presignedPostData);
    const formData = new FormData();
    if (presignedPostData===undefined || typeof presignedPostData=="string"){
        formData.append('fileName', filename);
        formData.append('mimeType', mimeType);
        formData.append('file', file);
    }
    else{
        Object.keys(presignedPostData).forEach(key => {
            if (key=="url")
                url = presignedPostData.url;
            else
                formData.append(key, presignedPostData[key]) 
        });
        // Actual file has to be appended last.
        formData.append("file", file);
        if (presignedPostData.key)
            filename = presignedPostData.key;
    }
    return new Promise((resolve, reject) => {
        const xhr = new XMLHttpRequest();
        xhr.open("POST", url, true);
        xhr.onload = () => resolve(filename);
        xhr.onerror = () => reject(xhr.responseText);
        try {
            xhr.send(formData);
        } catch (e){
            return reject("Could not POST to "+url+"; "+e);
        }
    });
}

// See https://mimesniff.spec.whatwg.org/#matching-an-image-type-pattern
// See https://en.wikipedia.org/wiki/List_of_file_signatures
function getMimetype (signature, filename) {
    // IMAGE
    if (signature.match(/^00000[12]00/i))
        return 'image/x-icon';
    if (signature.match(/424D/i))
        return 'image/bmp';
    if (signature.match(/^89504E470?D0?A1A0?A/i))   // For some reason 0 is sometimes dropped...
        return 'image/png';
    if (signature.match(/^474946383[79]61/i))
        return 'image/gif';
    if (signature.match(/^52494646........574542505650/i))   // Longest = 28 bytes
        return 'image/webp';
    if (signature.match(/^FFD8FF/i))
        return 'image/jpeg';
    // AUDIO/VIDEO
    if (signature.match(/^2E736E64/i))
        return 'audio/basic';
    if (signature.match(/^464F524D........41494646/i))
        return 'audio/aiff';
    if (signature.match(/^(fff[b3a2]|494433)/i))    //  b = mpeg-1 audio, 3 = mpeg-2, a = 1protected, 2 = 2protected
        return 'audio/mpeg';
    if (signature.match(/^664C6143/i))
        return 'audio/flac';
    if (signature.match(/^4F67675300/i))
        return 'application/ogg';
    if (signature.match(/^4D546864......06/i))
        return 'audio/midi';
    if (signature.match(/^52494646........41564920/i))
        return 'video/avi';
    if (signature.match(/^52494646.{4,8}57415645/i)) // Apparently sometimes less than 8 bytes in between...
        return 'audio/wave';
    if (signature.match(/^1A45DFA3/i))    // Could be sthg else than webm
        return 'video/webm';
    // OTHER
    if (signature.match(/^25504446/i))
        return 'application/pdf';
    if (signature.match(/^504B0304/i))
        return 'application/zip';
    else{
        let r = filename.match(/\.([^.]+)$/);
        if (r){
            switch(r[1].toLowerCase()){
                case 'bmp':
                    return 'image/bmp';
                case 'png':
                    return 'image/png'; 
                case 'gif':
                    return 'image/gif'; 
                case 'webp':
                    return 'image/webp';
                case 'jpg':
                case 'jpeg':
                    return 'image/jpeg';
                case 'mp3':
                    return 'audio/mpeg';
                case 'flac':
                    return 'audio/flac';
                case 'ogg':
                case 'oga':
                    return 'audio/ogg';
                case 'midi':
                case 'mid':
                    return 'audio/midi';
                case 'wav':
                    return 'audio/wave';
                case 'webm':
                    return 'video/webm';
                case 'avi':
                    return 'video/avi';
                case 'mp4':
                    return 'video/mp4';
                case 'ogv':
                    return 'video/ogg';
                case 'mov':
                    return 'video/quicktime';
                default:
                    return '';
            }
        }
        else
            return '';
    }
}


function minsecStringFromMilliseconds(n){
    let s = (n / 1000) % 60, m = Math.trunc(n / 60000);
    return (m>0?m+"min":"")+(s>0?s+"s":"");
}

// From https://stackoverflow.com/questions/105034/create-guid-uuid-in-javascript
function guidGenerator() {
    var S4 = function() {
       return (((1+Math.random())*0x10000)|0).toString(16).substring(1);
    };
    return (S4()+S4()+"-"+S4()+"-"+S4()+"-"+S4()+"-"+S4()+S4()+S4());
}

// Converts any PennElementCommand in 'array' into a string
function parseElementCommands(array){
    return array.map(e=>{
        if (e instanceof Object && e.hasOwnProperty("_promises") && e.type && e._element)
            return e.type + ":" + e._element.id;
        else
            return e;
    });
}

// Parses "bottom|left|center|middle|right|top at ..."
function parseCoordinates(x,y){
    // let coordinates = {x:x,y:y,translateX:0,translateY:0};
    const transform = this.css("transform").match(/matrix\(\s*(-?\d+(.\d+)?),[^,]+,[^,]+,\s*(-?\d+(.\d+)?),/);
    const style = window.getComputedStyle(this[0]);
    const original_width = Number(style.width.replace(/px$/,'')), 
          original_height = Number(style.height.replace(/px$/,''));
    let width = original_width, height = original_height;
    if (transform){
        width = Math.abs(width * transform[1]);
        height = Math.abs(height * transform[3]);
    }
    let anchorX = String(x).match(/^(.+)\s+at\s+(.+)$/i);
    let anchorY = String(y).match(/^(.+)\s+at\s+(.+)$/i);
    if (anchorX)// && anchorX[2].match(/^-?\d+(\.\d+)?$/))   // raw number
        x = String(anchorX[2]);
    if (anchorY)// && anchorY[2].match(/^-?\d+(\.\d+)?$/))   // raw number
        y = String(anchorY[2]);
    if (!isNaN(x)) x = x+"px";   // raw number
    if (!isNaN(y)) y = y+"px";   // raw number
    if (anchorX){
        if (anchorX[1].match(/top|bottom/i)) throw "Passed Y coordinate in place of X";
        else if (anchorX[1].match(/center|middle/i))
            x = `calc(${x} - ${original_width/2}px)`;
        else if (anchorX[1].match(/right/i))
            x = `calc(${x} - ${width-(width-original_width)/2}px)`;
        else
            x = `calc(${x} + ${(width-original_width)/2}px)`;
    }
    else
        x = `calc(${x} + ${(width-original_width)/2}px)`;
    if (anchorY){
        if (anchorY[1].match(/left|right/i)) throw "Passed X coordinate in place of Y";
        else if (anchorY[1].match(/center|middle/i))
            y = `calc(${y} - ${original_height/2}px)`;
        else if (anchorY[1].match(/bottom/i))
            y = `calc(${y} - ${height-(height-original_height)/2}px)`;
        else
            y = `calc(${y} + ${(height-original_height)/2}px)`;
    }
    else
        y = `calc(${y} + ${(height-original_height)/2}px)`;
    return {x: x, y: y};
}
function RefreshUntil(x,y,element,until,oldCss){
    if (until instanceof Function && until())
        return this.css(oldCss);
    const coordinates = parseCoordinates.call(this,x,y);
    this.css({position: 'absolute', left: coordinates.x, top: coordinates.y});
    window.requestAnimationFrame( ()=>RefreshUntil.call(this,x,y,element,until,oldCss) );
}
// Call on a jQuery element
function printAndRefreshUntil(x,y,element,until){
    element = element || $("body");
    const parentDOM = this.parent()[0];
    const oldCss = {
        display: this.css("display"), 
        position: this.css("position"),
        left: this.css("left"),
        top: this.css("top")
    };
    if (parentDOM === undefined || parentDOM != element[0]) this.appendTo(element).css('display','inline-block');
    RefreshUntil.call(this,x,y,element,until,oldCss);
}

// Returns the Levensthein distance between two words
function levensthein(s,t){
    let d = [];
    d[0] = ("a"+t).split("").map((c,n)=>n);
    for (let i = 1; i < s.length+1; i++)
        d[i] = [i,...t.split("").map(()=>0)];

    for (let j = 1; j < t.length+1; j++)
        for (let i = 1; i < s.length+1; i++){
            let substitutionCost = s.charAt(i)!=t.charAt(j);
            let deletion = d[i-1][j] + 1;
            let insertion = d[i][j-1] + 1;
            let substitution = d[i-1][j-1] + substitutionCost;
            if (deletion<insertion&&deletion<substitution)
                d[i][j] = deletion;
            else if (insertion<deletion&&insertion<substitution)
                d[i][j] = insertion;
            else
                d[i][j] = substitution;
        }
    return d[s.length][t.length];
}

let specialKeys = [
    "Unidentified",
    "Alt",
    "AltGraph",
    "CapsLock",
    "Control",
    "Fn",
    "FnLock",
    "Meta",
    "NumLock",
    "ScrollLock",
    "Shift",
    "Symbol",
    "SymbolLock",
    "Hyper",
    "Super",
    "Enter",
    "Tab",
    "ArrowDown",
    "ArrowLeft",
    "ArrowRight",
    "ArrowUp",
    "End",
    "Home",
    "PageDown",
    "PageUp",
    "Backspace",
    "Clear",
    "Copy",
    "CrSel",
    "Cut",
    "Delete",
    "EraseEof",
    "ExSel",
    "Insert",
    "Paste",
    "Redo",
    "Undo",
    "Accept",
    "Again",
    "Attn",
    "Cancel",
    "ContextMenu",
    "Escape",
    "Execute",
    "Find",
    "Help",
    "Pause",
    "Play",
    "Props",
    "Select",
    "ZoomIn",
    "ZoomOut",
    "BrightnessDown",
    "BrightnessUp",
    "Eject",
    "LogOff",
    "Power",
    "PowerOff",
    "PrintScreen",
    "Hibernate",
    "Standby",
    "WakeUp",
    "AllCandidates",
    "Alphanumeric",
    "CodeInput",
    "Compose",
    "Convert",
    "Dead",
    "FinalMode",
    "GroupFirst",
    "GroupLast",
    "GroupNext",
    "GroupPrevious",
    "ModeChange",
    "NextCandidate",
    "NonConvert",
    "PreviousCandidate",
    "Process",
    "SingleCandidate",
    "HangulMode",
    "HanjaMode",
    "JunjaMode",
    "Eisu",
    "Hankaku",
    "Hiragana",
    "HiraganaKatakana",
    "KanaMode",
    "KanjiMode",
    "Katakana",
    "Romaji",
    "Zenkaku",
    "ZenkakuHankaku",
    "F1",
    "F2",
    "F3",
    "F4",
    "F5",
    "F6",
    "F7",
    "F8",
    "F9",
    "F10",
    "F11",
    "F12",
    "Soft1",
    "Soft2",
    "Soft3",
    "Soft4",
    "ChannelDown",
    "ChannelUp",
    "Close",
    "MailForward",
    "MailReply",
    "MailSend",
    "MediaClose",
    "MediaFastForward",
    "MediaPause",
    "MediaPlay",
    "MediaPlayPause",
    "MediaRecord",
    "MediaRewind",
    "MediaStop",
    "MediaTrackNext",
    "MediaTrackPrevious",
    "New",
    "Open",
    "Print",
    "Save",
    "SpellCheck",
    "Key11",
    "Key12",
    "AudioBalanceLeft",
    "AudioBalanceRight",
    "AudioBassBoostDown",
    "AudioBassBoostToggle",
    "AudioBassBoostUp",
    "AudioFaderFront",
    "AudioFaderRear",
    "AudioSurroundModeNext",
    "AudioTrebleDown",
    "AudioTrebleUp",
    "AudioVolumeDown",
    "AudioVolumeUp",
    "AudioVolumeMute",
    "MicrophoneToggle",
    "MicrophoneVolumeDown",
    "MicrophoneVolumeUp",
    "MicrophoneVolumeMute",
    "SpeechCorrectionList",
    "SpeechInputToggle",
    "LaunchApplication1",
    "LaunchApplication2",
    "LaunchCalendar",
    "LaunchContacts",
    "LaunchMail",
    "LaunchMediaPlayer",
    "LaunchMusicPlayer",
    "LaunchPhone",
    "LaunchScreenSaver",
    "LaunchSpreadsheet",
    "LaunchWebBrowser",
    "LaunchWebCam",
    "LaunchWordProcessor",
    "BrowserBack",
    "BrowserFavorites",
    "BrowserForward",
    "BrowserHome",
    "BrowserRefresh",
    "BrowserSearch",
    "BrowserStop",
    "AppSwitch",
    "Call",
    "Camera",
    "CameraFocus",
    "EndCall",
    "GoBack",
    "GoHome",
    "HeadsetHook",
    "LastNumberRedial",
    "Notification",
    "MannerMode",
    "VoiceDial",
    "TV",
    "TV3DMode",
    "TVAntennaCable",
    "TVAudioDescription",
    "TVAudioDescriptionMixDown",
    "TVAudioDescriptionMixUp",
    "TVContentsMenu",
    "TVDataService",
    "TVInput",
    "TVInputComponent1",
    "TVInputComponent2",
    "TVInputComposite1",
    "TVInputComposite2",
    "TVInputHDMI1",
    "TVInputHDMI2",
    "TVInputHDMI3",
    "TVInputHDMI4",
    "TVInputVGA1",
    "TVMediaContext",
    "TVNetwork",
    "TVNumberEntry",
    "TVPower",
    "TVRadioService",
    "TVSatellite",
    "TVSatelliteBS",
    "TVSatelliteCS",
    "TVSatelliteToggle",
    "TVTerrestrialAnalog",
    "TVTerrestrialDigital",
    "TVTimer",
    "AVRInput",
    "AVRPower",
    "ColorF0Red",
    "ColorF1Green",
    "ColorF2Yellow",
    "ColorF3Blue",
    "ColorF4Grey",
    "ColorF5Brown",
    "ClosedCaptionToggle",
    "Dimmer",
    "DisplaySwap",
    "DVR",
    "Exit",
    "FavoriteClear0",
    "FavoriteClear1",
    "FavoriteClear2",
    "FavoriteClear3",
    "FavoriteRecall0",
    "FavoriteRecall1",
    "FavoriteRecall2",
    "FavoriteRecall3",
    "FavoriteStore0",
    "FavoriteStore1",
    "FavoriteStore2",
    "FavoriteStore3",
    "Guide",
    "GuideNextDay",
    "GuidePreviousDay",
    "Info",
    "InstantReplay",
    "Link",
    "ListProgram",
    "LiveContent",
    "Lock",
    "MediaApps",
    "MediaAudioTrack",
    "MediaLast",
    "MediaSkipBackward",
    "MediaSkipForward",
    "MediaStepBackward",
    "MediaStepForward",
    "MediaTopMenu",
    "NavigateIn",
    "NavigateNext",
    "NavigateOut",
    "NavigatePrevious",
    "NextFavoriteChannel",
    "NextUserProfile",
    "OnDemand",
    "Pairing",
    "PinPDown",
    "PinPMove",
    "PinPToggle",
    "PinPUp",
    "PlaySpeedDown",
    "PlaySpeedReset",
    "PlaySpeedUp",
    "RandomToggle",
    "RcLowBattery",
    "RecordSpeedNext",
    "RfBypass",
    "ScanChannelsToggle",
    "ScreenModeNext",
    "Settings",
    "SplitScreenToggle",
    "STBInput",
    "STBPower",
    "Subtitle",
    "Teletext",
    "VideoModeNext",
    "Wink",
    "ZoomToggle",
    "AudioVolumeDown",
    "AudioVolumeUp",
    "AudioVolumeMute",
    "BrowserBack",
    "BrowserForward",
    "ChannelDown",
    "ChannelUp",
    "ContextMenu",
    "Eject",
    "End",
    "Enter",
    "Home",
    "MediaFastForward",
    "MediaPlay",
    "MediaPlayPause",
    "MediaRecord",
    "MediaRewind",
    "MediaStop",
    "MediaNextTrack",
    "MediaPause",
    "MediaPreviousTrack",
    "Power"
];
let specialKeysUpper = specialKeys.map(k=>k.toUpperCase());

String.prototype.isSpecialKey = function (caseSensitive) { 
    if (caseSensitive)
        return specialKeys.indexOf(this)>-1;
    else
        return specialKeysUpper.indexOf(this.toUpperCase())>-1;
}

// Tests whether the element belongs to the document's body
jQuery.fn.printed = function(){
    let e = this.parent();
    while (e.length){
        if (e[0]==document.body)
            return true;
        e = e.parent();
    }
    return false;
}


/***/ }),

/***/ "./src/zip.js":
/*!********************!*\
  !*** ./src/zip.js ***!
  \********************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ "./src/utils.js");
/* harmony import */ var _controller_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./controller.js */ "./src/controller.js");
/* harmony import */ var _engine_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./engine.js */ "./src/engine.js");
/* harmony import */ var file_saver__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! file-saver */ "./node_modules/file-saver/dist/FileSaver.min.js");
/* harmony import */ var file_saver__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(file_saver__WEBPACK_IMPORTED_MODULE_3__);
//import * as JSZip from 'jszip';
// var JSZip = require("jszip");
const zip = __webpack_require__(/*! @zip.js/zip.js */ "./node_modules/@zip.js/zip.js/index.js");
// import { getBinaryContent } from 'jszip-utils';





let _URLsToLoad = [];

// PennEngine.utils.JSZip = JSZip;                                 // Pass JSZip to PennEngin.utils to make it accessible
// PennEngine.utils.JSZip.getBinaryContent = getBinaryContent;     // from element type development (see, e.g., voicerecorder)
_engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].utils.saveAs = file_saver__WEBPACK_IMPORTED_MODULE_3__["saveAs"];                               // saveAs is also useful to provide a way to download archive

// Loads the file at each URL passed as an argument
// Files can be ZIP files, image files or audio files
_controller_js__WEBPACK_IMPORTED_MODULE_1__["PennController"].PreloadZip = function () {   /* $AC$ global.PreloadZip() Silently downloads a ZIP file containing resources $AC$ */
    for (let url in arguments)
        _URLsToLoad.push(arguments[url]);
};


async function processBlob (blob,filename) {
    const matching_resources = _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].resources.list.filter(r=>r && r.name==filename);
    if (matching_resources.length<1) return;
    console.log("Processing",filename);
    const content = await blob.arrayBuffer();
    let type = Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__["getMimetype"])( Object(_utils_js__WEBPACK_IMPORTED_MODULE_0__["hexFromArrayBuffer"])(content.slice(0,28)) , filename ); // Get type using magic numbers (see utils.js)
    if (type===undefined)
        return console.log("Could not determine type for file", filename);
    const url = URL.createObjectURL(blob);                          // The URL of the Blob
    matching_resources.forEach( r => r.addURI(url) );
    // let resourceFound = false;                                    // Check extent resources
    // for (let r in PennEngine.resources.list){
    //     const resource = PennEngine.resources.list[r];
    //     if (resource && resource.name==filename){
    //         // console.log("Applying create to a copy of",filename);
    //         resource.addURI(url);
            // resource.create.apply(                              // Create the resource's object
            //     $.extend({}, resource, {                        // using a copy of the resource found
            //         value: url,                                 // with its value set to the Blob's URL
            //         object: null,                               // No object yet
            //         resolve: function() {                       // and its resolve taking care of object
            //             console.log("Resolving",filename,"current status",resource.status);
            //             if (resource.status=="ready")
            //                 return;                             // Assign copy's object to original's
            //             resource.object = this.object;
            //             console.log("Set",filename," object to",resource.object,"calling resolve now");
            //             resource.resolve();
            //         }
            //     })
            // );
            // resourceFound = true;
        // }
    // }
    // if (!resourceFound)                     // If no resource was found:
        // PennEngine.resources.list.push({    // add a new one to the list
        //     name: filename,
        //     value: url,                     // Use the Blob's URL
        //     controllers: [],
        //     object: null,
        //     status: "void",
        //     create: function(){ this.status="pending"; },
        //     resolve: function(){ this.status="ready"; }
        // });
}

// Internal loading of the zip files
// Will be executed when jQuery is ready
function _preloadZip () {
    if (!_URLsToLoad.length) return;        // If no zip file to download, that's it, we're done
    const getZipFile = async function(url){         // Called for each URL that was passed
        function removeURL() {              // Called to remove a URL from the array (when unzipped done, or error)
            let index = _URLsToLoad.indexOf(url);
            if (index >= 0)
                _URLsToLoad.splice(index,1);
        }
        try {
            const response = await fetch(url);
            _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].debug.log("Download of "+url+" complete");
            const zipBlob = await response.blob();
            const zipReader = new zip.ZipReader(new zip.BlobReader(zipBlob));
            const entries = await zipReader.getEntries();
            for (let i = 0; i < entries.length; i++) {
                const entry = entries[i];
                if (entry.directory) continue;
                const filename = entry.filename.split('/').pop();
                if (filename.startsWith(".")) continue; // hidden file
                const entryBlob = await entry.getData(new zip.BlobWriter());
                await processBlob(entryBlob,filename);
            }
            await zipReader.close();
        } catch (error) {
            _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].debug.error("Error downloading "+url+":", error);
            throw error;    // Throw the error
        }
        removeURL();                              // remove the URL from the array
        // var zip = new JSZip();
        // getBinaryContent(url, function(error, data) {
        //     if (error) {
        //         removeURL();    // Problem with downloading the file: remove the URL from the array
        //         PennEngine.debug.error("Error downloading "+url+":", error);
        //         throw error;    // Throw the error
        //     }
        //     zip.loadAsync(data).then(function(){                // Load the zip object with the data stream
        //         PennEngine.debug.log("Download of "+url+" complete");
        //         var unzippedFilesSoFar = 0;                     // Number of files unzipped
        //         zip.forEach(function(path, file){               // Going through each zip file
        //             file.async('arraybuffer').then(function(content){   // Unzip the file
        //                 if (!path.match(/__MACOS.+\/\.[^\/]+$/)) {                            // Excluding weird MACOS zip files
        //                     let filename = path.replace(/^.*?([^\/]+)$/,"$1");                // Get rid of path, keep just filename
        //                     let type = getMimetype( hexFromArrayBuffer(content.slice(0,28)) , filename ); // Get type using magic numbers (see utils.js)
        //                     if (type){                                                        // Add only type was recognized
        //                         let url = URL.createObjectURL(new Blob([content], {type: type}));   // The URL of the Blob
        //                         console.log("Found a resource named",filename,"of type",type,"with url",url);
        //                         var resourceFound = false;                                    // Check extent resources
        //                         for (let r in PennEngine.resources.list){
        //                             let resource = PennEngine.resources.list[r];
        //                             if (resource.name==filename && resource.status!="ready"){
        //                                 console.log("Applying create to a copye of",filename);
        //                                 resource.create.apply(                              // Create the resource's object
        //                                     $.extend({}, resource, {                        // using a copy of the resource found
        //                                         value: url,                                 // with its value set to the Blob's URL
        //                                         object: null,                               // No object yet
        //                                         resolve: function() {                       // and its resolve taking care of object
        //                                             console.log("Resolving",filename,"current status",resource.status);
        //                                             if (resource.status=="ready")
        //                                                 return;                             // Assign copy's object to original's
        //                                             resource.object = this.object;
        //                                             console.log("Set",filename," object to",resource.object,"calling resolve now");
        //                                             resource.resolve();
        //                                         }
        //                                     })
        //                                 );
        //                                 resourceFound = true;
        //                             }
        //                         }
        //                         if (!resourceFound)                     // If no resource was found:
        //                             PennEngine.resources.list.push({    // add a new one to the list
        //                                 name: filename,
        //                                 value: url,                     // Use the Blob's URL
        //                                 controllers: [],
        //                                 object: null,
        //                                 status: "void",
        //                                 create: function(){ this.status="pending"; },
        //                                 resolve: function(){ this.status="ready"; }
        //                             });
        //                     }
        //                 }
        //                 unzippedFilesSoFar++;                           // Keep track of progression
        //                 if (unzippedFilesSoFar >= Object.keys(zip.files).length)    // All files unzipped:
        //                     removeURL();                                            // remove the URL from the array
        //             });
        //         });
        //     });
        // });
    };
    
    for (let u in _URLsToLoad) {    // Fetch the zip file
        let url = _URLsToLoad[u];
        let extension = url.match(/^https?:\/\/.+\.(zip)$/i);
        if (typeof(url) != "string" || !extension) {
            _engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].debug.warning("Preload: entry #"+u+" is not a valid URL, ignoring it");
            continue;
        }
        else if (extension[1].toLowerCase() == "zip")
            getZipFile(url);
    }
};

_engine_js__WEBPACK_IMPORTED_MODULE_2__["PennEngine"].Prerun( _preloadZip);


/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

// AUDIO element
/* $AC$ PennController.newAudio(name,file) Creates a new Audio element $AC$ */
/* $AC$ PennController.getAudio(name) Retrieves an existing Audio element $AC$ */
window.PennController._AddElementType("Audio", function(PennEngine) {

    const RATIO_PRELOADED = 0.95;

    // This is executed when Ibex runs the script in data_includes (not a promise, no need to resolve)
    this.immediate = function(id, file){
        if (typeof id == "string" && file===undefined)
            file = id;
        let addHostURLs = !file.match(/^http/i);

        this.resource = PennEngine.resources.new(file, function(uri, resolve){
            const object = document.createElement("audio");
            object.muted = true;
            let loading = false;
            const checkLoaded = ()=>{
                if (!loading){
                    console.log("Starting to preload "+file, object);
                    object.muted = true;
                    object.play();
                }
                loading = true;
                if (object.buffered.length && object.seekable.length){
                    const ratio = object.buffered.end(0) / object.seekable.end(0);
                    if (object.currentTime == object.duration || ratio >= RATIO_PRELOADED){
                        object.pause();
                        object.currentTime = 0;
                        object.muted = false;
                        loading = false;
                        return resolve(object);
                    }
                }
                window.requestAnimationFrame(checkLoaded);
                return true;
            };
            object.addEventListener("progress", ()=>loading||checkLoaded());
            object.src = uri;
            object.load();                                // Forcing 'autopreload'
        }, addHostURLs);
        // this.resource = PennEngine.resources.fetch(file, function(resolve){
        //     this.object = new Audio();               // Creation of the audio using the resource's value
        //     this.object.muted = true;
        //     let playing = false, checking = false;
        //     const checkLoaded = ()=>{
        //         checking = true;
        //         if (this.object.buffered.length && this.object.seekable.length){
        //             if (this.object.buffered.end(0) == this.object.seekable.end(0)){
        //                 this.object.pause();
        //                 this.object.currentTime = 0;
        //                 this.object.muted = false;
        //                 resolved = true;
        //                 return resolve();
        //             }
        //             else if (!playing){
        //                 this.object.muted = true;
        //                 this.object.play();
        //             }
        //         }
        //         window.requestAnimationFrame(checkLoaded);
        //         return true;
        //     };
        //     this.object.addEventListener("progress", ()=>checking||checkLoaded());
        //     this.object.src = this.value;
        //     this.object.load();                                // Forcing 'autopreload'
        // }, addHostURLs);
        // Naming
        if (id===undefined||typeof(id)!="string"||id.length==0)
            id = "Audio";
        this.id = id;
    };

    // This is executed when 'newAudio' is executed in the trial (converted into a Promise, so call resolve)
    this.uponCreation = function(resolve){
        this.resource.object.controls = true;   // Make the controls visible
        this.audio = this.resource.object;      // Audio simply refers to the resource's object
        this.hasPlayed = false;                 // Whether the audio has played before
        this.disabled = false;                  // Whether the audio can be played
        this.resource.object.style = null;      // (Re)set any particular style applied to the resource's object
        this.jQueryElement = $(this.audio);     // The jQuery element
        this.jQueryElement.removeClass();
        this.jQueryDisable = null;              // The 'disable' element, to be printed on top
        this.playEvents = [];                   // List of ["play",time,position]
        this.endEvents = [];                    // List of ["end",time,position]
        this.pauseEvents = [];                  // List of ["pause",time,position]
        this.seekEvents = [];                   // List of ["seek",time,position]
        this.bufferEvents = [];                 // List of ["buffer",time,position]
        this.whatToSave = [];                   // ["play","end","pause","seek"] (buffer logged by default)
        this.resource.object.onplay = ()=>{
            this.playEvents.push(["play",this.audio.currentTime,Date.now()]);
        };
        this.resource.object.onended = ()=>{
            this.hasPlayed=true;
            this.endEvents.push(["end",this.audio.currentTime,Date.now()]);
        };
        this.resource.object.onpause = ()=>{
            this.pauseEvents.push(["pause",this.audio.currentTime,Date.now()]);
        };
        this.resource.object.onseeked = ()=>{
            this.seekEvents.push(["seek",this.audio.currentTime,Date.now()]);
        };
        this.resource.object.onwaiting = ()=>{
            this.bufferEvents.push(["buffer",this.audio.currentTime,Date.now()]);
        };
        this.printDisable = opacity=>{
            if (opacity===undefined) opacity = this.disabled;
            if (opacity===true||isNaN(Number(opacity))) opacity = 0.5;
            if (this.jQueryDisable instanceof jQuery)
                this.jQueryDisable.remove();
            this.jQueryDisable = $("<div>").css({
                position: "absolute",
                display: "inline-block",
                "background-color": "gray",
                opacity: opacity,
                width: this.jQueryElement.width(),
                height: this.jQueryElement.height()
            });
            this.jQueryElement.before(this.jQueryDisable);
            // this.jQueryElement.removeAttr("controls");
        };
        resolve();
    };

    // This is executed at the end of a trial
    this.end = function(){
        if (this.whatToSave && this.whatToSave.indexOf("play")>-1){
            if (!this.playEvents.length)
                PennEngine.controllers.running.save(this.type, this.id, "play", "NA", "Never");
            for (let line in this.playEvents)
                PennEngine.controllers.running.save(this.type, this.id, ...this.playEvents[line]);
        }
        if (this.whatToSave && this.whatToSave.indexOf("end")>-1){
            if (!this.endEvents.length)
                PennEngine.controllers.running.save(this.type, this.id, "end", "NA", "Never");
            for (let line in this.endEvents)    
                PennEngine.controllers.running.save(this.type, this.id, ...this.endEvents[line]);
        }
        if (this.whatToSave && this.whatToSave.indexOf("pause")>-1){
            if (!this.pauseEvents.length)
                PennEngine.controllers.running.save(this.type, this.id, "pause", "NA", "Never");
            for (let line in this.pauseEvents)
                PennEngine.controllers.running.save(this.type, this.id, ...this.pauseEvents[line]);
        }
        if (this.whatToSave && this.whatToSave.indexOf("seek")>-1){
            if (!this.seekEvents.length)
                PennEngine.controllers.running.save(this.type, this.id, "seek", "NA", "Never");
            for (let line in this.seekEvents)
                PennEngine.controllers.running.save(this.type, this.id, ...this.seekEvents[line]);
        }
        if (this.bufferEvents)
            for (let line in this.bufferEvents)
                PennEngine.controllers.running.save(this.type, this.id, ...this.bufferEvents[line]);
        this.resource.object.pause();
        this.resource.object.currentTime = 0;                   // Reset to the beginning
        if (this.jQueryDisable)
            this.jQueryDisable.remove();// Remove disabler from DOM
    };
    
    this.value = function(){                                    // Value is timestamp of last end event
        if (this.endEvents.length)                         
            return this.endEvents[this.endEvents.length-1][2];
        else
            return 0;
    };

    this.actions = {
        // Every method is converted into a Promise (so need to resolve)
        play: function(resolve, loop){        /* $AC$ Audio PElement.play() Starts the audio playback $AC$ */
            if (this.hasOwnProperty("audio") && this.audio instanceof Audio){
                if (loop && loop=="once")
                    this.audio.removeAttribute("loop");
                else if (loop)
                    this.audio.loop = true;
                this.audio.play();
            }
            else
                PennEngine.debug.error("No audio to play for element ", this.id);
            resolve();
        },
        pause: function(resolve){      /* $AC$ Audio PElement.pause() Pauses the audio playback $AC$ */
            this.audio.pause();
            resolve();
        }
        ,
        print: function(resolve, ...where){      /* $AC$ Audio PElement.print() Prints an interface to control the audio playback $AC$ */
            let afterPrint = ()=>{
                if (this.disabled || (this.disabled!==null&&this.disabled!==false&&!isNaN(this.disabled)))
                    this.printDisable(this.disabled);
                resolve();
            };
            PennEngine.elements.standardCommands.actions.print.apply(this, [afterPrint, ...where]);
        },
        stop: function(resolve){      /* $AC$ Audio PElement.stop() Stops the audio playback $AC$ */
            // this.audio.pause();
            this.audio.currentTime = this.audio.duration;
            resolve();
        }
        ,
        // Here, we resolve only when the audio ends (and the test is felicitous, if provided)
        wait: function(resolve, test){      /* $AC$ Audio PElement.wait() Waits until the audio playback has ended $AC$ */
            if (test == "first" && this.hasPlayed)  // If first and has already played, resolve already
                resolve();
            else {                                  // Else, extend onend and do the checks
                let resolved = false;
                let originalOnended = this.audio.onended;
                this.audio.onended = function(...rest){
                    originalOnended.apply(this, rest);
                    if (resolved)
                        return;
                    if (test instanceof Object && test._runPromises && test.success){
                        let oldDisabled = this.disabled;     // Temporarilly disable
                        this.disabled = "tmp";
                        test._runPromises().then(value=>{   // If a valid test command was provided
                            if (value=="success"){
                                resolved = true;
                                resolve();                  // resolve only if test is a success
                            }
                            if (this.disabled == "tmp")     // Restore to previous setting if not modified by test
                                this.disabled = oldDisabled;
                        });
                    }
                    else{                                   // If no (valid) test command was provided
                        resolved = true;
                        resolve();                          // resolve anyway
                    }
                };
            }
        }
    };
    
    this.settings = {
        disable: function(resolve, opacity){      /* $AC$ Audio PElement.disable(opacity) Disables the interface $AC$ */
            this.jQueryElement.addClass("PennController-disabled");
            this.jQueryContainer.addClass("PennController-disabled");
            if (isNaN(opacity)||opacity===null) opacity = true;
            else opacity = Number(opacity);
            this.disabled = opacity;
            this.printDisable(opacity);
            resolve();
        }
        ,
        enable: function(resolve){      /* $AC$ Audio PElement.enable() Enables the interface $AC$ */
            if (this.jQueryDisable instanceof jQuery){
                this.disabled = false;
                this.jQueryDisable.remove();
                this.jQueryDisable = null;
                this.jQueryElement.removeClass("PennController-disabled");
                this.jQueryContainer.removeClass("PennController-disabled");
                this.jQueryElement.attr("controls", true);
            }
            resolve();
        }
        ,
        // Every setting is converted into a Promise (so resolve)
        once: function(resolve){      /* $AC$ Audio PElement.once() The interface will be disabled after the first playback $AC$ */
            if (this.hasPlayed){
                this.disabled = true;
                this.printDisable();
            }
            else {  // Extend onend
                let onended = this.audio.onended, t = this;
                this.audio.onended = function(...rest){
                    onended.apply(this, rest);
                    t.disabled = true;
                    t.printDisable();
                };
            }
            resolve();
        }
        ,
        log: function(resolve,  ...what){      /* $AC$ Audio PElement.log() Logs playback events $AC$ */
            if (what.length==1 && typeof(what[0])=="string")
                this.whatToSave.push(what[0]);
            else if (what.length>1)
                this.whatToSave = this.whatToSave.concat(what);
            else
                this.whatToSave = ["play","end","pause","seek"];
            resolve();
        }
    };
    
    this.test = {
        // Every test is used within a Promise back-end, but it should simply return true/false
        hasPlayed: function(){      /* $AC$ Audio PElement.test.hasPlayed() Checks whether the audio has ever been played fully $AC$ */
            return this.hasPlayed;
        }
        ,
        playing: function(){      /* $AC$ Audio PElement.test.playing() Checks whether the audio is currently playing $AC$ */
            return this.audio.currentTime&&!this.audio.paused;
        }
    };

});


// BUTTON element
/* $AC$ PennController.newButton(name,text) Creates a new Button element $AC$ */
/* $AC$ PennController.getButton(name) Retrieves an existing Button element $AC$ */
window.PennController._AddElementType("Button", function(PennEngine) {

    // This is executed when Ibex runs the script in data_includes (not a promise, no need to resolve)
    this.immediate = function(id, text){
        if (text===undefined){
            text = id;
            if (id===undefined||typeof(id)!="string"||id.length==0)
                id = "Button";
            this.id = id;
        }
        this.initialText = text;                            // In case this gets changed later
    };

    // This is executed when 'newAudio' is executed in the trial (converted into a Promise, so call resolve)
    this.uponCreation = function(resolve){
        this.text = this.initialText;
        this.jQueryElement = $("<button>").html(this.text);
        // Default settings
        this.clicks = [];
        this.hasClicked = false;
        this.log = false;
        this.disabled = false;
        this.click = ()=>{
            this.hasClicked=true;
            this.clicks.push(["Click", "Click", Date.now(), "NULL"]);
        };
        this.jQueryElement[0].onclick = ()=>this.click();
        resolve();
    }

    // This is executed at the end of a trial
    this.end = function(){
        if (this.log){
            if (!this.clicks.length)
                PennEngine.controllers.running.save(this.type, this.id, "Click", "NA", "Never");
            for (let c in this.clicks)                      // Save any clicks if logging
                PennEngine.controllers.running.save(this.type, this.id, ...this.clicks[c]);
        }
    };

    this.value = function(){                                    // Value is timestamp of last click
        if (this.clicks.length)                         
            return this.clicks[this.clicks.length-1][2];
        else
            return 0;
    };
    
    this.actions = {
        click: function(resolve){   /* $AC$ Button PElement.click() Simulates a click on the button $AC$ */
            this.click();
            resolve();
        },
        wait: function(resolve, test){   /* $AC$ Button PElement.wait() Waits until the button is clicked before proceeding $AC$ */
            if (test == "first" && this.hasClicked) // If first and already clicked, resolve already
                resolve();
            else {                                  // Else, extend remove and do the checks
                let resolved = false;
                let oldClick = this.click;
                this.click = ()=>{
                    oldClick.apply(this);
                    if (resolved)
                        return;
                    if (test instanceof Object && test._runPromises && test.success){
                        let oldDisabled = this.disabled;  // Disable temporarilly
                        this.jQueryElement.attr("disabled", true);
                        this.disabled = "tmp";
                        test._runPromises().then(value=>{   // If a valid test command was provided
                            if (value=="success") {
                                resolved = true;
                                resolve();                  // resolve only if test is a success
                            }
                            if (this.disabled=="tmp"){
                                this.disabled = oldDisabled;
                                this.jQueryElement.attr("disabled", oldDisabled);
                            }   
                        });
                    }
                    else{                                    // If no (valid) test command was provided
                        resolved = true;
                        resolve();                          // resolve anyway
                    }
                };
            }
        }
    };
    
    this.settings = {
        callback: function(resolve, ...elementCommands){   /* $AC$ Button PElement.callback(commands) Tell the button to run a (series of) command(s) whenever it is clicked $AC$ */
            let oldClick = this.click;
            this.click = async function () {
                if (!this.disabled)
                    for (let c in elementCommands)
                        await elementCommands[c]._runPromises();
                oldClick.apply(this);
            };
            resolve();
        },
        log: function(resolve){   /* $AC$ Button PElement.log() Logs clicks on the button in the results file $AC$ */
            this.log = true;
            resolve();
        },
        once: function(resolve){   /* $AC$ Button PElement.once() Will disable the button after the first click $AC$ */
            if (this.hasClicked){
                this.disabled = true;
                this.jQueryElement.attr("disabled", true);
            }
            else{
                let oldClick = this.click;
                this.click = ()=>{
                    oldClick.apply(this);
                    this.disabled = true;
                    this.jQueryElement.attr("disabled",true)
                };
            }
            resolve();
        }
    };

    this.test = {   /* $AC$ Button PElement.test.clicked() Checks that the button has been clicked before $AC$ */
        clicked: function(){
            return this.hasClicked;
        }  
    };

});


// CANVAS element
/* $AC$ PennController.newCanvas(name,width,height) Creates a new Canvas element $AC$ */

/* $AC$ PennController.getCanvas(name) Retrieves an existing Canvas element $AC$ */
window.PennController._AddElementType("Canvas", function(PennEngine) {

    let isCoordinate = exp => exp.match(/^\s*\d+(\.\d+)?(px|pt|pc|vw|vh|em|ex|ch|rem|cm|mm|in|vmin|vmax|[%])?\s*?/);

    this.immediate = function(id, width, height){
        if (id===undefined){
            id = "Canvas";
            this.id = id;
        }
        else if (height===undefined){
            if (isCoordinate(String(id)) && isCoordinate(String(width))){
                height = width;
                width = id;
                id = "Canvas";
                let controller = PennEngine.controllers.underConstruction; // Controller under construction
                if (PennEngine.controllers.running)                     // Or running, if in running phase
                    controller = PennEngine.controllers.list[PennEngine.controllers.running.id];
                let n = 2;
                while (controller.elements.hasOwnProperty("Canvas") && controller.elements.Canvas.hasOwnProperty(id))
                    id = id + String(n);
                this.id = id;
            }
        }
        this.width = width;
        this.height = height;
    };

    this.uponCreation = function(resolve){
        this.jQueryElement = $("<div>").css({
            width: this.width, height: this.height,
            overflow: "visible", position: "relative", 
            display: "flex", 'flex-direction': 'column'
        });
        this.elementCommands = [];
        this.showElement = (elementCommand, x, y, z)=>new Promise(async resolve=>{
            await elementCommand.print( this.jQueryElement )._runPromises();
            let element = elementCommand._element;
            let jQueryElement = element.jQueryElement;
            // let coordinates = PennEngine.utils.parseCoordinates(x,y,element.jQueryContainer);
            // x = coordinates.x;
            // y = coordinates.y;
            // let transform = 'translate('+coordinates.translateX+','+coordinates.translateY+')';
            const currentController = PennEngine.controllers.running;
            const lastPrint = [x,y,window.PennController.Elements.getCanvas(this.id)];
            element._lastPrint = lastPrint;
            if (element.jQueryContainer){
                PennEngine.utils.printAndRefreshUntil.call(element.jQueryContainer,
                    x,y,this.jQueryElement,
                    /*until=*/()=>currentController!=PennEngine.controllers.running||lastPrint!=element._lastPrint
                );
                // element.jQueryContainer.css({position: "absolute", left: x, top: y, transform: transform});
                if (Number(z)>0||Number(z)>0)
                    element.jQueryContainer.css("z-index", z);    // Only if number (i.e. not NaN)
            }
            else{
                PennEngine.utils.printAndRefreshUntil.call(jQueryElement,
                    x,y,this.jQueryElement,
                    /*until=*/()=>currentController!=PennEngine.controllers.running||lastPrint!=element._lastPrint
                );
                // jQueryElement.css({position: "absolute", left: x, top: y, transform: transform});
                if (Number(z)>0||Number(z)>0)
                    jQueryElement.css("z-index", z);    // Only if number (i.e. not NaN)
            }
            // element._lastPrint = [x,y,window.PennController.Elements.getCanvas(this.id)];
            resolve();
        });
        resolve();
    };

    this.end = function(){
        if (this.log){
            if (!this.printTime)
                PennEngine.controllers.running.save(this.type, this.id, "Print", "NA", "Never", "NULL");
            else
                PennEngine.controllers.running.save(this.type, this.id, "Print", "NA", this.printTime, "NULL");
        }
    };

    this.value = function(){                                    // Value is how many elements it contains
        return this.elementCommands.length;
    };
    
    let t = this;       // Needed to call settings form actions
    this.actions = {
        color: function(resolve, color){
            this.jQueryElement.css("background-color",color);
            resolve();
        },
        print: async function(resolve, ...where){
            let showElements = async () => {
                for (let e in this.elementCommands)
                    await this.showElement(...this.elementCommands[e]);
                resolve();
            };
            PennEngine.elements.standardCommands.actions.print.apply(this, [showElements, ...where]);
        }
        ,
        remove: async function(resolve, ...elementCommands){    // Merged with settings since 1.7
            if (elementCommands.length)
                t.settings.remove.call(this, resolve, ...elementCommands);
            else
                PennEngine.elements.standardCommands.actions.remove.call(this, resolve);
        }
    };

    this.settings = {
        add: function(resolve, x, y, elementCommand, z){    /* $AC$ Canvas PElement.add(x,y,element) Places an element at (X,Y) on the canvas $AC$ */
            if (elementCommand.hasOwnProperty("_element") && elementCommand._element.jQueryElement instanceof jQuery){
                this.elementCommands.push([elementCommand, x, y, z]);
                if (this.jQueryElement.parent().length)
                    this.showElement(elementCommand, x, y, z).then(resolve);
                else
                    resolve();
            }
            else{
                PennEngine.debug.error("Invalid element referenced to add to Canvas "+this.id);
                resolve();
            }
        }
        ,
        remove: async function(resolve, elementCommand){     // Since 1.2
            if (elementCommand.hasOwnProperty("_element")){
                let index = this.elementCommands.map(e=>e[0]._element).indexOf(elementCommand._element);
                if (index > -1){
                    this.elementCommands.splice(index,1);
                    await elementCommand.remove()._runPromises();
                }
                else
                    PennEngine.debug.error("Element referenced to remove from canvas not found in Canvas "+this.id);
            }
            else
                PennEngine.debug.error("Invalid element referenced to remove from Canvas "+this.id);
            resolve();
        }
    };

});


// CONTROLLER element
/* $AC$ PennController.newController(name,controller,options) Creates a new Controller element $AC$ */
/* $AC$ PennController.getController(name) Retrieves an existing Controller element $AC$ */
window.PennController._AddElementType("Controller", function(PennEngine) {

    this.immediate = function(id, controller, options){
        if (options===undefined){
            if (typeof(controller) == "string")
                options = {};
            else{
                options = controller || {};
                controller = id
            }
        }
        this.id = id;
        this.controller = controller;
        this.options = options;
    };

    this.uponCreation = function(resolve){
        this.jQueryElement = $("<div>");
        this.log = false;
        this.results = [];
        this.finishedCallback = () => this.done = true;

        let t = this;
        this.options._finishedCallback = function(resultsArray) { 
            if (t.done) return;
            t.results.push( [Date.now(), resultsArray] );
            addSafeBindMethodPair("PennController");
            t.finishedCallback();
            this.destroy();
        };
        this.options._cssPrefix = this.controller+'-';
        this.options._utils = PennEngine.controllers.running.utils;
        this.options._utilsClass = PennEngine.controllers.running.options._utilsClass;
        this.options._controllerDefaults = PennEngine.controllers.running.options._controllerDefaults;

        let controllerNames = Object.getOwnPropertyNames($.ui).filter( name => $.ui[name] instanceof Function && $.ui[name]._ibex_options );
        if (controllerNames.indexOf(this.controller)>=0){
            // addSafeBindMethodPair(this.controller);
            // this.jQueryElement[this.controller](this.options);
        }
        else{
            let lowest = {score: 1, controllerName: ""};
            for (let i = 0; i < controllerNames.length; i++){
                let score = PennEngine.utils.levensthein(this.controller,controllerNames[i]) / this.controller.length;
                if (score < lowest.score){
                    lowest.score = score;
                    lowest.controllerName = controllerNames[i];
                }
            }
            if (lowest.score < 0.5)
                add = " Did you mean to type <strong>"+lowest.controllerName+"</strong>?";
            PennEngine.debug.error("Controller &lsquo;"+this.controller+"&rsquo; not found."+add);
        }
        resolve();
    };

    this.end = function(){
        if (this.log){
            for (let i = 0; i < this.results.length; i++){
                let time = this.results[i][0];
                let lines = this.results[i][1];
                for (let j = 0; j < lines.length; j++){
                    let line = lines[j];
                    // elementType, elementName, parameter, value, time, ...comments
                    let elementType = "Controller-"+this.controller;
                    let elementName = this.id;
                    let parameter = "NULL", value = "NULL";
                    if (line.length>0) parameter = line[0][1];
                    if (line.length>1) value = line[1][1];
                    for (let n = 2; n < line.length; n++)    // Add columns temporarily
                        PennEngine.controllers.running.controller.appendResultLine.push( [line[n][0],line[n][1]] );
                    PennEngine.controllers.running.save( elementType, elementName, parameter, value, time, "Any addtional parameters were appended as additional columns" );
                    for (let n = 2; n < line.length; n++)    // Remove columns added temporarily
                        PennEngine.controllers.running.controller.appendResultLine.pop();
                }
            }
        }
    };

    this.value = function(){                                    // Value is how many elements it contains
        return this.controller;
    };
    

    this.actions = {
        callback: function(resolve, ...commands){
            const oldCallback = this.finishedCallback;
            this.finishedCallback = function(...args){
                oldCallback.call(this, args);
                commands.forEach( async c => {
                    if (c.hasProperty("_runPromises") && c._runPromises instanceof Function)
                        await c._runPromises();
                    else if (c instanceof Function)
                        await c.call(this);
                });
            }
            resolve();
        },
        print: function(resolve,...args){
            this.done = false;
            const callback = ()=>{
                this.jQueryElement[this.controller]("destroy");
                addSafeBindMethodPair(this.controller);
                this.jQueryElement.empty();
                this.jQueryElement[this.controller](this.options);
                resolve();
            }
            PennEngine.elements.standardCommands.actions.print.call(this, callback, ...args);
        },
        wait: function(resolve, test){   /* $AC$ Controller PElement.wait() Waits until the controller has been completed before proceeding $AC$ */
            if (test == "first" && this.done)       // If first and already complete, resolve already
                resolve();
            else {                                  // Else, extend finishedCallback and do the checks
                let resolved = false;
                let oldCallback = this.finishedCallback;
                this.finishedCallback = ()=>{
                    oldCallback.apply(this);
                    if (resolved) return;
                    if (test instanceof Object && test._runPromises && test.success){
                        test._runPromises().then(value=>{   // If a valid test command was provided
                            if (value=="success") {
                                resolved = true;
                                resolve();                  // resolve only if test is a success
                            }
                        });
                    }
                    else{                                    // If no (valid) test command was provided
                        resolved = true;
                        resolve();                          // resolve anyway
                    }
                };
            }
        }
    };

});


// DROPDOWN element
/* $AC$ PennController.newDropDown(name,text) Creates a new DropDown element $AC$ */
/* $AC$ PennController.getDropDown(name) Retrieves an existing DropDown element $AC$ */
window.PennController._AddElementType("DropDown", function(PennEngine) {

    this.immediate = function(id, text){
        if (text===undefined){
            text = id;
            if (id===undefined||typeof(id)!="string"||id.length==0)
                id = "DropDown";
            this.id = id;
        }
        this.id = id;
        this.initialText = text;                                        // Keep track of this for reset
    };

    this.uponCreation = function(resolve){
        this.options = [];
        this.selections = [];
        this.change = ()=>{
            if (this.jQueryElement.attr("disabled"))
                return;
            let value = this.jQueryElement.find("option:selected").val();
            let n = 0;
            for (let i = 0; i<this.options.length; i++)
                if (this.options[i]==value)
                    n = i;
            this.selections.push(["Selected", value, Date.now(), n]);
        }
        this.jQueryElement = $("<select>").append(
            $("<option>").html(this.initialText)
                        .attr({value: this.initialText, selected: true, disabled: true, hidden: true})
        );
        resolve();
    };

    this.value = function(){                                            // Value is text
        let s = this.selections;
        if (s instanceof Array && s.length>0) return s[s.length-1][1];
        else return "";
    };

    this.end = function(){
        if (this.log){
            if (this.selections.length){
                if (typeof(this.log)=="string" && this.log.match(/^\W*first\W*$/i))
                    PennEngine.controllers.running.save(this.type, this.id, ...this.selections[0]);
                else if (typeof(this.log)=="string" && this.log.match(/^\W*all\W*$/i))
                    for (let i=0; i<this.selections.length; i++)
                        PennEngine.controllers.running.save(this.type, this.id, ...this.selections[i]);
                else    // last
                    PennEngine.controllers.running.save(this.type, this.id, ...this.selections[this.selections.length-1]);
            }
            else
                PennEngine.controllers.running.save(this.type, this.id, "Selected", 
                                                    this.jQueryElement.find("option:selected").val(), "Never", "Default");
        }
    }
    
    let t = this;       // Needed to call settings form actions
    this.actions = {
        print: function(resolve, ...args){
            PennEngine.elements.standardCommands.actions.print.call(this, ()=>{
                this.jQueryElement.change(()=>this.change());
                resolve();
            }, ...args);
        },
        shuffle: function(resolve, keepSelected){   /* $AC$ DropDown PElement.shuffle() Shuffles the options currently in the drop-down $AC$ */
            if (keepSelected){
                let selected = this.jQueryElement.find("option:selected");
                if (selected.length)
                    keepSelected = selected.val();
                else
                    keepSelected = false;
            }
            fisherYates(this.options);
            this.jQueryElement.empty();
            this.jQueryElement.append( 
                $("<option>").html(this.initialText)
                        .attr({value: this.initialText, selected: true, disabled: true, hidden: true})
            );
            for (let i = 0; i < this.options.length; i++)
                this.jQueryElement.append( $("<option>").html(this.options[i]).attr("value",this.options[i]) );
            if (keepSelected)
                this.jQueryElement.find("option[value='"+keepSelected+"']").attr("selected",true);
            resolve();
        },
        remove: function(resolve, ...options){
            if (options.length)
                t.settings.remove.call(this, resolve, ...options);
            else
                PennEngine.elements.standardCommands.actions.remove.call(this, resolve);
        },
        select: function(resolve,  option){   /* $AC$ DropDown PElement.select(option) Selects the specified option $AC$ */
            let index = this.options.indexOf(option);
            if (index>-1){
                this.jQueryElement.find("option").removeAttr("selected");
                this.jQueryElement.find("option[value='"+option+"']").attr("selected",true);
            }
            else if (Number(option) > -1 && Number(option) < this.options.length){
                this.jQueryElement.find("option").removeAttr("selected");
                this.jQueryElement.find("option[value='"+this.options[Number(option)]+"']").attr("selected",true);
            }
            resolve();
        },
        wait: function(resolve, test){   /* $AC$ DropDown PElement.wait() Wait until an option is selectd before proceeding $AC$ */
            if (test == "first" && this.selections.length)  // If first and already selected, resolve already
                resolve();
            else {                                          // Else, extend change and do the checks
                let resolved = false;
                let oldChange = this.change;
                this.change = ()=>{
                    oldChange.call(this);
                    if (resolved)
                        return;
                    if (test instanceof Object && test._runPromises && test.success){
                        let oldDisabled = this.disabled;  // Disable temporarilly
                        this.jQueryElement.attr("disabled", true);
                        this.disabled = "tmp";
                        test._runPromises().then(value=>{   // If a valid test command was provided
                            if (value=="success") {
                                resolved = true;
                                resolve();                  // resolve only if test is a success
                            }
                            if (this.disabled=="tmp"){
                                this.disabled = oldDisabled;
                                this.jQueryElement.attr("disabled", oldDisabled);
                            }   
                        });
                    }
                    else{                                   // If no (valid) test command was provided
                        resolved = true;
                        resolve();                          // resolve anyway
                    }
                };
            }
        }
    };

    this.settings = {
        add: function(resolve,  ...options){   /* $AC$ DropDown PElement.add(options) Adds one or more options to the drop-down $AC$ */
            for (let i = 0; i < options.length; i++){
                options[i] = String(options[i]);
                if (this.options.indexOf(options[i])<0){
                    this.options.push(options[i]);
                    this.jQueryElement.append($("<option>").html(options[i]).attr('value',options[i]));
                }
            }
            resolve();
        },
        callback: function(resolve, ...commands){
            let oldChange = this.change;
            this.change = async function () {
                let disabled = this.jQueryElement.attr("disabled");
                await oldChange.apply(this);
                if (disabled)
                    return;
                for (let i = 0; i < commands.length; i++){
                    if (commands[i]._runPromises)
                        await commands[i]._runPromises();
                    else if (commands[i] instanceof Function)
                        await commands[i]();
                }
            }
            resolve();
        },
        once: function (resolve) {
            let oldChange = this.change;
            this.change = ()=>{
                oldChange.apply(this);
                this.jQueryElement.attr("disabled", true);
            }
            resolve();
        },
        remove: function(resolve,  option){   /* $AC$ DropDown PElement.remove(option) Removes the specified option from the drop-down $AC$ */
            let index = this.options.indexOf(option);
            if (index>-1){
                this.jQueryElement.find("option[value='"+option+"']").remove();
                this.options.splice(index,1);
            }
            resolve();
        }
    };
    
    this.test = {
        selected: function(option){   /* $AC$ DropDown PElement.test.selected(option) Checks that the specified option, or any if none specified, is selected $AC$ */
            let selected = this.jQueryElement.find("option:selected");
            if (!this.selections.length)
                return false;
            else if (option===undefined)
                return true;
            else if (option == selected.val())
                return true;
            else if (Number(option) > -1 && Number(option) < this.options.length)
                return selected.val() == this.options[Number(option)];
        }
    };

});


// EYETRACKER element
/* $AC$ PennController.newEyeTracker(name) Creates a new EyeTracker element $AC$ */
/* $AC$ PennController.getEyeTracker(name) Retrieves an existing EyeTracker element $AC$ */
window.PennController._AddElementType("EyeTracker", function(PennEngine) {

    let tracker;
    let initiated = false;
    let currentTracker;
    let sessionID;
    let storePoints = false;
    let past50Array = [[], []];
    let calibrated = false;
    let moveEvent = null;
    let clickEvent = null;
    let uploadURL = "";
    let detectedFace = false;

    window.PennController.EyeTrackerURL = url => uploadURL = url; /* $AC$ global.EyeTrackerURL(url) Will send eye-tracking data to specified URL $AC$ */

    // GENERIC FUNCTIONS
    //
    // from https://stackoverflow.com/a/23395136
    const beep = new Audio("data:audio/wav;base64,//uQRAAAAWMSLwUIYAAsYkXgoQwAEaYLWfkWgAI0wWs/ItAAAGDgYtAgAyN+QWaAAihwMWm4G8QQRDiMcCBcH3Cc+CDv/7xA4Tvh9Rz/y8QADBwMWgQAZG/ILNAARQ4GLTcDeIIIhxGOBAuD7hOfBB3/94gcJ3w+o5/5eIAIAAAVwWgQAVQ2ORaIQwEMAJiDg95G4nQL7mQVWI6GwRcfsZAcsKkJvxgxEjzFUgfHoSQ9Qq7KNwqHwuB13MA4a1q/DmBrHgPcmjiGoh//EwC5nGPEmS4RcfkVKOhJf+WOgoxJclFz3kgn//dBA+ya1GhurNn8zb//9NNutNuhz31f////9vt///z+IdAEAAAK4LQIAKobHItEIYCGAExBwe8jcToF9zIKrEdDYIuP2MgOWFSE34wYiR5iqQPj0JIeoVdlG4VD4XA67mAcNa1fhzA1jwHuTRxDUQ//iYBczjHiTJcIuPyKlHQkv/LHQUYkuSi57yQT//uggfZNajQ3Vmz+Zt//+mm3Wm3Q576v////+32///5/EOgAAADVghQAAAAA//uQZAUAB1WI0PZugAAAAAoQwAAAEk3nRd2qAAAAACiDgAAAAAAABCqEEQRLCgwpBGMlJkIz8jKhGvj4k6jzRnqasNKIeoh5gI7BJaC1A1AoNBjJgbyApVS4IDlZgDU5WUAxEKDNmmALHzZp0Fkz1FMTmGFl1FMEyodIavcCAUHDWrKAIA4aa2oCgILEBupZgHvAhEBcZ6joQBxS76AgccrFlczBvKLC0QI2cBoCFvfTDAo7eoOQInqDPBtvrDEZBNYN5xwNwxQRfw8ZQ5wQVLvO8OYU+mHvFLlDh05Mdg7BT6YrRPpCBznMB2r//xKJjyyOh+cImr2/4doscwD6neZjuZR4AgAABYAAAABy1xcdQtxYBYYZdifkUDgzzXaXn98Z0oi9ILU5mBjFANmRwlVJ3/6jYDAmxaiDG3/6xjQQCCKkRb/6kg/wW+kSJ5//rLobkLSiKmqP/0ikJuDaSaSf/6JiLYLEYnW/+kXg1WRVJL/9EmQ1YZIsv/6Qzwy5qk7/+tEU0nkls3/zIUMPKNX/6yZLf+kFgAfgGyLFAUwY//uQZAUABcd5UiNPVXAAAApAAAAAE0VZQKw9ISAAACgAAAAAVQIygIElVrFkBS+Jhi+EAuu+lKAkYUEIsmEAEoMeDmCETMvfSHTGkF5RWH7kz/ESHWPAq/kcCRhqBtMdokPdM7vil7RG98A2sc7zO6ZvTdM7pmOUAZTnJW+NXxqmd41dqJ6mLTXxrPpnV8avaIf5SvL7pndPvPpndJR9Kuu8fePvuiuhorgWjp7Mf/PRjxcFCPDkW31srioCExivv9lcwKEaHsf/7ow2Fl1T/9RkXgEhYElAoCLFtMArxwivDJJ+bR1HTKJdlEoTELCIqgEwVGSQ+hIm0NbK8WXcTEI0UPoa2NbG4y2K00JEWbZavJXkYaqo9CRHS55FcZTjKEk3NKoCYUnSQ0rWxrZbFKbKIhOKPZe1cJKzZSaQrIyULHDZmV5K4xySsDRKWOruanGtjLJXFEmwaIbDLX0hIPBUQPVFVkQkDoUNfSoDgQGKPekoxeGzA4DUvnn4bxzcZrtJyipKfPNy5w+9lnXwgqsiyHNeSVpemw4bWb9psYeq//uQZBoABQt4yMVxYAIAAAkQoAAAHvYpL5m6AAgAACXDAAAAD59jblTirQe9upFsmZbpMudy7Lz1X1DYsxOOSWpfPqNX2WqktK0DMvuGwlbNj44TleLPQ+Gsfb+GOWOKJoIrWb3cIMeeON6lz2umTqMXV8Mj30yWPpjoSa9ujK8SyeJP5y5mOW1D6hvLepeveEAEDo0mgCRClOEgANv3B9a6fikgUSu/DmAMATrGx7nng5p5iimPNZsfQLYB2sDLIkzRKZOHGAaUyDcpFBSLG9MCQALgAIgQs2YunOszLSAyQYPVC2YdGGeHD2dTdJk1pAHGAWDjnkcLKFymS3RQZTInzySoBwMG0QueC3gMsCEYxUqlrcxK6k1LQQcsmyYeQPdC2YfuGPASCBkcVMQQqpVJshui1tkXQJQV0OXGAZMXSOEEBRirXbVRQW7ugq7IM7rPWSZyDlM3IuNEkxzCOJ0ny2ThNkyRai1b6ev//3dzNGzNb//4uAvHT5sURcZCFcuKLhOFs8mLAAEAt4UWAAIABAAAAAB4qbHo0tIjVkUU//uQZAwABfSFz3ZqQAAAAAngwAAAE1HjMp2qAAAAACZDgAAAD5UkTE1UgZEUExqYynN1qZvqIOREEFmBcJQkwdxiFtw0qEOkGYfRDifBui9MQg4QAHAqWtAWHoCxu1Yf4VfWLPIM2mHDFsbQEVGwyqQoQcwnfHeIkNt9YnkiaS1oizycqJrx4KOQjahZxWbcZgztj2c49nKmkId44S71j0c8eV9yDK6uPRzx5X18eDvjvQ6yKo9ZSS6l//8elePK/Lf//IInrOF/FvDoADYAGBMGb7FtErm5MXMlmPAJQVgWta7Zx2go+8xJ0UiCb8LHHdftWyLJE0QIAIsI+UbXu67dZMjmgDGCGl1H+vpF4NSDckSIkk7Vd+sxEhBQMRU8j/12UIRhzSaUdQ+rQU5kGeFxm+hb1oh6pWWmv3uvmReDl0UnvtapVaIzo1jZbf/pD6ElLqSX+rUmOQNpJFa/r+sa4e/pBlAABoAAAAA3CUgShLdGIxsY7AUABPRrgCABdDuQ5GC7DqPQCgbbJUAoRSUj+NIEig0YfyWUho1VBBBA//uQZB4ABZx5zfMakeAAAAmwAAAAF5F3P0w9GtAAACfAAAAAwLhMDmAYWMgVEG1U0FIGCBgXBXAtfMH10000EEEEEECUBYln03TTTdNBDZopopYvrTTdNa325mImNg3TTPV9q3pmY0xoO6bv3r00y+IDGid/9aaaZTGMuj9mpu9Mpio1dXrr5HERTZSmqU36A3CumzN/9Robv/Xx4v9ijkSRSNLQhAWumap82WRSBUqXStV/YcS+XVLnSS+WLDroqArFkMEsAS+eWmrUzrO0oEmE40RlMZ5+ODIkAyKAGUwZ3mVKmcamcJnMW26MRPgUw6j+LkhyHGVGYjSUUKNpuJUQoOIAyDvEyG8S5yfK6dhZc0Tx1KI/gviKL6qvvFs1+bWtaz58uUNnryq6kt5RzOCkPWlVqVX2a/EEBUdU1KrXLf40GoiiFXK///qpoiDXrOgqDR38JB0bw7SoL+ZB9o1RCkQjQ2CBYZKd/+VJxZRRZlqSkKiws0WFxUyCwsKiMy7hUVFhIaCrNQsKkTIsLivwKKigsj8XYlwt/WKi2N4d//uQRCSAAjURNIHpMZBGYiaQPSYyAAABLAAAAAAAACWAAAAApUF/Mg+0aohSIRobBAsMlO//Kk4soosy1JSFRYWaLC4qZBYWFRGZdwqKiwkNBVmoWFSJkWFxX4FFRQWR+LsS4W/rFRb/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////VEFHAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAU291bmRib3kuZGUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMjAwNGh0dHA6Ly93d3cuc291bmRib3kuZGUAAAAAAAAAACU=");
    // from https://gist.github.com/revolunet/843889
    function lzw_encode(s) {
        var dict = {};
        var data = (s + "").split("");
        var out = [];
        var currChar;
        var phrase = data[0];
        var code = 256;
        for (var i=1; i<data.length; i++) {
            currChar=data[i];
            if (dict[phrase + currChar] != null) {
                phrase += currChar;
            }
            else {
                out.push(phrase.length > 1 ? dict[phrase] : phrase.charCodeAt(0));
                dict[phrase + currChar] = code;
                code++;
                phrase=currChar;
            }
        }
        out.push(phrase.length > 1 ? dict[phrase] : phrase.charCodeAt(0));
        for (var i=0; i<out.length; i++) {
            out[i] = String.fromCharCode(out[i]);
        }
        return out.join("");
    }

    // Handler to access the global webgazer object
    function getGazer() {
        if (window.webgazer && tracker)
            return window.webgazer;
        PennEngine.debug.error("Tried to access the EyeTracker before it was set.")
    }

    // Show/Hide the video and the tracking point
    function showTracker(show){
        show = !(show===false);
        getGazer().showFaceFeedbackBox(show);
        getGazer().showFaceOverlay(show);
        getGazer().showPredictionPoints(show);
        getGazer().showVideo(show);
        $("#webgazerGazeDot").css('pointer-events', 'none');
    }

    // Calibration functions from WebGazer's example page
    function calculatePrecisionPercentages(precisionPercentages, windowHeight, x50, y50, staringPointX, staringPointY) {
        for (n = 0; n < 50; n++) {
          // Calculate distance between each prediction and staring point
          let xDiff = staringPointX - x50[n];
          let yDiff = staringPointY - y50[n];
          let distance = Math.sqrt((xDiff * xDiff) + (yDiff * yDiff));
          // Calculate precision percentage
          let halfWindowHeight = windowHeight / 2;
          let precision = 0;
          if (distance <= halfWindowHeight)
            precision = 100 - (distance / halfWindowHeight * 100);
          else
            precision = 0;
          // Store the precision
          precisionPercentages[n] = precision;
        }
    }
    function calculateAverage(precisionPercentages) {
        let precision = 0;
        for (n = 0; n < 50; n++) {
          precision += precisionPercentages[n];
        }
        precision = precision / 50;
        return precision;
    }
    function calculatePrecision(past50Array) {
        let windowHeight = window.innerHeight;
        let windowWidth = window.innerWidth;
        // Retrieve the last 50 gaze prediction points
        let x50 = past50Array[0];
        let y50 = past50Array[1];
        // Calculate the position of the point the user is staring at
        let staringPointX = windowWidth / 2;
        let staringPointY = windowHeight / 2;
        let precisionPercentages = new Array(50);
        calculatePrecisionPercentages(precisionPercentages, windowHeight, x50, y50, staringPointX, staringPointY);
        let precision = calculateAverage(precisionPercentages);
        // Return the precision measurement as a rounded percentage
        return Math.round(precision);
    };


    // Shows a calibration screen
    function calibrate(resolve, element, threshold, remainingAttempts){
        // Start training the model
        getGazer().addMouseEventListeners();        // Retrieve moveEvent
        PennEngine.debug.log("Starting calibration");
        past50Array = [[], []];                 // To keep track of 50 last looks
        let calibrationDiv = $("<div>").css({
            position: 'absolute', left: 0, top: 0, width: "100vw", height: "100vh",
            'background-color': 'white', 'text-align': 'center'
        });
        // Will print a dot in the middle of the screen
        let startCalculation = async()=>{
            await new Promise(r=>setTimeout(r,1000));
            const dot = $("<div>").css({position:'fixed',display: 'block',width:'48px',height:'48px',background:'green',
                        'border-radius':'100%',left:'calc(50vw - 24px)',top:'calc(50vh - 24px)','z-index': 999999});
            $("body").append(dot);
            clickEvent({clientX: window.innerWidth/2, clientY: window.innerHeight/2});
            // Launches calculation per se
            $(this).attr('disabled', true);
            storePoints = true;
            setTimeout(()=>{
                storePoints = false;
                dot.detach();
                let precision = calculatePrecision(past50Array);
                element._precision = precision;
                PennEngine.debug.log("Tracker's precision: "+precision);
                past50Array = [[],[]];
                PennEngine.controllers.running.save(element.type, element.id, "calibration", precision, 
                                                    Date.now(), (remainingAttempts==1?"Last attempt":"NULL"));
                if (threshold && Number(threshold)>0 && precision < threshold && remainingAttempts != 1){
                    calibrated = false;
                    $(this).remove();
                    showTracker(true);
                    calibrationDiv.append(
                        $("<div>").html("<p>It looks like we were not able to precisely calibrate the tracker:</p>"+
                                        "<p>You calibration score is "+precision+" and you need at least "+threshold+"</p>"+
                                        "<p>Here are a few tips to help you better self-calibrate:</p>"+
                                        "<p>- try adjusting your webcam based on the video in the top-left corner.</p>"+
                                        "<p>- if you use an external webcam, make sure it is fixed to the top of your screen.</p>"+
                                        "<p>- try raising your screen so as to align your webcam with your eyes</p>"+
                                        "<p><img style='display: inline-block; height: 75px;' src='http://files.lab.florianschwarz.net/ibexfiles/Pictures/lookdown.png'>"+
                                        "<img style='display: inline-block; height: 75px;' src='http://files.lab.florianschwarz.net/ibexfiles/Pictures/lookstraight.png'></p>"+
                                        "<p>- make sure no one is standing next to you.</p>"+
                                        "<p>- make sure you are not wearing eyeglasses reflecting ambiant light.</p>"+
                                        "<p>- make sure the algorithm detects your face (it should appear green).</p>"+
                                        "<p>- make sure there is enough ambient light for face-detection.</p>"+
                                        "<p>- make sure you follow your mouse pointer with your eyes.</p>"+
                                        "<p>- make sure you keep looking at the middle button until the end.</p>")
                                    .css({margin: 'auto', 'margin-top': '5em'})
                    ).append(
                        // Retry button
                        $("<button>Retry</button>").click(function(){
                            calibrationDiv.remove();
                            // Reset the model (forget previous estimations)
                            window.webgazer.reg.RidgeWeightedReg.call(window.webgazer.getRegression()[0]);
                            calibrate(resolve, element, threshold, remainingAttempts-1);
                        }).css('margin','auto')
                    );
                }
                // Threshold met: tracker is calibrated OR no attempts left
                else {
                    calibrated = true;
                    calibrationDiv.remove();
                    // showTracker(false);
                    // Do not train the model on actual trials (too much on screen)
                    getGazer().removeMouseEventListeners();
                    resolve();
                }
            }, 3000);   // 3s for calculation
        };
        // If not calibrated yet, print 'Start calibration'
        if (!calibrated){
            showTracker(true);
            const width = 48, height = 48;
            const stay_cycles = 120;
            let points = [];
            const nextDot = async timestamp=>{
                const position = points.shift();
                const dot = $("<div>").css({
                    position:'fixed',
                    display: 'block',
                    width:width+'px',
                    height:height+'px',
                    background:'green',
                    'border-radius':'100%',
                    left: position[0],
                    top: position[1],
                    'z-index': 999999
                });
                await new Promise(r=>setTimeout(r,750));
                $("body").append(dot);
                beep.play();
                await new Promise(r=>setTimeout(r,250));
                let remaining_cycles = stay_cycles;
                const trainDot = ()=> {
                    if (remaining_cycles%2) // Click ever other cycle
                        clickEvent({clientX:position[0]+width/2,clientY:position[1]+height/2});
                    if (remaining_cycles==0){
                        dot.detach();
                        if (points.length)
                            nextDot();
                        else
                            startCalculation();
                    }
                    else{
                        remaining_cycles--;
                        window.requestAnimationFrame(trainDot);
                    }
                }
                trainDot();
            }
            const printStartButton = ()=>$("body").append(
                $("<button>I'm ready. Start calibration</button>").bind('click',e=>{
                    getGazer().removeMouseEventListeners();     // Will manually call moveEvent
                    showTracker(false);
                    $(e.target).detach();
                    const wwidth = window.innerWidth, wheight = window.innerHeight;
                    points = [
                        [(wwidth-width)/2,(wheight-height)/2], // middle center
                        ...[
                            [0,0], // top left
                            [(wwidth-width)/2,0], // top center
                            [wwidth-width,wheight-height], // bottom right
                            [(wwidth-width)/2,wheight-height], // bottom center
                            [wwidth-width,(wheight-height)/2], // middle right
                            [wwidth-width,0], // top right
                            [0,(wheight-height)/2], // middle left
                            [0,wheight-height], // bottom left
                        ].sort(v=>0.5-Math.random())
                        ,
                        [(wwidth-width)/2,(wheight-height)/2] // middle center (again)
                    ];
                    nextDot();
                }).css({position:'fixed',display:'block',left:'50vw',top:'50vh',transform:'translate(-50%,-50%)'})
            );
            if (detectedFace) printStartButton();
            else{
                const waitmessage = $("<p>Wait until your face is detected (you should see green contours around it)\
                                    and then click anywhere on the page until you see a red dot</p>");
                waitmessage.css({position:'fixed',left:'50vw',top:'50vh',transform:'translate(-50%,-50%)'});
                $("body").append(waitmessage);
                const gotRedDot = ()=>{
                    if (detectedFace) {
                        waitmessage.remove();
                        printStartButton();
                    } 
                    else
                        window.requestAnimationFrame(gotRedDot);
                }
                gotRedDot();
            }
        }
        else
            startCalculation();
        // Make sure the video appears over our div
        $("#webgazerVideoFeed").before(calibrationDiv);
    }

    const parseData = (data,clock) => {
        detectedFace = true;
        if (storePoints){
            past50Array[0].push(data.x);
            past50Array[1].push(data.y);
            if (past50Array[0].length>50)
                past50Array[0].shift();
            if (past50Array[1].length>50)
                past50Array[1].shift();
        }
        if (currentTracker)
            currentTracker.look(data,clock);
    }

    // (Re)set the tracker and its regression model
    let resetTracker = function(){
        past50Array = [[],[]];
        tracker = window.webgazer.setRegression('weightedRidge')
            .setTracker('TFFacemesh')
            .setGazeListener((data, clock) => {
                if (data == null) return;
                else if (data instanceof Promise) data.then( d=>parseData(d,clock) );
                else if (data.x) parseData(data,clock);
            });        
        let oldAME = document.addEventListener;         // Catch the mousemove function
        document.addEventListener = function(...args){  // NOW!
            if (args[0]=="mousemove"&&typeof(args[1])=="function"&&args[2]===true&&!moveEvent)
                moveEvent = args[1];
            if (args[0]=="click"&&typeof(args[1])=="function"&&args[2]===true&&!clickEvent)
                clickEvent = args[1];
            oldAME.apply(document, args);
        };
        tracker.params.showVideoPreview = true;
        tracker.begin();
        window.webgazer.showPredictionPoints(true);
        showTracker(false);
    }

    // ELEMENT
    //
    let initiate = function(){
        sessionID = PennEngine.utils.guidGenerator();
        initiated = true;
        let webgazer = document.createElement('script');
        webgazer.setAttribute('src','https://cdn.jsdelivr.net/gh/penncontroller/penncontroller/releases/latest/webgazer.min.js');
        document.head.appendChild(webgazer);
        let checkIfReady = () => {
            if (window.webgazer) {
                resetTracker();
            } else {
                setTimeout(checkIfReady, 100);
            }
        }
        if (tracker===undefined)
            checkIfReady();
    }

    this.immediate = function(id, span, proportion){
        if (!initiated)
            initiate();
        if (typeof(id)=="number" && (span===undefined||(typeof(span)=="number"&&proportion===undefined))){
            proportion = span;
            span = id;
            if (id===undefined||typeof(id)!="string"||id.length==0)
                id = "EyeTracker";
            this.id = id;
        }
        this.span = Number(span);
        this.proportion = proportion;
    };

    this.uponCreation = function(resolve){
        this.enabled = false;
        this.elements = [];
        this.counts = {times: []};
        this.callback = null;
        this.log = false;
        this.trainOnMouseMove = true;
        let previousClock;
        // Called every few ms (varies w/ performance) when EyeTracker started
        this.look = function (data,clock) {
            if (!this.enabled || data==null || data.x===undefined || data.y===undefined)
                return;

            this.elements.map(el=>el.jQueryElement.removeClass("PennController-eyetracked"));
            // Check every element
            for (let e = 0; e < this.elements.length; e++){
                const element = this.elements[e].jQueryElement,
                      within = PennEngine.utils.overToScale.call(element,data.x,data.y);
                if (within)
                    this.counts['_'+this.elements[e].id].push(1);
                else
                    this.counts['_'+this.elements[e].id].push(0);
                // Span-based triggering: check proportion of gazes over SPAN cycles
                if (!isNaN(this.span)){
                    // GAZES stores looks (true vs false) to each element over SPAN cycles
                    if (!this.hasOwnProperty('gazes') || this.elements.length != this.gazes.length)
                        this.gazes = this.elements.map(()=>[]);
                    if (within)
                        this.gazes[e].push(true);
                    else
                        this.gazes[e].push(false);
                    if (this.gazes[e].length>this.span)
                        this.gazes[e].shift()
                    let proportion = Number(this.proportion);
                    if (isNaN(proportion))
                        proportion = this.span/100;
                    if (proportion <= 0)
                        proportion = 0.01;
                    else if (proportion >= 1)
                        proportion = 0.99;                  
                    if (this.gazes[e].filter(e=>e).length/this.gazes[e].length>proportion)
                        element.addClass("PennController-eyetracked");  
                    // If there is a callback function
                    if (this.callback && this.callback instanceof Function)
                        this.callback.call(this.elements[e], data.x, data.y);
                }
                // Else, each cycle counts
                else if (within){
                    element.addClass("PennController-eyetracked");
                    // If there is a callback function
                    if (this.callback && this.callback instanceof Function)
                        this.callback.call(this.elements[e], data.x, data.y);
                }
            }
            // Keep track of cycles' timestamps (relative for shorter encoding)
            if (previousClock === undefined)
                previousClock = clock;
            this.counts.times.push(Math.round(clock - previousClock));
            previousClock = clock;
        };
        resolve();
    };

    this.end = function(){
        showTracker(false);
        getGazer().removeMouseEventListeners();
        this.enabled = false;
        currentTracker = undefined;
        if (this.log && this.counts.times.length){
            let url = uploadURL;
            let expName = window.location.href.replace(/[^/]+$/,'')
                                              .replace(/[^\w\d]/g,'')
                                              .replace(/[\.]{2,}/g,'');
            PennEngine.debug.log("expname", expName);
            let sendLine = (parameter, value) => {
                let data = {
                    'experiment': expName,
                    'id': sessionID,
                    'pcnumber': PennEngine.controllers.running.id,
                    'parameter': parameter,
                    'value': value
                 };
                 let fd = "json="+JSON.stringify(data);
                 var xhr = new XMLHttpRequest();     // XMLHttpRequest rather than jQuery's Ajax (mysterious CORS problems with jQuery 1.8)
                 xhr.open('POST', url, true);
                 xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
                 xhr.onreadystatechange = ()=>{
                     if (xhr.status != 200)
                        PennEngine.controllers.running.save(this.type, this.id, "Upload", "Error", Date.now(), parameter);
                 };
                 xhr.send(fd);
            }
            PennEngine.debug.log("about to send times", this.counts);
            sendLine('times', lzw_encode(this.counts.times.join('.')));
            delete this.counts.times;
            let keys = Object.keys(this.counts);
            for (let k = 0; k < keys.length; k++){
                sendLine(keys[k], lzw_encode(this.counts[keys[k]].join('.')));
            }
            PennEngine.controllers.running.save(this.type, this.id, "Filename", expName+'/'+sessionID, Date.now(), "NULL");
        }
        delete this.counts;
    };

    this.value = function(){
        return 'EyeTracker';
    };

    this.actions = {
        calibrate(resolve, threshold, attempts){    /* $AC$ EyeTracker PElement.calibrate(threshold,attempts) Starts a sequence of calibration $AC$ */
            if (!(Number(attempts)>0))
                attempts = -1;
            calibrate(resolve, this, threshold, attempts);
        },
        hideFeedback: function(resolve){    /* $AC$ EyeTracker PElement.hideFeedback() Hides the red dot estimating the position of the eyes on the page $AC$ */
            showTracker(false);
            resolve();
        },
        start: function(resolve){    /* $AC$ EyeTracker PElement.start() Starts parsing eye movements $AC$ */
            this.enabled = true;
            currentTracker = this;
            resolve();
        },
        stop: function(resolve){    /* $AC$ EyeTracker PElement.stop() Stops parsing eye movements $AC$ */
            this.enabled = false;
            currentTracker = undefined;
            resolve();
        },
        stopTraining: function(resolve){    /* $AC$ EyeTracker PElement.stopTraining() Stop training the model whenever the mouse moves or clicks $AC$ */
            getGazer().removeMouseEventListeners();
            getGazer().showPredictionPoints(false);
            resolve();
        },
        showFeedback: function(resolve){    /* $AC$ EyeTracker PElement.showFeedback() Shows the red dot estimating the position of the eyes on the page $AC$ */
            showTracker();
            resolve();
        },
        train: function(resolve, showDot){    /* $AC$ EyeTracker PElement.train() Starts training the model on every click and mouse movement (default) $AC$ */
            getGazer().addMouseEventListeners();
            if (!this.trainOnMouseMove)
                document.removeEventListener("mousemove", moveEvent, true);
            getGazer().showPredictionPoints(showDot);
            resolve();
        }
    }

    this.settings = {
        add: function(resolve, ...elements){    /* $AC$ EyeTracker PElement.add(elements) Adds one or more elements of interest to the EyeTracker $AC$ */
            for (let e = 0; e < elements.length; e++){
                let element = elements[e];
                if (element && element._element && this.elements.indexOf(element._element)<0){
                    this.elements.push(element._element);
                    this.counts['_'+element._element.id] = [];
                }
            }
            resolve();
        },
        callback: function(resolve, func){    /* $AC$ EyeTracker PElement.callback(function) Runs the specified javascript function whenever the eyes look at an element of interest $AC$ */
            if (func instanceof Function)
                this.callback = func;
            resolve();
        },
        log: function(resolve){    /* $AC$ EyeTracker PElement.log() Logs the X and Y positions of the eyes every N milliseconds (see documentation) $AC$ */
            this.log = true;
            resolve();
        },
        trainOnMouseMove: function(resolve, yesNo){    /* $AC$ EyeTracker PElement.trainOnMouseMove(true) Tells the model whether to use mouse movements to improve its estimations $AC$ */
            this.trainOnMouseMove = yesNo===undefined||yesNo;
            if (!this.trainOnMouseMove)
                document.removeEventListener("mousemove", moveEvent, true);
            resolve();
        }
    }

    this.test = {
        calibrated: function(){
            return calibrated;
        },
        ready: function(){
            return window.webgazer && window.webgazer.isReady();
        },
        score : function(arg){
            const s = this._precision;
            if (arg instanceof Function)
                return arg.call(this, s);
            else if (!isNaN(Number(arg)))
                return s >= Number(arg);
            else 
                return calibrated;
        }
    }

});


// FUNCTION element
/* $AC$ PennController.newFunction(name,function) Creates a new Function element $AC$ */
/* $AC$ PennController.getFunction(name) Retrieves an existing Function element $AC$ */
window.PennController._AddElementType("Function", function(PennEngine) {

    this.immediate = function(id, func){
        if (typeof id == "function"){
            func = id;
            if (id===undefined||typeof(id)!="string"||id.length==0)
                id = "Function";
            this.id = id;
        }
        this.function = func;
    };

    this.uponCreation = function(resolve){
        // void
        if (!PennEngine.controllers.running.hasOwnProperty("internalVariables"))
            PennEngine.controllers.running.internalVariables = {};
        resolve();
    };

    this.end = function(){
        PennEngine.controllers.running.internalVariables = undefined;
    };

    this.value = function(){                                    // Value is result of calling the function
        return this.function.apply(PennEngine.controllers.running.internalVariables);
    };

    this.actions = {
        call: async function(resolve, ...args){  /* $AC$ Function PElement.call() Executes the function $AC$ */
            await this.function.apply(PennEngine.controllers.running.internalVariables, args);
            resolve();
        }
    };

    this.test = {
        is: function(value){  /* $AC$ Function PElement.test.is(value) Checks that the function returns the specified value $AC$ */
            let returned = this.function.apply(PennEngine.controllers.running.internalVariables);
            if (value===undefined)
                return !returned;
            else
                return returned==value;
        }
    }

});


(function(){

var prefix = null;
let oldResPref = window.PennController.ResetPrefix;
window.PennController.ResetPrefix = function(prefixName) {
    oldResPref(prefixName);
    if (typeof(prefix)=="string")           // Catch the new prefix
        prefix = window[prefixName];
    else
        prefix = window;                    // If no (valid) prefix name, drop any prefix (object = window)
};

// GROUP element
/* $AC$ PennController.newGroup(name,elements) Creates a new Group element $AC$ */
/* $AC$ PennController.getGroup(name) Retrieves an existing Group element $AC$ */
window.PennController._AddElementType("Group", function(PennEngine) {

    PennEngine.Prerun(()=>{
        for (let get in PennController.Elements){
            if (!get.match(/get[A-Z]/))
                continue;
            let oldGet = PennController.Elements[get];
            PennController.Elements[get] = function (id) {
                if (id instanceof Object && id.hasOwnProperty("type") && id.type == "Group"){
                    let ret = oldGet();
                    let oldSettings = {};
                    let oldActions = {};
                    for (let s in ret.settings)
                        oldSettings[s] = ret.settings[s];
                    for (let a in ret)
                        if (a instanceof Function)
                            oldActions[a] = ret[a];        
                    let elements = [];
                    for (let e in id._element.elements){
                        let element = id._element.elements[e];
                        if (!get.match(element.type))
                            continue;
                        elements.push(element);
                    }
                    if (!elements.length)
                        return PennEngine.debug.error("No element for "+get+" in Group &quot;"+id._element.id+"&quot;");
                    for (let s in ret.settings){
                        ret.settings[s] = function(...rest){
                            for (let e in elements)
                                ret._promises = ret._promises.concat(oldGet(elements[e].id).settings[s](...rest)._promises);
                            return ret;
                        }
                    }
                    for (let a in ret){
                        if (a instanceof Function){
                            ret[a] = function(...rest){
                                for (let e in elements)
                                    ret._promises = ret._promises.concat(oldGet(elements[e].id)[a](...rest)._promises);
                                return ret;
                            }
                        }
                    }
                    return ret;
                }
                else
                    return oldGet(id);
            }
            if (prefix)
                prefix[get] = window.PennController.Elements[get];
        }
    });

    function shuffle(resolve, ...elementCommands){
        let elementsToShuffle = [];
        if (!elementCommands.length)                // If no argument, just add every element
            elementsToShuffle = [].concat(this.elements);
        else {                                      // Else, first feed elementsToShuffle
            for (let e in elementCommands) {        // Go through each elementCommand
                if (!(elementCommands[e]._element && elementCommands[e]._element.jQueryElement instanceof jQuery)){
                    PennEngine.debug.error("Invalid element #"+e+" in shuffling Group "+this.id);
                    continue;
                }
                let index = this.elements.map(e=>e[0]).indexOf(elementCommands[e]._element);
                if (index<0){
                    PennEngine.debug.error("Cannot shuffle element "+elementCommands[e]._element.id+" for it has not been added to Group "+this.id);
                    continue;
                }
                elementsToShuffle.push(this.elements[index]);
            }
        }
        let shuffled = [].concat(elementsToShuffle);
        fisherYates(shuffled);                              // Now, shuffle the elements
        let map = shuffled.map((s,i)=>Object({              // Create an association map of old to new elements
            old: {element: elementsToShuffle[i], index: this.elements.indexOf(elementsToShuffle[i])},
            new: {element: s, index: this.elements.indexOf(s)}
        }));
        let shuffleTags = [];
        map.map((m,i)=>{
            this.elements[m.old.index] = m.new.element;
            let shuf = $("<shuffle>").attr("i", i);         // Indicate the position in the map
            m.old.element.jQueryElement.before(shuf);    // Place a shuffle tag before the unshuffled element
            shuf.css({                                      // Store unshuffled element's style to apply to new element later
                        position: m.old.element.jQueryElement.css("position"),
                        left: m.old.element.jQueryElement.css("left"),
                        top: m.old.element.jQueryElement.css("top")
                });
            shuffleTags.push(shuf);                         // Add the shuffle tag to the list
        }); 
        shuffleTags.map(tag=>{                              // Go through each shuffle tag
            let i = tag.attr('i');                          // Retrieve the index in the map
            let jQueryElementToMove = map[i].new.element.jQueryElement;
            tag.after( jQueryElementToMove );               // Move the new element after the tag
            jQueryElementToMove.css({                       // And apply the old element's style
                position: tag.css("position"),
                left: tag.css("left"),
                top: tag.css("top")
            });
            tag.remove();                                   // Remove shuffle tag from DOM
        });
        resolve();
    }

    this.immediate = function(id, ...elements){
        if (typeof(id) != "string" && id instanceof Object && id.hasOwnProperty("_element")){
            elements = [id, ...elements];
            if (id===undefined||typeof(id)!="string"||id.length==0)
                id = "Group";
            this.id = id;
        }
        this.initialElements = elements;
    };

    this.uponCreation = function(resolve){
        this.elements = this.initialElements.map(command=>command._element||PennEngine.debug.error("Invalid element passed to Group"));
        resolve();
    };

    this.end = function(){
        this.elements = [];
    };

    this.value = function(){                                // Value is last selection
        return this.elements.length;
    };
    
    this.actions = {
        shuffle: function(resolve, ...elementCommands){ /* $AC$ Group PElement.shuffle() Shuffles the positions of the elements on the page $AC$ */
            shuffle.apply(this, [resolve].concat(elementCommands));
        }
    };
    
    let t = this;   // Needed to call settings from actions
    this.actions = {
        remove: function(resolve, ...elementCommands){
            if (elementCommands.length)
                t.settings.remove.call(this, resolve, ...elementCommands);
            else
                PennEngine.elements.standardCommands.actions.remove.call(this, resolve);
        }
    };

    this.settings = {
        add: function(resolve, ...elementCommands){ /* $AC$ Group PElement.add(elements) Adds one or more elements to the group $AC$ */
            for (e in elementCommands) {
                let element = elementCommands[e]._element;
                if (element == undefined || element.id == undefined)
                    PennEngine.debug.error("Invalid element added to Group "+this.id);
                else if (this.elements.indexOf(element)>-1)
                    PennEngine.debug.error("Element &quot;"+element.id+"&quot; already part of Group "+this.id);
                else
                    this.elements.push(element);
            }
            resolve();
        },
        remove: function(resolve, ...elementCommands){ /* $AC$ Group PElement.remove(elements) Removes one or more elements from the group $AC$ */
            for (e in elementCommands) {
                let element = elementCommands[e]._element;
                let index = this.elements.indexOf(element);
                if (index>-1)
                    this.elements = this.elements.splice(index,1);
            }
            resolve();
        }
    };

    for (let a in PennEngine.elements.standardCommands.actions){
        this.actions[a] = async function(resolve, ...rest){
            for (let e = 0; e < this.elements.length; e++)
                await PennController.Elements['get'+this.elements[e].type](this.elements[e].id)[a](...rest)._runPromises();
            resolve();
        }
    }
    for (let s in PennEngine.elements.standardCommands.settings){
        this.settings[s] = async function(resolve, ...rest){
            for (let e = 0; e < this.elements.length; e++){
                console.log("this",this.elements, this.elements[e].type);
                await PennController.Elements['get'+this.elements[e].type](this.elements[e].id).settings[s](...rest)._runPromises();
            }
            resolve();
        }
    }

    this.test = {
        index: function(elementCommand, index){     /* $AC$ Group PElement.test.index(element,index) Checks the index of the specified element in the group $AC$ */
            if (elementCommand == undefined || elementCommand._element == undefined)
                return PennEngine.debug.error("Invalid element tested for Group "+this.id, elementCommand._element.id);
            else if (Number(index) >= 0)
                return ( this.elements.indexOf(elementCommand._element) == Number(index) );
            else 
                return ( this.elements.indexOf(elementCommand._element) >= 0 );
        }
    };

});

// Add a .settings.group command to all elements
window.PennController._AddStandardCommands(function(PennEngine){
    this.settings = {
        group: async function(resolve, groupRef){     /* $AC$ all PElements.group(name) Adds the element to the Group element with the specified name $AC$ */
            var group;
            if (typeof(groupRef)=="string"){
                let elements = PennEngine.controllers.running.options.elements;
                if (elements.hasOwnProperty("Group") && elements.Group.hasOwnProperty(groupRef))
                    group = elements.Group[groupRef];
                else
                    return PennEngine.debug.error("No Group found named &quot;"+groupRef+"&quot;");
            }
            else if (groupRef._element && groupRef._runPromises){
                if (groupRef._element.type=="Group"){
                    await groupRef._runPromises();
                    group = groupRef._element;
                }
                else
                    PennEngine.debug.error("Tried to add &quot;"+this.name+"&quot; to an invalid Group");
            }
            if (group.elements.indexOf(this)>-1)
                PennEngine.debug.error("Element &quot;"+this.id+"&quot; already part of Group &quot;"+group.id+"&quot;");
            else
                group.elements.push(this);
            resolve();
        }
    }
});

})();


// HTML element
/* $AC$ PennController.newHtml(name,file) Creates a new Html element $AC$ */
/* $AC$ PennController.getHtml(name) Retrieves an existing Html element $AC$ */
window.PennController._AddElementType("Html", function(PennEngine) {

    // Imported from Form.js
    function alertOrAddError(name, error) {
        var ae = $("label.error[for=__ALL_FIELDS__]");
        if (ae.length > 0) {
            ae.addClass("Form-error-text").text(error);
            return;
        }
        var e = $("label.error[for=" + escape(name) + "]");
        if (e.length > 0)
            e.addClass("Form-error-text").text(error);
        else 
            alert(error);
    }

    // Tests whether the form has been completely filled (imported and adapted from Form.js)
    function isComplete(){
        var dom = this.jQueryElement[0];

        var inps = $(dom).find("input[type=text]");
        var tas = $(dom).find("textarea");
        for (var i = 0; i < tas.length; ++i) { inps.push(tas[i]); }

        for (var i = 0; i < inps.length; ++i) {
            var inp = $(inps[i]);

            if (inp.hasClass("obligatory") && ((! inp.attr('value')) || inp.attr('value').match(/^\s*$/)))
                return false;
        }

        var checks = $(dom).find("input[type=checkbox]");
        for (var i = 0; i < checks.length; ++i) {
            var check = $(checks[i]);

            // Checkboxes with the 'obligatory' class must be checked.
            if (!check.attr('checked') && check.hasClass('obligatory'))
                return false;
        }

        var rads = $(dom).find("input[type=radio]");
        // Sort by name.
        var rgs = { };
        for (var i = 0; i < rads.length; ++i) {
            var rad = $(rads[i]);
            if (rad.attr('name')) {
                if (! rgs[rad.attr('name')])
                    rgs[rad.attr('name')] = [];
                rgs[rad.attr('name')].push(rad);
            }
        }
        for (var k in rgs) {
            // Check if it's oblig.
            var oblig = false;
            var oneIsSelected = false;
            for (var i = 0; i < rgs[k].length; ++i) {
                if (rgs[k][i].hasClass('obligatory')) oblig = true;
                if (rgs[k][i].attr('checked'))
                    oneIsSelected = true;
            }
            
            if (oblig && (!oneIsSelected))
                return false;
        }
        
        return true;
    }

    this.immediate = function(id, html){
        if (html===undefined){
            html = id;
            if (id===undefined||typeof(id)!="string"||id.length==0)
                id = "Html";
            this.id = id;
        }
        this.html = html;
    };

    this.uponCreation = function(resolve){
        if (CHUNKS_DICT.hasOwnProperty(this.html))      // Check CHUNKS_DICT upon creation of element
            this.jQueryElement = $("<div>").html(htmlCodeToDOM({include: this.html}));
        else
            this.jQueryElement = $("<div>").append(this.html);
        this.log = false;
        this.checkboxWarningMessage = "You must check the %name% checkbox to continue.";
        this.inputWarningMessage = "The \u2018%name%\u2019 field is obligatory.";
        this.radioWarningMessage = "You must select an option for \u2018%name%\u2019.";
        resolve();
    };

    this.end = function(){
        if (!this.log)
            return;
        // Imported from Form.js (and adapted)
        var dom = this.jQueryElement[0];

        var inps = $(dom).find("input[type=text]");
        var tas = $(dom).find("textarea");
        for (var i = 0; i < tas.length; ++i) { inps.push(tas[i]); }

        for (var i = 0; i < inps.length; ++i) {
            var inp = $(inps[i]);

            PennEngine.controllers.running.save(
                this.type,
                this.id,
                csv_url_encode(inp.attr('name')),
                csv_url_encode(inp.attr('value')),
                Date.now(),
                "text input"
            );
        }

        var checks = $(dom).find("input[type=checkbox]");
        for (var i = 0; i < checks.length; ++i) {
            var check = $(checks[i]);

            PennEngine.controllers.running.save(
                this.type,
                this.id,
                check.attr('name'),
                check.attr('checked') ? "checked" : "unchecked", 
                Date.now(), 
                "checkbox"
            );
        }

        var rads = $(dom).find("input[type=radio]");
        // Sort by name.
        var rgs = { };
        for (var i = 0; i < rads.length; ++i) {
            var rad = $(rads[i]);
            if (rad.attr('name')) {
                if (! rgs[rad.attr('name')])
                    rgs[rad.attr('name')] = [];
                rgs[rad.attr('name')].push(rad);
            }
        }
        for (var k in rgs) {
            // Check if it's oblig.
            var oneIsSelected = false;
            var oneThatWasSelected;
            for (var i = 0; i < rgs[k].length; ++i) {
                if (rgs[k][i].attr('checked')) {
                    oneIsSelected = true;
                    oneThatWasSelected = i;
                }
            }
            if (oneIsSelected)
                PennEngine.controllers.running.save(
                    this.type,
                    this.id,
                    rgs[k][0].attr('name'),
                    rgs[k][oneThatWasSelected].attr('value'), 
                    Date.now(), 
                    "radio button"
                );
        }
    };

    this.value = function(){                                    // Value is whether it's complete
        return isComplete.apply(this);
    };

    this.actions = {
        warn: function(resolve){    /* $AC$ Html PElement.warn() Displays warning messages if some obligatory fields were not filled $AC$ */
            var dom = this.jQueryElement[0];

            var inps = $(dom).find("input[type=text]");
            var tas = $(dom).find("textarea");
            for (var i = 0; i < tas.length; ++i) { inps.push(tas[i]); }

            for (var i = 0; i < inps.length; ++i) {
                var inp = $(inps[i]);

                if (inp.hasClass("obligatory") && ((! inp.attr('value')) || inp.attr('value').match(/^\s*$/)))
                    alertOrAddError(inp.attr('name'), this.inputWarningMessage.replace(/%name%/gi,inp.attr('name')));
            }

            var checks = $(dom).find("input[type=checkbox]");
            for (var i = 0; i < checks.length; ++i) {
                var check = $(checks[i]);

                // Checkboxes with the 'obligatory' class must be checked.
                if (! check.attr('checked') && check.hasClass('obligatory'))
                    alertOrAddError(check.attr('name'), this.checkboxWarningMessage.replace(/%name%/gi,check.attr('name')));
            }

            var rads = $(dom).find("input[type=radio]");
            // Sort by name.
            var rgs = { };
            for (var i = 0; i < rads.length; ++i) {
                var rad = $(rads[i]);
                if (rad.attr('name')) {
                    if (! rgs[rad.attr('name')])
                        rgs[rad.attr('name')] = [];
                    rgs[rad.attr('name')].push(rad);
                }
            }
            for (var k in rgs) {
                // Check if it's oblig.
                var oblig = false;
                var oneIsSelected = false;
                for (var i = 0; i < rgs[k].length; ++i) {
                    if (rgs[k][i].hasClass('obligatory')) oblig = true;
                    if (rgs[k][i].attr('checked'))
                        oneIsSelected = true;
                }
                
                if (oblig && (! oneIsSelected))
                    alertOrAddError(rgs[k][0].attr('name'), this.radioWarningMessage.replace(/%name%/gi,rgs[k][0].attr('name')));
            }
            resolve();
        }
    };

    this.settings = {
        checkboxWarning: function(resolve, message){    /* $AC$ Html PElement.checkboxWarning(message) Defines the warning message displayed when an obligatory checkbox group is not checked $AC$ */
            this.checkboxWarningMessage = message;
            resolve();
        },
        inputWarning: function(resolve,message){    /* $AC$ Html PElement.inputWarning(message) Defines the warning message displayed when an obligatory input is not filled $AC$ */
            this.inputWarningMessage = message;
            resolve();
        },
        log: function(resolve){    /* $AC$ Html PElement.log() Logs the values of the fields from the Html in the results file $AC$ */
            this.log = true;
            resolve();
        },
        radioWarning: function(resolve, message){    /* $AC$ Html PElement.radioWarning(message) Defines the warning message displayed when an radio button group input is not selected $AC$ */
            this.radioWarningMessage = message;
            resolve();
        }
    };

    this.test = {
        complete: function(){    /* $AC$ Html PElement.test.complete() Checks that all the obligatory fields have been filled $AC$ */
            return isComplete.apply(this);
        }
    }

});


// IMAGE element
/* $AC$ PennController.newImage(name,file) Creates a new Image element $AC$ */
/* $AC$ PennController.getImage(name) Retrieves an existing Image element $AC$ */
window.PennController._AddElementType("Image", function(PennEngine) {

    this.immediate = function(id, file){
        if (typeof id == "string" && file===undefined)
            file = id;
        this.id = id;
        let addHostURLs = !file.match(/^http/i);
        this.resource = PennEngine.resources.new(file, function(uri, resolve){
            const object = new Image();          // Creation of the image element
            object.onload = ()=>resolve(object);       // Preloading is over when image is loaded
            object.src = uri;       // Now point to the image
        }, addHostURLs);
        // this.resource = PennEngine.resources.fetch(file, function(resolve){
        //     this.object = new Image();          // Creation of the image element
        //     this.object.onload = resolve;       // Preloading is over when image is loaded
        //     this.object.src = this.value;       // Now point to the image
        // }, addHostURLs);
    };

    this.uponCreation = function(resolve){
        this.image = this.resource.object;      // Image simply refers to the resource's object
        if (this.image)
            this.image.style = null;            // (Re)set any particular style applied to the resource's object
        this.jQueryElement = $(this.image);     // The jQuery element
        this.jQueryElement.removeClass();
        resolve();
    };

    this.end = function(){
        if (this.log){
            if (!this.printTime)
                PennEngine.controllers.running.save(this.type, this.id, "Print", "NA", "Never", "NULL");
            else
                PennEngine.controllers.running.save(this.type, this.id, "Print", "NA", this.printTime, "NULL");
        }
    }
    
    this.value = function(){                    // Value is whether it's displayed
        return this.jQueryElement.parent().length;
    };

});


// KEY element
/* $AC$ PennController.newKey(name,key) Creates a new Key element $AC$ */
/* $AC$ PennController.getKey(name) Retrieves an existing Key element $AC$ */
window.PennController._AddElementType("Key", function(PennEngine) {

    // This is executed when Ibex runs the script in data_includes (not a promise, no need to resolve)
    this.immediate = function(id, ...keys){
        if (keys.length<1){
            keys = [id];
            if (id===undefined||typeof(id)!="string"||id.length==0)
                id = "Key";
            this.id = id;
        }
        this.keys = [];
        this.specialKeys = [];
        for (let i = 0 ; i < keys.length ; i++) {
            if (typeof keys[i]=="number" && keys[i]>0)
                this.keys.push(String.fromCharCode(keys[i]));
            else if (typeof(keys[i])!="string")
                PennEngine.debug.error("Invalid key(s) passed to new Key &quot;"+id+"&quot; (should be a string or a key code number)", keys[i]);
            else if (keys[i].isSpecialKey() || keys[i].replace(/^(Left|Right)/i,'').isSpecialKey())
                this.specialKeys.push(keys[i].toUpperCase());
            else if (keys[i].length)
                this.keys.push(keys[i].toUpperCase());
        }
        //this.keys = keys;
        //this.keys.replace(/shift/i,String.fromCharCode(16));
    };

    // This is executed when 'newAudio' is executed in the trial (converted into a Promise, so call resolve)
    this.uponCreation = function(resolve){
        this.pressed = [];
        this.pressedWait = [];
        this.log = false;
        this.enabled = true;
        PennEngine.events.keypress(e=>{
            if (!this.enabled)
                return;
            let isSpecialKey = e.key.isSpecialKey();
            let upperE = e.key.toUpperCase();
            let side = {0: "", 1: "LEFT", 2: "RIGHT"};
            if ((this.keys.length==0&&this.specialKeys.length==0) || // If no key specified, any key press will do
                (isSpecialKey && this.specialKeys.filter(k =>(k==upperE||k===side[e.location]+upperE)).length) || // Special key
                (!isSpecialKey && this.keys.filter(k=>k.indexOf(upperE)>-1).length)) // Regular list of keys
                    this.press(e.key);
        });
        this.press = key=>{                                 // (Re)set press upon creation for it can be modified during trial
            this.pressed.push(["PressedKey", key.toUpperCase(), Date.now(), "NULL"]);
        };
        resolve();
    }

    // This is executed at the end of a trial
    this.end = function(){
        if (this.log && this.log instanceof Array){
            if (this.pressed.length==0)
                PennEngine.controllers.running.save(this.type, this.id, "Key", "NA", "Never", "NULL");
            else if (this.log.indexOf("all")>-1){
                for (let key in this.pressed)                   // Save any clicks if logging
                    PennEngine.controllers.running.save(this.type, this.id, ...this.pressed[key]);
            }
            else if (this.log.indexOf("wait")>-1) {
                let atleastone = false;
                for (let key in this.pressed)
                    if (this.pressed[key][3]=="Wait success"){
                        PennEngine.controllers.running.save(this.type, this.id, ...this.pressed[key]);
                        atleastone = true;
                    }
                if (!atleastone)
                    PennEngine.controllers.running.save(this.type, this.id, "Key", "NA", "Never", "(failed keypresses happened)");
            }
            else if (this.pressed.length==1)
                PennEngine.controllers.running.save(this.type, this.id, ...this.pressed[0]);
            else {
                if (this.log.indexOf("first")>-1)
                    PennEngine.controllers.running.save(this.type, this.id, ...this.pressed[0]);
                if (this.log.indexOf("last")>-1)
                    PennEngine.controllers.running.save(this.type, this.id, ...this.pressed[this.pressed.length-1]);
            }
        }
    };

    this.value = function(){                                // Value is last key that was pressed
        if (this.pressed.length)
            return this.pressed[this.pressed.length-1][1];
        else
            return "";
    };
    
    this.actions = {
        wait: function(resolve, test){  /* $AC$ Key PElement.wait() Waits until the key, or one of the keys, is pressed before proceeding $AC$ */
            if (test == "first" && this.pressed.length)     // If first and already pressed, resolve already
                resolve();
            else {                                          // Else, extend remove and do the checks
                let resolved = false;
                let oldPress = this.press;
                // Unfocus the active element if disabled, as it would prevent keydown events
                let el = document.activeElement;
                while (el){
                    if (el.disabled){
                        el.blur();
                        el = null;
                    }
                    else
                        el = el.parentElement;
                }
                this.press = key => {
                    oldPress.apply(this, [key]);
                    if (resolved)
                        return;
                    if (test instanceof Object && test._runPromises && test.success){
                        let oldEnabled = this.enabled;      // Disable temporarilly
                        this.enabled = 0;
                        test._runPromises().then(value=>{   // If a valid test command was provided
                            if (value=="success"){
                                this.pressed[this.pressed.length-1][3] = "Wait success";
                                resolved = true;
                                resolve();                  // resolve only if test is a success
                            }
                            else 
                                this.pressed[this.pressed.length-1][3] = "Wait failure";
                            if (this.enabled === 0)         // Restore old setting if not modified by test
                                this.enabled = oldEnabled;
                        });
                    }
                    else{                                   // If no (valid) test command was provided
                        this.pressed[this.pressed.length-1][3] = "Wait success";
                        resolved = true;
                        resolve();                          // resolve anyway  
                    }
                };
            }
        }
    };
    
    this.settings = {
        callback: function(resolve, ...elementCommands){  /* $AC$ Key PElement.callback(commands) Will run the specified command(s) whenever a valid keypress happens $AC$ */
            let oldPress = this.press;
            this.press = async function (key) {
                oldPress.apply(this, [key]);
                if (this.enabled)
                    for (let c in elementCommands)
                        await elementCommands[c]._runPromises();
            };
            resolve();
        },
        disable: function(resolve){ /* since 1.2 */   /* $AC$ Key PElement.disable() Stops listening to keypresses $AC$ */
            this.enabled = false;
            resolve();
        },
        enable: function(resolve){ /* since 1.2 */   /* $AC$ Key PElement.enable() Starts listening to keypresses (again) $AC$ */
            this.enabled = true;
            resolve();
        },
        log: function(resolve,  ...what){   /* $AC$ Key PElement.log() Will log any valid keypress in the results file $AC$ */
            if (what.length)
                this.log = what;
            else
                this.log = ["wait"];
            resolve();
        }
    };

    this.test = {
        pressed: function(keys, first){   /* $AC$ Key PElement.test.pressed(key) Checks that the key, or any key if none specified, has been pressed before $AC$ */
            for (let k in this.pressed){
                let key = this.pressed[k][1];
                if (Number(keys)>0 && key.toUpperCase() == String.fromCharCode(keys).toUpperCase())
                    return true;                            // If one keycode matches, true
                else if (typeof(keys)=="string" && keys.toUpperCase() == key.toUpperCase())
                    return true;                            // If one key that was pressed is contained in keys, true
                else if (typeof(keys)=="undefined")
                    return true;                            // Inside the for loop: at least one key was pressed, true
                else if (first)
                    return false;                           // If only checking first and no match, false
            }
            return false;                                   // No match, false
        }
    };

});


// MediaRecorder element
/* $AC$ PennController.newMediaRecorder(name,type) Creates a new MediaRecorder element of type "audio" or "video" $AC$ */
/* $AC$ PennController.getMediaRecorder(name) Retrieves an existing MediaRecorder element $AC$ */
window.PennController._AddElementType("MediaRecorder", function(PennEngine) {

    // ====== INTERNAL SETTINGS AND FUNCTIONS ====== //
    //
    // The permission message displayed when the user is asked for access to the recording device
    let permissionMessage = "This experiment collects recording samples from its participants. "+
        "Your browser should now be prompting a permission request to use your recording device (if applicable). "+
        "By giving your authorization to record, and by participating in this experiment, "+
        "you are giving permission to the designer(s) of this experiment to anonymously collect "+
        "the samples recorded during this experiment. "+
        "The recordings will be uploaded to, and hosted on, a server designated by the experimenter(s). "+
        "If you accept the request, a label will remain visible at the top of this window throughout the whole experiment, "+
        "indicating whether you are currently being recorded.";
        //"You will be given the option to download a copy of the archive of your audio recordings before it is uploaded.";

    // The text to click to consent
    let authorizationMessage = "By clicking this link I understand that I grant this experiment's script access "+
        "to my recording device for the purpose of uploading recordings "+
        "to the server designated by the experimenter(s).";

    let setWarning = message => permissionMessage = message;
    let setConsent = message => authorizationMessage = message;

    // let mediaRecorder;              // The recording object
    let recorders = {audio: null, video: null, onlyvideo: null};
    let streams = [];               // This array contains all the samples recorded so far
    let uploadURL = "";             // The URL to the PHP file that saves the archive
    let initiated = false;          // Whether PennController.InitiateRecorder has been called
    let useMediaRecorder = false;   // Whether a newMediaRecorder command is present in the code
    let currentMediaElement;        // The media element currently active
    let statusElement;              // The top-right DOM element indicating whether it is currently recording
    let resolveStart = [];          // List of promises to resolve on start
    let resolveStop = new Map();    // Associates MediaRecorder elements with promises to stop
    let controllerLogs = [];        // List of columns to log for both InitiateRecorder and uploadcontroller
    let pendingRequests = [];       // The requests not resolved so far
    const checkRequests = ()=>new Promise(r=>setTimeout( ()=>pendingRequests.length==0&&r()||checkRequests() , 10 ));

    let captureAudio = false;
    let captureVideo = false;

    // Set mime
    const mimes = {
        audio: {'audio/webm': 'webm', 'audio/ogg': 'ogg'},
        video: {'video/webm': 'webm', 'video/mp4': 'mp4'}
    }
    function getMimeExtension(type){
        const submimes = mimes[type];
        for (let mime in submimes){
            if (MediaRecorder.isTypeSupported(mime))
                return{mimeType: mime, extension: submimes[mime]};
        }
    }

    // This controller MUST be manually added to items and specify a URL to a PHP file for uploading the archive
    window.PennController.InitiateRecorder = function(saveURL,warning,consent) {    /* $AC$ global.InitiateRecorder(url,warning,consent) Sets the URL where to upload the recordings and creates a trial inviting the user to activate their microphone $AC$ */
        if (window.MediaRecorder===undefined){
            PennEngine.debug.error("This browser does not support audio recording");
            return alert("Your browser does not support audio recording");
        }
        if (typeof(saveURL)!="string" /* || !saveURL.match(/^(https?|aws):.+/i) */ )
            PennEngine.debug.error("MediaRecorder's save URL is incorrect", saveURL);
        uploadURL = saveURL;                                    // Assign a URL
        initiated = true;                                       // Indicate that recorder has been initiated
        let controller = PennEngine.controllers.new();          // Create a new controller
        controller.id = "InitiateRecorder";
        controller.runHeader = false;                           // Don't run header and footer
        controller.runFooter = false;
        PennEngine.controllers.list.pop();                      // Remove from PennEngine's list immediately (not a 'real' controller)
        PennEngine.tmpItems.push(controller);                   // Add it to the list of items to run
        if (typeof warning == "string" && warning.length)
            setWarning(warning);
        if (typeof consent == "string" && consent.length)
            setWarning(consent);
        controller.sequence = ()=>new Promise(resolve=>{
            let controller = PennEngine.controllers.running;    // In SEQUENCE, controller is the running instance
            if (!navigator.mediaDevices)                        // Cannot continue if no media device available!
                return controller.element.append($("<p>Sorry, you cannot complete this experiment because your browser does not support recording.</p>"));
            controller.element.append($("<p>"+permissionMessage+"</p>")); // Show message on screen

            let constraints = {};
            if (captureAudio) constraints.audio = true;
            if (captureVideo) constraints.video = true;

            let chunks = [];                                    // The chunks of audio streams recorded
            navigator.mediaDevices.getUserMedia(constraints)
            .then(function(stream) {                            // Create the mediaRecorder instance
                // Create up to three streams: audio only, video only(?), both
                if (captureAudio){
                    let audiostream = stream;
                    if (captureVideo){
                        audiostream = audiostream.clone();
                        audiostream.getVideoTracks().map(track=>audiostream.removeTrack(track));
                    }
                    recorders.audio = new MediaRecorder(audiostream,{mimeType:getMimeExtension('audio').mimeType});
                }
                if (captureVideo) {
                    let videoonlystream = stream.clone();
                    videoonlystream.getAudioTracks().map(track=>videoonlystream.removeTrack(track));
                    recorders.onlyvideo = videoonlystream;
                    recorders.video = new MediaRecorder(stream,{mimeType:getMimeExtension('video').mimeType});
                }
                [recorders.audio,recorders.video].map( mediaRecorder => {
                    if (mediaRecorder===null) return;
                    mediaRecorder.recording = false;
                    mediaRecorder.onstop = function(e) {            // When a recording is complete
                        statusElement.css({'font-weight': "normal", color: "black", 'background-color': "lightgray"});
                        statusElement.html("Not recording");        // Indicate that recording is over in status bar
                        let mime = getMimeExtension(currentMediaElement.mediaType).mimeType;
                        currentMediaElement.mediaPlayer.srcObject = null;
                        currentMediaElement.blob = new Blob(chunks,{type:mime});                        // Blob from chunks
                        currentMediaElement.mediaPlayer.src = URL.createObjectURL(currentMediaElement.blob);    // Can replay now
                        chunks = [];                                                                            // Reset chunks
                        const thisResolveStop = resolveStop.get(currentMediaElement);
                        while (thisResolveStop && thisResolveStop instanceof Array && thisResolveStop.length)
                            thisResolveStop.shift().call();
                        mediaRecorder.recording = false;
                    };
                    mediaRecorder.onstart = function(e) {           // When a recording starts
                        statusElement.css({'font-weight': "bold", color: "white", 'background-color': "red"});
                        statusElement.html("Recording...");         // Indicate it in the status bar
                        if (currentMediaElement.mediaType=="video"){
                            currentMediaElement.mediaPlayer.srcObject = recorders.onlyvideo;
                            currentMediaElement.mediaPlayer.play();
                        }
                        mediaRecorder.recording = true;
                        resolveStart.shift().call();
                    }
                    mediaRecorder.ondataavailable = function(e) {   // Add chunks as they become available
                        chunks.push(e.data);
                    };
                });
                controller.element.append(                      // Add the consent link to the page
                    $("<a>"+authorizationMessage+"</a>")
                        .addClass("Message-continue-link")
                        .click(resolve)                         // Resolve sequence upon click
                );
                statusElement = $("<div>Not recording</div>");  // Initially not recording
                statusElement.css({
                    position: "fixed",
                    top: 0,
                    left: "50%",
                    transform: "translateX(-50%)",              // Trick to center (-width/2)
                    padding: "2px",
                    'background-color': "lightgray"
                });
                $("#bod").append(statusElement);                // Add status bar
        
            })
            .catch(function(err) {                              // Could not get audio device
                controller.element.append($("<p>The following error occurred: " + err + "</p>"));
                return;
            });
        });
        let oldLog = controller.log;
        controller.log = (...args)=>{
            controllerLogs.push(args);
            oldLog.apply(controller, args);
            return controller;
        };
        controller.warning = message =>{
            setWarning(message);
            return controller;
        };
        controller.consent = message =>{
            setConsent(message);
            return controller;
        };
        PennEngine.ArgumentCallback( a=>{
            if (a==controller)
                PennEngine.tmpItems = PennEngine.tmpItems.filter(i=>i!=controller);
        });
        PennEngine.NewTrialArgumentCallback(a=>{
            if (a==controller)
                PennEngine.tmpItems = PennEngine.tmpItems.filter(i=>i!=controller);
        });
        controller._runPromises = controller.sequence;
        return controller;
    };

    window.PennController.UploadRecordings = function(label,async) {  /* $AC$ global.UploadRecordings(label,noblock) Creates a trial that sends the recordings to the server $AC$ */
        let uploadController = PennEngine.controllers.new();
        PennEngine.tmpItems.push(uploadController);
        const callback = a=>{
            if (a==uploadController)
                PennEngine.tmpItems = PennEngine.tmpItems.filter(i=>i!=uploadController)
        }
        PennEngine.NewTrialArgumentCallback(callback);
        PennEngine.ArgumentCallback(callback);
        if (typeof label == "string" && label.length)
            uploadController.useLabel = label;
        uploadController.id = "UploadRecordings";
        uploadController.runHeader = false;         // Don't run header and footer
        uploadController.runFooter = false;
        uploadController.countsForProgressBar = false;
        uploadController.sequence = ()=>new Promise(async function(resolve){
            let controller = PennEngine.controllers.running;    // In SEQUENCE, controller is running instance
            controller.element.append($("<p>Please wait while the archive of your recordings is being uploaded to the server...</p>"));
            if (!async) await checkRequests();  // If not an async upload, wait for all requests to finish before proceeding
            const zip = new PennEngine.utils.JSZip(); // Create the object representing the zip file
            const uploadingStreams = [];
            streams.forEach(s=>{
                if (s.uploadStatus==="uploaded") return;
                zip.file(s.name, s.data);
                s.uploadStatus = "uploading";
                uploadingStreams.push(s);
            });
            if (uploadingStreams.length===0) return resolve();
            // Create and push the request now, without any further delay
            const request = {};
            pendingRequests.push(request);
            zip.generateAsync({
                compression: 'DEFLATE',
                type: 'blob'
            }).then(function(zc) {                  // Generation/Compression of zip is complete
                window.PennController.downloadRecordingsArchive = ()=>PennEngine.utils.saveAs(zc, "RecordingsArchive.zip");
                let fileName = PennEngine.utils.guidGenerator()+'.zip';
                var fileObj = new File([zc], fileName); // Create file object to upload with uniquename
                if (uploadURL.match(/^aws:/i))
                    PennEngine.debug.error("The 'aws:' prefix in InitiateRecorder is no longer supported");
                else {
                    PennEngine.utils.upload(uploadURL, fileName, fileObj, 'application/zip')
                        .then( f=>{
                            fileName = f;
                            PennEngine.controllers.running
                                .save("PennController", "UploadRecordings", "Filename", fileName, Date.now(), (async?"async":"NULL"));
                            PennEngine.controllers.running
                                .save("PennController", "UploadRecordings", "Status", "Success", Date.now(), (async?"async":"NULL"));
                            PennEngine.debug.log("Recordings sent to the server");
                            for (let i = 0; i < uploadingStreams.length; i++)
                                uploadingStreams[i].uploadStatus = "uploaded";
                            if (!async)
                                resolve();              // Successful request
                            pendingRequests = pendingRequests.filter(v=>v!=request);
                    // Error
                        }).catch( e => {
                            PennEngine.controllers.running
                                .save("PennController", "UploadRecordings", "Filename", fileName, Date.now(), (async?"async":"NULL"));
                            for (let i = 0; i < uploadingStreams.length; i++)
                                uploadingStreams[i].uploadStatus = "local";
                            window.PennController.UploadRecordingsError = e||"error";
                            PennEngine.debug.error("MediaRecorder's Ajax post failed", e);
                            PennEngine.controllers.running
                                    .save("PennController", "UploadRecordings", "Status", "Failed", Date.now(), 
                                        "Error Text: "+e);
                            controller.element
                                .append($("<p>There was an error uploading the recordings: "+e+"</p>"))
                                .append($("<p>Please click here to download a copy of your recordings "+
                                        "in case you need to send them manually.</p>").bind('click', ()=>{
                                                PennEngine.utils.saveAs(zc, "RecordingsArchive.zip");
                                                if (!async)
                                                    resolve();
                                        }).addClass("Message-continue-link"));
                            pendingRequests = pendingRequests.filter(v=>v!=request);
                        });
                    }
            });
            if (async)
                resolve();
        });
        for (let i = 0; i < controllerLogs.length; i++)
            uploadzipController.log(...controllerLogs[i]);
        uploadController._promises = [uploadController.sequence];
        uploadController._runPromises = uploadController.sequence;
        return uploadController;
    }

    // Handle uploading of the results automatically
    PennEngine.Prerun(()=>{
        let oldModify = window.conf_modifyRunningOrder;     // Trick: use Ibex's modifyRunningOrder to probe sequence of trials
        window.conf_modifyRunningOrder = function (ro){     // Add the upload step automatically when sequence has been built  
            if (oldModify instanceof Function)
                ro = oldModify.apply(this, [ro]);
            // if (!initiated)                                 // If InitiateRecorder has not been called, leave running order as is
            if (!useMediaRecorder)
                return ro;
            let foundUploadRecordings = false;              // Whether the sequence contains manual uploading of the results
            let initiateRecorder = false;                   // Wehther InitiateRecorder is in the Sequence
            let sendResultsID = [-1,-1];                    // Item + Element IDs of the __SendResults__ controller
            for (let item = 0; item < ro.length; ++item) {  // Go through each element of each item in the running order
                for (let element = 0; element < ro[item].length; ++element) {
                    const type = ro[item][element].controller, id = ro[item][element].options.id;
                    if (type == "PennController" && id == "UploadRecordings") {
                        foundUploadRecordings = true;       // Uploading of recordings is manual
                        if (sendResultsID[0]>=0)            // If __SendResults__ was found before
                            alert("WARNING: upload of recording archive set AFTER sending of results; check your Sequence definition.");
                    }
                    else if (type == "__SendResults__" && sendResultsID[0]<0 && !foundUploadRecordings)
                        sendResultsID = [item, element];    // Found __SendResults__: store item+element IDs
                    else if (type == "PennController" && id == "InitiateRecorder")
                        initiateRecorder = true;
                }
            }
            if (!initiateRecorder)
                PennEngine.debug.error("This project uses MediaRecorder but InitiateRecorder is not included in the Sequence");
            // Edit v1.8: always try uploading one last time before sending, just in case
            // if (!foundUploadRecordings) {                            // If no manual upload, add the upload controller before __SendResults__
            //     console.log("No manual upload");
                const uploadController = window.PennController.UploadRecordings();
                PennEngine.tmpItems.pop();                  // Remove controller form list: manually added here
                const uploadElement = new DynamicElement("PennController", uploadController);
                if (sendResultsID[0]>=0)                    // Manual __SendResults__, add upload controller before it
                    ro.splice(sendResultsID[0], 0, [uploadElement]);
                else                                        // Else, just add uploadElement at the end
                    ro.push([uploadElement]);
            // }
            // console.log("ro", ro);
            return ro;                                      // Return new running order
        };
    });
    //
    // ==== END INTERNAL SETTINGS AND FUNCTIONS ==== //


    this.immediate = function(id, type){
        useMediaRecorder = true;
        if (id===undefined||typeof(id)!="string"||id.length==0)
            id = "MediaRecorder";
        else if (type===undefined)
            type = id
        if (typeof(type)=="string" && type.match(/audio/) && (!type.match(/video/i) || type.match(/no\W*video/i))){
            this.mediaType = "audio";
            captureAudio = true;
        }
        else if (typeof(type)=="string" && (type.match(/(only\W*video|video\W*only)/i) || (type.match(/video/i) && type.match(/no\W*audio/)))){
            this.mediaType = "video";
            captureVideo = true;
        }
        else{
            // this.type = "audiovideo";
            this.mediaType = "video";
            captureAudio = true;
            captureVideo = true;
        }
        this.id = id;
        Object.defineProperty(this, "recorder", {get: ()=>recorders[this.mediaType]});
    };

    this.uponCreation = function(resolve){
        if (uploadURL.length==0)
            PennEngine.debug.error("Recorder not initiated. Make sure the sequence of items contains an InitiateRecorder trial.");
        resolveStop.set(this, []);  // no callback for mediarecorder.onstop yet
        this.log = false;
        this.recordings = [];
        this.recording = false;
        if (this.mediaType=="audio")
            this.mediaPlayer = document.createElement("audio");                                         // To play back recording
        else if (this.mediaType=="video")
            this.mediaPlayer = document.createElement("video");
        this.mediaPlayer.setAttribute("controls", true);
        this.mediaPlayer.onended = ()=>this.hasPlayed=true;
        this.videoFeedback = $("<div>").css({position:"absolute"});
        this.jQueryElement = $("<span>").addClass("PennController-"+this.type.replace(/[\s_]/g,'')+"-ui");   // The general UI 
        let recordButton = $("<button>Record</button>").addClass("PennController-"+this.type.replace(/[\s_]/g,'')+"-record");// The record button
        
        let statusInterval = null;
        recordButton.click(()=>{                                                        // Click on RECORD button
            this.mediaPlayer.pause();                                                   // stop playback
            this.mediaPlayer.currentTime = 0;
            if (this.recording){                                                        // while recording      ===>
                this.stop();                                                            // stop recording
                this.recording = false;
                recordButton.text("Record");
                clearInterval(statusInterval);                                          // stop indiciator's blinking
            }
            else {                                                                      // while NOT recording  ===>
                recordButton.text("Stop");
                this.recording = true;
                this.start();                                                           // start recording
            }
        });

        this.start = ()=>new Promise(r=>{
            currentMediaElement = this;
            if (this.recorder.state=="recording")
                this.recorder.stop();
            this.recording = true;
            resolveStart.push( ()=>{ this.recordings.push(["Recording", "Start", Date.now(), "NULL"]); r(); } );
            this.recorder.start();
            recordButton.text("Stop");
        });

        this.stop = ()=>new Promise(r=>{
            this.recording = false;
            recordButton.text("Record");
            currentMediaElement = this;
            if (this.recorder.state=="recording"){
                resolveStop.get(this).push( ()=>{ this.recordings.push(["Recording", "Stop", Date.now(), "NULL"]); r(); } );
                this.recorder.stop();                                                  // This will look at currentMediaElement
            }
            else
                r();
        });

        this.jQueryElement
            .append( $(this.mediaPlayer) )
            .append( recordButton );
        resolve();
    }
    
    this.end = async function(){
        currentMediaElement = this;
        if (this.recorder && this.recorder.state=="recording")
            await new Promise(r=>{  // Wait that the recorder has fully stopped
                const oldStop = this.recorder.onstop;
                this.recorder.onstop = function(...args){
                    if (typeof oldStop == "function")
                        oldStop.apply(this, args);
                    r();
                }
                this.recorder.stop();
            });
        const thisResolveStop = resolveStop.get(this);
        if (thisResolveStop instanceof Array && thisResolveStop.length>0)
            await new Promise(r=>thisResolveStop.push(r));  // Wait until blob is created so stream can be pushed
        if (this.blob){
            const extension = getMimeExtension(this.mediaType).extension;
            const existing_filenames = streams.map(a=>a.name);
            let filename = this.id+'.'+extension;
            let i = 0;
            while (existing_filenames.indexOf(filename)>=0){
                i++;
                filename = this.id+'-'+i+'.'+extension;
            }
            streams.push({
                name: filename,
                data: this.blob,
                uploadStatus: "local"
            });
            PennEngine.controllers.running.save(this.type, this.id, "Filename", filename, Date.now(), "NULL");
        }
        if (this.log)
            for (let r in this.recordings)
                PennEngine.controllers.running.save(this.type, this.id, ...this.recordings[r]);
    };

    this.value = function(){        // Value is blob of recording
        return this.blob;
    };
    

    this.actions = {
        play: function(resolve){    /* $AC$ MediaRecorder PElement.play() Starts playing back the recording $AC$ */
            if (this.mediaPlayer && this.mediaPlayer.src){
                if (this.mediaPlayer.currentTime && this.mediaPlayer.currentTime != 0)
                    this.mediaPlayer.currentTime = 0;
                this.mediaPlayer.play().then(()=>resolve());
            }
            else
                resolve();
        },
        record: async function(resolve){    /* $AC$ MediaRecorder PElement.record() Starts recording $AC$ */
            await this.start();
            resolve();
        },
        stop: async function(resolve){    /* $AC$ MediaRecorder PElement.stop() Stops playback or recording $AC$ */
            await this.stop();
            if (this.mediaPlayer && this.mediaPlayer.src){
                this.mediaPlayer.pause();
                if (this.mediaPlayer.currentTime && this.mediaPlayer.currentTime != 0)
                    this.mediaPlayer.currentTime = 0;
            }
            resolve();
        },
        wait: function(resolve, test){    /* $AC$ MediaRecorder PElement.wait() Waits until recording stops before proceeding $AC$ */
            if (test && typeof(test)=="string" && test.match(/first/i) && this.recordings.length)
                resolve();                                  // If first and has already recorded, resolve already
            else if (test && typeof(test)=="string" && test.match(/play/i) && this.mediaPlayer){
                let oldEnded = this.mediaPlayer.onended;
                this.mediaPlayer.onended = function(...rest) {
                    if (oldEnded instanceof Function)
                        oldEnded.apply(this, rest);
                    resolve();
                };
            }
            else {                                          // Else, extend stop and do the checks
                let resolved = false;
                let originalStop = this.stop;
                this.stop = ()=>new Promise(r=>{
                    originalStop.apply(this).then(()=>{
                        r();
                        if (resolved)
                            return;
                        if (test instanceof Object && test._runPromises && test.success){
                            let oldDisabled = this.disabled;    // Disable temporarilly
                            this.disabled = "";
                            test._runPromises().then(value=>{   // If a valid test command was provided
                                if (value=="success"){
                                    resolved = true;
                                    resolve();                  // resolve only if test is a success
                                }
                                if (this.disabled == "")     // Restore old setting if not modified by test
                                    this.disabled = oldDisabled;
                            });
                        }
                        else{                                   // If no (valid) test command was provided
                            resolved = true;
                            resolve();                          // resolve anyway
                        }
                    });
                });
            }
        }
    };
    
    this.settings = {
        disable: function(resolve){
            this.disabled = true;
            this.jQueryElement.find("button.PennController-"+this.type+"-record")
                .attr("disabled", true)
                .css("background-color", "brown");
            this.jQueryContainer.addClass("PennController-disabled");
            this.jQueryElement.addClass("PennController-disabled");
            resolve();
        },
        enable: function(resolve){
            this.disabled = false;
            this.jQueryElement.find("button.PennController-"+this.type+"-record")
                .removeAttr("disabled")
                .css("background-color", "red");
            this.jQueryContainer.removeClass("PennController-disabled");
            this.jQueryElement.removeClass("PennController-disabled");
            resolve();
        },
        once: function(resolve){    /* $AC$ MediaRecorder PElement.once() Will disable the recording interface after the first recording is complete $AC$ */
            if (this.recordings.length){
                this.disabled = true;
                this.jQueryElement.find("button.PennController-"+this.type+"-record")
                    .attr("disabled", true)
                    .css("background-color", "brown");
            }
            else{
                let originalStop = this.stop;
                this.stop = ()=>new Promise(r=>{
                    if (originalStop instanceof Function)
                        originalStop.apply(this).then(r);
                    else
                        r();
                    this.disabled = true;
                    this.jQueryElement.find("button.PennController-"+this.type+"-record")
                        .attr("disabled", true)
                        .css("background-color", "brown");
                });
            }
            resolve();
        },
        log: function(resolve){    /* $AC$ MediaRecorder PElement.log() Will log events in the results file $AC$ */
            this.log = true;
            resolve();
        }
    };
    
    this.test = {
        // Every test is used within a Promise back-end, but it should simply return true/false
        hasPlayed: function(){    /* $AC$ MediaRecorder PElement.test.hasPlayed() Checks that the recording was fully played back before $AC$ */
            return this.hasPlayed;
        }
        ,
        playing: function(){    /* $AC$ MediaRecorder PElement.test.playing() Checks that the recording is currently being played back $AC$ */
            return this.mediaPlayer.currentTime&&!this.mediaPlayer.paused;
        }
        ,
        recorded: function(){    /* $AC$ MediaRecorder PElement.test.recorded() Checks that recording has happened $AC$ */
            return this.blob;
        }
    };

});

// Handler generating a HTML button to download the zip archive containing the recordings
window.PennController.DownloadRecordingButton = function (text) {    /* $AC$ global.DownloadRecordingButton(text) Returns an HTML string representing a button to download an archive of the recordings $AC$ */
    return "<button type=\"button\" onclick=\""+
           "if (PennController.hasOwnProperty('downloadRecordingsArchive'))"+
           "  PennController.downloadRecordingsArchive();"+
           "  "+
           "else"+
           "  alert('ERROR: could not find an archive for recordings');"+
           "\">"+text+"</button>";
};
window.PennController.DownloadVoiceButton = window.PennController.DownloadRecordingButton;

window.PennController.Elements.newVoiceRecorder = name => window.PennController.Elements.newMediaRecorder(name,"audio");
window.PennController.Elements.getVoiceRecorder = name => window.PennController.Elements.getMediaRecorder(name);


// MOUSETRACKER element
/* $AC$ PennController.newMouseTracker(name) Creates a new MouseTracker element $AC$ */
/* $AC$ PennController.getMouseTracker(name) Retrieves an existing MouseTracker element $AC$ */
window.PennController._AddElementType("MouseTracker", function(PennEngine) {

    // Example of R Script:
    //
    // time <- 1568404820111
    // stream <- "x962y192w1920h737t694+0+0t15+0+0t18-1+0t15-1+0t17-1-1t33-1-1t16-3-2t17-1-1t16-2-3t33-3-3t18-1-2t316+0+1t18+0+2t16+0+3t17+0+1t17+0+2t15+0+3t18+0+2"
    // pos <- data.frame(time=c(time),x=as.numeric(gsub("^x(\\d+)y.+$","\\1", stream)), y=as.numeric(gsub("^.+y(\\d+)w.+$","\\1", stream)))
    // ptime <- time
    // px <- pos[1,'x']
    // py <- pos[1,'y']
    // sapply(strsplit(stream,'t')[[1]][-1],function(s){
    //     row <- strsplit(gsub("^(\\d+)([+-]\\d+)([+-]\\d+)$","\\1 \\2 \\3",s),' ')
    //     ntime <- as.numeric(ptime+as.numeric(row[[1]][1]))
    //     nx <- as.numeric(px+as.numeric(row[[1]][2]))
    //     ny <- as.numeric(py+as.numeric(row[[1]][3]))
    //     pos <<- rbind(pos, data.frame(time=ntime,x=nx,y=ny))
    //     ptime <- ntime
    //     px <- nx
    //     py <- ny
    // })

    let MouseX, MouseY;

    this.immediate = function(id){
        if (id===undefined||typeof(id)!="string"||id.length==0)
            id = "MouseTracker";
        this.id = id;
        $(document).mousemove( e=>{
            MouseX = e.clientX;
            MouseY = e.clientY;
            if (this.move && this.move instanceof Function && this.enabled)
                this.move(e);
        });
        $(document).click( e=>{
            if (this.click && this.click instanceof Function && this.enabled)
                this.click(e);
        });
    };

    this.uponCreation = function(resolve){
        this.coordinates = [];
        this.enabled = false;
        this.callbacks = [];
        this.clickCallbacks = [];
        this.currentStream = [];
        this.log = [];
        this.clicks = [];
        let t = this;
        this.click = async e=>{
            if (!this.enabled) return;
            this.clicks.push([Date.now(),e.clientX,e.clientY]);
            for (let i = 0; i < this.clickCallbacks.length; i++){
                let f = this.clickCallbacks[i];
                if (f instanceof Function) await f.apply(this, [e.clientX,e.clientY]);
                else if (f._runPromises && f._runPromises instanceof Function) await f._runPromises(e.clientX,e.clientY);
            }
        }
        this.move = async function() {
            if (!t.enabled)
                return;
            t.currentStream.push([Date.now(),MouseX,MouseY]);
            if (t.callbacks.length){
                for (let i = 0; i < t.callbacks.length; i++){
                    if (t.callbacks[i] instanceof Function)
                        await t.callbacks[i].apply(this, [MouseX, MouseY]);
                    else if (t.callbacks[i]._runPromises && t.callbacks[i]._runPromises instanceof Function)
                        await t.callbacks[i]._runPromises(MouseX, MouseY);
                }
            }
        };
        this.finishStream = ()=>{
            if (this.currentStream.length>1){
                let x = this.currentStream[0][1], y = this.currentStream[0][2], time = this.currentStream[0][0];
                if (x===undefined)
                    x = this.currentStream[1][1];
                if (y===undefined)
                    y = this.currentStream[1][2];
                let str = "x"+x+"y"+y+"w"+this.currentStream[0][3]+"h"+this.currentStream[0][4];
                for (let i = 1; i < this.currentStream.length; i++){
                    let xOffset = this.currentStream[i][1] - x, yOffset = this.currentStream[i][2] - y,
                        timeOffset = this.currentStream[i][0] - time;
                    str += "t"+timeOffset;
                    str += (xOffset>=0?"+":"")+xOffset;
                    str += (yOffset>=0?"+":"")+yOffset;
                    x = this.currentStream[i][1];
                    y = this.currentStream[i][2];
                    time = this.currentStream[i][0];
                }
                let notes = "NULL";
                if (window.innerWidth != this.currentStream[0][3] || window.innerHeight != this.currentStream[0][4])
                    notes = "Size of window changed to "+window.innerWidth+" * "+window.innerHeight;
                this.coordinates.push([str,this.currentStream[0][0],notes]);
            }
            this.currentStream = [];
        }
        resolve();
    };

    this.end = function(){
        this.enabled = false;
        if (this.finishStream && this.finishStream instanceof Function) this.finishStream();
        this.log.map(l=>{
            if (typeof l == "string"){
                if (l.match(/move/i))
                    this.coordinates.map(c=>PennEngine.controllers.running.save(this.type, this.id, "Move", ...c));
                else if (l.match(/click/i))
                    this.clicks.map(c=>PennEngine.controllers.running.save(this.type, this.id, "Click", c[1]+':'+c[2], c[0], "NULL"));
            }
        })
        // if (this.log && this.coordinates.length){
        //     for (let i = 0; i < this.coordinates.length; i++)
        //         PennEngine.controllers.running.save(this.type, this.id, "Move", ...this.coordinates[i]);
        // }
    };

    this.value = function(){
        if (MouseX && MouseY)
            return MouseX+'-'+MouseY;
        return 'NA-NA';
    };

    this.actions = {
        start: function(resolve){    /* $AC$ Mouse PElement.start() Starts listening to mouse movements $AC$ */
            this.currentStream = [[Date.now(),MouseX,MouseY,window.innerWidth,window.innerHeight]];
            this.enabled = true;
            resolve();
        },
        stop: function(resolve){    /* $AC$ Mouse PElement.stop() Stops listening to mouse movements $AC$ */
            this.enabled = false;
            this.finishStream();
            resolve();
        }
    }

    this.settings = {
        callback: function(resolve, ...args){  /* $AC$ Mouse PElement.callback( commands ) Runs the specified command(s) when the mouse moves $AC$ */
            if (args.length==0)
                return;
            if (typeof args[0] == "string" && args[0].match(/click/i)){
                args.shift();
                this.clickCallbacks = this.clickCallbacks.concat(args);
            }
            else
                this.callbacks = this.callbacks.concat(args);
            resolve();
        },
        log: function(resolve, ...what){    /* $AC$ Mouse PElement.log() Logs the X and Y positions of the mouse $AC$ */
            console.log("log what?", what);
            if (what.length) this.log = what;
            else this.log = ["clicks","movements"];
            resolve();
        }
    }

    this.test = {
        over: function(element){
            if (element instanceof jQuery)
                return PennEngine.utils.overToScale.call(element,MouseX,MouseY);
            else if (element._element && element._element.hasOwnProperty("jQueryElement") &&
                     element._element.jQueryElement instanceof jQuery)
                return PennEngine.utils.overToScale.call(element._element.jQueryElement,MouseX,MouseY);
            return false;
        }
    }

});


// PALETTE element
/* $AC$ PennController.newPalette(name) Creates a new Palette element $AC$ */
/* $AC$ PennController.getPalette(name) Retrieves an existing Palette element $AC$ */
window.PennController._AddElementType("Palette", function(PennEngine) {

    this.immediate = function(id, mode){
        if (mode===undefined)
            mode = id;
        this.mode = mode||"background";
        if (id===undefined||typeof(id)!="string"||id.length==0)
            id = "Palette";
        this.id = id;
    };

    this.uponCreation = function(resolve){
        this.currentColor = null;
        this.enabled = true;
        this.elements = [];
        this.colors = [];
        this.brushes = [];
        this.log = false;
        this.select = element=>{
            if (!this.enabled||!this.currentColor)
                return;
            let index = this.elements.map(e=>e[0]).indexOf(element);
            if (index<0)
                return;
            this.elements[index][1] = this.currentColor;
            let jel = element.jQueryElement;
            this.brushes.push( [ element.id , this.currentColor , Date.now() ] );
            if (this.mode=="background")
                jel.css('background-color', this.currentColor);
            else{
                if (jel._tinter && jel._tinter instanceof jQuery)
                    jel._tinter.remove();
                jel._tinter = $('<div>').css({
                    display: 'block',
                    position: 'absolute',
                    width: jel.width(),
                    height: jel.height(),
                    'margin-top': -1 * jel.width(),
                    background: this.elements[index][1],
                    opacity: 0.5
                });
                jel.before( jel._tinter );
            }
        };
        resolve();
    };

    this.end = function(){
        this.enabled = false;
        $('#bod').css('cursor','default');
        if (this.log){
            if (this.log == "all")
                for (let b = 0; b < this.brushes.length; b++)
                    PennEngine.controllers.running.save(this.type, this.id, this.brushes[b][0], this.brushes[b][1], this.brushes[b][2], "NULL");
            for (let e = 0; e < this.elements.length; e++)
                PennEngine.controllers.running.save(this.type, this.id, this.elements[e][0].id, this.elements[e][1], "Final", "NULL");
        }
    };

    this.value = function(){                                    // Value is how many brushes there have been
        return this.brushes.length;
    };
    
    this.actions = {
        brush: function(resolve, element, color){   /* $AC$ Palette PElement.brush(element,color) Colors the specified element with the specified color $AC$ */
            if (element._element){
                let oldCurrent = this.currentColor;
                this.currentColor = color;
                this.select( element._element );
                this.currentColor = oldCurrent;
            }
            resolve();
        },
        clear: function(resolve){   /* $AC$ Palette PElement.clear() Makes all the elements of the palette transparent $AC$ */
            for (let e in this.elements){
                if (this.mode=="background")
                    this.elements[e][0].jQueryElement.css('background-color', 'transparent');
                else if (this.elements[e].jQueryElement._tinter)
                    this.elements[e][0].jQueryElement._tinter.remove();
                this.elements[e][1] = null;
            }
            resolve();
        },
        unselect: function(resolve){   /* $AC$ Palette PElement.unselect() Unselects the color from the palette that was currently selected $AC$ */
            $('.PennController-'+this.type+'-palette-selected').removeClass('PennController-'+this.type+'-palette-selected');
            $('#bod').css('cursor','default');
            this.currentColor = null;
            resolve();
        },
        wait: function(resolve, test){   /* $AC$ Palette PElement.wait() Waits until an element is clicked and colored before proceeding $AC$ */
            if (test=="first" && this.brushes.length)
                resolve();
            else {
                let resolved = false;
                let oldSelect = this.select;
                this.select = element => {
                    let once = oldSelect.apply(this, [element]);
                    if (resolved || (!this.enabled && !once))
                        return;
                    if (test instanceof Object && test._runPromises && test.success)
                        test._runPromises().then(value=>{   // If a valid test command was provided
                            if (value=="success"){
                                resolved = true;
                                resolve();                  // resolve only if test is a success
                            }
                        });
                    else{                                   // If no (valid) test command was provided
                        resolved = true;
                        resolve();                          // resolve anyway
                    }
                };
            }
        }
    };

    this.settings = {
        addColor: function(resolve, color, ...elementsOrKeys){   /* $AC$ Palette PElement.addColor(color,element) Adds the specified color to the palette, to be selected by clicking on the specified element $AC$ */
            let index = this.colors.indexOf(color);
            if (index<0)
                this.colors.push(color);
            let allElements = [];
            let selectColor = ()=>{
                if (this.colors.indexOf(color)<0)
                    return;
                this.currentColor = color;
                $('.PennController-'+this.type+'-palette-selected').removeClass('PennController-'+this.type+'-palette-selected');
                allElements.map(e=>e.jQueryElement.addClass("PennController-"+this.type+"-palette-selected"));
                $('#bod').css('cursor','crosshair');
            };
            for (let e in elementsOrKeys){
                let elementOrKey = elementsOrKeys[e];
                if (typeof(elementOrKey)=="string")
                    PennEngine.events.keypress(e=>{
                        if (elementOrKey.toUpperCase().indexOf(String.fromCharCode(e.which).toUpperCase())>-1)
                            selectColor();
                        else if (e.which==27) { // ESCAPE
                            $('.PennController-'+this.type+'-palette-selected').removeClass('PennController-'+this.type+'-palette-selected');
                            $('#bod').css('cursor','default');
                            this.currentColor = null;
                        }
                    })
                else if (elementOrKey._element && elementOrKey._element.jQueryElement){
                    elementOrKey._element.jQueryElement.bind("click", selectColor);
                    elementOrKey._element.jQueryElement.addClass("PennController-"+this.type+"-palette");
                    elementOrKey._element.jQueryElement.addClass("PennController-"+this.id+"-palette");
                    allElements.push( elementOrKey._element );
                }
            }
            resolve();
        },
        addElement: function(resolve, ...elements){   /* $AC$ Palette PElement.addElement(elements) Adds the specified element(s) as targets for coloration $AC$ */
            for (let e in elements){
                let element = elements[e];
                if (element._element && element._element.jQueryElement){
                    element._element.jQueryElement.bind("click", ()=>{
                        this.select( element._element );
                    });
                    if (this.elements.map(e=>e[0]).indexOf(element._element)<0)
                        this.elements.push([element._element, null]);
                }
            }
            resolve();
        },
        callback: function(resolve, ...commands){   /* $AC$ Palette PElement.callback(commands) Will execute the specified command(s) whenever an element is colored $AC$ */
            let oldSelect = this.select;
            this.select = async function(element) {
                oldSelect.apply(this, [element]);
                if (!this.enabled)
                    return;
                for (let c in commands)
                    await commands[c]._runPromises();
            };
            resolve();
        },
        enable: function(resolve){   /* $AC$ Palette PElement.enable() Enables the palette $AC$ */
            this.jQueryContainer.removeClass("PennController-disabled");
            this.jQueryElement.removeClass("PennController-disabled");
            this.enabled = true;
            resolve();
        },
        disable: function(resolve){   /* $AC$ Palette PElement.disable() Disables the palette $AC$ */
            this.jQueryContainer.addClass("PennController-disabled");
            this.jQueryElement.addClass("PennController-disabled");
            this.enabled = false;
            resolve();
        },
        log: function(resolve, what){   /* $AC$ Palette PElement.log() Will log any coloration to the results file $AC$ */
            this.log = what||"all";
            resolve();
        },
        once: function(resolve){   /* $AC$ Palette PElement.once() Will disable the palette after the first coloration $AC$ */
            if (this.brushes.length){
                this.enabled = false;
                $('.PennController-'+this.type+'-palette-selected').removeClass('PennController-'+this.type+'-palette-selected');
                $('#bod').css('cursor','default');
                this.currentColor = null;
            }
            else{
                let oldSelect = this.select;
                this.select = element => {
                    oldSelect.apply(this, [element]);
                    if (!this.enabled)
                        return;
                    this.enabled = false;
                    $('.PennController-'+this.type+'-palette-selected').removeClass('PennController-'+this.type+'-palette-selected');
                    $('#bod').css('cursor','default');
                    this.currentColor = null;
                    return "once";
                };
            }
            resolve();
        },
        removeColor: function(resolve, color){   /* $AC$ Palette PElement.remove(color) Removes the specified color from the palette (leaving any associated element on the page) $AC$ */
            let index = this.colors.indexOf(color);
            if (index>-1)
                this.colors.splice(index,1);
            resolve();
        }
    };

    this.test = {
        color: function( element , color ) {   /* $AC$ Palette PElement.test.color(element,color) Checks that the specified element has been colored with the specified color $AC$ */
            if ( element._element && element._element){
                let index = this.elements.map(e=>e[0]).indexOf(element._element);
                if (index<0) 
                    return false;
                return this.elements[index][1] == color;
            }
            return false;
        }
    }

});


// SCALE element
/* $AC$ PennController.newScale(name,numberOrValues) Creates a new Scale element $AC$ */
/* $AC$ PennController.getScale(name) Retrieves an existing Scale element $AC$ */
window.PennController._AddElementType("Scale", function(PennEngine) {

    // SCALE-SPECIFIC FUNCTIONS & METHODS
    //
    function disable(){                                             // Disable the scale
        this.jQueryElement.find("input").attr("disabled", true);
        this.jQueryElement.find("div,label").css("cursor", "");
        this.disabled = true;
    }

    function enable(){                                              // Enable the scale
        this.jQueryElement.find("input").removeAttr("disabled");
        this.jQueryElement.find("div").css("cursor", "pointer");
        this.disabled = false;
    }

    function selectIndex(index, simulate) {
        if (this.scaleType=="slider") this.jQueryElement.find("input[type=range]")[0].value = index;
        else this.jQueryElement.find(`input#${this.id}-${index}`).attr('checked',true).change();
        if (simulate){
            let value = this.buttons[index];
            if (value===undefined||value===null||value=="")
                value = index+1;
            this.choice(value);
        }
    }

    async function buildScale(){                                  // Feeds this.jQueryElement according to scale type
        let defaultValue = this.defaultValue;
        let orientation = this.orientation;
        let type = this.scaleType;
        this.jQueryElement.empty();
        if (type=="slider"){                                        // Slider scale: special case
            var slider = $("<input>").attr({
                type: "range",
                min: "0",
                max: String(this.buttons.length-1),
                value: String((this.buttons.length-1)/2),           // Middle value by default
                step: "1"
            });
            if (Number(defaultValue)>=0 && Number(defaultValue)<=(this.buttons.length-1)) // A valid default value was specified
                slider.attr("value", String(defaultValue));
            if (this.disabled) slider.attr("disabled", true);
            slider[0].oninput = ()=>{if (this.firstClick) return; this.firstClick = Date.now(); };
            slider[0].onchange = ()=>this.choice(slider[0].value);
            if (orientation=="vertical"){
                slider.attr('orient','vertical'); // Firefox
                slider.css({'writing-mode':'vertical-lr','-webkit-appearance':'slider-vertical'}); // IE/Edge & Chrome/Safari
            }
            slider.css({width:'100%',height:'100%'});
            this.jQueryElement.append(slider);
        }
        else{
            this.jQueryElement.css({display:'inline-flex','justify-content':'space-between'});
            for (let i = 0; i < this.buttons.length; i++) {
                let v = this.buttons[i];
                if (v===undefined||v===null||v=="") v = i+1;            // If the array's entry is void, use its index
                else if (v instanceof PennEngine.PennElementCommands) v = i+1;
                let label = $("<label>").attr({for:this.id+'-'+i}).html(v).css('cursor','pointer');
                let input = $("<input>").attr({name:this.id,value:v,type:(type=="checkbox"?"checkbox":"radio"),id:this.id+'-'+i});
                let option = $("<div>").addClass("option")
                    .css({cursor:'pointer',display:'flex','align-items':'center'})
                    .append( input ).append( label );
                if (v._runPromises) v.print( label.empty() )._runPromises();
                if (defaultValue==v||defaultValue==i) input.attr("checked",true);
                if (this.disabled) input.attr("disabled", true);
                input[0].onchange = ()=>{
                    this.choice(this.buttons[i]||v,/*unselect=*/type=="checkbox"&&!input[0].checked)
                    this.jQueryElement.find("label").css("outline","none");
                    if (type=="buttons") label.css("outline","dotted 1px black");
                };
                if (type=="buttons") input.css("display","none");
                if (this.labels=="top") option.css('flex-direction','column-reverse');
                else if (this.labels=="bottom") option.css('flex-direction','column');
                else if (this.labels=="left") option.css('flex-direction','row-reverse');
                this.jQueryElement.append(option);
                if (type=="radio"&&this.labels===false) label.css("display","none");
                else if (this.buttons[i] instanceof PennEngine.PennElementCommands)
                    await this.buttons[i].print( label.empty() )._runPromises();
            };
            if (orientation=="vertical") this.jQueryElement.css('flex-direction','column');
        }
        if (!this.width) this.jQueryElement.css("max-width","max-content");
    }
    //
    // END SCALE-SPECIFIC FUNCTIONS & METHODS
    

    this.immediate = function(id, ...buttons){
        if (!buttons.length){
            buttons = [id];
            if (id===undefined||typeof(id)!="string"||id.length==0)
                id = "Scale";
        }
        this.id = id;
        if (typeof(buttons[0])!="string" && Number(buttons[0])>0)
            this.initialButtons = new Array(Number(buttons[0])); // Number: array of void values/labels
        else
            this.initialButtons = buttons;                       // Array of values/labels
    };

    this.uponCreation = function(resolve){
        this.jQueryElement = $("<div>").css("display", "inline-block");
        this.choices = [];
        this.log = false;
        this.labels = false;                                        // No label upon creation (may become "top" or "bottom")
        this.disabled = false;
        this.vertical = false;
        this.scaleType = "radio";
        this.defaultValue = null;
        this.orientation = "horizontal";
        this.width = null;
        this.keys = [];
        this.buttons = this.initialButtons;
        this.choice = (value,unselect)=>{                           // (Re)set upon creation, since it can be modified during runtime
            if (this.disabled)
                return;                                             // Store the value + timestamp
            this.unselected = unselect||undefined;
            if (value && value._runPromises)
                value = value._element.id;
            let duration = null;
            if (this.scaleType=="slider"&&this.firstClick){
                duration = Date.now() - this.firstClick;
                this.firstClick = undefined;
            }
            this.choices.push([(unselect?"Unselect":"Choice"), value, Date.now(), duration||"NULL"]);
        };
        PennEngine.controllers.running.safeBind($(document), "keydown", (e)=>{
            if (this.disabled)
                return;
            for (let k = 0; k < this.keys.length; k++){
                if (String.fromCharCode(e.which) == this.keys[k])
                    return selectIndex.apply(this, [k, true]);
            }
        });
        resolve();
    };

    // This is executed at the end of a trial
    this.end = function(){
        const that = this;
        if (this.log && this.log instanceof Array){
            if (this.scaleType=="checkbox")
                this.jQueryElement.find("input[type=checkbox]").each(function(i){
                    PennEngine.controllers.running.save(that.type, that.id, that.buttons[i], (this.checked?"checked":"unchecked"), Date.now(), "Status");
                });
            if (!this.choices.length)
                PennEngine.controllers.running.save(this.type, this.id, "Choice", "NA", "Never", "No selection happened");
            else if (this.choices.length==1)
                PennEngine.controllers.running.save(this.type, this.id, ...this.choices[0]);
            else if (this.log.indexOf("all")>-1)
                for (let c in this.choices)                     // Save any choice if logging
                    PennEngine.controllers.running.save(this.type, this.id, ...this.choices[c]);
            else {
                if (this.log.indexOf("first")>-1)
                    PennEngine.controllers.running.save(this.type, this.id, ...this.choices[0]);
                if (this.log.indexOf("last")>-1)
                    PennEngine.controllers.running.save(this.type, this.id, ...this.choices[this.choices.length-1]);
            }
        }
    };

    this.value = function(){                                // Value is last choice
        if (this.choices.length && this.unselected === undefined)
            return this.choices[this.choices.length-1][1];
        else
            return NaN;
    };
    
    this.actions = {
        print: async function(resolve, ...where){
            await buildScale.apply(this);                         // (Re)Build the scale when printing
            PennEngine.elements.standardCommands.actions.print.apply(this, [resolve, ...where]);
        },
        select: function(resolve, option, simulate){    /* $AC$ Scale PElement.select(option) Selects the specified option on the scale $AC$ */
            for (var b  = 0; b < this.buttons.length; b++){
                let button = this.buttons[b];
                if (button && button == option)
                    break;
                if (button && button._element &&  button._element.id == option)
                    break;
                if (b == option)
                    break;
            }
            if (b>=this.buttons.length)
                return resolve(PennEngine.debug.error("Option "+option+" not found for selection on Scale "+this.id));
            selectIndex.apply(this, [b, simulate]);
            resolve();
        },
        unselect: function(resolve){
            if (this.scaleType=="slider"){
                let slider = this.jQueryElement.find("input[type=range]")[0];
                slider.value = (slider.max - slider.min) / 2;
            }
            else this.jQueryElement.find("input").removeAttr("checked").change();
            this.unselected = true;
            resolve();
        },
        wait: function(resolve, test){    /* $AC$ Scale PElement.wait() Waits until a selection happens before proceeding $AC$ */
            if (test == "first" && this.choices.length)     // If first and already chosen, resolve already
                resolve();
            else {                                          // Else, extend choice and do the checks
                let resolved = false;
                let oldChoice = this.choice;
                this.choice = value=>{
                    oldChoice.apply(this, [value]);
                    if (resolved)
                        return;
                    if (test instanceof Object && test._runPromises && test.success){
                        let oldDisabled = this.disabled;    // Disable temporarilly
                        this.disabled = "tmp";
                        test._runPromises().then(value=>{   // If a valid test command was provided
                            if (value=="success"){
                                resolved = true;
                                resolve();                  // resolve only if test is a success
                            }
                            if (this.disabled=="tmp")       // Restore old setting if not changed by test
                                this.disabled = oldDisabled;
                        });
                    }
                    else{                                   // If no (valid) test command was provided
                        resolved = true;
                        resolve();                          // resolve anyway
                    }
                };
            }
        }
    };
    
    this.settings = {
        button: async function(resolve){    /* $AC$ Scale PElement.button() Transforms the scale options into buttons $AC$ */
            this.scaleType = "buttons";
            await buildScale.apply(this);                         // Rebuild the scale as a button scale
            resolve();
        },
        callback: function(resolve, ...elementCommands){    /* $AC$ Scale PElement.callback(commands) Will execute the specified command(s) whenever selection happens $AC$ */
            let originalChoice = this.choice;
            this.choice = async function(value) {
                let disabled = this.disabled;
                originalChoice.apply(this, [value]);
                if (disabled)
                    return;
                for (let c in elementCommands)
                    await elementCommands[c]._runPromises();
            };
            resolve();
        },
        checkbox: async function(resolve){
            this.scaleType = "checkbox";
            await buildScale.apply(this);                      // Rebuild the scale as a checkbox "scale"
            resolve();
        },
        default: function(resolve, value){    /* $AC$ Scale PElement.default(value) Sets the specified value to be selected by default $AC$ */
            if (this.buttons.indexOf(value)>-1||(Number(value)>=0&&Number(value)<this.buttons.length)){
                this.defaultValue = value;
                if (value._element)
                    value = value._element.id;
                this.choices.push(["Default", value, Date.now(), this.scaleType]); // Log it
            }
            else
                PennEngine.debug.error("Invalid default value for Scale "+this.id, value);
            resolve();
        },
        disable: function(resolve){
            disable.apply(this);
            this.jQueryContainer.addClass("PennController-disabled");
            this.jQueryElement.addClass("PennController-disabled");
            resolve();
        },
        enable: function(resolve){
            enable.apply(this);
            this.jQueryContainer.removeClass("PennController-disabled");
            this.jQueryElement.addClass("PennController-disabled");
            resolve();
        },
        horizontal: async function(resolve){    /* $AC$ Scale PElement.horizontal() Aligns the scale's options horizontally (again) $AC$ */
            this.orientation = "horizontal";
            if (this.jQueryElement.parent().length){
                await buildScale.apply(this);
                // fixAesthetics.apply(this);
            }
            resolve();
        },
        keys: function(resolve, ...keys){    /* $AC$ Scale PElement.keys(keys) Associates the scale's options with the specified keys for selection $AC$ */
            if (keys instanceof Array && keys.length == this.buttons.length){
                if (keys.filter(e=>typeof(e)=="string"&&e.length==1).length!=keys.length)
                    return resolve(PennEngine.debug.error("Every key should be a string of length 1 in Scale "+this.id, keys));
                this.keys = keys.map(k=>k.toUpperCase());
            }
            else if (this.buttons.filter(e=>typeof(e)=="string"&&e.length==1).length == this.buttons.length)
                this.keys = this.buttons.map(e=>e.toUpperCase());
            else
                this.keys = Array.from({length:this.buttons.length},(v,k)=>k+1);
            resolve();
        },
        label: async function(resolve, index, value){    /* $AC$ Scale PElement.label(index,label) Gives the specified label to the option at the specified index on the scale $AC$ */
            if (isNaN(Number(index)) || index<0 || index>=this.buttons.length)
                return resolve();
            this.buttons[index] = value;
            await buildScale.apply(this);
            resolve();
        },
        labels: function(resolve, position){            // Deprecated since 1.0
            this.labels = position;                     // Replaced with labelsPosition
            resolve();
        },
        labelsPosition: async function(resolve, position){    /* $AC$ Scale PElement.labelsPosition(position) Will show the labels on top, at the bottom, to the left or to the right of the options $AC$ */
            this.labels = position;
            await buildScale.apply(this);
            resolve();
        },
        log: function(resolve,  ...what){    /* $AC$ Scale PElement.log() Will log the selected option in the results file $AC$ */
            if (what.length)
                this.log = what;
            else
                this.log = ["last"];
            resolve();
        },
        once: function(resolve){    /* $AC$ Scale PElement.once() Will disable the scale after the first selection $AC$ */
            if (this.hasClicked)
                disable.apply(this);
            else{
                let originalChoice = this.choice;
                this.choice = value=>{
                    originalChoice.apply(this, [value]);
                    disable.apply(this);                    
                };
            }
            resolve();
        },
        radio: async function(resolve){    /* $AC$ Scale PElement.radio() Will show the scale's options as radio buttons $AC$ */
            this.scaleType = "radio";
            await buildScale.apply(this);                      // Rebuild the scale as a radio scale
            resolve();
        },
        size: async function(resolve, width, height){
            this.width = width;
            await buildScale.apply(this);
            PennEngine.elements.standardCommands.settings.size.apply(this, [resolve, width, height]);
        },
        slider: async function(resolve){    /* $AC$ Scale PElement.slider() Will show the scale as a slider $AC$ */
            this.scaleType = "slider";
            await buildScale.apply(this);
            resolve();
        },
        vertical: async function(resolve){    /* $AC$ Scale PElement.horizontal() Aligns the scale's options vertically $AC$ */
            this.orientation = "vertical";
            if (this.jQueryElement.parent().length){
                await buildScale.apply(this);
                // fixAesthetics.apply(this);
            }
            resolve();
        }
    };

    this.test = {
        selected: function(value){    /* $AC$ Scale PElement.test.selected(option) Checks that the option, or any option if none specified, is selected $AC$ */
            if (!this.choices.length || this.unselected)
                return false;
            else if (value == undefined)
                return true;
            else if (value == this.choices[this.choices.length-1][1])
                return true;
            else
                return false;
        }  
    };

});


// SELECTOR element
/* $AC$ PennController.newSelector(name) Creates a new Selector element $AC$ */
/* $AC$ PennController.getSelector(name) Retrieves an existing Selector element $AC$ */
window.PennController._AddElementType("Selector", function(PennEngine) {

    async function shuffle(resolve, ...elementCommands){
        let indicesToShuffle = [];
        if (!elementCommands.length)                // If no argument, just add every index
            indicesToShuffle = [...new Array(this.elements.length)].map((v,i)=>i);
        else {                                      // Else, first feed elementsToShuffle
            for (let e in elementCommands) {        // Go through each elementCommand
                if (!(elementCommands[e]._element && elementCommands[e]._element.jQueryElement instanceof jQuery)){
                    PennEngine.debug.error("Invalid element #"+e+" in shuffling selector "+this.id);
                    continue;
                }
                let index = this.elements.map(e=>e[0]).indexOf(elementCommands[e]._element);
                if (index<0){
                    PennEngine.debug.error("Cannot shuffle element "+elementCommands[e]._element.id+" for it has not been added to selector "+this.id);
                    continue;
                }
                indicesToShuffle.push(index);
            }
        }
        let shuffledIndices = [...indicesToShuffle];
        fisherYates(shuffledIndices);                              // Now, shuffle the indices
        const tmpPrints = [];
        const prints = indicesToShuffle.map(i=>{
            const element = this.elements[i][0];
            const lastPrint = element._lastPrint;
            if (lastPrint[0]===undefined){
                const container = element.jQueryContainer;
                if (container instanceof jQuery && container.parent().length){
                    const tmpContainer = $("<span>");
                    container.before( tmpContainer );
                    tmpPrints[i] = tmpContainer;
                }
            }
            else if (lastPrint[0] instanceof jQuery && (lastPrint[0].hasClass("PennController-after")||lastPrint[0].hasClass("PennController-before"))){
                // this print command was called to add this element before or after another element
                const r = {};
                let befOrAft = lastPrint[0][0].className.replace(/^.*PennController-(after|before).*$/,"$1");
                befOrAft = befOrAft.replace(/^[ab]/,c=>c.toUpperCase());
                // let us find out whether the other element is part of the shuffle
                for (let n = 0; n < indicesToShuffle.length; n++){
                    const other_element = this.elements[indicesToShuffle[n]][0];
                    if (!(other_element['jQuery'+befOrAft] instanceof Array)) continue;
                    const prelength = other_element['jQuery'+befOrAft].length;
                    other_element['jQuery'+befOrAft] = other_element['jQuery'+befOrAft].filter(a=>a._element!=element);
                    if (other_element['jQuery'+befOrAft].length<prelength){
                        // the other element is part of the shuffle, 
                        // so we'll want to print on the associated post-shuffle element instead
                        r[befOrAft] = this.elements[shuffledIndices[n]][0];
                        return r;
                    }
                }
            }
            return lastPrint;
        });
        indicesToShuffle.forEach(async i=>{
            const el = this.elements[i][0];
            await window.PennController.Elements['get'+el.type](el.id).remove()._runPromises();
        });
        shuffledIndices.forEach(async (index,i)=>{
            let element = this.elements[index][0], print = prints[i];
            if (print===undefined) return;
            const handler = window.PennController.Elements['get'+element.type](element.id);
            if (print.hasOwnProperty("After"))
                await window.PennController.Elements['get'+print.After.type](print.After.id).after( handler )._runPromises();
            else if (print.hasOwnProperty("Before"))
                await window.PennController.Elements['get'+print.Before.type](print.Before.id).after( handler )._runPromises();
            else
                await handler.print(...print)._runPromises();
            const tmpPrint = tmpPrints[indicesToShuffle[i]];
            if (tmpPrint instanceof jQuery){
                element.jQueryContainer.css('position', 'unset');
                tmpPrint.before(element.jQueryContainer);
                tmpPrint.remove();
            }
        });
        const copyOfElements = [...this.elements];
        indicesToShuffle.forEach((original_index,i)=>this.elements[original_index]=copyOfElements[shuffledIndices[i]]);
        resolve();
    }

    this.immediate = function(id){
        if (id===undefined||typeof(id)!="string"||id.length==0)
            id = "Selector";
        this.id = id;
    };

    this.uponCreation = function(resolve){
        this.elements = [];                // [[element, keys], [element, keys], ...]
        this.selections = [];
        this.disabled = false;
        this.frame = $("<div>").css({
            position: "absolute",
            display: "inline-block",
            margin: "auto",
            outline: "dotted 1px grey",
            "z-index": 100
        }).addClass("PennController-"+this.type.replace(/[\s_]/g,'')+"-selectionFrame");
        this.noClick = false;
        this.select = element=>{          // (Re)set select upon creation, for it can be modified during trial
            if (this.disabled)
                return;
            if (this.elements.map(e=>e[0]).indexOf(element)<0)
                return PennEngine.debug.error("Tried to select an element not part of Selector "+this.id);
            this.selections.push(["Selection", element.id, Date.now(), this.elements.map(e=>e[0].id).join(';')]);
            this.frame.css({
                width: element.jQueryElement.outerWidth(),
                height: element.jQueryElement.outerHeight(),
                "pointer-events": "none" // Can click through it
            });
            if (element.jQueryElement.css("position")=="absolute")
                this.frame.css({
                    left: element.jQueryElement.css("left"),
                    top: element.jQueryElement.css("top")
                });
            element.jQueryElement.before(this.frame);
            this.elements.map(e=>e[0].jQueryElement.removeClass("PennController-"+this.type.replace(/[\s_]/g,'')+"-selected"));
            element.jQueryElement.addClass("PennController-"+this.type.replace(/[\s_]/g,'')+"-selected");
        };
        //PennEngine.controllers.running.safeBind($(document), "keydown", (e)=>{
        PennEngine.events.keypress(e=>{
            if (this.disabled)
                return;
            for (let s = 0; s < this.elements.length; s++){
                let element = this.elements[s], key = "";
                if (element.length>1)
                    key = this.elements[s][1];
                let isSpecialKey = e.key.isSpecialKey();
                let upperE = e.key.toUpperCase();
                let side = {0: "", 1: "LEFT", 2: "RIGHT"};
                if (isSpecialKey===key.replace(/^(Left|Right)/i,'').isSpecialKey() &&
                    (key.toUpperCase() == upperE || key.toUpperCase() == side[e.location]+upperE))
                    return this.select(this.elements[s][0]);
            }
        });
        resolve();
    };

    this.end = function(){
        this.select = ()=>undefined;
        if (this.frame && this.frame instanceof jQuery)
            this.frame.remove();
        if (this.log && this.log instanceof Array){
            if (!this.selections.length)
                PennEngine.controllers.running.save(this.type, this.id, "Selection", "NA", "Never", this.elements.map(e=>e[0].id).join(';')+";No selection happened");
            else if (this.selections.length==1)
                PennEngine.controllers.running.save(this.type, this.id, ...this.selections[0]);
            else if (this.log.indexOf("all")>-1)
                for (let s in this.selections)
                    PennEngine.controllers.running.save(this.type, this.id, ...this.selections[s]);
            else {
                if (this.log.indexOf("first")>-1)
                    PennEngine.controllers.running.save(this.type, this.id, ...this.selections[0]);
                if (this.log.indexOf("last")>-1)
                    PennEngine.controllers.running.save(this.type, this.id, ...this.selections[this.selections.length-1]);
            }
        }
        this.elements = [];
    };

    this.value = function(){                                // Value is last selection
        if (this.selections.length){
            let selectedElementID = this.selections[this.selections.length-1][1];
            let selectedElement = this.elements.filter(e=>e[0].id==selectedElementID);
            if (selectedElement.length){
                selectedElement = selectedElement[0][0];
                return window.PennController.Elements["get"+selectedElement.type](selectedElement.id);
            }
            else
                return null;
        }
        else
            return null;
    };
    
    this.actions = {
        select: function(resolve, elementCommand){  /* $AC$ Selector PElement.select(element) Selects the specified element $AC$ */
            if (!isNaN(Number(elementCommand)) && Number(elementCommand) >= 0 && Number(elementCommand) < this.elements.length)
                elementCommand = {_element: this.elements[Number(elementCommand)][0]};
            if (elementCommand._element && elementCommand._element.jQueryElement instanceof jQuery){
                let disabled = this.disabled;
                this.disabled = false;
                this.select(elementCommand._element);
                this.disabled = disabled;
            }
            else
                PennEngine.debug.error("Invalid element passed to select command for selector "+this.id);
            resolve();
        },
        shuffle: function(resolve, ...elements){  /* $AC$ Selector PElement.shuffle() Shuffles the positions on the page of the selector's elements $AC$ */
            shuffle.apply(this, [resolve].concat(elements));
        },
        unselect: function(resolve){  /* $AC$ Selector PElement.unselect() Unselects the element that is currently selected $AC$ */
            this.selections.push(["Unselect", "Unselect", Date.now(), this.elements.map(e=>e[0].id).join(';')+";From script"]);
            this.frame.detach();
            this.elements.map(e=>e[0].jQueryElement.removeClass("PennController-"+this.type+"-selected"));
            resolve();
        },
        wait: function(resolve, test){  /* $AC$ Selector PElement.wait() Waits until a selection happens before proceeding $AC$ */
            if (test=="first" && this.selections.length)
                resolve();
            else {
                let resolved = false;
                let oldSelect = this.select;
                this.select = element => {
                    let once = oldSelect.apply(this, [element]);
                    if (resolved || (this.disabled && !once))
                        return;
                    if (test instanceof Object && test._runPromises && test.success){
                        let oldDisabled = this.disabled;    // Disable temporarilly
                        this.disabled = "tmp";
                        test._runPromises().then(value=>{   // If a valid test command was provided
                            if (value=="success"){
                                resolved = true;
                                resolve();                  // resolve only if test is a success
                            }
                            if (this.disabled == "tmp")     // Restore old setting if not modified by test
                                this.disabled = oldDisabled;
                        });
                    }
                    else{                                   // If no (valid) test command was provided
                        resolved = true;
                        resolve();                          // resolve anyway
                    }
                };
            }
        }
    };
    
    this.settings = {
        add: function(resolve, ...what){  /* $AC$ Selector PElement.add(elements) Adds one or more elements to the selector $AC$ */
            for (w in what) {
                let element = what[w]._element;
                if (element == undefined || element.id == undefined)
                    PennEngine.debug.error("Invalid element added to selector "+this.id);
                else if (this.elements.map(e=>e[0]).indexOf(element)>-1)
                    PennEngine.debug.error("Element "+element.id+" already part of selector "+this.id);
                else if (element.jQueryElement == undefined || !(element.jQueryElement instanceof jQuery))
                    PennEngine.debug.error("Element "+element.id+" has no visble element to be chosen in selector "+this.id);
                else {
                    this.elements.push([element]);        // Each member of this.elements is an array [2nd member = keys]
                    let addClick = ()=>{
                        if (!this.noClick)
                            element.jQueryElement.css("cursor", "pointer");
                        let oldClick = element.jQueryElement[0].onclick;
                        element.jQueryElement[0].onclick = (...args)=>{
                            if (oldClick instanceof Function)
                                oldClick.apply(element.jQueryElement[0], args);
                            if (!this.noClick)
                                this.select(element);
                        };
                    }
                    if (element.jQueryElement.parent().length)  // If element already displayed
                        addClick();
                    else                                        // Else, add on print
                        element._printCallback.push(addClick);
                }
            }
            resolve();
        },
        callback: function(resolve, ...elementCommands){  /* $AC$ Selector PElement.callback(commands) Will execute the specified command(s) whenever selection happens $AC$ */
            let oldSelect = this.select;
            this.select = async function(element) {
                let disabled = this.disabled;
                oldSelect.apply(this, [element]);
                if (disabled)
                    return;
                for (let c in elementCommands)
                    await elementCommands[c]._runPromises();
            };
            resolve();
        },
        disable: function(resolve){
            this.disabled = true;
            this.elements.map(element=>element[0].jQueryElement.css("cursor", ""));
            this.jQueryContainer.addClass("PennController-disabled");
            this.jQueryElement.addClass("PennController-disabled");
            resolve();
        },
        disableClicks: function(resolve){  /* $AC$ Selector PElement.disableClicks() Disables selection by click $AC$ */
            this.noClick = true;
            this.elements.map(element=>element[0].jQueryElement.css("cursor", ""));
            resolve();
        },
        enable: function(resolve){
            this.disabled = false;
            if (!this.noClick)
                this.elements.map(element=>element[0].jQueryElement.css("cursor", "pointer"));
            this.jQueryContainer.removeClass("PennController-disabled");
            this.jQueryElement.removeClass("PennController-disabled");    
            resolve();
        },
        enableClicks: function(resolve){  /* $AC$ Selector PElement.enableClicks() Enables selection by click (again) $AC$ */
            this.noClick = false;
            this.elements.map(element=>element[0].jQueryElement.css("cursor", "pointer"));
            resolve();
        },
        frame: function(resolve, css){  /* $AC$ Selector PElement.frame(css) Attributes the CSS style to the selection frame $AC$ */
            this.frame.css.apply(this.frame, ["outline", css]);
            resolve();
        },
        keys: function(resolve, ...keys){  /* $AC$ Selector PElement.keys(keys) Associates the elements in the selector (in the order they were added) with the specified keys $AC$ */
            for (let k = 0; k < keys.length; k++){
                let key = keys[k];
                if (k >= this.elements.length) break;
                if (typeof(key) != "string" && Number(key)>0)
                    key = String.fromCharCode(key);
                this.elements[k] = [this.elements[k][0], key];
            }
            resolve();
        },
        log: function(resolve, ...what){  /* $AC$ Selector PElement.log() Will log any selection to the results file $AC$ */
            if (what.length)
                this.log = what;
            else
                this.log = ["last"];
            resolve();
        },
        once: function(resolve){  /* $AC$ Selector PElement.once() Will disable the selector after the first selection $AC$ */
            if (this.selections.length){
                this.disabled = true;
                this.elements.map(e=>e[0].jQueryElement.css("cursor",""));
            }
            else{
                let oldSelect = this.select;
                this.select = element => {
                    oldSelect.apply(this, [element]);
                    if (this.disabled)
                        return;
                    this.disabled = true;
                    this.elements.map(e=>e[0].jQueryElement.css("cursor",""));
                    return "once";
                };
            }
            resolve();
        },
        shuffle: function(resolve, ...elements){                       // DEPRECATED SINCE BETA 0.3, USE ACTION
            shuffle.apply(this, [resolve].concat(elements));
        }
    };

    this.test = {
        selected: function(elementCommand){  /* $AC$ Selector PElement.test.selected(element) Checks that the specified element, or any element if non specified, is selected $AC$ */
            if (this.selections.length===0)
                return false;
            let selectedId = this.selections[this.selections.length-1][1];
            if (elementCommand == undefined)
                return this.selections.length>0;
            else if (typeof (elementCommand) == "string")
                return elementCommand==selectedId;
            else if (elementCommand._element)
                return elementCommand._element.id == selectedId;
            PennEngine.debug.error("Invalid element tested for Selector "+this.id, elementCommand._element.id);
            return false;
        },
        index: function(elementCommand, index){  /* $AC$ Selector PElement.test.index(element,index) Checks that the specified element is at the specified index position in the selector $AC$ */
            if (elementCommand == undefined || elementCommand._element == undefined)
                return PennEngine.debug.error("Invalid element tested for selector "+this.id, elementCommand._element.id);
            else if (Number(index) >= 0)
                return ( this.elements.map(e=>e[0]).indexOf(elementCommand._element) == Number(index) );
            else 
                return ( this.elements.map(e=>e[0]).indexOf(elementCommand._element) >= 0 );
        }
    };

});

// Add a .settings.selector command to all elements
window.PennController._AddStandardCommands(function(PennEngine){
    this.settings = {
        selector: async function(resolve, selectorRef){  /* $AC$ all PElements.selector(selector) Adds the element to the specified selector $AC$ */
            var selector;
            if (typeof(selectorRef)=="string"){
                let elements = PennEngine.controllers.running.options.elements;
                if (elements.hasOwnProperty("Selector") && elements.Selector.hasOwnProperty(selectorRef))
                    selector = elements.Selector[selectorRef];
                else
                    return PennEngine.debug.error("No selector found named "+selectorRef);
            }
            else if (selectorRef._element && selectorRef._runPromises){
                if (selectorRef._element.type=="Selector"){
                    await selectorRef._runPromises();
                    selector = selectorRef._element;
                }
                else
                    PennEngine.debug.error("Tried to add "+this.name+" to an invalid Selector");
            }
            if (selector.elements.map(e=>e[0]).indexOf(this)>-1)
                PennEngine.debug.error("Element "+this.id+" already part of Selector "+selector.id);
            else if (this.jQueryElement == undefined || !(this.jQueryElement instanceof jQuery))
                PennEngine.debug.error("Element "+this.id+" has no visble element to be chosen in Selector "+selector.id);
            else {
                selector.elements.push([this]);        // Each member of this.elements is an array [2nd member = keys]
                if (!this.noClick)
                    this.jQueryElement.css("cursor", "pointer");
                let oldClick = this.jQueryElement[0].onclick;
                this.jQueryElement[0].onclick = (...args)=>{
                    if (oldClick instanceof Function)
                        oldClick.apply(this.jQueryElement[0], args);
                    if (!selector.noClick)
                        selector.select(this);
                };
            }
            resolve();
        }
    }
});


// TEXT element
/* $AC$ PennController.newText(name,text) Creates a new Text element $AC$ */
/* $AC$ PennController.getText(name) Retrieves an existing Text element $AC$ */
window.PennController._AddElementType("Text", function(PennEngine) {

    this.immediate = function(id, text){
        if (text===undefined)
            text = id;
        this.id = id;
        text = text.replace(/(^\s|\s$)/,'&nbsp;');
        this.initialText = text; // Keep track of this for reset
        this.text = text;
    };

    this.uponCreation = function(resolve){
        this.jQueryElement = $("<span>"+this.initialText+"</span>").css('display','inline-block');    // The jQuery element
        resolve();
    };

    this.value = function(){                                            // Value is text
        return this.text;
    };

    this.end = function(){
        if (this.log){
            if (!this.printTime)
                PennEngine.controllers.running.save(this.type, this.id, "Print", "NA", "Never", "NULL");
            else
                PennEngine.controllers.running.save(this.type, this.id, "Print", "NA", this.printTime, "NULL");
        }
    }

    this.actions = {
        unfold: function(resolve, duration){ /* $AC$ Text PElement.unfold(duration) Unfolds the text in duration milliseconds $AC$ */
            let startUnfolding = ()=>{
                let d = Number(duration);
                if (d>0){
                    let start = Date.now();
                    this.jQueryElement.css("visibility", "visible");
                    let width = this.jQueryElement.width();
                    let wrap = $("<div>").css({
                        display: 'inline-block',
                        'overflow-x': 'hidden',
                        width: 0,
                        margin: 0,
                        padding: 0,
                        'white-space': 'nowrap'
                    });
                    wrap = this.jQueryElement.wrap(wrap).parent();
                    let previousWidth = 0;
                    let unfold = ()=>{                        
                        let proportion = (Date.now()-start) / d;
                        if (proportion>=1)
                            proportion = 1;
                        let newWidth = Math.round(width*proportion);
                        if (newWidth>previousWidth)
                            wrap.width(newWidth);
                        previousWidth = newWidth;
                        if (proportion<1)
                            window.requestAnimationFrame(unfold);
                    };
                    window.requestAnimationFrame(unfold);
                }
            };
            if (!(this.jQueryContainer instanceof jQuery && this.jQueryContainer.parent().length))
                PennEngine.elements.standardCommands.actions.print.call(this, startUnfolding);
            else
                startUnfolding();
            resolve();
        }
    }

    this.settings = {
        text: function(resolve,  text){ /* $AC$ Text PElement.text(text) Redefines the text of the element $AC$ */
            if (text instanceof PennEngine.PennElementCommands)
                text = text.value;
            this.text = text;
            this.jQueryElement.html(text);
            resolve();
        }
    };
    
    this.test = {
        text: function(text){ /* $AC$ Text PElement.test.text(value) Checks that the text of the element corresponds to the specified value $AC$ */
            if (text instanceof RegExp)
                return this.text.match(text);
            else
                return text==this.text;
        }
    };

});


// TEXTINPUT element
/* $AC$ PennController.newTextInput(name,text) Creates a new TextInput element $AC$ */
/* $AC$ PennController.getTextInput(name) Retrieves an existing TextInput element $AC$ */
window.PennController._AddElementType("TextInput", function(PennEngine) {

    // This is executed when Ibex runs the script in data_includes (not a promise, no need to resolve)
    this.immediate = function(id, text){
        if (id===undefined||typeof(id)!="string"||id.length==0)
            id = "TextInput";
        this.initialText = text;                            // In case this gets changed later
        this.id = id;
    };

    // This is executed when 'newAudio' is executed in the trial (converted into a Promise, so call resolve)
    this.uponCreation = function(resolve){
        this.text = this.initialText;
        this.jQueryElement = $("<textarea>");
        this.jQueryElement.attr({name: this.id, rows: 1, cols: 40}).val(this.text);
        // Default settings
        this.rows = 1;
        this.disabled = false;
        this.log = [];
        this.types = [];
        this.validations = [];
        this.entered = false;
        this.pressEnter = ()=>{
            this.entered = true;
            this.validations.push(["EnterReturn",this.jQueryElement.val(),Date.now(),"NULL"]);
        };
        this.jQueryElement[0].addEventListener("keydown", e=>{// KEYDOWN
            let text = this.jQueryElement.val();
            this.types.push(["Type",text,Date.now(),e.key]);// Save _all_ typing events
            if (e.key=="Enter"){                            // CASE: Enter/Return
                this.pressEnter();
                if (this.rows == 1)
                    e.preventDefault();                     // Prevent insertion if one-line input
                else if (this.rows > 1){                    // Check # of lines if limit on rows
                    let returns = text.match(/[\r\n]/g);    // How many returns/newlines already
                    if (returns instanceof Array && returns.length+1 >= this.rows)
                        e.preventDefault();                 // Prevent if limit reached
                }
            }
        });
        this.jQueryElement[0].addEventListener("keypress", e=>{
            if (e.key=="Enter" && this.rows > 0){
                let returns = this.jQueryElement.val().match(/[\r\n]/g);
                if (returns instanceof Array && returns.length+1 >= this.rows)
                    e.preventDefault();
            }
            if (!e.key.isSpecialKey() && 
                this.length==this.jQueryElement.val().length && 
                this.jQueryElement[0].selectionStart==this.jQueryElement[0].selectionEnd)
                e.preventDefault();                        // Prevent insertion if printable character and length limit reached
        })
        this.jQueryElement[0].addEventListener("keyup", e=>{ // KEYUP [special case: pasted text]
            let text = this.jQueryElement.val();
            if (this.length && text.length > this.length)   // Truncate text if longer than max chars
                this.jQueryElement.val(text.substr(0,this.length));
            let returns = text.match(/[\r\n]/g);            // How many returns/newlines in text now
            if (this.rows > 0 && returns instanceof Array && returns.length >= this.rows+1) {
                let regx = "([\\n\\r]?[^\\n\\r]*){"+this.rows+"}";      // Capture text until correct # of returns/newlines
                this.jQueryElement.val(text.match(RegExp(regx))[0]);    // Truncate text
            }
        });
        this.jQueryElement[0].addEventListener("paste", e=>{
            let text = this.jQueryElement.val();
            let clipboardData = e.clipboardData || window.clipboardData;
            let pastedData = clipboardData.getData('Text');
            let caretPos = this.jQueryElement[0].selectionStart;
            let front = (text).substring(0, caretPos);
            let back = (text).substring(this.jQueryElement[0].selectionEnd, text.length);
            let tmpValue = front + pastedData + back;
            let returns =  tmpValue.match(/[\r\n]/g);               // How many returns/newlines in text now
            if (this.rows > 0 && returns instanceof Array && returns.length >= this.rows){
                let regx = "([\\n\\r]?[^\\n\\r]*){"+this.rows+"}";  // Capture text until correct # of returns/newlines
                tmpValue = tmpValue.match(RegExp(regx))[0];         // Truncate text
                this.jQueryElement.val(tmpValue);
                e.preventDefault();
            }
            if (this.length > 0 && tmpValue.length >= this.length){
                this.jQueryElement.val(tmpValue.substring(0,this.length));
                e.preventDefault();
            }
        });
        resolve();
    }

    this.end = function(){
        if (!this.log || !(this.log instanceof Array))
            return;
        if (this.log.indexOf("all")>-1){                            // Special case: log all typing events
            let now = Date.now();
            PennEngine.controllers.running.save(this.type, this.id, "Final", csv_url_encode(this.jQueryElement.val()), now, "All saved, see documentation");
            if (this.types.length){
                PennEngine.controllers.running.save(this.type, this.id, "NTypingEvents", this.types.length, now, "All saved, see documentation");
                let texts = [], times = [], keys = [];
                this.types.map(t=>{ texts.push(csv_url_encode(t[1])); times.push(t[2]); keys.push(t[3]); });
                PennEngine.controllers.running.save(this.type, this.id, "TypingEvent", "Keys", "NULL", ...keys);   // As many comments
                PennEngine.controllers.running.save(this.type, this.id, "TypingEvent", "Texts", "NULL", ...texts);
                PennEngine.controllers.running.save(this.type, this.id, "TypingEvent", "Times", "NULL", ...times); // as typing events
            }
            for (let v in this.validations){
                this.validations[v][1] = csv_url_encode(this.validations[v][1]);
                PennEngine.controllers.running.save(this.type, this.id, ...this.validations[v]);
            }
        }
        else {
            if (this.log.indexOf("validate")>-1)
                for (let v in this.validations){
                    this.validations[v][1] = csv_url_encode(this.validations[v][1]);
                    PennEngine.controllers.running.save(this.type, this.id, ...this.validations[v]);
                }
            if (this.log.indexOf("final")>-1)
                PennEngine.controllers.running.save(this.type, this.id, "Final", csv_url_encode(this.jQueryElement.val()), Date.now(), "NULL");
            if (this.log.indexOf("first")>-1 && this.types.length){
                let first = [].concat(this.types[0]);               // Create a copy, do not modify original
                first[0] = "First";
                first[1] = csv_url_encode(first[1]);
                PennEngine.controllers.running.save(this.type, this.id, ...first);
            }
            if (this.log.indexOf("last")>-1 && this.types.length){
                let last = [].concat(this.types[this.types.length-1]); // Create a copy, do not modify original
                last[0] = "Last";
                last[1] = csv_url_encode(last[1]);
                PennEngine.controllers.running.save(this.type, this.id, ...last);
            }
        }
    };

    this.value = function(){                        // Value is content of box
        return this.jQueryElement.val();
    };
    
    this.actions = {
        callback: function(resolve, ...commands){
            let oldPressEnter = this.pressEnter;
            this.pressEnter = ()=> {
                oldPressEnter.apply(this);
                commands.forEach( async c=>{
                    if (c instanceof Function) 
                        await c.apply(this);
                    else if (c instanceof PennEngine.PennElementCommands)
                        await c._runPromises();
                });
            };
            resolve();
        },
        print: function(resolve, ...where){
            let afterPrint = ()=>{
                this.jQueryElement.focus();         // Put focus on element when printed
                resolve();
            }
            PennEngine.elements.standardCommands.actions.print.apply(this, [afterPrint, ...where]);
        },
        wait: function(resolve, test){  /* $AC$ TextInput PElement.wait() Waits until Enter is pressed in the input box before proceeding $AC$ */
            if (test == "first" && this.entered)    // If first and already entered, resolve already
                resolve();
            else {                                  // Else, extend pressEnter and do the checks
                let resolved = false;
                let oldPressEnter = this.pressEnter;
                this.pressEnter = ()=> {
                    oldPressEnter.apply(this);
                    if (resolved)
                        return;
                    if (test instanceof Object && test._runPromises && test.success){
                        let oldDisabled = this.disabled;    // Disable temporarilly
                        this.disabled = "tmp";
                        test._runPromises().then(value=>{   // If a valid test command was provided
                            if (value=="success"){
                                resolved = true;
                                resolve();                  // resolve only if test is a success
                            }
                            if (this.disabled=="tmp")       // Restore old setting if not modified by test
                                this.disabled = oldDisabled;
                        });
                    }
                    else{                                   // If no (valid) test command was provided
                        resolved = true;
                        resolve();                          // resolve anyway
                    }
                };
            }
        }
    };
    
    this.settings = {
        length: function(resolve, n){  /* $AC$ TextInput PElement.length(number) Limits the maximum number of characters in the input box to the specified number $AC$ */
            this.length = Number(n);
            if (isNaN(this.length))
                this.length = 0;
            resolve();
        },
        lines: function(resolve, n){  /* $AC$ TextInput PElement.lines(number) Limits the maximum number of lines in the input box to the specified number $AC$ */
            this.rows = Number(n);
            if (isNaN(this.rows))
                this.rows = 0;
            this.jQueryElement.attr("rows", this.rows);
            resolve();
        },
        log: function(resolve, ...what){  /* $AC$ TextInput PElement.log() Will log the text from the input box in the results file $AC$ */
            if (!what.length)
                what = ["final", "validate", "first"];
            this.log = what;
            if (what.indexOf("all")>-1)
                PennEngine.debug.warning("<div style='color:red;'>"+
                             "Now logging all typing events in inputText element "+this.id+
                             ": this can drastically increase the weight of the results file"+
                             "</div>");
            resolve();
        },
        once: function(resolve){  /* $AC$ TextInput PElement.once() Will disable the input box after the first keypress on Enter/Return $AC$ */
            if (this.entered)
                this.jQueryElement.attr("disabled", true);
            else{
                let oldPressEnter = this.pressEnter;
                this.pressEnter = function(){
                    oldPressEnter.apply(this);
                    this.jQueryElement.attr("disabled",true)
                };
            }
            resolve();
        },
        text: function(resolve, text){  /* $AC$ TextInput PElement.text(value) Replaces whatever is in the input box with the specified value $AC$ */
            this.text = text;
            this.jQueryElement.val(text);
            resolve();
        }
    };

    this.test = {
        text: function(text){  /* $AC$ TextInput PElement.test.text(value) Checks that the content of the input box corresponds to the specified value $AC$ */
            if (text instanceof RegExp)
                return this.jQueryElement.val().match(text);
            else
                return this.jQueryElement.val() == text;
        }
    };

});


// TIMER element
/* $AC$ PennController.newTimer(name,duration) Creates a new Timer element $AC$ */
/* $AC$ PennController.getTimer(name) Retrieves an existing Timer element $AC$ */
window.PennController._AddElementType("Timer", function(PennEngine) {

    // This is executed when Ibex runs the script in data_includes (not a promise, no need to resolve)
    this.immediate = function(id, duration){
        if (duration===undefined&&Number(id)>0){
            duration = id;
            if (id===undefined||typeof(id)!="string"||id.length==0)
                id = "Timer";
        }
        this.id = id;
        this.initialDuration = 0;
        if (Number(duration)>0)
            this.initialDuration = Number(duration);
        else
            PennEngine.debug.error("Invalid duration for Timer &quot;"+id+"&quot;");
    };

    // This is executed when 'newAudio' is executed in the trial (converted into a Promise, so call resolve)
    this.uponCreation = function(resolve){
        this.elapsed = false;
        this.events = [];
        this.log = false;
        this.running = false;
        this.duration = this.initialDuration;
        this.start = ()=>{                  // Starts the timer
            this.startTime = Date.now();
            this.running = true;
            this.events.push(["Start","Start",this.startTime,"NULL"]);
            let check = ()=>{
                if (!this.running)
                    return;
                if (Date.now()-this.startTime >= this.duration)
                    this.done();
                else
                    setTimeout(check, 0);
                    // window.requestAnimationFrame(check);
            };
            check();
        };
        this.done = ()=>{                   // Called when finished running
            this.running = false;
            this.events.push(["End","End",Date.now(),"NULL"]);
            this.elapsed = true;
            this.startTime = null;
        };
        resolve();
    }

    // This is executed at the end of a trial
    this.end = function(){
        if (this.running){
            this.running = false;
            this.events.push(["End","NA","Never","Had to halt the timer at the end of the trial"]);
        }
        if (this.log)
            for (let e in this.events)                   // Save events
                PennEngine.controllers.running.save(this.type, this.id, ...this.events[e]);
    };

    this.value = function(){                            // Value is whether timer has ended
        return this.elapsed;
    };
    
    this.actions = {
        pause: function (resolve){
            if (this.running) {
                this.running = false;
                this.pausedTimestamp = Date.now();
                this.events.push(["Pause","Pause",this.pausedTimestamp,"NULL"]);
            }
            resolve();
        },
        resume: function(resolve){
            if (!this.running && this.pausedTimestamp) {
                this.resumedTimestamp = Date.now();
                const offset = this.resumedTimestamp-this.pausedTimestamp;
                const newStartTime = this.startTime + offset;
                this.events.push(["Resume","Resume",this.resumedTimestamp,"NULL"]);
                this.start();
                this.startTime = newStartTime;
            }
            resolve();
        },
        set: function(resolve, duration){
            const nduration = Number(duration);
            if (isNaN(nduration) || nduration < 0)
                PennEngine.debug.error(`Invalid duration passed for timer ${this.id} (&quot;${duration}&quot;)`);
            else
                this.duration = nduration;
            resolve();
        },
        start: function(resolve){   /* $AC$ Timer PElement.start() Starts the timer $AC$ */
            this.start();
            resolve();
        },
        stop: function(resolve){   /* $AC$ Timer PElement.stop() Stops the timer $AC$ */
            if (this.running)   
                this.done();
            resolve();
        },
        wait: function(resolve, test){   /* $AC$ Timer PElement.wait() Waits until the timer elapses before proceeding $AC$ */
            if (test == "first" && this.elapsed)            // If first and already elapsed, resolve already
                resolve();
            else {                                          // Else, extend remove and do the checks
                let resolved = false;
                let oldDone = this.done;
                this.done = () => {
                    oldDone.apply(this);
                    if (resolved)
                        return;
                    if (test instanceof Object && test._runPromises && test.success)
                        test._runPromises().then(value=>{   // If a valid test command was provided
                            if (value=="success"){
                                resolved = true;
                                resolve();                  // resolve only if test is a success
                            }
                        });
                    else{                                   // If no (valid) test command was provided
                        resolved = true;
                        resolve();                          // resolve anyway  
                    }
                };
            }
        }
    };
    
    this.settings = {
        callback: function(resolve, ...elementCommands){   /* $AC$ Timer PElement.callback(commands) Will execute the specified command(s) whenever the timer elapses $AC$ */
            let oldDone = this.done;
            this.done = async function() {
                oldDone.apply(this);
                for (let c in elementCommands)
                    await elementCommands[c]._runPromises();
            };
            resolve();
        },
        log: function(resolve){   /* $AC$ Timer PElement.log() Will log when the timer starts and ends in the results file $AC$ */
            this.log = true;
            resolve();
        }
    };

    this.test = {
        ended: function(){   /* $AC$ Timer PElement.test.ended() Checks that the timer has ever elapsed before $AC$ */
            return this.elapsed;
        },
        running: function(){   /* $AC$ Timer PElement.test.running() Checks that the timer is currently running $AC$ */
            return this.running;
        }
    };

});


// TOOLTIP element
/* $AC$ PennController.newTooltip(name,text) Creates a new Tooltip element $AC$ */
/* $AC$ PennController.getTooltip(name) Retrieves an existing Tooltip element $AC$ */
window.PennController._AddElementType("Tooltip", function(PennEngine) {

    function remove(){                          // Special function to remove element from DOM
        this.jQueryElement.remove();
        if (this.jQueryContainer instanceof jQuery)
            this.jQueryContainer.detach();
        if (this.frame && this.frame instanceof jQuery)
            this.frame.detach();
    }

    // This is executed when Ibex runs the script in data_includes (not a promise, no need to resolve)
    this.immediate = function(id, text, optionalOKLabel){
        if (text===undefined)
            text = id;
        this.initialText = text;                            // In case this gets changed later
        this.initialLabel = optionalOKLabel;
        if (id===undefined||typeof(id)!="string"||id.length==0)
            id = "Tooltip";
        this.id = id;
    };

    // This is executed when 'newAudio' is executed in the trial (converted into a Promise, so call resolve)
    this.uponCreation = function(resolve){
        this.text = this.initialText;
        if (typeof(this.initialLabel)=="string" && this.initialLabel.length)
            this.label = this.initialLabel;
        else
            this.label = "OK";
        this.resetLabel = false;                            // Use initial label
        this.jQueryElement = $("<div>").html(this.text);    // The tooltip itself
        this.jQueryContainer = undefined;
        this.jQueryLabel = $("<a>").html(this.label);       // The confirmation button
        this.validations = [];                              // Stores all the validations of the tooltip
        this.frame = $("<div>").addClass("PennController-"+this.type.replace(/[\s_]/g,'')+"-tooltip-frame");
        this.jQueryElement.addClass("PennController-"+this.type.replace(/[\s_]/g,'')+"-tooltip");
        this.jQueryElement.addClass("PennController-"+this.id.replace(/[\s_]/g,''));
        // Default aesthetics
        this.jQueryElement.css({background: "floralwhite", position: "relative"});
        this.jQueryLabel.css({border: "dotted 1px gray", cursor: "pointer", position: "absolute", bottom: "2px", right: "2px"});
        // Default settings
        this.wasValidated = false;
        this.disabled = false;
        this.log = false;
        this.validate = ()=>{                              // (Re)set upon creation, for it can be modified during runtime
            if (this.delayedPrinting||this.disabled)       // delayedPrinting to prevent early validation
                return;
            this.wasValidated = true;
            this.validations.push(["Validate", "Validate", Date.now(), "NULL"]);
            remove.apply(this);
        };
        resolve();
    }

    // This is executed at the end of a trial
    this.end = function(){
        if (this.jQueryElement && this.jQueryElement instanceof jQuery)
            remove.apply(this);                     // Remove element (and frame) from DOM
        if (this.log)
            for (let v in this.validations)     // Save any validation if logging
                PennEngine.controllers.running.save(this.type, this.id, ...this.validations[v]);
    };

    this.value = function(){                    // Value is whether it was validated
        return this.wasValidated;
    };
    
    this.actions = {
        print: async function(resolve, element, ...more){  /* $AC$ Tooltip PElement.print(element) Prints the tooltip attached to the specified element $AC$ */
            if (element && element.hasOwnProperty("_element") && element._element.jQueryElement instanceof jQuery)
                element = element._element.jQueryElement;
            this.jQueryElement.append(this.jQueryLabel);                        // Label, aligned to the right
            this.jQueryLabel.click(()=>{
                if (!this.noClicks)
                    this.validate();                                            // Validate on click
            });
            this.jQueryElement.css("text-align", "left");
            if (element instanceof jQuery){                                     // Add to an existing element
                element.before(this.jQueryElement);
                let parentw = element.width(), parenth = element.height();
                this.jQueryElement.css({
                    position: "absolute",                                       // may be moved anywhere on the page
                    display: "inline-block",
                    visibility: "hidden",                                       // Hide until position is final
                    overflow: "auto",
                    top: "auto",
                    left: "auto",
                    "margin-top": 1+parenth,                                    // Default relative position: Bottom-Right
                    "margin-left": 1+parentw,
                    "z-index": 9999,                                            // In case * layer (e.g. canvas)
                    padding: "1px"                                              // Just aesthetics
                });
                if (this.frameParent)                                           // Add a frame to the parent element
                    element.before(this.frame.css({
                        position: "absolute", 
                        display: "inline-block",
                        width: parentw,
                        height: parenth,
                        border: this.frameParent,
                        "z-index": 100,
                        "pointer-events": "none"                                // Can click through it
                    }));
                let top = element.css("top"), left = element.css("left");
                if (top=="0px")
                    top = "auto";
                if (left=="0px")
                    left = "auto";
                this.jQueryElement.css({left: left, top: top});
                this.frame.css({left: left, top: top});
                this.jQueryElement.addClass("PennController-"+this.type.replace(/[\s_]/g,''));
                if (this.jQueryLabel.css("display")!="none")
                    this.jQueryElement.css("padding-bottom", "20px");
                if (this.relativePosition){                                         // If other specified...
                    let set_top = ()=>{ 
                        if (this.relativePosition.match(/top/i))                    // Top
                            return -1 * this.jQueryElement.outerHeight() - 1;
                        else if (this.relativePosition.match(/middle/i))            // Middle
                            return 0.5 * (element.height() - this.jQueryElement.outerHeight());
                        else
                            return element.height() + 1;
                    };
                    let set_left = ()=>{ 
                        if (this.relativePosition.match(/left/i))                   // Left
                            return -1 * this.jQueryElement.outerWidth() - 1;
                        else if (this.relativePosition.match(/center/i))            // Center
                            return 0.5* (element.width() -  this.jQueryElement.outerWidth());
                        else
                            return element.width() + 1;
                    };
                    this.delayedPrinting = true;                              // To prevent early validation
                    setTimeout(()=>{                                          // Only accurate 2nd time for some reason
                        this.jQueryElement.css({"margin-top": set_top(), "margin-left": set_left()});
                        setTimeout(()=>{
                            this.jQueryElement.css({"margin-top": set_top(), "margin-left": set_left(), visibility: "visible"});
                            this.delayedPrinting = false;
                            resolve();
                        });
                    });
                }
                else{
                    this.jQueryElement.css("visibility", "visible");
                    resolve();
                }
            }
            else{                                                              // Add to the page
                if (more.length>1) this.jQueryContainer = undefined;  // Print to element: no container
                else this.jQueryContainer = $("<div>");               // Global print: need a container
                await new Promise(r=>PennEngine.elements.standardCommands.actions.print.apply(this, [r, element, ...more]));
                this.jQueryElement.css({position: "relative", left: "", top: "", margin: 0, display:"inline-block"});
                if (this.jQueryLabel.css("display")!="none")
                    this.jQueryElement.css("padding-bottom", "20px");
                resolve();
            }
        },
        remove: function(resolve){
            remove.apply(this);
            resolve()
        },
        wait: function(resolve, test){  /* $AC$ Tooltip PElement.wait() Waits until the tooltip gets validated before proceeding $AC$ */
            if (test == "first" && this.wasValidated) // If first and already validated, resolve already
                resolve();
            else {                                  // Else, extend validate and do the checks
                let resolved = false;
                let oldValidate = this.validate;
                this.validate = ()=>{
                    oldValidate.apply(this);
                    if (resolved)
                        return;
                    if (test instanceof Object && test._runPromises && test.success){
                        let oldDisabled = this.disabled;    // Disable temporarilly
                        this.disabled = "tmp";
                        test._runPromises().then(value=>{   // If a valid test command was provided
                            if (value=="success"){
                                resolved = true;
                                resolve();                  // resolve only if test is a success
                            }
                            if (this.disabled=="tmp")       // Restore old setting if not modified by test
                                this.disabled = oldDisabled;
                        });
                    }
                    else{                                   // If no (valid) test command was provided
                        resolved = true;
                        resolve();                          // resolve anyway
                    }
                };
            }
        }
    };
    
    this.settings = {
        disable: function(resolve){
            this.disabled = true;
            this.jQueryContainer.addClass("PennController-disabled");
            this.jQueryElement.addClass("PennController-disabled");
            resolve();
        },
        enable: function(resolve){
            this.disabled = false;
            this.jQueryContainer.removeClass("PennController-disabled");
            this.jQueryElement.removeClass("PennController-disabled");
            resolve();
        },
        frame: function(resolve, css){  /* $AC$ Tooltip PElement.css(css) Applies the specified CSS to the frame around the target element $AC$ */
            if (typeof(css)=="string" && css.length)
                this.frameParent = css;
            else
                this.frameParent = "dotted 1px gray";       // By default
            resolve();
        },
        key: function(resolve, keys, noclick){  /* $AC$ Tooltip PElement.key(key) Will validate (and remove) the tooltip whenever the specified key is pressed $AC$ */
            if (keys != " " && !isNaN(Number(keys)))    // If keycode
                keys = String.fromCharCode(keys);
            if (typeof(keys) != "string")
                resolve(PennEngine.debug.error("Invalid key(s) passed to Tooltip &quot;"+id+"&quot; (should be a string or a key code number)", keys));
            keys = keys.toUpperCase();
            PennEngine.events.keypress(e=>{
                if (!this.jQueryElement.parent().length)
                    return;
                let isSpecialKey = e.key.isSpecialKey();
                let upperE = e.key.toUpperCase();
                let side = {0: "", 1: "LEFT", 2: "RIGHT"};
                if ((keys===undefined||keys.length==0) || // If no key specified, any key press will do
                    (isSpecialKey && (keys==upperE||keys==side[e.location]+upperE)) || // Special key
                    (!isSpecialKey && keys.indexOf(upperE)>-1) ) // Regular list of keys
                        this.validate();
                });
            if (noclick){                                   // If noclick was specified
                this.noClicks = true;
                this.jQueryLabel.css("cursor", "");         // No pointer when hovering the label
                if (!this.initialLabel&&!this.resetLabel)   // If no label initially set
                    this.jQueryLabel.css("display","none"); // Just remove it
            }
            resolve();
        },
        label: function(resolve, text){  /* $AC$ Tooltip PElement.label(text) Defines the text used for the validation label $AC$ */
            this.label = text;
            this.resetLabel = true;
            if (typeof(text)!="string" || text.match(/^[\s\t]*$/))
                this.jQueryLabel.css("display","none");
            else{
                this.jQueryLabel.html(text);
                this.jQueryLabel.css("display","inherit");
            }
            resolve();
        },
        log: function(resolve) {  /* $AC$ Tooltip PElement.log() Will log when the tooltip is validated in the results file $AC$ */
            this.log = true;
            resolve();
        },
        position: function(resolve, positionString){  /* $AC$ Tooltip PElement.position(position) Will show the tooltip at the top, at the bottom, to the left or to the right of the element it attaches to $AC$ */
            this.relativePosition = positionString;
            resolve();
        },
        text: function(resolve, text){  /* $AC$ Tooltip PElement.text(value) Redefines the text of the tooltip $AC$ */
            this.text = text;
            this.jQueryElement.html(text);
            this.jQueryElement.append(this.jQueryLabel);
            this.jQueryLabel.click(()=>{
                if (!this.noClicks)
                    this.validate();
            });
            if (this.jQueryLabel.css("display")!="none")
                this.jQueryElement.css("padding-bottom", "20px");
            resolve();
        }
    };

});


(function(){

var prefix = null;
let oldResPref = window.PennController.ResetPrefix;
window.PennController.ResetPrefix = function(prefixName) {
    oldResPref(prefixName);
    if (typeof(prefixName)=="string")           // Catch the new prefix
        prefix = window[prefixName];
    else
        prefix = window;                    // If no (valid) prefix name, drop any prefix (object = window)
};

let getVarWasReset = false;
let resetGetVar = PennEngine =>{
    if (getVarWasReset) return;
    let oldGetVar = window.PennController.Elements.getVar;
    window.PennController.Elements.getVar = function(getVarID){
        let controller = PennEngine.controllers.underConstruction; // Controller under construction
        if (PennEngine.controllers.running)                     // Or running, if in running phase
            controller = PennEngine.controllers.list[PennEngine.controllers.running.id];
        if (!(controller.elements.hasOwnProperty("Var") && controller.elements.Var.hasOwnProperty(getVarID))){
            let newVar = window.PennController.Elements.newVar(getVarID).settings.global();
            newVar._element.scope = "global";
            return newVar;
        }
        else
            return oldGetVar(getVarID);
    };
    if (prefix)                         // Update 'getVar' for the new prefix
        prefix.getVar = window.PennController.Elements.getVar;
}

let globalVars = {};

// VAR element
/* $AC$ PennController.newVar(name,value) Creates a new Var element $AC$ */
/* $AC$ PennController.getVar(name) Retrieves an existing Var element $AC$ */
window.PennController._AddElementType("Var", function(PennEngine) {

    this.immediate = function(id, value){
        resetGetVar(PennEngine);
        let controller = PennEngine.controllers.underConstruction; // Controller under construction
        if (PennEngine.controllers.running)                     // Or running, if in running phase
            controller = PennEngine.controllers.list[PennEngine.controllers.running.id];
        if (controller.elements.hasOwnProperty("Var") && controller.elements.Var.hasOwnProperty(id)){
            let other = controller.elements.Var[id];
            if (other.scope == "global")
                delete controller.elements.Var[id];
        }
        this.scope = "local";
        this.initialValue = value;
        //this.value = value;
        this._value = value;
        this.getter = ()=>{
            if (this.scope=="local")
                return this._value;
            else
                return globalVars[this.id];
        };
        this.setter = v=>{
            if (this.scope=="local")
                this._value = v;
            else
                globalVars[this.id] = v;
        };
        Object.defineProperty(this, "value", { get: this.getter , set: this.setter });
        this.evaluate = ()=>{
            if (this.value && this.value.type === "Var")
                return this.value.evaluate();
            else
                return this.value;
        };
    };

    this.uponCreation = function(resolve){
        this.scope = "local";
        this.value = this.initialValue;
        this.values = [];
        resolve();
    };

    this.end = function(){
        if (this.log && this.log instanceof Array){
            if (this.log.indexOf("final")>-1)
                PennEngine.controllers.running.save(this.type, this.id, "Final", this.value, Date.now(), "Value at the end of the trial");
            if (this.log.indexOf("set")>-1){
                for (let v in this.values)
                    PennEngine.controllers.running.save(this.type, this.id, ...this.values[v]);
                if (!this.values.length)
                    PennEngine.controllers.running.save(this.type, this.id, "Set", "NA", "Never", "The Var element was never set during the trial");
            }
        }
    };

    this.value = function(){
        return this.evaluate();
    };
    
    this.actions = {
        set: function(resolve, value){  /* $AC$ Var PElement.set(value) Sets the value (can be a function, e.g. v=>v+1 will increment the value) $AC$ */
            if (typeof(value)=="object" && value.hasOwnProperty("value"))
                this.value = value.value;
            else if (value instanceof Function)
                this.value = value.call(this, this.value);
            else
                this.value = value;
            if (this.values===undefined)
                this.values = [];
            this.values.push(["Set", this.value, Date.now(), "NULL"]);
            resolve();
        }
    };

    this.settings = {
        local: function(resolve){  /* $AC$ Var PElement.local() Ensures that the value of this Var element only affects the current trial $AC$ */
            this.scope = "local";
            resolve();
        },
        log: function(resolve, ...what){
            if (what.length)
                this.log = what;
            else
                this.log = ["final"];
            resolve();
        },
        global: function(resolve){  /* $AC$ Var PElement.global() Shares the value with all Var elements with the same name across trials $AC$ */
            if (!globalVars.hasOwnProperty(this.id))
                globalVars[this.id] = this.value;
            this.scope = "global";
            resolve();
        }
    };

    this.test = {
        is: function(test){  /* $AC$ Var PElement.test.is(value) Checks the value of the Var element (can be a function, e.g. v=>v<10) $AC$ */
            let v = this.evaluate();
            if (test && test.value)
                test = test.value;
            if (test && test._element)
                test = test._element
            if (v && v._element)
                v = v._element;
            if (test instanceof RegExp && typeof(v) == "text")
                return v.match(test);
            else if (test instanceof Function)
                return test(v);
            else
                return v == test;
        }
    };

});

window.PennController._AddStandardCommands(function(PennEngine){
    this.actions = {
        setVar: function(resolve, varRef){  /* $AC$ all PElements.setVar(var) Sets the value of the specified Var element with the current value of the element $AC$ */
            if (typeof(varRef)=="string") {
                if (!PennEngine.controllers.running.options.elements.hasOwnProperty("Var"))
                    return PennEngine.debug.error("No Var element named "+varRef+" found");
                let variable = PennEngine.controllers.running.options.elements.Var[varRef];
                if (variable)
                    variable.value = window.PennController.Elements["get"+this.type](this).value;
                else if (globalVars[varRef])
                    globalVars[varRef].value =  window.PennController.Elements["get"+this.type](this).value;
                else
                    return PennEngine.debug.error("No Var element named "+varRef+" found");
            }
            else
                PennEngine.debug.error("Invalid variable reference when trying to store "+this.id+"'s value", varRef);
            resolve();
        }
    };
});


})();


// video element
/* $AC$ PennController.newVideo(name,file) Creates a new Video element using the specified file $AC$ */
/* $AC$ PennController.getVideo(name) Retrieves an existing Video element $AC$ */
window.PennController._AddElementType("Video", function(PennEngine) {

    const RATIO_PRELOADED = 0.95;

    this.immediate = function(id, file){
        if (typeof id == "string" && file===undefined)
            file = id;
        let addHostURLs = !file.match(/^http/i);
        // this.resource = new PennEngine.resources.Resource(file, function(uri, resolve){
        this.resource = PennEngine.resources.new(file, function(uri, resolve){
            const object = document.createElement("video");
            object.muted = true;
            let loading = false;
            const checkLoaded = ()=>{
                if (!loading){
                    console.log("Starting to preload "+file, object);
                    object.muted = true;
                    object.play();
                }
                loading = true;
                if (object.buffered.length && object.seekable.length){
                    const ratio = object.buffered.end(0) / object.seekable.end(0);
                    if (object.currentTime == object.duration || ratio >= RATIO_PRELOADED){
                        object.pause();
                        object.currentTime = 0;
                        object.muted = false;
                        loading = false;
                        return resolve(object);
                    }
                }
                window.requestAnimationFrame(checkLoaded);
                return true;
            };
            object.addEventListener("progress", ()=>loading||checkLoaded());
            object.src = uri;
            object.load();                                // Forcing 'autopreload'
        }, addHostURLs);
        // this.resource = PennEngine.resources.fetch(file, function(resolve){
        //     this.object = document.createElement("video");
        //     this.object.muted = true;
        //     let playing = false, checking = false;
        //     const checkLoaded = ()=>{
        //         checking = true;
        //         if (this.object.buffered.length && this.object.seekable.length){
        //             if (this.object.buffered.end(0) == this.object.seekable.end(0)){
        //                 this.object.pause();
        //                 this.object.currentTime = 0;
        //                 this.object.muted = false;
        //                 resolved = true;
        //                 return resolve();
        //             }
        //             else if (!playing){
        //                 this.object.muted = true;
        //                 this.object.play();
        //             }
        //         }
        //         window.requestAnimationFrame(checkLoaded);
        //         return true;
        //     };
        //     this.object.addEventListener("progress", ()=>checking||checkLoaded());
        //     this.object.src = this.value;
        //     this.object.load();                                // Forcing 'autopreload'
        // }, addHostURLs);
        if (id===undefined||typeof(id)!="string"||id.length==0)
            id = "Video";
        this.id = id;
    };

    this.uponCreation = function(resolve){
        this.resource.object.controls = true;   // Make the controls visible
        this.video = this.resource.object;      // video simply refers to the resource's object
        this.hasPlayed = false;                 // Whether the video has played before
        this.disabled = false;                  // Whether the video can be played
        this.resource.object.style = null;      // (Re)set any particular style applied to the resource's object
        this.resource.object.currentTime = 0;   // (Re)set to the beginning
        this.jQueryElement = $(this.video);     // The jQuery element
        this.jQueryElement.removeClass();
        this.jQueryDisable = null;              // The 'disable' element, to be printed on top
        this.playEvents = [];                   // List of ["play",time,position]
        this.endEvents = [];                    // List of ["end",time,position]
        this.pauseEvents = [];                  // List of ["pause",time,position]
        this.seekEvents = [];                   // List of ["seek",time,position]
        this.bufferEvents = [];                 // List of ["buffer",time,position]
        this.whatToSave = [];                   // ["play","end","pause","seek"] (buffer logged by default)
        this.resource.object.onplay = ()=>{
            this.playEvents.push(["play",this.video.currentTime,Date.now()]);
        };
        this.resource.object.onended = ()=>{
            this.hasPlayed=true;
            this.endEvents.push(["end",this.video.currentTime,Date.now()]);
        };
        this.resource.object.onpause = ()=>{
            this.pauseEvents.push(["pause",this.video.currentTime,Date.now()]);
        };
        this.resource.object.onseeked = ()=>{
            this.seekEvents.push(["seek",this.video.currentTime,Date.now()]);
        };
        this.resource.object.onwaiting = ()=>{
            this.bufferEvents.push(["buffer",this.video.currentTime,Date.now()]);
        };
        this.printDisable = opacity=>{
            if (opacity===undefined) opacity = this.disabled;
            if (opacity===true||isNaN(Number(opacity))) opacity = 0.5;
            if (this.jQueryDisable instanceof jQuery)
                this.jQueryDisable.remove();
            this.jQueryDisable = $("<div>").css({
                position: "absolute",
                display: "inline-block",
                "background-color": "gray",
                opacity: opacity,
                width: this.jQueryElement.width(),
                height: this.jQueryElement.height()
            });
            this.jQueryElement.before(this.jQueryDisable);
            this.jQueryElement.removeAttr("controls");
        };
        resolve();
    };

    // This is executed at the end of a trial
    this.end = function(){
        if (this.whatToSave && this.whatToSave.indexOf("play")>-1){
            if (!this.playEvents.length)
                PennEngine.controllers.running.save(this.type, this.id, "play", "NA", "Never");
            for (let line in this.playEvents)
                PennEngine.controllers.running.save(this.type, this.id, ...this.playEvents[line]);
        }
        if (this.whatToSave && this.whatToSave.indexOf("end")>-1){
            if (!this.endEvents.length)
                PennEngine.controllers.running.save(this.type, this.id, "end", "NA", "Never");
            for (let line in this.endEvents)    
                PennEngine.controllers.running.save(this.type, this.id, ...this.endEvents[line]);
        }
        if (this.whatToSave && this.whatToSave.indexOf("pause")>-1){
            if (!this.pauseEvents.length)
                PennEngine.controllers.running.save(this.type, this.id, "pause", "NA", "Never");
            for (let line in this.pauseEvents)
                PennEngine.controllers.running.save(this.type, this.id, ...this.pauseEvents[line]);
        }
        if (this.whatToSave && this.whatToSave.indexOf("seek")>-1){
            if (!this.seekEvents.length)
                PennEngine.controllers.running.save(this.type, this.id, "seek", "NA", "Never");
            for (let line in this.seekEvents)
                PennEngine.controllers.running.save(this.type, this.id, ...this.seekEvents[line]);
        }
        if (this.bufferEvents)
            for (let line in this.bufferEvents)
                PennEngine.controllers.running.save(this.type, this.id, ...this.bufferEvents[line]);
        if (this.jQueryDisable)
            this.jQueryDisable.remove();// Remove disabler from DOM
    };
    
    this.value = function(){                                    // Value is timestamp of last end event
        if (this.endEvents.length)                         
            return this.endEvents[this.endEvents.length-1][2];
        else
            return 0;
    };

    this.actions = {
        // Every method is converted into a Promise (so need to resolve)
        play: function(resolve){        /* $AC$ Video PElement.play() Starts playing the video (visible only if print was called) $AC$ */
            if (this.hasOwnProperty("video") && this.video.nodeName && this.video.nodeName == "VIDEO")
                this.video.play();
            else
                PennEngine.debug.error("No video to play for Video ", this.id);
            resolve();
        },
        pause: function(resolve){        /* $AC$ Video PElement.pause() Pauses the video $AC$ */
            this.video.pause();
            resolve();
        }
        ,
        print: function(resolve, ...where){        /* $AC$ Video PElement.print() Shows a video player $AC$ */
            let afterPrint = ()=>{
                if (this.disabled)
                    this.printDisable(this.disabled);
                resolve();
            };
            PennEngine.elements.standardCommands.actions.print.apply(this, [afterPrint, ...where]);
        },
        stop: function(resolve){        /* $AC$ Video PElement.stop() Stops playing the video $AC$ */
            this.video.pause();
            this.video.currentTime = 0;
            resolve();
        }
        ,
        // Here, we resolve only when the video ends (and the test is felicitous, if provided)
        wait: function(resolve, test){        /* $AC$ Video PElement.wait() Waits untils the video reaches the end before proceeding $AC$ */
            if (test == "first" && this.hasPlayed)  // If first and has already played, resolve already
                resolve();
            else {                                  // Else, extend onend and do the checks
                let resolved = false;
                let originalOnended = this.video.onended;
                this.video.onended = function(...rest){
                    originalOnended.apply(this, rest);
                    if (resolved)
                        return;
                    if (test instanceof Object && test._runPromises && test.success){
                        let oldDisabled = this.disabled;    // Disable temporarilly
                        this.disabled = "tmp"; 
                        test._runPromises().then(value=>{   // If a valid test command was provided
                            if (value=="success"){
                                resolved = true;
                                resolve();                  // resolve only if test is a success
                            }
                            if (this.disabled=="tmp")       // Restore old setting if not modified by test
                                this.disabled = oldDisabled;
                        });
                    }
                    else{                                   // If no (valid) test command was provided
                        resolved = true;
                        resolve();                          // resolve anyway
                    }
                };
            }
        }
    };
    
    this.settings = {
        disable: function(resolve, opacity){    /* $AC$ Video PElement.disable(opacity) Disable controls on the Video element $AC$ */
            if (isNaN(opacity)||opacity===null) opacity = true;
            this.disabled = opacity;
            this.printDisable(opacity);
            this.jQueryContainer.addClass("PennController-disabled");
            this.jQueryElement.addClass("PennController-disabled");
            resolve();
        }
        ,
        enable: function(resolve){
            if (this.jQueryDisable instanceof jQuery){
                this.disabled = false;
                this.jQueryDisable.remove();
                this.jQueryDisable = null;
                this.jQueryContainer.addClass("PennController-disabled");
                this.jQueryElement.addClass("PennController-disabled");
                this.jQueryElement.attr("controls", true);
            }
            resolve();
        }
        ,
        // Every setting is converted into a Promise (so resolve)
        once: function(resolve){        /* $AC$ Video PElement.once() Will disable the video player after the video has played through once $AC$ */
            if (this.hasPlayed){
                this.disabled = true;
                this.printDisable();
            }
            else {  // Extend onend
                let onended = this.video.onended, t = this;
                this.video.onended = function(...rest){
                    onended.apply(this, rest);
                    t.disabled = true;
                    t.printDisable();
                };
            }
            resolve();
        }
        ,
        log: function(resolve,  ...what){        /* $AC$ Video PElement.log() Will log play and/or stop events in the results file $AC$ */
            if (what.length==1 && typeof(what[0])=="string")
                this.whatToSave.push(what);
            else if (what.length>1)
                this.whatToSave = this.whatToSave.concat(what);
            else
                this.whatToSave = ["play","end","pause","seek"];
            resolve();
        }
    };
    
    this.test = {
        // Every test is used within a Promise back-end, but it should simply return true/false
        hasPlayed: function(){        /* $AC$ Video PElement.test.hasPlayed() Checks that the video has played through at least once before $AC$ */
            return this.hasPlayed;
        }
        ,
        playing: function(){        /* $AC$ Video PElement.test.playing() Checks that the video is currently playing $AC$ */
            return this.video.currentTime&&!this.video.paused;
        }
    };

});


// YOUTUBE element
/* $AC$ PennController.newYoutube(name,url) Creates a new Youtube element with the specified URL $AC$ */
/* $AC$ PennController.getYoutube(name) Retrieves an existing Youtube element $AC$ */
window.PennController._AddElementType("Youtube", function(PennEngine) {

    const MutationObserver =
        window.MutationObserver || window.WebKitMutationObserver || window.MozMutationObserver;

    let youtubeVideos = []; // Youtube videos to load

    // Load the Youtube API (see https://developers.google.com/youtube/iframe_api_reference)
    // Will be executed when jQuery is ready
    $(document).ready(function(){
        let tag = document.createElement('script');
        tag.src = "https://www.youtube.com/iframe_api";
        let firstScriptTag = document.getElementsByTagName('script')[0];
        firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);
        window.onYouTubeIframeAPIReady = function(){
            for (let y in youtubeVideos) {
                youtubeVideos[y].call();
            }
        }
    });

    // This is executed when Ibex runs the script in data_includes (not a promise, no need to resolve)
    this.immediate = function(id, code, showControls){
        if (code === undefined && typeof(id)=="string")
            code = id;
        if (!(code && typeof(code)=="string"))
            PennEngine.debug.error("Invalid code for Youtube element "+id, code);
        if (showControls && !showControls.match(/^\W*no\W*controls?\W*$/i))
            showControls = 1;
        else
            showControls = 0;
        this.resource = PennEngine.resources.new(code, function(uri, resolve){
            let playerID = code+"-"+PennEngine.resources.list.length;// Unique ID (if copies of resource, e.g. duplicates on same page)
            this.ended = function(){};                  // Called when YT resource playback ends
            this.playing = function(){};                // Called when YT resource playback starts playing
            this.paused = function(){};                 // Called when YT resource is paused
            this.buffering = function(){};              // Called when YT resource is buffering
            let iframeLoaded = false;                   // IFRAME not loaded at first
            let iframe = $("<iframe>");                 // Create iframe element (TODO: check preloaded files, no need to recreate each time)
            iframe.attr({
                src: "https://www.youtube-nocookie.com/embed/"+code+"?enablejsapi=1&controls="+showControls,
                id: playerID,
                frameborder: 0
            }).bind("load", ()=>iframeLoaded = true)    // Signal loading
                .css({display: "none", position: "absolute"});
            $(document).ready(()=>$(document.body).append(iframe)); // Add frame to body (invisible)
            youtubeVideos.push( ()=>{                   // Create a player when the YT API is ready
                let loading = true;
                let createPlayer = () =>
                    this.player = new YT.Player(playerID, { playerVars: { 'controls': showControls },
                        events: {
                            onReady: e=>{               // Cue and start playing video when ready
                                iframe = 
                                e.target.cueVideoById(code);
                                e.target.playVideo();
                            },
                            onStateChange: event=>{ 
                                if (event.data == YT.PlayerState.ENDED && !loading)
                                    this.ended(event);
                                else if (event.data == YT.PlayerState.PLAYING) {
                                    if (loading){       // Stop video as soon as it starts playing
                                        event.target.pauseVideo();
                                        event.target.seekTo(0);
                                        loading = false;
                                        resolve(iframe);      // Now it's loaded and ready to play
                                    }
                                    else                // Do no log loading event
                                        this.playing(event);
                                }
                                else if (event.data == YT.PlayerState.PAUSED && !loading)
                                    this.paused(event);
                                else if (event.data == YT.PlayerState.BUFFERING && !loading)
                                    this.buffering(event);
                                //else if (event.data == YT.PlayerState.CUED)
                            }
                        }});
                if (!iframeLoaded)                      // If the iframe is not ready yet, wait before creating the player
                    iframe.bind("load", createPlayer);
                else
                    createPlayer();                     // If it is ready, create the player already
            });
        }, false);                                      // Do not try to add host urls
        // this.resource = PennEngine.resources.fetch(code, function(resolve){
        //     let playerID = code+"-"+PennEngine.resources.list.length;// Unique ID (if copies of resource, e.g. duplicates on same page)
        //     this.ended = function(){};                  // Called when YT resource playback ends
        //     this.playing = function(){};                // Called when YT resource playback starts playing
        //     this.paused = function(){};                 // Called when YT resource is paused
        //     this.buffering = function(){};              // Called when YT resource is buffering
        //     let iframeLoaded = false;                   // IFRAME not loaded at first
        //     let iframe = $("<iframe>");                 // Create iframe element (TODO: check preloaded files, no need to recreate each time)
        //     iframe.attr({
        //         src: "https://www.youtube-nocookie.com/embed/"+code+"?enablejsapi=1&controls="+showControls,
        //         id: playerID,
        //         frameborder: 0
        //     }).bind("load", ()=>iframeLoaded = true)    // Signal loading
        //         .css({display: "none", position: "absolute"});
        //     $(document).ready(()=>$(document.body).append(iframe)); // Add frame to body (invisible)
        //     youtubeVideos.push( ()=>{                   // Create a player when the YT API is ready
        //         let loading = true;
        //         let createPlayer = () =>
        //             this.player = new YT.Player(playerID, { playerVars: { 'controls': showControls },
        //                 events: {
        //                     onReady: e=>{               // Cue and start playing video when ready
        //                         iframe = 
        //                         e.target.cueVideoById(code);
        //                         e.target.playVideo();
        //                     },
        //                     onStateChange: event=>{ 
        //                         if (event.data == YT.PlayerState.ENDED && !loading)
        //                             this.ended(event);
        //                         else if (event.data == YT.PlayerState.PLAYING) {
        //                             if (loading){       // Stop video as soon as it starts playing
        //                                 event.target.pauseVideo();
        //                                 event.target.seekTo(0);
        //                                 loading = false;
        //                                 resolve();      // Now it's loaded and ready to play
        //                             }
        //                             else                // Do no log loading event
        //                                 this.playing(event);
        //                         }
        //                         else if (event.data == YT.PlayerState.PAUSED && !loading)
        //                             this.paused(event);
        //                         else if (event.data == YT.PlayerState.BUFFERING && !loading)
        //                             this.buffering(event);
        //                         //else if (event.data == YT.PlayerState.CUED)
        //                     }
        //                 }});
        //         if (!iframeLoaded)                      // If the iframe is not ready yet, wait before creating the player
        //             iframe.bind("load", createPlayer);
        //         else
        //             createPlayer();                     // If it is ready, create the player already
        //     });
        //     this.object = iframe;
        // }, false);                                      // Do not try to add host urls
        this.id = id;
    };

    this.uponCreation = function(resolve){
        this.iframe = this.resource.object;
        this.player = this.resource.player;
        this.log = false;
        this.hasPlayed = false;
        this.events = [];
        this.onplay = ()=>this.events.push(["Play",this.player.getCurrentTime(),Date.now(),"NULL"]);
        this.onpause = ()=>this.events.push(["Pause",this.player.getCurrentTime(),Date.now(),"NULL"]);
        this.onbuffer = ()=>this.events.push(["Buffer",this.player.getCurrentTime(),Date.now(),"NULL"]);
        this.onend = ()=>{
            this.hasPlayed = true;
            this.events.push(["End",this.player.getCurrentTime(),Date.now(),"NULL"]);
        };
        let t = this;
        let oldEnded = this.resource.ended;
        this.resource.ended = function(e){ oldEnded.apply(this,e); t.onend(); };
        let oldPlaying = this.resource.playing;
        this.resource.playing = function(e){ oldPlaying.apply(this,e); t.onplay(); };
        let oldPaused = this.resource.paused;
        this.resource.paused = function(e){ oldPaused.apply(this,e); t.onpause(); };
        let oldBuffering = this.resource.buffering;
        this.resource.buffering = function(e){ oldBuffering.apply(this,e); t.onbuffer(); };
        this.jQueryElement = $("<div>").css("display","inline-block");
        this.visual = {top: 0, left: 0, width: this.iframe.width(), height: this.iframe.height()};
        this.jQueryElement.css({width: this.visual.width, height: this.visual.height});
        this.player.seekTo(0);                  // (Re)set to the beginning
        this.disabled = false;                  // Whether the audio can be played
        this.jQueryDisable = null;              // The 'disable' element, to be printed on top
        this.printDisable = ()=>{
            if (this.jQueryDisable instanceof jQuery)
                this.jQueryDisable.remove();
            this.jQueryDisable = $("<div>").css({
                position: "absolute",
                display: "inline-block",
                "background-color": "gray",
                opacity: 0.5,
                width: this.jQueryElement.width(),
                height: this.jQueryElement.height()
            });
            this.jQueryElement.before(this.jQueryDisable);
            this.jQueryElement.addClass("PennController-"+this.type.replace(/[\s_]/g,'')+"-disabled");
        };
        resolve();
    };

    this.end = function(){
        if (this.observer && this.observer instanceof MutationObserver)
            this.observer.disconnect();
        if (this.player && this.player.getPlayerState()==YT.PlayerState.PLAYING)
            this.player.pauseVideo();
        this.iframe.css("display", "none");
        if (this.jQueryDisable)
            this.jQueryDisable.remove();// Remove disabler from DOM
        if (this.log && this.log instanceof Array){
            if (!this.events.length)
                PennEngine.controllers.running.save(this.type, this.id, "play", "NA", "Never", "The video was never played during the trial");
            else if (this.log.indexOf("all")>-1)
                for (let e in this.events)
                    PennEngine.controllers.running.save(this.type, this.id, ...this.events[e]);
            else {
                if (this.log.indexOf("play")>-1){
                    let playEvents = this.events.filter(e=>e[0]=="Play");
                    for (let line in playEvents)
                        PennEngine.controllers.running.save(this.type, this.id, ...playEvents[line]);
                }
                if (this.log.indexOf("end")>-1){
                    let endEvents = this.events.filter(e=>e[0]=="End");
                    for (let line in endEvents)
                        PennEngine.controllers.running.save(this.type, this.id, ...endEvents[line]);
                }
                if (this.log.indexOf("pause")>-1){
                    let pauseEvents = this.events.filter(e=>e[0]=="Pause");
                    for (let line in pauseEvents)
                        PennEngine.controllers.running.save(this.type, this.id, ...pauseEvents[line]);
                }
                if (this.log.indexOf("buffer")>-1){
                    let bufferEvents = this.events.filter(e=>e[0]=="Buffer");
                    for (let line in bufferEvents)
                        PennEngine.controllers.running.save(this.type, this.id, ...bufferEvents[line]);
                }
            }
        }
    };

    this.value = function(){            // Value is whether the video was played
        return this.hasPlayed;
    };

    this.actions = {
        play: function(resolve){    /* $AC$ Youtube PElement.play() Starts playing the video (visible only if print was called) $AC$ */
            this.player.playVideo();
            resolve();
        },
        pause: function(resolve){    /* $AC$ Youtube PElement.pause() Pauses the video $AC$ */
            this.player.pauseVideo();
            resolve();
        },
        print: function(resolve, ...where){    /* $AC$ Youtube PElement.print() Shows Youtube's video player $AC$ */
            let afterPrint = ()=>{
                let pos = this.jQueryElement.offset();
                this.iframe.css({position:"absolute", left: pos.left, top: pos.top, display: "inline-block"});
                this.observer = new MutationObserver(()=>{                                  // Bind mutations to iframe
                                                                                            // Element in DOM & visible
                    if (this.jQueryElement[0].offsetParent && $.contains(document.body, this.jQueryElement[0])) {
                        this.iframe.css("display", this.jQueryElement.css("display"));      // Inherit display
                        let w = this.jQueryElement.width(), h = this.jQueryElement.height();
                        if (w != this.visual.width || h != this.visual.height) {            // Update size
                            this.iframe.css({width: w, height: h});
                            this.visual.width = w;
                            this.visual.height = h;
                        }
                        let pos = this.jQueryElement.offset();
                        if (pos.left != this.visual.left || pos.top != this.visual.top) {   // Update position
                            this.iframe.css({left: pos.left, top: pos.top});
                            this.visual.left = pos.left;
                            this.visual.top = pos.top;
                        }
                        this.observer.disconnect();                                         // Update observer, if new position in DOM
                        this.observer.observe(this.jQueryElement.parent()[0], { childList : true, attributes : true, subtree : true });
                    }
                    else
                        this.iframe.css("display", "none");
                });
                this.observer.observe(this.jQueryElement.parent()[0], { childList : true, attributes : true, subtree : true });
                if (this.disabled)
                    this.printDisable();
                resolve();
            };
            PennEngine.elements.standardCommands.actions.print.apply(this, [afterPrint, ...where]);
        },
        remove: function(resolve){    /* $AC$ Youtube PElement.remove() Removes Youtube's video player $AC$ */
            this.iframe.css("display","none");
            PennEngine.elements.standardCommands.actions.remove.apply(this, [resolve]);
        },
        stop: function(resolve){    /* $AC$ Youtube PElement.stop() Stops the video and goes back to the beginning $AC$ */
            this.player.pauseVideo();
            this.player.seekTo(0);
            resolve();
        },
        wait: function(resolve, test){    /* $AC$ Youtube PElement.wait() Wait until the video reaches the end before proceeding $AC$ */
            if (test == "first" && this.hasPlayed)  // If first and has already played, resolve already
                resolve();
            else {                                  // Else, extend onend and do the checks
                let resolved = false;
                let originalEnd = this.onend;
                this.onend = function(...rest){
                    originalEnd.apply(this, rest);
                    if (resolved)
                        return;
                    if (test instanceof Object && test._runPromises && test.success){
                        let oldDisabled = this.disabled;    // Disable temporarilly
                        this.disabled = "tmp";
                        test._runPromises().then(value=>{   // If a valid test command was provided
                            if (value=="success"){
                                resolved = true;
                                resolve();                  // resolve only if test is a success
                            }
                            if (this.disabled=="tmp")       // Restore if not modified by test
                                this.disabled = oldDisabled;
                        });
                    }
                    else{                                   // If no (valid) test command was provided
                        resolved = true;
                        resolve();                          // resolve anyway
                    }
                };
            }
        }
    };
    
    this.settings = {
        disable: function(resolve){    /* $AC$ Youtube PElement.disable() Disables the Youtube video player $AC$ */
            this.printDisable();
            this.disabled = true;
            this.jQueryContainer.addClass("PennController-disabled");
            this.jQueryElement.addClass("PennController-disabled");
            resolve();
        },
        enable: function(resolve){    /* $AC$ Youtube PElement.enable() Enables the Youtube video player (again) $AC$ */
            if (this.jQueryDisable instanceof jQuery){
                this.disabled = false;
                this.jQueryDisable.remove();
                this.jQueryDisable = null;
                this.jQueryContainer.removeClass("PennController-disabled");
                this.jQueryElement.removeClass("PennController-disabled");
            }
            resolve();
        },
        once: function(resolve){    /* $AC$ Youtube PElement.once() Will disable the Youtube video player after the video has played once $AC$ */
            if (this.hasPlayed)
                this.disabled = true;
            else {
                let originalEnd = this.onend, t = this;
                this.onend = function(...rest){
                    originalEnd.apply(this, rest);
                    t.disabled = true;
                    t.printDisable();
                };
            }
            resolve();
        },
        log: function(resolve,  ...what){    /* $AC$ Youtube PElement.log() Will log play and/or stop events in the results file $AC$ */
            if (what.length)
                this.log = what;
            else
                this.log = ["play"];
            resolve();
        },
        size: function(resolve, width, height){
            let afterSize = ()=>{
                this.iframe.css({width: width, height: height});
                this.visual.width = width;
                this.visual.height = height;
                resolve();
            };
            PennEngine.elements.standardCommands.settings.size.apply(this, [afterSize, width, height]);
        }
    };
    
    this.test = {
        hasPlayed: function(){    /* $AC$ Youtube PElement.test.hasPlayed() Checks that the video has ever played through before $AC$ */
            return this.hasPlayed;
        },
        playing: function(){    /* $AC$ Youtube PElement.test.playing() Checks that the video is currently playing $AC$ */
            return this.player.getPlayerState()==1;
        }
    };

});


/* This software is licensed under a BSD license; see the LICENSE file for details. */

//
// TODO: Replace this controller with something that's not such a horrible mess!
// 

(function () {

var __Question_callback__ = null;
var __Questions_answers__ = null;

define_ibex_controller({
name: "Question",

jqueryWidget: {
    _init: function () {
        this.cssPrefix = this.options._cssPrefix;
        this.utils = this.options._utils;
        this.finishedCallback = this.options._finishedCallback;

        var questionField = "Question (NULL if none).";
        var answerField = "Answer";
        var correctField = "Whether or not answer was correct (NULL if N/A)";
        var timeField = "Time taken to answer.";

        this.question = dget(this.options, "q");
        this.answers = this.options.as;

        this.hasCorrect = dget(this.options, "hasCorrect", false);
        // hasCorrect is either false, indicating that there is no correct answer,
        // true, indicating that the first answer is correct, or an integer giving
        // the index of the correct answer, OR a string giving the correct answer.
        // Now we change it to either false or an index.
        if (this.hasCorrect === true)
            this.hasCorrect = 0;
        if (typeof(this.hasCorrect) == "string") {
            var foundIt = false;
            for (var i = 0; i < this.answers.length; ++i) {
                if (this.answers[i].toLowerCase() == this.hasCorrect.toLowerCase()) {
                    this.hasCorrect = i;
                    foundIt = true;
                    break;
                }
            }
            assert(foundIt, "Value of 'hasCorrect' option not recognized in Question");
        }
        this.showNumbers = dget(this.options, "showNumbers", true);
        this.presentAsScale = dget(this.options, "presentAsScale", false);
        this.randomOrder = dget(this.options, "randomOrder", ! (this.hasCorrect === false || this.presentAsScale));
        this.timeout = dget(this.options, "timeout", null);
        this.instructions = dget(this.options, "instructions");
        this.leftComment = dget(this.options, "leftComment");
        this.rightComment = dget(this.options, "rightComment");
        this.autoFirstChar = dget(this.options, "autoFirstChar", false);
        this.presentHorizontally = dget(this.options, "presentHorizontally", false);

        if (! (this.hasCorrect === false))
            assert(typeof(this.hasCorrect) == "number" && this.hasCorrect < this.answers.length,
                   "Bad index for correct answer in Question");

        if (this.randomOrder) {
            assert(typeof(this.answers[0]) != "object",
                  "Cannot set 'randomOrder' option to a list of keys when keys are included with the 'as' option.");
            assert(typeof(this.answers[0]) != "object" || this.answers.length == this.randomOrder.length,
                   "Length of 'randomOrder' doesn't match length of 'as'.");

            this.orderedAnswers = new Array(this.answers.length);
            for (var i = 0; i < this.answers.length; ++i)
                this.orderedAnswers[i] = this.answers[i];
            fisherYates(this.orderedAnswers);
        }
        else {
            this.orderedAnswers = this.answers;
        }

        this.setFlag = function(correct) {
            if (! correct) {
                this.utils.setValueForNextElement("failed", true);
            }
        }

        if (this.question) {
            this.qp = $(document.createElement("p"))
            .addClass(this.cssPrefix + "question-text")
            .css('text-align', conf_centerItems ? 'center' : 'left')
            .append(this.question);
        }
        this.xl = $(document.createElement(((!this.presentAsScale && !this.presentHorizontally) && this.showNumbers) ? "ol" : "ul"))
            .css('margin-left', "2em").css('padding-left', 0);
        __Question_answers__ = new Array(this.answers.length);

        if ((this.presentAsScale || this.presentHorizontally) && this.leftComment) {
            var lcd = $(document.createElement("li"))
                      .addClass(this.cssPrefix + "scale-comment-box")
                      .append(this.leftComment);
            this.xl.append(lcd);
        }
        for (var i = 0; i < this.orderedAnswers.length; ++i) {
            var li;
            li = $(document.createElement("li"));
            if (this.presentAsScale || this.presentHorizontally) {
                li.addClass(this.cssPrefix + "scale-box");
                var t = this;
                 // IE doesn't support :hover for anything other than links, so we
                 // have to use JS.
                 (function (li) {
                     li.mouseover(function () {
                         li.css('border-color', "black")
                           .css('cursor', 'pointer');
                     });
                     li.mouseout(function () {
                         li.css('border-color', "#9ea4b1")
                           .css('cursor', "default");
                     });
                 })(li);
            }
            else {
                li.addClass(this.cssPrefix + "normal-answer");
            }
            (function(i) {
                li.click(function () { __Question_callback__(i); });
            })(i);
            var ans = typeof(this.orderedAnswers[i]) == "string" ? this.orderedAnswers[i] : this.orderedAnswers[i][1];
            var t = this; // 'this' doesn't behave as a lexically scoped variable so can't be
                          // captured in the closure defined below.
            var a = $(document.createElement("span")).addClass(this.cssPrefix + "fake-link");
            __Question_answers__[i] = ans;
            __Question_callback__ = function (i) {
                var answerTime = new Date().getTime();
                var ans = __Question_answers__[i];
                var correct = "NULL";
                if (! (t.hasCorrect === false)) {
                    var correct_ans = typeof(t.answers[t.hasCorrect]) == "string" ? t.answers[t.hasCorrect] : t.answers[t.hasCorrect][1];
                    correct = (ans == correct_ans ? 1 : 0);
                    t.setFlag(correct);
                }
                t.finishedCallback([[[questionField, t.question ? csv_url_encode(t.question) : "NULL"],
                                     [answerField, csv_url_encode(ans)],
                                     [correctField, correct],
                                     [timeField, answerTime - t.creationTime]]]);
            };
            this.xl.append(li.append(a.append(ans)));
        }
        if ((this.presentAsScale || this.presentHorizontally) && this.rightComment) {
            this.xl.append($(document.createElement("li"))
                           .addClass(this.cssPrefix + 'scale-comment-box')
                           .append(this.rightComment));
        }

        if (! (this.qp === undefined))
            this.element.append(this.qp);

        // Again, using tables to center because IE sucks.
        var table = $("<table" + (conf_centerItems ? " align='center'" : "") + ">");
        var tr = $(document.createElement("tr"));
        var td = $("<td" + (conf_centerItems ? " align='center'" : "") + ">")
        if (conf_centerItems)
            td.attr('align', 'center');
        this.element.append(table.append(tr.append(td.append(this.xl))));

        if (this.instructions) {
            this.element.append($(document.createElement("p"))
                                .addClass(this.cssPrefix + "instructions-text")
                                .css('text-align', conf_centerItems ? 'center' : 'left')
                                .text(this.instructions));
        }

        if (this.timeout) {
            var t = this;
            this.utils.setTimeout(function () {
                var answerTime = new Date().getTime();
                t.setFlag(false);
                t.finishedCallback([[[questionField, t.question ? csv_url_encode(t.question) : "NULL"],
                                     [answerField, "NULL"], [correctField, "NULL"],
                                     [timeField, answerTime - t.creationTime]]]);
            }, this.timeout);
        }

        // TODO: A bit of code duplication in this function.
        var t = this;
        this.safeBind($(document), 'keydown', function(e) {
            var code = e.keyCode;
            var time = new Date().getTime();

            var answerTime = new Date().getTime();
            if ((! t.presentAsScale && !t.presentHorizontally) && t.showNumbers &&
                ((code >= 48 && code <= 57) || (code >= 96 && code <= 105))) {
                // Convert numeric keypad codes to ordinary keypad codes.
                var n = code >= 96 ? code - 96 : code - 48;
                if (n > 0 && n <= t.orderedAnswers.length) {
                    var ans = typeof(t.orderedAnswers[n-1]) == "string" ? t.orderedAnswers[n-1] : t.orderedAnswers[n-1][1];
                    var correct = "NULL";
                    if (! (t.hasCorrect === false)) {
                        var correct_ans = typeof(t.answers[t.hasCorrect]) == "string" ? t.answers[t.hasCorrect] : t.answers[t.hasCorrect][1];
                        correct = (correct_ans == ans ? 1 : 0);
                        t.setFlag(correct);
                    }
                    t.finishedCallback([[[questionField, t.question ? csv_url_encode(t.question) : "NULL"],
                                         [answerField, csv_url_encode(ans)],
                                         [correctField, correct],
                                         [timeField, answerTime - t.creationTime]]]);

                    return false;
                }
                else {
                    return true;
                }
            }
            // Letters (and numbers in the case of scales).
            else if ((code >= 65 && code <= 90) || (t.presentAsScale && ((code >= 48 && code <= 57) || (code >= 96 && code <= 105)))) {
                // Convert numeric keypad codes to ordinary keypad codes.
                code = (code >= 96 && code <= 105) ? code - 48 : code;
                var ans = null;

                if (typeof(t.randomOrder) != "object") {
                    for (var i = 0; i < t.answers.length; ++i) {
                        if (t.autoFirstChar && typeof(t.answers[i]) == "string" && code == t.answers[i].toUpperCase().charCodeAt(0)) {
                            ans = t.answers[i];
                            break;
                        }
                        else if ($.isArray(t.answers[i]) && code == t.answers[i][0].toUpperCase().charCodeAt(0)) {
                            ans = t.answers[i][1];
                            break;
                        }
                    }
                }
                else {
                    for (var i = 0; i < t.randomOrder.length; ++i) {
                        if (code == t.randomOrder[i].toUpperCase().charCodeAt(0)) {
                            ans = t.orderedAnswers[i];
                            break;
                        }
                    }
                }

                if (ans) {
                    var correct = "NULL";
                    if (! (t.hasCorrect === false)) {
                        var correct_ans = typeof(t.answers[t.hasCorrect]) == "string" ? t.answers[t.hasCorrect] : t.answers[t.hasCorrect][1];
                        correct = (correct_ans == ans ? 1 : 0);
                        t.setFlag(correct);
                    }
                    t.finishedCallback([[[questionField, t.question ? csv_url_encode(t.question) : "NULL"],
                                         [answerField, csv_url_encode(ans)],
                                         [correctField, correct],
                                         [timeField, answerTime - t.creationTime]]]);
                    
                    return false;
                }
            }

            return true;
        });

        // Store the time when this was first displayed.
        this.creationTime = new Date().getTime();
    }
},

properties: {
    obligatory: ["as"],
    htmlDescription: function(opts) {
        return $(document.createElement("div")).text(opts.q || "");
    }
}
});

})();




(function () {

function norm256(x) {
    if (x < 0)
        return 0;
    else if (x > 255)
        return 255;
    return x;
}

function rgbToS(col) {
    function pad0(s) {
        if (s.length == 1)
            s = '0' + s;
        return s;
    }

    var cols = '#';
    cols += pad0(col[0].toString(16));
    cols += pad0(col[1].toString(16));
    cols += pad0(col[2].toString(16));

    return cols;
}

function parseColor(col) {
    var m;
    if ($.isArray(col)) {
        return col;
    }
    else if (typeof(col) == 'string') {
        if (col.length > 0 && col[0] == '#') {
            var r,g,b;
            if (col.length == 7) {
                r = parseInt(col.substr(1,2), 16);
                g = parseInt(col.substr(3,2), 16);
                b = parseInt(col.substr(5,2), 16);
                if (isNaN(r) || isNaN(g) || isNaN(b))
                    assert(false, "Could not parse color '" + col + "'");
                return [r,g,b];
            }
            else if (col.length == 4) {
                r = parseInt(col.substr(1,1), 16);
                g = parseInt(col.substr(1,1), 16);
                b = parseInt(col.substr(1,1), 16)
                if (isNaN(r) || isNaN(g) || isNaN(b))
                    assert(false, "Could not parse color '" + col + "'");
                return [r,g,b];
            }
            else {
                assert(false, "Could not parse color '" + col + "'");
            }
        }
        else if (m = col.match(/\s*rgb\(\s*([\d.]+)\s*,\s*([\d.]+)\s*,\s*([\d.]+)\)\s*/)) {
            var r = parseFloat(m[1]);
            var g = parseFloat(m[2]);
            var b = parseFloat(m[3]);
            if (isNaN(r) || isNaN(g) || isNaN(b))
                assert(false, "Could not parse color '" + col + "'");
            r = parseInt(Math.round(r * 256.0));
            g = parseInt(Math.round(g * 256.0));
            b = parseInt(Math.round(b * 256.0));
            r = norm256(r);
            g = norm256(g);
            b = norm256(b);
            return [r,g,b];
        }
        else {
            // Support standard HTML color names.
            var map = {
                red: [255,0,0],
                green: [0,255,0],
                blue: [0,0,255],
                aqua: [0,255,255],
                black: [0,0,0],
                fuchsia: [255,0,255],
                gray: [128,128,128],
                lime: [0,255,0],
                maroon: [128,0,0],
                navy: [0,0,128],
                olive: [128,128,0],
                orange: [256,165,0],
                purple: [128,0,128],
                silver: [192,192,192],
                teal: [0, 128,128],
                white: [255,255,255],
                yellow: [255,255,0]
            };
            var u = col.toLowerCase();
            if (map[u])
                return map[u];
            assert(false, "Could not parse color '" + col + "'");
        }
    }
    else {
        assert(false, "Could not parse color '" + col + "'");
    }
}

define_ibex_controller({
name: "Scale",

jqueryWidget: {
    _init: function () {
        var self = this;

        this.utils = this.options._utils;

        this.cssPrefix = this.options._cssPrefix;
        this.finishedCallback = this.options._finishedCallback;

        this.html = this.options.html;
        this.decimalPlaces = (this.options.decimalPlaces == null ? 2 : this.options.decimalPlaces);
        this.startColor = this.options.startColor ? parseColor(this.options.startColor) : parseColor("#5947FD");
        this.endColor = this.options.endColor ? parseColor(this.options.endColor) : parseColor("#59BAFD");

        this.startValue = this.options.startValue;
        assert(typeof(this.startValue) == "number", "'startValue' option must be a number");
        this.endValue = this.options.endValue;
        assert(typeof(this.endValue) == "number", "'endValue' option must be a number");
        this.buttonMessage = this.options.buttonMessage || "Continue";

        this.$html = htmlCodeToDOM(this.html);
        this.element.append($("<div>").addClass(this.cssPrefix + 'html').append(this.$html));

        this.currentMousePos = { x: 0, y: 0};

        var $bar = $("<div>").addClass(this.cssPrefix + 'bar');
        var $handle = $("<div>").addClass(this.cssPrefix + 'handle');
        var $handleLabel = $("<div>").addClass(this.cssPrefix + 'handle-label');
        var $leftLabel = $("<div>").addClass(this.cssPrefix + 'scale-label');
        var $rightLabel = $("<div>").addClass(this.cssPrefix + 'scale-label');
        this.$bar = $bar;
        this.$handle = $handle;
        this.$handleLabel = $handleLabel;
        this.$leftLabel = $leftLabel;
        this.$rightLabel = $rightLabel;

        this.scaleWidth = this.options.scaleWidth || 300;
        this.scaleHeight = this.options.scaleHeight || 20;
        this.handleWidth = this.options.handleWidth || 30;
        this.handleHeight = this.options.handleHeight || 30;
        this.scaleWidth = parseInt(this.scaleWidth);
        this.scaleHeight = parseInt(this.scaleHeight);
        this.handleWidth = parseInt(this.handleWidth);
        this.handleHeight = parseInt(this.handleHeight);
        $bar.css('width', this.scaleWidth + 'px');
        $bar.css('height', this.scaleHeight + 'px');
        $handle.css({ width: this.handleWidth + 'px',
                      height: this.handleHeight + 'px' });

        $bar.append($handle);
        if (this.options.scaleLabels) {
            $bar.append($handleLabel);
            $bar.append($leftLabel);
            $bar.append($rightLabel);

            this.$leftLabel.text(this.startValue.toFixed(this.decimalPlaces));
            this.$rightLabel.text(this.endValue.toFixed(this.decimalPlaces));
        }
        this.element.append($bar);

        this.handleLeft = parseInt(this.scaleWidth / 2);
        this.fraction = 0.5;
        t();
        function t() {
            self.setHandlePos();
            self.utils.setTimeout(t, 100);
        }
        $handle.css('background', rgbToS(this.getHandleColor()));

        this.setLinearGradient($bar, this.startColor, this.endColor);

        this.setupDragHandler();
        self.safeBind($bar, 'click', function (e) {
            e.preventDefault();
            e.stopPropagation();
            self.handleBarClick(e);
        });

        this.$button = $("<div>").addClass(this.cssPrefix + 'button');
        this.$button.text(this.buttonMessage);
        this.element.append(this.$button);
        self.safeBind(this.$button, 'click', function (e) {
            e.preventDefault();
            e.stopPropagation();
            self.handleButtonClick(e);
        });

        this.safeBind($(window), 'resize', function (e) {
            self.setHandlePos();
        });
    },

    handleButtonClick: function () {
        var val = (this.fraction * (this.endValue - this.startValue)) + this.startValue;
        //console.log("VAL", val);
        this.finishedCallback([[
            ["html", csv_url_encode(this.$html.innerHTML)],
            ["startValue", this.startValue.toFixed(this.decimalPlaces)],
            ["endValue", this.endValue.toFixed(this.decimalPlaces)],
            ["value", val.toFixed(this.decimalPlaces)]
        ]]);
    },

    handleBarClick: function (e) {
        var self = this;

        // Calculate handle screen position.
        var o = self.$handle.offset();
        var x = o.left;
        var y = o.top;
        x += $(window).scrollLeft();
        y += $(window).scrollTop();

        var clickedBar = false;
        if (e.pageX > x - 4 && e.pageX < x + self.handleWidth + 4) {
            if (e.pageY > y - 4 && e.pageY < y + self.handleHeight + 4)
                clickedBar = true;
        }

        if (! clickedBar) {
            // Move the handle to the position on the bar where user clicked.
            var barLeft = self.$bar.offset().left + $(window).scrollLeft();
            self.handleLeft = e.pageX - barLeft;
            if (self.handleLeft < 0)
                self.handleLeft = 0;
            else if (self.handleLeft > self.scaleWidth)
                self.handleLeft = self.scaleWidth;
            self.setFraction(self.handleLeft);
            self.setHandlePos();
        }
    },

    getBarO: function () {
        var barO = this.$bar.offset();
        var barLeft = barO.left;
        var barTop = barO.top;
        //barLeft += $(window).scrollLeft();
        //barTop += $(window).scrollTop();
        return { top: barTop, left: barLeft };
    },

    setFraction: function (x) {
        this.fraction = (x / this.scaleWidth);
    },

    setHandlePos: function () {
        var x = this.fraction * this.scaleWidth;

        var barO = this.getBarO();
        var barLeft = barO.left;
        var barTop = barO.top;
        //barLeft += $(window).scrollLeft();
        //barTop += $(window).scrollTop();
        var hleft = (barLeft + parseInt(x) - parseInt(Math.round(this.handleWidth/2)));
        var htop = (barTop - parseInt(Math.round((this.handleHeight - this.scaleHeight)/2.0)));
        this.$handle.css('left', hleft + 'px');
        this.$handle.css('top', htop + 'px');
        this.$handleLabel.text(this.fraction.toFixed(this.decimalPlaces));
        this.$handleLabel.css('left', parseInt(hleft + this.handleWidth/2 - this.$handleLabel.width()/2) + 'px');
        this.$handleLabel.css('top', parseInt(htop - this.handleHeight) + 'px');
        // Set color for handle.
        var col = this.getHandleColor();
        this.$handle.css('background', rgbToS(col));

        if (this.options.scaleLabels) {
            this.$leftLabel.css('left', parseInt(barLeft - this.$leftLabel.width()/2) + 'px');
            this.$leftLabel.css('top', (barTop + this.handleHeight) + 'px');
            this.$rightLabel.css('left', parseInt(barLeft + this.scaleWidth - this.$rightLabel.width()/2) + 'px');
            this.$rightLabel.css('top', (barTop + this.handleHeight) + 'px');
        }
    },

    getHandleColor: function () {
        var self = this;
        var frac = self.handleLeft / self.scaleWidth;
        var rd = parseInt(Math.round(frac * (self.endColor[0] - self.startColor[0])));
        var gd = parseInt(Math.round(frac * (self.endColor[1] - self.startColor[1])));
        var bd = parseInt(Math.round(frac * (self.endColor[2] - self.startColor[2])));
        var r = self.startColor[0] + rd;
        var g = self.startColor[1] + gd;
        var b = self.startColor[2] + bd;
        r = norm256(r);
        g = norm256(g);
        b = norm256(b);
        return [r,g,b];
    },

    setupDragHandler: function () {
        var self = this;

        var mouseIsDown = false;
        self.currentMousePos = { x: 0, y: 0 };
        var refMousePos = { x: 0, y: 0};
        var alreadyMoved = 0;
        self.safeBind($(document), 'mousemove', function (e) {
            self.currentMousePos.x = e.pageX;
            self.currentMousePos.y = e.pageY;

            if (mouseIsDown) {
                var offset = self.currentMousePos.x - refMousePos.x;
                self.handleLeft += offset - alreadyMoved;
                alreadyMoved = offset;
                if (self.handleLeft < 0)
                    self.handleLeft = 0;
                else if (self.handleLeft >= self.scaleWidth)
                    self.handleLeft = self.scaleWidth;
                self.setFraction(self.handleLeft);
                self.setHandlePos();
            }
        });

        self.safeBind(self.$handle, 'mousedown', function (e) {
            e.preventDefault();
            e.stopPropagation();

            if (! mouseIsDown) {
                mouseIsDown = true;
                refMousePos.x = self.currentMousePos.x;
                refMousePos.y = self.currentMousePos.y;
                alreadyMoved = 0;
            }
        });
        self.safeBind($(document), 'mouseup', function () {
            mouseIsDown = false;
        });
    },

    setLinearGradient: function ($elem, startColor, endColor) {
        var scol = rgbToS(startColor);
        var ecol = rgbToS(endColor);

        $elem.css('filter', "progid:DXImageTransform.Microsoft.Gradient(startColorstr='" + scol + "', endColorstr='" + ecol + "', GradientType=1)");
        $elem.css('background-image', '-ms-linear-gradient(left,' + scol + ' 0%, ' + ecol + ' 100%)');
        $elem.css('background-image', '-webkit-gradient(linear, left rop, right top, color-stop(0, ' + scol + '), color-stop(1,' + ecol + '))');
        $elem.css('background-image', '-webkit-linear-gradient(left, ' + scol + ' 0%,' + ecol + ' 100%)');
        $elem.css('background-image', '-o-linear-gradient(left, ' + scol + ',' + ecol + ')');
        $elem.css('background-image', '-moz-linear-gradient(left, ' + scol + ',' + ecol + ')');
        $elem.css('background-image', 'linear-gradient(to right' + scol + ',' + ecol + ')');
    }
},

properties: {
    obligatory: ["html", "startValue", "endValue"],
    htmlDescription: function(opts) {
        return $(document.createElement("div")).text(opts.s || "");
    }
}
});

})();


/* This software is licensed under a BSD license; see the LICENSE file for details. */

define_ibex_controller({
name: "Separator",

jqueryWidget: {
    _init: function () {
        this.cssPrefix = this.options._cssPrefix;
        this.utils = this.options._utils;
        this.finishedCallback = this.options._finishedCallback;

        this.ignoreFailure = dget(this.options, "ignoreFailure", false);
        this.style = this.ignoreFailure ? "normal" : (this.utils.getValueFromPreviousElement("failed") ? "error" : "normal");
        var x = this.utils.getValueFromPreviousElement("style");
        if (x) this.style = x;
        assert(this.style == "normal" || this.style == "error", "'style' property of Separator must either be 'normal' or 'error'");

        this.transfer = dget(this.options, "transfer", "keypress");
        assert(this.transfer == "keypress" || typeof(this.transfer) == "number",
               "Value of 'transfer' option of Separator must either be the string 'keypress' or a number");

        var normal_message = dget(this.options, "normalMessage", "Press any key to continue.");
        var x = this.utils.getValueFromPreviousElement("normalMessage");
        if (x) normal_message = x;

        var error_message = dget(this.options, "errorMessage", "Wrong. Press any key to continue.");
        var x = this.utils.getValueFromPreviousElement("errorMessage");
        if (x) error_message = x;

        var p = $(document.createElement("p"));
        this.element.append(p);
        if (this.style == "error") {
            this.element.addClass(this.cssPrefix + "next-item-failure-message");
            p.text(error_message);
        }
        else {
            this.element.addClass(this.cssPrefix + "next-item-message");
            p.text(normal_message);
        }

        if (this.transfer == "keypress") {
	    var t = this;
	    this.safeBind($(document), 'keydown', function () {
		t.finishedCallback(null);
		return false;
	    });
        }
        else {
            var t = this;
            this.utils.setTimeout(function () {
                t.finishedCallback(null);
            }, this.transfer);
        }
    }
},

properties: {
    countsForProgressBar: false,
    htmlDescription: function (opts) {
        return $(document.createElement("div")).text(opts.normalMessage)[0];
    }
}
});

/* This software is licensed under a BSD license; see the LICENSE file for details. */

define_ibex_controller({
name: "VBox",

jqueryWidget: {
    _init: function () {
        this._finishedCalledAlready = false;

        this.cssPrefix = this.options.options._cssPrefix;
        this.utils = this.options.options._utils;
        this.finishedCallback = this.options.options._finishedCallback;
        this.controllerDefaults = this.options.options._controllerDefaults;
        this.utilsClass = this.options.options._utilsClass;
        this.callbackWhenChildFinishes = this.options.options._vboxCallbackWhenChildFinishes;

        this.children = this.options.children;
        this.triggers = this.options.triggers;
        this.padding = dget(this.options, "padding", "2em");

        assert_is_arraylike(this.children, "The 'children' option of VBox must be an array");
        assert(this.children.length % 2 == 0, "The 'children' array for VBox must contain an even number of elements");

        assert_is_arraylike(this.triggers, "The 'triggers' option of VBox must be an array");
        assert(this.triggers.length > 0, "The 'triggers' array for VBox must be an array of length > 0");

        var t = this;
        $.each(this.triggers, function (_, tr) {
            assert(typeof(tr) == "number", "The 'triggers' array for VBox must be an array of integers");
            assert(tr >= 0 && tr < t.children.length / 2,
                   "Numbers in the 'triggers' array must be indices into the 'children' array starting from 0");
        });

        this.indicesAndResultsOfThingsThatHaveFinished = [];
//        this.childInstances = [];
        this.childUtils = [];

        this.childElements = new Array(this.children.length / 2);
        for (var i = 0; i < this.children.length; i += 2) {
            var controllerClass = this.children[i];
            var addImmediately = true;
            var removePrevious = false;
            if (controllerClass.charAt(0) == "*" || controllerClass.charAt(0) == "!") {
                addImmediately = false;
                if (controllerClass.charAt(0) == "!")
                    removePrevious = true;
                controllerClass = controllerClass.substr(1);
            }
            var childOptions = this.children[i + 1];
            childOptions = merge_dicts(this.controllerDefaults[controllerClass], childOptions);

            var u = new this.utilsClass(this.utils.getValuesFromPreviousElement());
            this.childUtils.push(u);
            (function(i) {
                u.setResults = function(results) {
                    t.indicesAndResultsOfThingsThatHaveFinished.push([i, results]);
                };
            })(i);

            function makeDiv() {
                var d = $(document.createElement("p")).css('clear', 'both');

                // Call a manipulator if one was supplied.
                if (! (t.options.manipulators === undefined)) {
                    for (var j = 0; j < t.options.manipulators.length; ++j) {
                        if (t.options.manipulators[j][0] == (i / 2))
                            d = t.options.manipulators[j][1](d);
                    }
                }

                // Add padding if requested.
                var dd = null;
                if (t.padding && i > 0) {
                    dd = $(document.createElement("div"))
                        .css('margin-top', t.padding)
                        .css('margin-bottom', 0)
                        .append(d);
                }

                // Wrap in a table if we're centering things.
                var ddd = null;
                if (conf_centerItems) {
                    ddd = $("<table align='center'>");
                    var tr = $(document.createElement("tr"));
                    var td = $(document.createElement("td"));
                    ddd.append(tr.append(td.append(dd ? dd : d)));
                }
                
                // Add the actual child.
                var ac = ddd ? ddd : (dd ? dd : d);

                var l = t.childUtils.length - 1;
                // Get around JavaScript's silly closure capture behavior (deriving
                // from weird variable scoping rules).
                // See http://calculist.blogspot.com/2005/12/gotcha-gotcha.html
                (function(l) {
                    childOptions._finishedCallback = function (r) { t.myFinishedCallback(l, r); };
                    childOptions._cssPrefix = ibex_controller_name_to_css_prefix(controllerClass);
                    childOptions._utils = u;
                    addSafeBindMethodPair(controllerClass);
                    d[controllerClass](childOptions);
                })(l);

                return ac;
            }

            if (addImmediately) {
                var ac = makeDiv()
                this.childElements[i/2] = { child: ac, addImmediately: true, removePrevious: false };
                this.element.append(ac);
            }
            else {
                this.childElements[i/2] = { makeDiv: makeDiv, addImmediately: false, removePrevious: removePrevious };
            }
        }
    },

    myFinishedCallback: function(index, results) {
        if (this._finishedCalledAlready)
            return;

        this.childUtils[index].gc();
        this.indicesAndResultsOfThingsThatHaveFinished.push([index, results]);

        var satisfied = true;
        for (var i = 0; i < this.triggers.length; ++i) {
            var foundIt = false;
            for (var j = 0; j < this.indicesAndResultsOfThingsThatHaveFinished.length; ++j) {
                if (this.indicesAndResultsOfThingsThatHaveFinished[j][0] == this.triggers[i]) {
                    foundIt = true;
                    break;
                }
            }
            if (! foundIt) {
                satisfied = false;
                break;
            }
        }

        if (satisfied) {
            // Merge values for next element.
            var merged = merge_list_of_dicts($.map(this.childUtils,
                                             function (x) { return x.valuesForNextElement; }));
            this.utils.valuesForNextElement = merged;

            this._finishedCalledAlready = true;
            this.finishedCallback(this.concatResults(this.indicesAndResultsOfThingsThatHaveFinished));
        }

        if (this.callbackWhenChildFinishes)
            this.callbackWhenChildFinishes(index, this.childElements[index].child, results);

        // Add next child if it wasn't added at the beginning.
        if (index + 1 < this.childElements.length) {
            var ce = this.childElements[index+1];
            if (! ce.addImmediately) {
                var ac = ce.makeDiv();
                ce.child = ac;
                ce.child.insertAfter(this.childElements[index].child);
                if (ce.removePrevious)
                    this.childElements[index].child.remove();
            }
        }
    },

    concatResults: function(iar) {
        iar = iar.sort(function(x, y) { return x[0] - y[0]; });
        var res = [];
        for (var i = 0; i < iar.length; ++i) {
            if (iar[i][1]) {
                for (var j = 0; j < iar[i][1].length; ++j) {
                    var line = [];
                    for (var k = 0; k < iar[i][1][j].length; ++k)
                        line.push(iar[i][1][j][k]);
                    res.push(line);
                }
            }
        }
        return res;
    }
},

properties: { obligatory: ["children", "triggers"] }

});


